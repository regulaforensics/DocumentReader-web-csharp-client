// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Regula.DocumentReader.WebClient.Client;
using Regula.DocumentReader.WebClient.Model;
using System.Diagnostics.CodeAnalysis;

namespace Regula.DocumentReader.WebClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITransactionApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TransactionApiEvents Events { get; }

        /// <summary>
        /// Delete Reprocess transactions by tag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">Tag id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TagTagIdDeleteApiResponse"/>&gt;</returns>
        Task<IApiV2TagTagIdDeleteApiResponse> ApiV2TagTagIdDeleteAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Reprocess transactions by tag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="tagId">Tag id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TagTagIdDeleteApiResponse"/>?&gt;</returns>
        Task<IApiV2TagTagIdDeleteApiResponse?> ApiV2TagTagIdDeleteOrDefaultAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get transactions by tag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">Tag id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TagTagIdTransactionsGetApiResponse"/>&gt;</returns>
        Task<IApiV2TagTagIdTransactionsGetApiResponse> ApiV2TagTagIdTransactionsGetAsync(string tagId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get transactions by tag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="tagId">Tag id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TagTagIdTransactionsGetApiResponse"/>?&gt;</returns>
        Task<IApiV2TagTagIdTransactionsGetApiResponse?> ApiV2TagTagIdTransactionsGetOrDefaultAsync(string tagId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Reprocess transaction file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="name">File name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdFileGetApiResponse"/>&gt;</returns>
        Task<IApiV2TransactionTransactionIdFileGetApiResponse> ApiV2TransactionTransactionIdFileGetAsync(Guid transactionId, string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Reprocess transaction file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="name">File name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdFileGetApiResponse"/>?&gt;</returns>
        Task<IApiV2TransactionTransactionIdFileGetApiResponse?> ApiV2TransactionTransactionIdFileGetOrDefaultAsync(Guid transactionId, string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Reprocess transaction data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdGetApiResponse"/>&gt;</returns>
        Task<IApiV2TransactionTransactionIdGetApiResponse> ApiV2TransactionTransactionIdGetAsync(Guid transactionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Reprocess transaction data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdGetApiResponse"/>?&gt;</returns>
        Task<IApiV2TransactionTransactionIdGetApiResponse?> ApiV2TransactionTransactionIdGetOrDefaultAsync(Guid transactionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reprocess
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="transactionProcessRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdProcessPostApiResponse"/>&gt;</returns>
        Task<IApiV2TransactionTransactionIdProcessPostApiResponse> ApiV2TransactionTransactionIdProcessPostAsync(Guid transactionId, TransactionProcessRequest transactionProcessRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reprocess
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="transactionProcessRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdProcessPostApiResponse"/>?&gt;</returns>
        Task<IApiV2TransactionTransactionIdProcessPostApiResponse?> ApiV2TransactionTransactionIdProcessPostOrDefaultAsync(Guid transactionId, TransactionProcessRequest transactionProcessRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Reprocess transaction result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="withImages">With base64 images or url (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdResultsGetApiResponse"/>&gt;</returns>
        Task<IApiV2TransactionTransactionIdResultsGetApiResponse> ApiV2TransactionTransactionIdResultsGetAsync(Guid transactionId, Option<bool> withImages = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Reprocess transaction result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="withImages">With base64 images or url (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdResultsGetApiResponse"/>?&gt;</returns>
        Task<IApiV2TransactionTransactionIdResultsGetApiResponse?> ApiV2TransactionTransactionIdResultsGetOrDefaultAsync(Guid transactionId, Option<bool> withImages = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IApiV2TagTagIdDeleteApiResponse"/>
    /// </summary>
    public interface IApiV2TagTagIdDeleteApiResponse : Regula.DocumentReader.WebClient.Client.IApiResponse, INoContent<Object?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IApiV2TagTagIdTransactionsGetApiResponse"/>
    /// </summary>
    public interface IApiV2TagTagIdTransactionsGetApiResponse : Regula.DocumentReader.WebClient.Client.IApiResponse, IOk<Regula.DocumentReader.WebClient.Model.ListTransactionsByTagResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IApiV2TransactionTransactionIdFileGetApiResponse"/>
    /// </summary>
    public interface IApiV2TransactionTransactionIdFileGetApiResponse : Regula.DocumentReader.WebClient.Client.IApiResponse, IOk<System.IO.Stream?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IApiV2TransactionTransactionIdGetApiResponse"/>
    /// </summary>
    public interface IApiV2TransactionTransactionIdGetApiResponse : Regula.DocumentReader.WebClient.Client.IApiResponse, IOk<Regula.DocumentReader.WebClient.Model.TransactionProcessGetResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IApiV2TransactionTransactionIdProcessPostApiResponse"/>
    /// </summary>
    public interface IApiV2TransactionTransactionIdProcessPostApiResponse : Regula.DocumentReader.WebClient.Client.IApiResponse, IOk<Regula.DocumentReader.WebClient.Model.TransactionProcessResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IApiV2TransactionTransactionIdResultsGetApiResponse"/>
    /// </summary>
    public interface IApiV2TransactionTransactionIdResultsGetApiResponse : Regula.DocumentReader.WebClient.Client.IApiResponse, IOk<Regula.DocumentReader.WebClient.Model.ProcessResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TransactionApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiV2TagTagIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiV2TagTagIdDelete;

        internal void ExecuteOnApiV2TagTagIdDelete(TransactionApi.ApiV2TagTagIdDeleteApiResponse apiResponse)
        {
            OnApiV2TagTagIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiV2TagTagIdDelete(Exception exception)
        {
            OnErrorApiV2TagTagIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiV2TagTagIdTransactionsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiV2TagTagIdTransactionsGet;

        internal void ExecuteOnApiV2TagTagIdTransactionsGet(TransactionApi.ApiV2TagTagIdTransactionsGetApiResponse apiResponse)
        {
            OnApiV2TagTagIdTransactionsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiV2TagTagIdTransactionsGet(Exception exception)
        {
            OnErrorApiV2TagTagIdTransactionsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiV2TransactionTransactionIdFileGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiV2TransactionTransactionIdFileGet;

        internal void ExecuteOnApiV2TransactionTransactionIdFileGet(TransactionApi.ApiV2TransactionTransactionIdFileGetApiResponse apiResponse)
        {
            OnApiV2TransactionTransactionIdFileGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiV2TransactionTransactionIdFileGet(Exception exception)
        {
            OnErrorApiV2TransactionTransactionIdFileGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiV2TransactionTransactionIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiV2TransactionTransactionIdGet;

        internal void ExecuteOnApiV2TransactionTransactionIdGet(TransactionApi.ApiV2TransactionTransactionIdGetApiResponse apiResponse)
        {
            OnApiV2TransactionTransactionIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiV2TransactionTransactionIdGet(Exception exception)
        {
            OnErrorApiV2TransactionTransactionIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiV2TransactionTransactionIdProcessPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiV2TransactionTransactionIdProcessPost;

        internal void ExecuteOnApiV2TransactionTransactionIdProcessPost(TransactionApi.ApiV2TransactionTransactionIdProcessPostApiResponse apiResponse)
        {
            OnApiV2TransactionTransactionIdProcessPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiV2TransactionTransactionIdProcessPost(Exception exception)
        {
            OnErrorApiV2TransactionTransactionIdProcessPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiV2TransactionTransactionIdResultsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiV2TransactionTransactionIdResultsGet;

        internal void ExecuteOnApiV2TransactionTransactionIdResultsGet(TransactionApi.ApiV2TransactionTransactionIdResultsGetApiResponse apiResponse)
        {
            OnApiV2TransactionTransactionIdResultsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiV2TransactionTransactionIdResultsGet(Exception exception)
        {
            OnErrorApiV2TransactionTransactionIdResultsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TransactionApi : ITransactionApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TransactionApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TransactionApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionApi(ILogger<TransactionApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TransactionApiEvents transactionApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TransactionApi>();
            HttpClient = httpClient;
            Events = transactionApiEvents;
        }

        partial void FormatApiV2TagTagIdDelete(ref Guid tagId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tagId"></param>
        private void AfterApiV2TagTagIdDeleteDefaultImplementation(IApiV2TagTagIdDeleteApiResponse apiResponseLocalVar, Guid tagId)
        {
            bool suppressDefaultLog = false;
            AfterApiV2TagTagIdDelete(ref suppressDefaultLog, apiResponseLocalVar, tagId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tagId"></param>
        partial void AfterApiV2TagTagIdDelete(ref bool suppressDefaultLog, IApiV2TagTagIdDeleteApiResponse apiResponseLocalVar, Guid tagId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tagId"></param>
        private void OnErrorApiV2TagTagIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid tagId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiV2TagTagIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, tagId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tagId"></param>
        partial void OnErrorApiV2TagTagIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid tagId);

        /// <summary>
        /// Delete Reprocess transactions by tag 
        /// </summary>
        /// <param name="tagId">Tag id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TagTagIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IApiV2TagTagIdDeleteApiResponse?> ApiV2TagTagIdDeleteOrDefaultAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiV2TagTagIdDeleteAsync(tagId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Reprocess transactions by tag 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">Tag id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TagTagIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IApiV2TagTagIdDeleteApiResponse> ApiV2TagTagIdDeleteAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatApiV2TagTagIdDelete(ref tagId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/api/v2/tag/{tagId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtagId%7D", Uri.EscapeDataString(tagId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiV2TagTagIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiV2TagTagIdDeleteApiResponse>();

                        ApiV2TagTagIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v2/tag/{tagId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiV2TagTagIdDeleteDefaultImplementation(apiResponseLocalVar, tagId);

                        Events.ExecuteOnApiV2TagTagIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiV2TagTagIdDeleteDefaultImplementation(e, "/api/v2/tag/{tagId}", uriBuilderLocalVar.Path, tagId);
                Events.ExecuteOnErrorApiV2TagTagIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiV2TagTagIdDeleteApiResponse"/>
        /// </summary>
        public partial class ApiV2TagTagIdDeleteApiResponse : Regula.DocumentReader.WebClient.Client.ApiResponse, IApiV2TagTagIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiV2TagTagIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiV2TagTagIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiV2TagTagIdDeleteApiResponse(ILogger<ApiV2TagTagIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public Object? NoContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNoContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNoContent([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = NoContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)204);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiV2TagTagIdTransactionsGet(ref string tagId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tagId"></param>
        /// <returns></returns>
        private void ValidateApiV2TagTagIdTransactionsGet(string tagId)
        {
            if (tagId == null)
                throw new ArgumentNullException(nameof(tagId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tagId"></param>
        private void AfterApiV2TagTagIdTransactionsGetDefaultImplementation(IApiV2TagTagIdTransactionsGetApiResponse apiResponseLocalVar, string tagId)
        {
            bool suppressDefaultLog = false;
            AfterApiV2TagTagIdTransactionsGet(ref suppressDefaultLog, apiResponseLocalVar, tagId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tagId"></param>
        partial void AfterApiV2TagTagIdTransactionsGet(ref bool suppressDefaultLog, IApiV2TagTagIdTransactionsGetApiResponse apiResponseLocalVar, string tagId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tagId"></param>
        private void OnErrorApiV2TagTagIdTransactionsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string tagId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiV2TagTagIdTransactionsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, tagId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tagId"></param>
        partial void OnErrorApiV2TagTagIdTransactionsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string tagId);

        /// <summary>
        /// Get transactions by tag 
        /// </summary>
        /// <param name="tagId">Tag id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TagTagIdTransactionsGetApiResponse"/>&gt;</returns>
        public async Task<IApiV2TagTagIdTransactionsGetApiResponse?> ApiV2TagTagIdTransactionsGetOrDefaultAsync(string tagId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiV2TagTagIdTransactionsGetAsync(tagId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get transactions by tag 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">Tag id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TagTagIdTransactionsGetApiResponse"/>&gt;</returns>
        public async Task<IApiV2TagTagIdTransactionsGetApiResponse> ApiV2TagTagIdTransactionsGetAsync(string tagId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiV2TagTagIdTransactionsGet(tagId);

                FormatApiV2TagTagIdTransactionsGet(ref tagId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/api/v2/tag/{tagId}/transactions";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtagId%7D", Uri.EscapeDataString(tagId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiV2TagTagIdTransactionsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiV2TagTagIdTransactionsGetApiResponse>();

                        ApiV2TagTagIdTransactionsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v2/tag/{tagId}/transactions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiV2TagTagIdTransactionsGetDefaultImplementation(apiResponseLocalVar, tagId);

                        Events.ExecuteOnApiV2TagTagIdTransactionsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiV2TagTagIdTransactionsGetDefaultImplementation(e, "/api/v2/tag/{tagId}/transactions", uriBuilderLocalVar.Path, tagId);
                Events.ExecuteOnErrorApiV2TagTagIdTransactionsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiV2TagTagIdTransactionsGetApiResponse"/>
        /// </summary>
        public partial class ApiV2TagTagIdTransactionsGetApiResponse : Regula.DocumentReader.WebClient.Client.ApiResponse, IApiV2TagTagIdTransactionsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiV2TagTagIdTransactionsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiV2TagTagIdTransactionsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiV2TagTagIdTransactionsGetApiResponse(ILogger<ApiV2TagTagIdTransactionsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Regula.DocumentReader.WebClient.Model.ListTransactionsByTagResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Regula.DocumentReader.WebClient.Model.ListTransactionsByTagResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Regula.DocumentReader.WebClient.Model.ListTransactionsByTagResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiV2TransactionTransactionIdFileGet(ref Guid transactionId, ref string name);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        private void ValidateApiV2TransactionTransactionIdFileGet(string name)
        {
            if (name == null)
                throw new ArgumentNullException(nameof(name));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transactionId"></param>
        /// <param name="name"></param>
        private void AfterApiV2TransactionTransactionIdFileGetDefaultImplementation(IApiV2TransactionTransactionIdFileGetApiResponse apiResponseLocalVar, Guid transactionId, string name)
        {
            bool suppressDefaultLog = false;
            AfterApiV2TransactionTransactionIdFileGet(ref suppressDefaultLog, apiResponseLocalVar, transactionId, name);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transactionId"></param>
        /// <param name="name"></param>
        partial void AfterApiV2TransactionTransactionIdFileGet(ref bool suppressDefaultLog, IApiV2TransactionTransactionIdFileGetApiResponse apiResponseLocalVar, Guid transactionId, string name);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="transactionId"></param>
        /// <param name="name"></param>
        private void OnErrorApiV2TransactionTransactionIdFileGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid transactionId, string name)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiV2TransactionTransactionIdFileGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, transactionId, name);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="transactionId"></param>
        /// <param name="name"></param>
        partial void OnErrorApiV2TransactionTransactionIdFileGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid transactionId, string name);

        /// <summary>
        /// Get Reprocess transaction file 
        /// </summary>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="name">File name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdFileGetApiResponse"/>&gt;</returns>
        public async Task<IApiV2TransactionTransactionIdFileGetApiResponse?> ApiV2TransactionTransactionIdFileGetOrDefaultAsync(Guid transactionId, string name, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiV2TransactionTransactionIdFileGetAsync(transactionId, name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Reprocess transaction file 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="name">File name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdFileGetApiResponse"/>&gt;</returns>
        public async Task<IApiV2TransactionTransactionIdFileGetApiResponse> ApiV2TransactionTransactionIdFileGetAsync(Guid transactionId, string name, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiV2TransactionTransactionIdFileGet(name);

                FormatApiV2TransactionTransactionIdFileGet(ref transactionId, ref name);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/api/v2/transaction/{transactionId}/file";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtransactionId%7D", Uri.EscapeDataString(transactionId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/octet-stream"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiV2TransactionTransactionIdFileGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiV2TransactionTransactionIdFileGetApiResponse>();

                        ApiV2TransactionTransactionIdFileGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v2/transaction/{transactionId}/file", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiV2TransactionTransactionIdFileGetDefaultImplementation(apiResponseLocalVar, transactionId, name);

                        Events.ExecuteOnApiV2TransactionTransactionIdFileGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiV2TransactionTransactionIdFileGetDefaultImplementation(e, "/api/v2/transaction/{transactionId}/file", uriBuilderLocalVar.Path, transactionId, name);
                Events.ExecuteOnErrorApiV2TransactionTransactionIdFileGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiV2TransactionTransactionIdFileGetApiResponse"/>
        /// </summary>
        public partial class ApiV2TransactionTransactionIdFileGetApiResponse : Regula.DocumentReader.WebClient.Client.ApiResponse, IApiV2TransactionTransactionIdFileGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiV2TransactionTransactionIdFileGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiV2TransactionTransactionIdFileGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiV2TransactionTransactionIdFileGetApiResponse(ILogger<ApiV2TransactionTransactionIdFileGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<System.IO.Stream>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out System.IO.Stream? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiV2TransactionTransactionIdGet(ref Guid transactionId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transactionId"></param>
        private void AfterApiV2TransactionTransactionIdGetDefaultImplementation(IApiV2TransactionTransactionIdGetApiResponse apiResponseLocalVar, Guid transactionId)
        {
            bool suppressDefaultLog = false;
            AfterApiV2TransactionTransactionIdGet(ref suppressDefaultLog, apiResponseLocalVar, transactionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transactionId"></param>
        partial void AfterApiV2TransactionTransactionIdGet(ref bool suppressDefaultLog, IApiV2TransactionTransactionIdGetApiResponse apiResponseLocalVar, Guid transactionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="transactionId"></param>
        private void OnErrorApiV2TransactionTransactionIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid transactionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiV2TransactionTransactionIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, transactionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="transactionId"></param>
        partial void OnErrorApiV2TransactionTransactionIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid transactionId);

        /// <summary>
        /// Get Reprocess transaction data 
        /// </summary>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdGetApiResponse"/>&gt;</returns>
        public async Task<IApiV2TransactionTransactionIdGetApiResponse?> ApiV2TransactionTransactionIdGetOrDefaultAsync(Guid transactionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiV2TransactionTransactionIdGetAsync(transactionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Reprocess transaction data 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdGetApiResponse"/>&gt;</returns>
        public async Task<IApiV2TransactionTransactionIdGetApiResponse> ApiV2TransactionTransactionIdGetAsync(Guid transactionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatApiV2TransactionTransactionIdGet(ref transactionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/api/v2/transaction/{transactionId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtransactionId%7D", Uri.EscapeDataString(transactionId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiV2TransactionTransactionIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiV2TransactionTransactionIdGetApiResponse>();

                        ApiV2TransactionTransactionIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v2/transaction/{transactionId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiV2TransactionTransactionIdGetDefaultImplementation(apiResponseLocalVar, transactionId);

                        Events.ExecuteOnApiV2TransactionTransactionIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiV2TransactionTransactionIdGetDefaultImplementation(e, "/api/v2/transaction/{transactionId}", uriBuilderLocalVar.Path, transactionId);
                Events.ExecuteOnErrorApiV2TransactionTransactionIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiV2TransactionTransactionIdGetApiResponse"/>
        /// </summary>
        public partial class ApiV2TransactionTransactionIdGetApiResponse : Regula.DocumentReader.WebClient.Client.ApiResponse, IApiV2TransactionTransactionIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiV2TransactionTransactionIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiV2TransactionTransactionIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiV2TransactionTransactionIdGetApiResponse(ILogger<ApiV2TransactionTransactionIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Regula.DocumentReader.WebClient.Model.TransactionProcessGetResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Regula.DocumentReader.WebClient.Model.TransactionProcessGetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Regula.DocumentReader.WebClient.Model.TransactionProcessGetResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiV2TransactionTransactionIdProcessPost(ref Guid transactionId, TransactionProcessRequest transactionProcessRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="transactionProcessRequest"></param>
        /// <returns></returns>
        private void ValidateApiV2TransactionTransactionIdProcessPost(TransactionProcessRequest transactionProcessRequest)
        {
            if (transactionProcessRequest == null)
                throw new ArgumentNullException(nameof(transactionProcessRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transactionId"></param>
        /// <param name="transactionProcessRequest"></param>
        private void AfterApiV2TransactionTransactionIdProcessPostDefaultImplementation(IApiV2TransactionTransactionIdProcessPostApiResponse apiResponseLocalVar, Guid transactionId, TransactionProcessRequest transactionProcessRequest)
        {
            bool suppressDefaultLog = false;
            AfterApiV2TransactionTransactionIdProcessPost(ref suppressDefaultLog, apiResponseLocalVar, transactionId, transactionProcessRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transactionId"></param>
        /// <param name="transactionProcessRequest"></param>
        partial void AfterApiV2TransactionTransactionIdProcessPost(ref bool suppressDefaultLog, IApiV2TransactionTransactionIdProcessPostApiResponse apiResponseLocalVar, Guid transactionId, TransactionProcessRequest transactionProcessRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="transactionId"></param>
        /// <param name="transactionProcessRequest"></param>
        private void OnErrorApiV2TransactionTransactionIdProcessPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid transactionId, TransactionProcessRequest transactionProcessRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiV2TransactionTransactionIdProcessPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, transactionId, transactionProcessRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="transactionId"></param>
        /// <param name="transactionProcessRequest"></param>
        partial void OnErrorApiV2TransactionTransactionIdProcessPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid transactionId, TransactionProcessRequest transactionProcessRequest);

        /// <summary>
        /// Reprocess 
        /// </summary>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="transactionProcessRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdProcessPostApiResponse"/>&gt;</returns>
        public async Task<IApiV2TransactionTransactionIdProcessPostApiResponse?> ApiV2TransactionTransactionIdProcessPostOrDefaultAsync(Guid transactionId, TransactionProcessRequest transactionProcessRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiV2TransactionTransactionIdProcessPostAsync(transactionId, transactionProcessRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reprocess 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="transactionProcessRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdProcessPostApiResponse"/>&gt;</returns>
        public async Task<IApiV2TransactionTransactionIdProcessPostApiResponse> ApiV2TransactionTransactionIdProcessPostAsync(Guid transactionId, TransactionProcessRequest transactionProcessRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiV2TransactionTransactionIdProcessPost(transactionProcessRequest);

                FormatApiV2TransactionTransactionIdProcessPost(ref transactionId, transactionProcessRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/api/v2/transaction/{transactionId}/process";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtransactionId%7D", Uri.EscapeDataString(transactionId.ToString()));

                    httpRequestMessageLocalVar.Content = (transactionProcessRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(transactionProcessRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiV2TransactionTransactionIdProcessPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiV2TransactionTransactionIdProcessPostApiResponse>();

                        ApiV2TransactionTransactionIdProcessPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v2/transaction/{transactionId}/process", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiV2TransactionTransactionIdProcessPostDefaultImplementation(apiResponseLocalVar, transactionId, transactionProcessRequest);

                        Events.ExecuteOnApiV2TransactionTransactionIdProcessPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiV2TransactionTransactionIdProcessPostDefaultImplementation(e, "/api/v2/transaction/{transactionId}/process", uriBuilderLocalVar.Path, transactionId, transactionProcessRequest);
                Events.ExecuteOnErrorApiV2TransactionTransactionIdProcessPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiV2TransactionTransactionIdProcessPostApiResponse"/>
        /// </summary>
        public partial class ApiV2TransactionTransactionIdProcessPostApiResponse : Regula.DocumentReader.WebClient.Client.ApiResponse, IApiV2TransactionTransactionIdProcessPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiV2TransactionTransactionIdProcessPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiV2TransactionTransactionIdProcessPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiV2TransactionTransactionIdProcessPostApiResponse(ILogger<ApiV2TransactionTransactionIdProcessPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Regula.DocumentReader.WebClient.Model.TransactionProcessResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Regula.DocumentReader.WebClient.Model.TransactionProcessResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Regula.DocumentReader.WebClient.Model.TransactionProcessResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatApiV2TransactionTransactionIdResultsGet(ref Guid transactionId, ref Option<bool> withImages);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transactionId"></param>
        /// <param name="withImages"></param>
        private void AfterApiV2TransactionTransactionIdResultsGetDefaultImplementation(IApiV2TransactionTransactionIdResultsGetApiResponse apiResponseLocalVar, Guid transactionId, Option<bool> withImages)
        {
            bool suppressDefaultLog = false;
            AfterApiV2TransactionTransactionIdResultsGet(ref suppressDefaultLog, apiResponseLocalVar, transactionId, withImages);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transactionId"></param>
        /// <param name="withImages"></param>
        partial void AfterApiV2TransactionTransactionIdResultsGet(ref bool suppressDefaultLog, IApiV2TransactionTransactionIdResultsGetApiResponse apiResponseLocalVar, Guid transactionId, Option<bool> withImages);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="transactionId"></param>
        /// <param name="withImages"></param>
        private void OnErrorApiV2TransactionTransactionIdResultsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid transactionId, Option<bool> withImages)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiV2TransactionTransactionIdResultsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, transactionId, withImages);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="transactionId"></param>
        /// <param name="withImages"></param>
        partial void OnErrorApiV2TransactionTransactionIdResultsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid transactionId, Option<bool> withImages);

        /// <summary>
        /// Get Reprocess transaction result 
        /// </summary>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="withImages">With base64 images or url (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdResultsGetApiResponse"/>&gt;</returns>
        public async Task<IApiV2TransactionTransactionIdResultsGetApiResponse?> ApiV2TransactionTransactionIdResultsGetOrDefaultAsync(Guid transactionId, Option<bool> withImages = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiV2TransactionTransactionIdResultsGetAsync(transactionId, withImages, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Reprocess transaction result 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="withImages">With base64 images or url (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiV2TransactionTransactionIdResultsGetApiResponse"/>&gt;</returns>
        public async Task<IApiV2TransactionTransactionIdResultsGetApiResponse> ApiV2TransactionTransactionIdResultsGetAsync(Guid transactionId, Option<bool> withImages = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatApiV2TransactionTransactionIdResultsGet(ref transactionId, ref withImages);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/api/v2/transaction/{transactionId}/results";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtransactionId%7D", Uri.EscapeDataString(transactionId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (withImages.IsSet)
                        parseQueryStringLocalVar["withImages"] = ClientUtils.ParameterToString(withImages.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiV2TransactionTransactionIdResultsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiV2TransactionTransactionIdResultsGetApiResponse>();

                        ApiV2TransactionTransactionIdResultsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v2/transaction/{transactionId}/results", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiV2TransactionTransactionIdResultsGetDefaultImplementation(apiResponseLocalVar, transactionId, withImages);

                        Events.ExecuteOnApiV2TransactionTransactionIdResultsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiV2TransactionTransactionIdResultsGetDefaultImplementation(e, "/api/v2/transaction/{transactionId}/results", uriBuilderLocalVar.Path, transactionId, withImages);
                Events.ExecuteOnErrorApiV2TransactionTransactionIdResultsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiV2TransactionTransactionIdResultsGetApiResponse"/>
        /// </summary>
        public partial class ApiV2TransactionTransactionIdResultsGetApiResponse : Regula.DocumentReader.WebClient.Client.ApiResponse, IApiV2TransactionTransactionIdResultsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiV2TransactionTransactionIdResultsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiV2TransactionTransactionIdResultsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiV2TransactionTransactionIdResultsGetApiResponse(ILogger<ApiV2TransactionTransactionIdResultsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Regula.DocumentReader.WebClient.Model.ProcessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Regula.DocumentReader.WebClient.Model.ProcessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Regula.DocumentReader.WebClient.Model.ProcessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
