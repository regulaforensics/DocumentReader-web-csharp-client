// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Regula.DocumentReader.WebClient.Client;
using Regula.DocumentReader.WebClient.Model;
using System.Diagnostics.CodeAnalysis;

namespace Regula.DocumentReader.WebClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IProcessApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ProcessApiEvents Events { get; }

        /// <summary>
        /// Process list of documents images and return extracted data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="processRequest"></param>
        /// <param name="xRequestID"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiProcessApiResponse"/>&gt;</returns>
        Task<IApiProcessApiResponse> ApiProcessAsync(ProcessRequest processRequest, Option<string> xRequestID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process list of documents images and return extracted data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="processRequest"></param>
        /// <param name="xRequestID"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiProcessApiResponse"/>?&gt;</returns>
        Task<IApiProcessApiResponse?> ApiProcessOrDefaultAsync(ProcessRequest processRequest, Option<string> xRequestID = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IApiProcessApiResponse"/>
    /// </summary>
    public interface IApiProcessApiResponse : Regula.DocumentReader.WebClient.Client.IApiResponse, IOk<Regula.DocumentReader.WebClient.Model.ProcessResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ProcessApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnApiProcess;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorApiProcess;

        internal void ExecuteOnApiProcess(ProcessApi.ApiProcessApiResponse apiResponse)
        {
            OnApiProcess?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorApiProcess(Exception exception)
        {
            OnErrorApiProcess?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ProcessApi : IProcessApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ProcessApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ProcessApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessApi(ILogger<ProcessApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ProcessApiEvents processApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ProcessApi>();
            HttpClient = httpClient;
            Events = processApiEvents;
        }

        partial void FormatApiProcess(ProcessRequest processRequest, ref Option<string> xRequestID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="processRequest"></param>
        /// <param name="xRequestID"></param>
        /// <returns></returns>
        private void ValidateApiProcess(ProcessRequest processRequest, Option<string> xRequestID)
        {
            if (processRequest == null)
                throw new ArgumentNullException(nameof(processRequest));

            if (xRequestID.IsSet && xRequestID.Value == null)
                throw new ArgumentNullException(nameof(xRequestID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="processRequest"></param>
        /// <param name="xRequestID"></param>
        private void AfterApiProcessDefaultImplementation(IApiProcessApiResponse apiResponseLocalVar, ProcessRequest processRequest, Option<string> xRequestID)
        {
            bool suppressDefaultLog = false;
            AfterApiProcess(ref suppressDefaultLog, apiResponseLocalVar, processRequest, xRequestID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="processRequest"></param>
        /// <param name="xRequestID"></param>
        partial void AfterApiProcess(ref bool suppressDefaultLog, IApiProcessApiResponse apiResponseLocalVar, ProcessRequest processRequest, Option<string> xRequestID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="processRequest"></param>
        /// <param name="xRequestID"></param>
        private void OnErrorApiProcessDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProcessRequest processRequest, Option<string> xRequestID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorApiProcess(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, processRequest, xRequestID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="processRequest"></param>
        /// <param name="xRequestID"></param>
        partial void OnErrorApiProcess(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProcessRequest processRequest, Option<string> xRequestID);

        /// <summary>
        /// Process list of documents images and return extracted data 
        /// </summary>
        /// <param name="processRequest"></param>
        /// <param name="xRequestID"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiProcessApiResponse"/>&gt;</returns>
        public async Task<IApiProcessApiResponse?> ApiProcessOrDefaultAsync(ProcessRequest processRequest, Option<string> xRequestID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ApiProcessAsync(processRequest, xRequestID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Process list of documents images and return extracted data 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="processRequest"></param>
        /// <param name="xRequestID"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IApiProcessApiResponse"/>&gt;</returns>
        public async Task<IApiProcessApiResponse> ApiProcessAsync(ProcessRequest processRequest, Option<string> xRequestID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateApiProcess(processRequest, xRequestID);

                FormatApiProcess(processRequest, ref xRequestID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/api/process";

                    if (xRequestID.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-RequestID", ClientUtils.ParameterToString(xRequestID.Value));

                    httpRequestMessageLocalVar.Content = (processRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(processRequest, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ApiProcessApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ApiProcessApiResponse>();

                        ApiProcessApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/process", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterApiProcessDefaultImplementation(apiResponseLocalVar, processRequest, xRequestID);

                        Events.ExecuteOnApiProcess(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorApiProcessDefaultImplementation(e, "/api/process", uriBuilderLocalVar.Path, processRequest, xRequestID);
                Events.ExecuteOnErrorApiProcess(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ApiProcessApiResponse"/>
        /// </summary>
        public partial class ApiProcessApiResponse : Regula.DocumentReader.WebClient.Client.ApiResponse, IApiProcessApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ApiProcessApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ApiProcessApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ApiProcessApiResponse(ILogger<ApiProcessApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Regula.DocumentReader.WebClient.Model.ProcessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Regula.DocumentReader.WebClient.Model.ProcessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Regula.DocumentReader.WebClient.Model.ProcessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
