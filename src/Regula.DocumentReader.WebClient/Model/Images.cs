// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Images
    /// </summary>
    public partial class Images : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Images" /> class.
        /// </summary>
        /// <param name="availableSourceList">availableSourceList</param>
        /// <param name="fieldList">fieldList</param>
        /// <param name="fieldCount">Fields count</param>
        /// <param name="availableSourceCount">Available sources count</param>
        [JsonConstructor]
        public Images(List<ImagesAvailableSource> availableSourceList, List<ImagesField> fieldList, Option<int?> fieldCount = default, Option<int?> availableSourceCount = default)
        {
            AvailableSourceList = availableSourceList;
            FieldList = fieldList;
            FieldCountOption = fieldCount;
            AvailableSourceCountOption = availableSourceCount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AvailableSourceList
        /// </summary>
        [JsonPropertyName("availableSourceList")]
        public List<ImagesAvailableSource> AvailableSourceList { get; set; }

        /// <summary>
        /// Gets or Sets FieldList
        /// </summary>
        [JsonPropertyName("fieldList")]
        public List<ImagesField> FieldList { get; set; }

        /// <summary>
        /// Used to track the state of FieldCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FieldCountOption { get; private set; }

        /// <summary>
        /// Fields count
        /// </summary>
        /// <value>Fields count</value>
        [JsonPropertyName("fieldCount")]
        public int? FieldCount { get { return this.FieldCountOption; } set { this.FieldCountOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of AvailableSourceCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AvailableSourceCountOption { get; private set; }

        /// <summary>
        /// Available sources count
        /// </summary>
        /// <value>Available sources count</value>
        [JsonPropertyName("availableSourceCount")]
        public int? AvailableSourceCount { get { return this.AvailableSourceCountOption; } set { this.AvailableSourceCountOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Images {\n");
            sb.Append("  AvailableSourceList: ").Append(AvailableSourceList).Append("\n");
            sb.Append("  FieldList: ").Append(FieldList).Append("\n");
            sb.Append("  FieldCount: ").Append(FieldCount).Append("\n");
            sb.Append("  AvailableSourceCount: ").Append(AvailableSourceCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Images" />
    /// </summary>
    public class ImagesJsonConverter : JsonConverter<Images>
    {
        /// <summary>
        /// Deserializes json to <see cref="Images" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Images Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<ImagesAvailableSource>?> availableSourceList = default;
            Option<List<ImagesField>?> fieldList = default;
            Option<int?> fieldCount = default;
            Option<int?> availableSourceCount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "availableSourceList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                availableSourceList = new Option<List<ImagesAvailableSource>?>(JsonSerializer.Deserialize<List<ImagesAvailableSource>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "fieldList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldList = new Option<List<ImagesField>?>(JsonSerializer.Deserialize<List<ImagesField>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "fieldCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "availableSourceCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                availableSourceCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!availableSourceList.IsSet)
                throw new ArgumentException("Property is required for class Images.", nameof(availableSourceList));

            if (!fieldList.IsSet)
                throw new ArgumentException("Property is required for class Images.", nameof(fieldList));

            if (availableSourceList.IsSet && availableSourceList.Value == null)
                throw new ArgumentNullException(nameof(availableSourceList), "Property is not nullable for class Images.");

            if (fieldList.IsSet && fieldList.Value == null)
                throw new ArgumentNullException(nameof(fieldList), "Property is not nullable for class Images.");

            if (fieldCount.IsSet && fieldCount.Value == null)
                throw new ArgumentNullException(nameof(fieldCount), "Property is not nullable for class Images.");

            if (availableSourceCount.IsSet && availableSourceCount.Value == null)
                throw new ArgumentNullException(nameof(availableSourceCount), "Property is not nullable for class Images.");

            return new Images(availableSourceList.Value!, fieldList.Value!, fieldCount, availableSourceCount);
        }

        /// <summary>
        /// Serializes a <see cref="Images" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="images"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Images images, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, images, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Images" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="images"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Images images, JsonSerializerOptions jsonSerializerOptions)
        {
            if (images.AvailableSourceList == null)
                throw new ArgumentNullException(nameof(images.AvailableSourceList), "Property is required for class Images.");

            if (images.FieldList == null)
                throw new ArgumentNullException(nameof(images.FieldList), "Property is required for class Images.");

            writer.WritePropertyName("availableSourceList");
            JsonSerializer.Serialize(writer, images.AvailableSourceList, jsonSerializerOptions);
            writer.WritePropertyName("fieldList");
            JsonSerializer.Serialize(writer, images.FieldList, jsonSerializerOptions);
            if (images.FieldCountOption.IsSet)
                writer.WriteNumber("fieldCount", images.FieldCountOption.Value!.Value);

            if (images.AvailableSourceCountOption.IsSet)
                writer.WriteNumber("availableSourceCount", images.AvailableSourceCountOption.Value!.Value);
        }
    }
}
