// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Lexical data analysis allows you to compare the results of reading the text data of the MRZ, the document filling area, barcodes and data from the memory of the RFID chip for an additional assessment of the authenticity of the document. Single result for all pages. Consider using Result.TEXT type for more simplicity. 
    /// </summary>
    public partial class LexicalAnalysisResult : ResultItem, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LexicalAnalysisResult" /> class.
        /// </summary>
        /// <param name="listVerifiedFields">listVerifiedFields</param>
        /// <param name="bufLength">bufLength</param>
        /// <param name="light">light</param>
        /// <param name="listIdx">listIdx</param>
        /// <param name="pageIdx">pageIdx</param>
        [JsonConstructor]
        public LexicalAnalysisResult(ListVerifiedFields listVerifiedFields, Option<int?> bufLength = default, Option<int?> light = default, Option<int?> listIdx = default, Option<int?> pageIdx = default) : base(bufLength, light, listIdx, pageIdx)
        {
            ListVerifiedFields = listVerifiedFields;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ListVerifiedFields
        /// </summary>
        [JsonPropertyName("ListVerifiedFields")]
        public ListVerifiedFields ListVerifiedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LexicalAnalysisResult {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ListVerifiedFields: ").Append(ListVerifiedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LexicalAnalysisResult" />
    /// </summary>
    public class LexicalAnalysisResultJsonConverter : JsonConverter<LexicalAnalysisResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="LexicalAnalysisResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LexicalAnalysisResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ListVerifiedFields?> listVerifiedFields = default;
            Option<int?> bufLength = default;
            Option<int?> light = default;
            Option<int?> listIdx = default;
            Option<int?> pageIdx = default;
            Option<int?> resultType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ListVerifiedFields":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                listVerifiedFields = new Option<ListVerifiedFields?>(JsonSerializer.Deserialize<ListVerifiedFields>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "buf_length":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bufLength = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "light":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                light = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "list_idx":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                listIdx = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "page_idx":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pageIdx = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "result_type":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resultType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!listVerifiedFields.IsSet)
                throw new ArgumentException("Property is required for class LexicalAnalysisResult.", nameof(listVerifiedFields));

            if (!resultType.IsSet)
                throw new ArgumentException("Property is required for class LexicalAnalysisResult.", nameof(resultType));

            if (listVerifiedFields.IsSet && listVerifiedFields.Value == null)
                throw new ArgumentNullException(nameof(listVerifiedFields), "Property is not nullable for class LexicalAnalysisResult.");

            if (bufLength.IsSet && bufLength.Value == null)
                throw new ArgumentNullException(nameof(bufLength), "Property is not nullable for class LexicalAnalysisResult.");

            if (light.IsSet && light.Value == null)
                throw new ArgumentNullException(nameof(light), "Property is not nullable for class LexicalAnalysisResult.");

            if (listIdx.IsSet && listIdx.Value == null)
                throw new ArgumentNullException(nameof(listIdx), "Property is not nullable for class LexicalAnalysisResult.");

            if (pageIdx.IsSet && pageIdx.Value == null)
                throw new ArgumentNullException(nameof(pageIdx), "Property is not nullable for class LexicalAnalysisResult.");

            if (resultType.IsSet && resultType.Value == null)
                throw new ArgumentNullException(nameof(resultType), "Property is not nullable for class LexicalAnalysisResult.");

            return new LexicalAnalysisResult(listVerifiedFields.Value!, bufLength, light, listIdx, pageIdx);
        }

        /// <summary>
        /// Serializes a <see cref="LexicalAnalysisResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="lexicalAnalysisResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LexicalAnalysisResult lexicalAnalysisResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, lexicalAnalysisResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LexicalAnalysisResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="lexicalAnalysisResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LexicalAnalysisResult lexicalAnalysisResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (lexicalAnalysisResult.ListVerifiedFields == null)
                throw new ArgumentNullException(nameof(lexicalAnalysisResult.ListVerifiedFields), "Property is required for class LexicalAnalysisResult.");

            writer.WritePropertyName("ListVerifiedFields");
            JsonSerializer.Serialize(writer, lexicalAnalysisResult.ListVerifiedFields, jsonSerializerOptions);
            if (lexicalAnalysisResult.BufLengthOption.IsSet)
                writer.WriteNumber("buf_length", lexicalAnalysisResult.BufLengthOption.Value!.Value);

            if (lexicalAnalysisResult.LightOption.IsSet)
                writer.WriteNumber("light", lexicalAnalysisResult.LightOption.Value!.Value);

            if (lexicalAnalysisResult.ListIdxOption.IsSet)
                writer.WriteNumber("list_idx", lexicalAnalysisResult.ListIdxOption.Value!.Value);

            if (lexicalAnalysisResult.PageIdxOption.IsSet)
                writer.WriteNumber("page_idx", lexicalAnalysisResult.PageIdxOption.Value!.Value);

            writer.WriteString("result_type", lexicalAnalysisResult.ResultType);
        }
    }
}
