// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// OCRSecurityTextItem
    /// </summary>
    public partial class OCRSecurityTextItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OCRSecurityTextItem" /> class.
        /// </summary>
        /// <param name="criticalFlag">criticalFlag</param>
        /// <param name="lightType">lightType</param>
        /// <param name="fieldRect">fieldRect</param>
        /// <param name="etalonResultType">etalonResultType</param>
        /// <param name="etalonFieldType">etalonFieldType</param>
        /// <param name="etalonLightType">etalonLightType</param>
        /// <param name="etalonFieldRect">etalonFieldRect</param>
        /// <param name="securityTextResultOCR">securityTextResultOCR</param>
        /// <param name="etalonResultOCR">etalonResultOCR</param>
        /// <param name="reserved1">reserved1</param>
        /// <param name="reserved2">reserved2</param>
        [JsonConstructor]
        public OCRSecurityTextItem(Critical criticalFlag, Light lightType, RectangleCoordinates fieldRect, int etalonResultType, int etalonFieldType, int etalonLightType, RectangleCoordinates etalonFieldRect, string securityTextResultOCR, string etalonResultOCR, Option<int?> reserved1 = default, Option<int?> reserved2 = default)
        {
            CriticalFlag = criticalFlag;
            LightType = lightType;
            FieldRect = fieldRect;
            EtalonResultType = etalonResultType;
            EtalonFieldType = etalonFieldType;
            EtalonLightType = etalonLightType;
            EtalonFieldRect = etalonFieldRect;
            SecurityTextResultOCR = securityTextResultOCR;
            EtalonResultOCR = etalonResultOCR;
            Reserved1Option = reserved1;
            Reserved2Option = reserved2;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CriticalFlag
        /// </summary>
        [JsonPropertyName("CriticalFlag")]
        public Critical CriticalFlag { get; set; }

        /// <summary>
        /// Gets or Sets LightType
        /// </summary>
        [JsonPropertyName("LightType")]
        public Light LightType { get; set; }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [JsonPropertyName("FieldRect")]
        public RectangleCoordinates FieldRect { get; set; }

        /// <summary>
        /// Gets or Sets EtalonResultType
        /// </summary>
        [JsonPropertyName("EtalonResultType")]
        public int EtalonResultType { get; set; }

        /// <summary>
        /// Gets or Sets EtalonFieldType
        /// </summary>
        [JsonPropertyName("EtalonFieldType")]
        public int EtalonFieldType { get; set; }

        /// <summary>
        /// Gets or Sets EtalonLightType
        /// </summary>
        [JsonPropertyName("EtalonLightType")]
        public int EtalonLightType { get; set; }

        /// <summary>
        /// Gets or Sets EtalonFieldRect
        /// </summary>
        [JsonPropertyName("EtalonFieldRect")]
        public RectangleCoordinates EtalonFieldRect { get; set; }

        /// <summary>
        /// Gets or Sets SecurityTextResultOCR
        /// </summary>
        [JsonPropertyName("SecurityTextResultOCR")]
        public string SecurityTextResultOCR { get; set; }

        /// <summary>
        /// Gets or Sets EtalonResultOCR
        /// </summary>
        [JsonPropertyName("EtalonResultOCR")]
        public string EtalonResultOCR { get; set; }

        /// <summary>
        /// Used to track the state of Reserved1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> Reserved1Option { get; private set; }

        /// <summary>
        /// Gets or Sets Reserved1
        /// </summary>
        [JsonPropertyName("Reserved1")]
        public int? Reserved1 { get { return this.Reserved1Option; } set { this.Reserved1Option = new(value); } }

        /// <summary>
        /// Used to track the state of Reserved2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> Reserved2Option { get; private set; }

        /// <summary>
        /// Gets or Sets Reserved2
        /// </summary>
        [JsonPropertyName("Reserved2")]
        public int? Reserved2 { get { return this.Reserved2Option; } set { this.Reserved2Option = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OCRSecurityTextItem {\n");
            sb.Append("  CriticalFlag: ").Append(CriticalFlag).Append("\n");
            sb.Append("  LightType: ").Append(LightType).Append("\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  EtalonResultType: ").Append(EtalonResultType).Append("\n");
            sb.Append("  EtalonFieldType: ").Append(EtalonFieldType).Append("\n");
            sb.Append("  EtalonLightType: ").Append(EtalonLightType).Append("\n");
            sb.Append("  EtalonFieldRect: ").Append(EtalonFieldRect).Append("\n");
            sb.Append("  SecurityTextResultOCR: ").Append(SecurityTextResultOCR).Append("\n");
            sb.Append("  EtalonResultOCR: ").Append(EtalonResultOCR).Append("\n");
            sb.Append("  Reserved1: ").Append(Reserved1).Append("\n");
            sb.Append("  Reserved2: ").Append(Reserved2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OCRSecurityTextItem" />
    /// </summary>
    public class OCRSecurityTextItemJsonConverter : JsonConverter<OCRSecurityTextItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="OCRSecurityTextItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OCRSecurityTextItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Critical?> criticalFlag = default;
            Option<Light?> lightType = default;
            Option<RectangleCoordinates?> fieldRect = default;
            Option<int?> etalonResultType = default;
            Option<int?> etalonFieldType = default;
            Option<int?> etalonLightType = default;
            Option<RectangleCoordinates?> etalonFieldRect = default;
            Option<string?> securityTextResultOCR = default;
            Option<string?> etalonResultOCR = default;
            Option<int?> reserved1 = default;
            Option<int?> reserved2 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "CriticalFlag":
                            string? criticalFlagRawValue = utf8JsonReader.GetString();
                            if (criticalFlagRawValue != null)
                                criticalFlag = new Option<Critical?>(CriticalValueConverter.FromStringOrDefault(criticalFlagRawValue));
                            break;
                        case "LightType":
                            string? lightTypeRawValue = utf8JsonReader.GetString();
                            if (lightTypeRawValue != null)
                                lightType = new Option<Light?>(LightValueConverter.FromStringOrDefault(lightTypeRawValue));
                            break;
                        case "FieldRect":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldRect = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "EtalonResultType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                etalonResultType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "EtalonFieldType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                etalonFieldType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "EtalonLightType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                etalonLightType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "EtalonFieldRect":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                etalonFieldRect = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "SecurityTextResultOCR":
                            securityTextResultOCR = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "EtalonResultOCR":
                            etalonResultOCR = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Reserved1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved1 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Reserved2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved2 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!criticalFlag.IsSet)
                throw new ArgumentException("Property is required for class OCRSecurityTextItem.", nameof(criticalFlag));

            if (!lightType.IsSet)
                throw new ArgumentException("Property is required for class OCRSecurityTextItem.", nameof(lightType));

            if (!fieldRect.IsSet)
                throw new ArgumentException("Property is required for class OCRSecurityTextItem.", nameof(fieldRect));

            if (!etalonResultType.IsSet)
                throw new ArgumentException("Property is required for class OCRSecurityTextItem.", nameof(etalonResultType));

            if (!etalonFieldType.IsSet)
                throw new ArgumentException("Property is required for class OCRSecurityTextItem.", nameof(etalonFieldType));

            if (!etalonLightType.IsSet)
                throw new ArgumentException("Property is required for class OCRSecurityTextItem.", nameof(etalonLightType));

            if (!etalonFieldRect.IsSet)
                throw new ArgumentException("Property is required for class OCRSecurityTextItem.", nameof(etalonFieldRect));

            if (!securityTextResultOCR.IsSet)
                throw new ArgumentException("Property is required for class OCRSecurityTextItem.", nameof(securityTextResultOCR));

            if (!etalonResultOCR.IsSet)
                throw new ArgumentException("Property is required for class OCRSecurityTextItem.", nameof(etalonResultOCR));

            if (criticalFlag.IsSet && criticalFlag.Value == null)
                throw new ArgumentNullException(nameof(criticalFlag), "Property is not nullable for class OCRSecurityTextItem.");

            if (lightType.IsSet && lightType.Value == null)
                throw new ArgumentNullException(nameof(lightType), "Property is not nullable for class OCRSecurityTextItem.");

            if (fieldRect.IsSet && fieldRect.Value == null)
                throw new ArgumentNullException(nameof(fieldRect), "Property is not nullable for class OCRSecurityTextItem.");

            if (etalonResultType.IsSet && etalonResultType.Value == null)
                throw new ArgumentNullException(nameof(etalonResultType), "Property is not nullable for class OCRSecurityTextItem.");

            if (etalonFieldType.IsSet && etalonFieldType.Value == null)
                throw new ArgumentNullException(nameof(etalonFieldType), "Property is not nullable for class OCRSecurityTextItem.");

            if (etalonLightType.IsSet && etalonLightType.Value == null)
                throw new ArgumentNullException(nameof(etalonLightType), "Property is not nullable for class OCRSecurityTextItem.");

            if (etalonFieldRect.IsSet && etalonFieldRect.Value == null)
                throw new ArgumentNullException(nameof(etalonFieldRect), "Property is not nullable for class OCRSecurityTextItem.");

            if (securityTextResultOCR.IsSet && securityTextResultOCR.Value == null)
                throw new ArgumentNullException(nameof(securityTextResultOCR), "Property is not nullable for class OCRSecurityTextItem.");

            if (etalonResultOCR.IsSet && etalonResultOCR.Value == null)
                throw new ArgumentNullException(nameof(etalonResultOCR), "Property is not nullable for class OCRSecurityTextItem.");

            if (reserved1.IsSet && reserved1.Value == null)
                throw new ArgumentNullException(nameof(reserved1), "Property is not nullable for class OCRSecurityTextItem.");

            if (reserved2.IsSet && reserved2.Value == null)
                throw new ArgumentNullException(nameof(reserved2), "Property is not nullable for class OCRSecurityTextItem.");

            return new OCRSecurityTextItem(criticalFlag.Value!.Value!, lightType.Value!.Value!, fieldRect.Value!, etalonResultType.Value!.Value!, etalonFieldType.Value!.Value!, etalonLightType.Value!.Value!, etalonFieldRect.Value!, securityTextResultOCR.Value!, etalonResultOCR.Value!, reserved1, reserved2);
        }

        /// <summary>
        /// Serializes a <see cref="OCRSecurityTextItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oCRSecurityTextItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OCRSecurityTextItem oCRSecurityTextItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, oCRSecurityTextItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OCRSecurityTextItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oCRSecurityTextItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OCRSecurityTextItem oCRSecurityTextItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (oCRSecurityTextItem.FieldRect == null)
                throw new ArgumentNullException(nameof(oCRSecurityTextItem.FieldRect), "Property is required for class OCRSecurityTextItem.");

            if (oCRSecurityTextItem.EtalonFieldRect == null)
                throw new ArgumentNullException(nameof(oCRSecurityTextItem.EtalonFieldRect), "Property is required for class OCRSecurityTextItem.");

            if (oCRSecurityTextItem.SecurityTextResultOCR == null)
                throw new ArgumentNullException(nameof(oCRSecurityTextItem.SecurityTextResultOCR), "Property is required for class OCRSecurityTextItem.");

            if (oCRSecurityTextItem.EtalonResultOCR == null)
                throw new ArgumentNullException(nameof(oCRSecurityTextItem.EtalonResultOCR), "Property is required for class OCRSecurityTextItem.");

            var criticalFlagRawValue = CriticalValueConverter.ToJsonValue(oCRSecurityTextItem.CriticalFlag);
            writer.WriteNumber("CriticalFlag", criticalFlagRawValue);

            var lightTypeRawValue = LightValueConverter.ToJsonValue(oCRSecurityTextItem.LightType);
            writer.WriteNumber("LightType", lightTypeRawValue);

            writer.WritePropertyName("FieldRect");
            JsonSerializer.Serialize(writer, oCRSecurityTextItem.FieldRect, jsonSerializerOptions);
            writer.WriteNumber("EtalonResultType", oCRSecurityTextItem.EtalonResultType);

            writer.WriteNumber("EtalonFieldType", oCRSecurityTextItem.EtalonFieldType);

            writer.WriteNumber("EtalonLightType", oCRSecurityTextItem.EtalonLightType);

            writer.WritePropertyName("EtalonFieldRect");
            JsonSerializer.Serialize(writer, oCRSecurityTextItem.EtalonFieldRect, jsonSerializerOptions);
            writer.WriteString("SecurityTextResultOCR", oCRSecurityTextItem.SecurityTextResultOCR);

            writer.WriteString("EtalonResultOCR", oCRSecurityTextItem.EtalonResultOCR);

            if (oCRSecurityTextItem.Reserved1Option.IsSet)
                writer.WriteNumber("Reserved1", oCRSecurityTextItem.Reserved1Option.Value!.Value);

            if (oCRSecurityTextItem.Reserved2Option.IsSet)
                writer.WriteNumber("Reserved2", oCRSecurityTextItem.Reserved2Option.Value!.Value);
        }
    }
}
