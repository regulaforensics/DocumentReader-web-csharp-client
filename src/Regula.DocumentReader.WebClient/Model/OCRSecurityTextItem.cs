/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// OCRSecurityTextItem
    /// </summary>
    [DataContract(Name = "OCRSecurityTextItem")]
    public partial class OCRSecurityTextItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CriticalFlag
        /// </summary>
        [DataMember(Name = "CriticalFlag", IsRequired = true, EmitDefaultValue = true)]
        public Critical CriticalFlag { get; set; }

        /// <summary>
        /// Gets or Sets LightType
        /// </summary>
        [DataMember(Name = "LightType", IsRequired = true, EmitDefaultValue = true)]
        public Light LightType { get; set; }

        /// <summary>
        /// Gets or Sets EtalonFieldType
        /// </summary>
        [DataMember(Name = "EtalonFieldType", IsRequired = true, EmitDefaultValue = true)]
        public TextFieldType EtalonFieldType { get; set; }

        /// <summary>
        /// Gets or Sets EtalonLightType
        /// </summary>
        [DataMember(Name = "EtalonLightType", IsRequired = true, EmitDefaultValue = true)]
        public Light EtalonLightType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OCRSecurityTextItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OCRSecurityTextItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OCRSecurityTextItem" /> class.
        /// </summary>
        /// <param name="criticalFlag">criticalFlag (required).</param>
        /// <param name="lightType">lightType (required).</param>
        /// <param name="fieldRect">fieldRect (required).</param>
        /// <param name="etalonResultType">Same as Result type, but used for safe parsing of not-described values. See Result type. (required) (default to 0).</param>
        /// <param name="etalonFieldType">etalonFieldType (required).</param>
        /// <param name="etalonLightType">etalonLightType (required).</param>
        /// <param name="etalonFieldRect">etalonFieldRect (required).</param>
        /// <param name="securityTextResultOCR">securityTextResultOCR (required).</param>
        /// <param name="etalonResultOCR">etalonResultOCR (required).</param>
        /// <param name="resultCode">resultCode.</param>
        /// <param name="reserved1">reserved1.</param>
        /// <param name="reserved2">reserved2.</param>
        public OCRSecurityTextItem(Critical criticalFlag = default(Critical), Light lightType = default(Light), RectangleCoordinates fieldRect = default(RectangleCoordinates), int etalonResultType = 0, TextFieldType etalonFieldType = default(TextFieldType), Light etalonLightType = default(Light), RectangleCoordinates etalonFieldRect = default(RectangleCoordinates), string securityTextResultOCR = default(string), string etalonResultOCR = default(string), int resultCode = default(int), int reserved1 = default(int), int reserved2 = default(int))
        {
            this.CriticalFlag = criticalFlag;
            this.LightType = lightType;
            // to ensure "fieldRect" is required (not null)
            if (fieldRect == null)
            {
                throw new ArgumentNullException("fieldRect is a required property for OCRSecurityTextItem and cannot be null");
            }
            this.FieldRect = fieldRect;
            this.EtalonResultType = etalonResultType;
            this.EtalonFieldType = etalonFieldType;
            this.EtalonLightType = etalonLightType;
            // to ensure "etalonFieldRect" is required (not null)
            if (etalonFieldRect == null)
            {
                throw new ArgumentNullException("etalonFieldRect is a required property for OCRSecurityTextItem and cannot be null");
            }
            this.EtalonFieldRect = etalonFieldRect;
            // to ensure "securityTextResultOCR" is required (not null)
            if (securityTextResultOCR == null)
            {
                throw new ArgumentNullException("securityTextResultOCR is a required property for OCRSecurityTextItem and cannot be null");
            }
            this.SecurityTextResultOCR = securityTextResultOCR;
            // to ensure "etalonResultOCR" is required (not null)
            if (etalonResultOCR == null)
            {
                throw new ArgumentNullException("etalonResultOCR is a required property for OCRSecurityTextItem and cannot be null");
            }
            this.EtalonResultOCR = etalonResultOCR;
            this.ResultCode = resultCode;
            this.Reserved1 = reserved1;
            this.Reserved2 = reserved2;
        }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [DataMember(Name = "FieldRect", IsRequired = true, EmitDefaultValue = true)]
        public RectangleCoordinates FieldRect { get; set; }

        /// <summary>
        /// Same as Result type, but used for safe parsing of not-described values. See Result type.
        /// </summary>
        /// <value>Same as Result type, but used for safe parsing of not-described values. See Result type.</value>
        [DataMember(Name = "EtalonResultType", IsRequired = true, EmitDefaultValue = true)]
        public int EtalonResultType { get; set; }

        /// <summary>
        /// Gets or Sets EtalonFieldRect
        /// </summary>
        [DataMember(Name = "EtalonFieldRect", IsRequired = true, EmitDefaultValue = true)]
        public RectangleCoordinates EtalonFieldRect { get; set; }

        /// <summary>
        /// Gets or Sets SecurityTextResultOCR
        /// </summary>
        [DataMember(Name = "SecurityTextResultOCR", IsRequired = true, EmitDefaultValue = true)]
        public string SecurityTextResultOCR { get; set; }

        /// <summary>
        /// Gets or Sets EtalonResultOCR
        /// </summary>
        [DataMember(Name = "EtalonResultOCR", IsRequired = true, EmitDefaultValue = true)]
        public string EtalonResultOCR { get; set; }

        /// <summary>
        /// Gets or Sets ResultCode
        /// </summary>
        [DataMember(Name = "ResultCode", EmitDefaultValue = false)]
        public int? ResultCode { get; set; }

        /// <summary>
        /// Gets or Sets Reserved1
        /// </summary>
        [DataMember(Name = "Reserved1", EmitDefaultValue = false)]
        public int? Reserved1 { get; set; }

        /// <summary>
        /// Gets or Sets Reserved2
        /// </summary>
        [DataMember(Name = "Reserved2", EmitDefaultValue = false)]
        public int? Reserved2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OCRSecurityTextItem {\n");
            sb.Append("  CriticalFlag: ").Append(CriticalFlag).Append("\n");
            sb.Append("  LightType: ").Append(LightType).Append("\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  EtalonResultType: ").Append(EtalonResultType).Append("\n");
            sb.Append("  EtalonFieldType: ").Append(EtalonFieldType).Append("\n");
            sb.Append("  EtalonLightType: ").Append(EtalonLightType).Append("\n");
            sb.Append("  EtalonFieldRect: ").Append(EtalonFieldRect).Append("\n");
            sb.Append("  SecurityTextResultOCR: ").Append(SecurityTextResultOCR).Append("\n");
            sb.Append("  EtalonResultOCR: ").Append(EtalonResultOCR).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  Reserved1: ").Append(Reserved1).Append("\n");
            sb.Append("  Reserved2: ").Append(Reserved2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
