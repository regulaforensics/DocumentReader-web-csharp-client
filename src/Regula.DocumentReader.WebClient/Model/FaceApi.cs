// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// FaceApi
    /// </summary>
    public partial class FaceApi : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceApi" /> class.
        /// </summary>
        /// <param name="url">The URL of the Regula Face Web service to be used.</param>
        /// <param name="mode">The processing mode: \&quot;match\&quot; or \&quot;match+search\&quot;.</param>
        /// <param name="search">search</param>
        /// <param name="threshold">The similarity threshold, 0-100. Above 75 means that the faces&#39; similarity is verified, below 75 is not.</param>
        /// <param name="serviceTimeout">The Regula Face Web service requests timeout, ms.</param>
        /// <param name="proxy">Proxy to use, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXY.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.</param>
        /// <param name="proxyUserpwd">Username and password to use for proxy authentication, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXYUSERPWD.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.</param>
        /// <param name="proxyType">Proxy protocol type, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXYTYPE.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.</param>
        /// <param name="childAgeThreshold">The age threshold for the portrait comparison. Default: 13.</param>
        /// <param name="childDocValidityYears">Estimated duration of validity for a child&#39;s passport, years. Default: 5.</param>
        [JsonConstructor]
        public FaceApi(Option<string?> url = default, Option<string?> mode = default, Option<FaceApiSearch?> search = default, Option<int?> threshold = default, Option<int?> serviceTimeout = default, Option<string?> proxy = default, Option<string?> proxyUserpwd = default, Option<int?> proxyType = default, Option<int?> childAgeThreshold = default, Option<int?> childDocValidityYears = default)
        {
            UrlOption = url;
            ModeOption = mode;
            SearchOption = search;
            ThresholdOption = threshold;
            ServiceTimeoutOption = serviceTimeout;
            ProxyOption = proxy;
            ProxyUserpwdOption = proxyUserpwd;
            ProxyTypeOption = proxyType;
            ChildAgeThresholdOption = childAgeThreshold;
            ChildDocValidityYearsOption = childDocValidityYears;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// The URL of the Regula Face Web service to be used.
        /// </summary>
        /// <value>The URL of the Regula Face Web service to be used.</value>
        /* <example>https://faceapi.regulaforensics.com</example> */
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Mode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ModeOption { get; private set; }

        /// <summary>
        /// The processing mode: \&quot;match\&quot; or \&quot;match+search\&quot;.
        /// </summary>
        /// <value>The processing mode: \&quot;match\&quot; or \&quot;match+search\&quot;.</value>
        /* <example>match</example> */
        [JsonPropertyName("mode")]
        public string? Mode { get { return this.ModeOption; } set { this.ModeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Search
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FaceApiSearch?> SearchOption { get; private set; }

        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [JsonPropertyName("search")]
        public FaceApiSearch? Search { get { return this.SearchOption; } set { this.SearchOption = new(value); } }

        /// <summary>
        /// Used to track the state of Threshold
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ThresholdOption { get; private set; }

        /// <summary>
        /// The similarity threshold, 0-100. Above 75 means that the faces&#39; similarity is verified, below 75 is not.
        /// </summary>
        /// <value>The similarity threshold, 0-100. Above 75 means that the faces&#39; similarity is verified, below 75 is not.</value>
        /* <example>75</example> */
        [JsonPropertyName("threshold")]
        public int? Threshold { get { return this.ThresholdOption; } set { this.ThresholdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServiceTimeout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ServiceTimeoutOption { get; private set; }

        /// <summary>
        /// The Regula Face Web service requests timeout, ms.
        /// </summary>
        /// <value>The Regula Face Web service requests timeout, ms.</value>
        /* <example>3000</example> */
        [JsonPropertyName("serviceTimeout")]
        public int? ServiceTimeout { get { return this.ServiceTimeoutOption; } set { this.ServiceTimeoutOption = new(value); } }

        /// <summary>
        /// Used to track the state of Proxy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProxyOption { get; private set; }

        /// <summary>
        /// Proxy to use, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXY.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.
        /// </summary>
        /// <value>Proxy to use, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXY.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.</value>
        /* <example>http://localhost:8080</example> */
        [JsonPropertyName("proxy")]
        public string? Proxy { get { return this.ProxyOption; } set { this.ProxyOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProxyUserpwd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProxyUserpwdOption { get; private set; }

        /// <summary>
        /// Username and password to use for proxy authentication, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXYUSERPWD.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.
        /// </summary>
        /// <value>Username and password to use for proxy authentication, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXYUSERPWD.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.</value>
        /* <example>user:pass</example> */
        [JsonPropertyName("proxy_userpwd")]
        public string? ProxyUserpwd { get { return this.ProxyUserpwdOption; } set { this.ProxyUserpwdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProxyType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProxyTypeOption { get; private set; }

        /// <summary>
        /// Proxy protocol type, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXYTYPE.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.
        /// </summary>
        /// <value>Proxy protocol type, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXYTYPE.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.</value>
        /* <example>0</example> */
        [JsonPropertyName("proxy_type")]
        public int? ProxyType { get { return this.ProxyTypeOption; } set { this.ProxyTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChildAgeThreshold
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ChildAgeThresholdOption { get; private set; }

        /// <summary>
        /// The age threshold for the portrait comparison. Default: 13.
        /// </summary>
        /// <value>The age threshold for the portrait comparison. Default: 13.</value>
        /* <example>13</example> */
        [JsonPropertyName("childAgeThreshold")]
        public int? ChildAgeThreshold { get { return this.ChildAgeThresholdOption; } set { this.ChildAgeThresholdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChildDocValidityYears
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ChildDocValidityYearsOption { get; private set; }

        /// <summary>
        /// Estimated duration of validity for a child&#39;s passport, years. Default: 5.
        /// </summary>
        /// <value>Estimated duration of validity for a child&#39;s passport, years. Default: 5.</value>
        /* <example>5</example> */
        [JsonPropertyName("childDocValidityYears")]
        public int? ChildDocValidityYears { get { return this.ChildDocValidityYearsOption; } set { this.ChildDocValidityYearsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaceApi {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  ServiceTimeout: ").Append(ServiceTimeout).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  ProxyUserpwd: ").Append(ProxyUserpwd).Append("\n");
            sb.Append("  ProxyType: ").Append(ProxyType).Append("\n");
            sb.Append("  ChildAgeThreshold: ").Append(ChildAgeThreshold).Append("\n");
            sb.Append("  ChildDocValidityYears: ").Append(ChildDocValidityYears).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FaceApi" />
    /// </summary>
    public class FaceApiJsonConverter : JsonConverter<FaceApi>
    {
        /// <summary>
        /// Deserializes json to <see cref="FaceApi" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FaceApi Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> url = default;
            Option<string?> mode = default;
            Option<FaceApiSearch?> search = default;
            Option<int?> threshold = default;
            Option<int?> serviceTimeout = default;
            Option<string?> proxy = default;
            Option<string?> proxyUserpwd = default;
            Option<int?> proxyType = default;
            Option<int?> childAgeThreshold = default;
            Option<int?> childDocValidityYears = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mode":
                            mode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "search":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                search = new Option<FaceApiSearch?>(JsonSerializer.Deserialize<FaceApiSearch>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "threshold":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threshold = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "serviceTimeout":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                serviceTimeout = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "proxy":
                            proxy = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "proxy_userpwd":
                            proxyUserpwd = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "proxy_type":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                proxyType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "childAgeThreshold":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                childAgeThreshold = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "childDocValidityYears":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                childDocValidityYears = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class FaceApi.");

            if (mode.IsSet && mode.Value == null)
                throw new ArgumentNullException(nameof(mode), "Property is not nullable for class FaceApi.");

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search), "Property is not nullable for class FaceApi.");

            if (threshold.IsSet && threshold.Value == null)
                throw new ArgumentNullException(nameof(threshold), "Property is not nullable for class FaceApi.");

            if (serviceTimeout.IsSet && serviceTimeout.Value == null)
                throw new ArgumentNullException(nameof(serviceTimeout), "Property is not nullable for class FaceApi.");

            if (proxy.IsSet && proxy.Value == null)
                throw new ArgumentNullException(nameof(proxy), "Property is not nullable for class FaceApi.");

            if (proxyUserpwd.IsSet && proxyUserpwd.Value == null)
                throw new ArgumentNullException(nameof(proxyUserpwd), "Property is not nullable for class FaceApi.");

            if (proxyType.IsSet && proxyType.Value == null)
                throw new ArgumentNullException(nameof(proxyType), "Property is not nullable for class FaceApi.");

            if (childAgeThreshold.IsSet && childAgeThreshold.Value == null)
                throw new ArgumentNullException(nameof(childAgeThreshold), "Property is not nullable for class FaceApi.");

            if (childDocValidityYears.IsSet && childDocValidityYears.Value == null)
                throw new ArgumentNullException(nameof(childDocValidityYears), "Property is not nullable for class FaceApi.");

            return new FaceApi(url, mode, search, threshold, serviceTimeout, proxy, proxyUserpwd, proxyType, childAgeThreshold, childDocValidityYears);
        }

        /// <summary>
        /// Serializes a <see cref="FaceApi" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="faceApi"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FaceApi faceApi, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, faceApi, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FaceApi" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="faceApi"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FaceApi faceApi, JsonSerializerOptions jsonSerializerOptions)
        {
            if (faceApi.UrlOption.IsSet && faceApi.Url == null)
                throw new ArgumentNullException(nameof(faceApi.Url), "Property is required for class FaceApi.");

            if (faceApi.ModeOption.IsSet && faceApi.Mode == null)
                throw new ArgumentNullException(nameof(faceApi.Mode), "Property is required for class FaceApi.");

            if (faceApi.SearchOption.IsSet && faceApi.Search == null)
                throw new ArgumentNullException(nameof(faceApi.Search), "Property is required for class FaceApi.");

            if (faceApi.ProxyOption.IsSet && faceApi.Proxy == null)
                throw new ArgumentNullException(nameof(faceApi.Proxy), "Property is required for class FaceApi.");

            if (faceApi.ProxyUserpwdOption.IsSet && faceApi.ProxyUserpwd == null)
                throw new ArgumentNullException(nameof(faceApi.ProxyUserpwd), "Property is required for class FaceApi.");

            if (faceApi.UrlOption.IsSet)
                writer.WriteString("url", faceApi.Url);

            if (faceApi.ModeOption.IsSet)
                writer.WriteString("mode", faceApi.Mode);

            if (faceApi.SearchOption.IsSet)
            {
                writer.WritePropertyName("search");
                JsonSerializer.Serialize(writer, faceApi.Search, jsonSerializerOptions);
            }
            if (faceApi.ThresholdOption.IsSet)
                writer.WriteNumber("threshold", faceApi.ThresholdOption.Value!.Value);

            if (faceApi.ServiceTimeoutOption.IsSet)
                writer.WriteNumber("serviceTimeout", faceApi.ServiceTimeoutOption.Value!.Value);

            if (faceApi.ProxyOption.IsSet)
                writer.WriteString("proxy", faceApi.Proxy);

            if (faceApi.ProxyUserpwdOption.IsSet)
                writer.WriteString("proxy_userpwd", faceApi.ProxyUserpwd);

            if (faceApi.ProxyTypeOption.IsSet)
                writer.WriteNumber("proxy_type", faceApi.ProxyTypeOption.Value!.Value);

            if (faceApi.ChildAgeThresholdOption.IsSet)
                writer.WriteNumber("childAgeThreshold", faceApi.ChildAgeThresholdOption.Value!.Value);

            if (faceApi.ChildDocValidityYearsOption.IsSet)
                writer.WriteNumber("childDocValidityYears", faceApi.ChildDocValidityYearsOption.Value!.Value);
        }
    }
}
