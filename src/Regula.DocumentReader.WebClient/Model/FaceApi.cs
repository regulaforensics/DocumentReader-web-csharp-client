/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// FaceApi
    /// </summary>
    [DataContract]
    public partial class FaceApi :  IEquatable<FaceApi>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceApi" /> class.
        /// </summary>
        /// <param name="url">The URL of the Regula Face Web service to be used..</param>
        /// <param name="mode">The processing mode: \&quot;match\&quot; or \&quot;match+search\&quot;..</param>
        /// <param name="search">search.</param>
        /// <param name="threshold">The similarity threshold, 0-100. Above 75 means that the faces&#39; similarity is verified, below 75 is not..</param>
        /// <param name="serviceTimeout">The Regula Face Web service requests timeout, ms..</param>
        /// <param name="proxy">Proxy to use, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXY.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;..</param>
        /// <param name="proxyUserpwd">Username and password to use for proxy authentication, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXYUSERPWD.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;..</param>
        /// <param name="proxyType">Proxy protocol type, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXYTYPE.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;..</param>
        /// <param name="childAgeThreshold">Minimum age of a child, at which portrait comparison result will be effective. Default: 13..</param>
        /// <param name="childDocValidityYears">Estimated duration of validity for a child&#39;s passport, years. Default: 5..</param>
        public FaceApi(string url = default(string), string mode = default(string), FaceApiSearch search = default(FaceApiSearch), int threshold = default(int), int serviceTimeout = default(int), string proxy = default(string), string proxyUserpwd = default(string), int proxyType = default(int), int childAgeThreshold = default(int), int childDocValidityYears = default(int))
        {
            this.Url = url;
            this.Mode = mode;
            this.Search = search;
            this.Threshold = threshold;
            this.ServiceTimeout = serviceTimeout;
            this.Proxy = proxy;
            this.ProxyUserpwd = proxyUserpwd;
            this.ProxyType = proxyType;
            this.ChildAgeThreshold = childAgeThreshold;
            this.ChildDocValidityYears = childDocValidityYears;
        }
        
        /// <summary>
        /// The URL of the Regula Face Web service to be used.
        /// </summary>
        /// <value>The URL of the Regula Face Web service to be used.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The processing mode: \&quot;match\&quot; or \&quot;match+search\&quot;.
        /// </summary>
        /// <value>The processing mode: \&quot;match\&quot; or \&quot;match+search\&quot;.</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [DataMember(Name="search", EmitDefaultValue=false)]
        public FaceApiSearch Search { get; set; }

        /// <summary>
        /// The similarity threshold, 0-100. Above 75 means that the faces&#39; similarity is verified, below 75 is not.
        /// </summary>
        /// <value>The similarity threshold, 0-100. Above 75 means that the faces&#39; similarity is verified, below 75 is not.</value>
        [DataMember(Name="threshold", EmitDefaultValue=false)]
        public int Threshold { get; set; }

        /// <summary>
        /// The Regula Face Web service requests timeout, ms.
        /// </summary>
        /// <value>The Regula Face Web service requests timeout, ms.</value>
        [DataMember(Name="serviceTimeout", EmitDefaultValue=false)]
        public int ServiceTimeout { get; set; }

        /// <summary>
        /// Proxy to use, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXY.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.
        /// </summary>
        /// <value>Proxy to use, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXY.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.</value>
        [DataMember(Name="proxy", EmitDefaultValue=false)]
        public string Proxy { get; set; }

        /// <summary>
        /// Username and password to use for proxy authentication, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXYUSERPWD.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.
        /// </summary>
        /// <value>Username and password to use for proxy authentication, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXYUSERPWD.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.</value>
        [DataMember(Name="proxy_userpwd", EmitDefaultValue=false)]
        public string ProxyUserpwd { get; set; }

        /// <summary>
        /// Proxy protocol type, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXYTYPE.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.
        /// </summary>
        /// <value>Proxy protocol type, should be set according to the &lt;a href&#x3D;\&quot;https://curl.se/libcurl/c/CURLOPT_PROXYTYPE.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cURL standard&lt;/a&gt;.</value>
        [DataMember(Name="proxy_type", EmitDefaultValue=false)]
        public int ProxyType { get; set; }

        /// <summary>
        /// Minimum age of a child, at which portrait comparison result will be effective. Default: 13.
        /// </summary>
        /// <value>Minimum age of a child, at which portrait comparison result will be effective. Default: 13.</value>
        [DataMember(Name="childAgeThreshold", EmitDefaultValue=false)]
        public int ChildAgeThreshold { get; set; }

        /// <summary>
        /// Estimated duration of validity for a child&#39;s passport, years. Default: 5.
        /// </summary>
        /// <value>Estimated duration of validity for a child&#39;s passport, years. Default: 5.</value>
        [DataMember(Name="childDocValidityYears", EmitDefaultValue=false)]
        public int ChildDocValidityYears { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FaceApi {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  ServiceTimeout: ").Append(ServiceTimeout).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  ProxyUserpwd: ").Append(ProxyUserpwd).Append("\n");
            sb.Append("  ProxyType: ").Append(ProxyType).Append("\n");
            sb.Append("  ChildAgeThreshold: ").Append(ChildAgeThreshold).Append("\n");
            sb.Append("  ChildDocValidityYears: ").Append(ChildDocValidityYears).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaceApi);
        }

        /// <summary>
        /// Returns true if FaceApi instances are equal
        /// </summary>
        /// <param name="input">Instance of FaceApi to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaceApi input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Search == input.Search ||
                    (this.Search != null &&
                    this.Search.Equals(input.Search))
                ) && 
                (
                    this.Threshold == input.Threshold ||
                    (this.Threshold != null &&
                    this.Threshold.Equals(input.Threshold))
                ) && 
                (
                    this.ServiceTimeout == input.ServiceTimeout ||
                    (this.ServiceTimeout != null &&
                    this.ServiceTimeout.Equals(input.ServiceTimeout))
                ) && 
                (
                    this.Proxy == input.Proxy ||
                    (this.Proxy != null &&
                    this.Proxy.Equals(input.Proxy))
                ) && 
                (
                    this.ProxyUserpwd == input.ProxyUserpwd ||
                    (this.ProxyUserpwd != null &&
                    this.ProxyUserpwd.Equals(input.ProxyUserpwd))
                ) && 
                (
                    this.ProxyType == input.ProxyType ||
                    (this.ProxyType != null &&
                    this.ProxyType.Equals(input.ProxyType))
                ) && 
                (
                    this.ChildAgeThreshold == input.ChildAgeThreshold ||
                    (this.ChildAgeThreshold != null &&
                    this.ChildAgeThreshold.Equals(input.ChildAgeThreshold))
                ) && 
                (
                    this.ChildDocValidityYears == input.ChildDocValidityYears ||
                    (this.ChildDocValidityYears != null &&
                    this.ChildDocValidityYears.Equals(input.ChildDocValidityYears))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Search != null)
                    hashCode = hashCode * 59 + this.Search.GetHashCode();
                if (this.Threshold != null)
                    hashCode = hashCode * 59 + this.Threshold.GetHashCode();
                if (this.ServiceTimeout != null)
                    hashCode = hashCode * 59 + this.ServiceTimeout.GetHashCode();
                if (this.Proxy != null)
                    hashCode = hashCode * 59 + this.Proxy.GetHashCode();
                if (this.ProxyUserpwd != null)
                    hashCode = hashCode * 59 + this.ProxyUserpwd.GetHashCode();
                if (this.ProxyType != null)
                    hashCode = hashCode * 59 + this.ProxyType.GetHashCode();
                if (this.ChildAgeThreshold != null)
                    hashCode = hashCode * 59 + this.ChildAgeThreshold.GetHashCode();
                if (this.ChildDocValidityYears != null)
                    hashCode = hashCode * 59 + this.ChildDocValidityYears.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
