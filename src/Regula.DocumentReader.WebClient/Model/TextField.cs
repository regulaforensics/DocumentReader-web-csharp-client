// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TextField
    /// </summary>
    public partial class TextField : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextField" /> class.
        /// </summary>
        /// <param name="fieldType">fieldType</param>
        /// <param name="fieldName">Field name. Only use to search values for fields with fieldType&#x3D;50(other). In general, use fieldType for lookup.</param>
        /// <param name="lcid">lcid</param>
        /// <param name="status">status</param>
        /// <param name="validityStatus">validityStatus</param>
        /// <param name="comparisonStatus">comparisonStatus</param>
        /// <param name="value">The most confidence value, selected from valueList</param>
        /// <param name="valueList">valueList</param>
        /// <param name="validityList">Validity of all field values for given source. If there are two values on different pages for one field-source pair, then validity also will include logical match checking. If such values do not match, validity will return error.</param>
        /// <param name="comparisonList">comparisonList</param>
        /// <param name="lcidName">LCID name</param>
        [JsonConstructor]
        public TextField(TextFieldType fieldType, string fieldName, LCID lcid, CheckResult status, CheckResult validityStatus, CheckResult comparisonStatus, string value, List<TextFieldValue> valueList, List<SourceValidity> validityList, List<CrossSourceValueComparison> comparisonList, Option<string?> lcidName = default)
        {
            FieldType = fieldType;
            FieldName = fieldName;
            Lcid = lcid;
            Status = status;
            ValidityStatus = validityStatus;
            ComparisonStatus = comparisonStatus;
            Value = value;
            ValueList = valueList;
            ValidityList = validityList;
            ComparisonList = comparisonList;
            LcidNameOption = lcidName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [JsonPropertyName("fieldType")]
        public TextFieldType FieldType { get; set; }

        /// <summary>
        /// Gets or Sets Lcid
        /// </summary>
        [JsonPropertyName("lcid")]
        public LCID Lcid { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public CheckResult Status { get; set; }

        /// <summary>
        /// Gets or Sets ValidityStatus
        /// </summary>
        [JsonPropertyName("validityStatus")]
        public CheckResult ValidityStatus { get; set; }

        /// <summary>
        /// Gets or Sets ComparisonStatus
        /// </summary>
        [JsonPropertyName("comparisonStatus")]
        public CheckResult ComparisonStatus { get; set; }

        /// <summary>
        /// Field name. Only use to search values for fields with fieldType&#x3D;50(other). In general, use fieldType for lookup.
        /// </summary>
        /// <value>Field name. Only use to search values for fields with fieldType&#x3D;50(other). In general, use fieldType for lookup.</value>
        [JsonPropertyName("fieldName")]
        public string FieldName { get; set; }

        /// <summary>
        /// The most confidence value, selected from valueList
        /// </summary>
        /// <value>The most confidence value, selected from valueList</value>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets ValueList
        /// </summary>
        [JsonPropertyName("valueList")]
        public List<TextFieldValue> ValueList { get; set; }

        /// <summary>
        /// Validity of all field values for given source. If there are two values on different pages for one field-source pair, then validity also will include logical match checking. If such values do not match, validity will return error.
        /// </summary>
        /// <value>Validity of all field values for given source. If there are two values on different pages for one field-source pair, then validity also will include logical match checking. If such values do not match, validity will return error.</value>
        [JsonPropertyName("validityList")]
        public List<SourceValidity> ValidityList { get; set; }

        /// <summary>
        /// Gets or Sets ComparisonList
        /// </summary>
        [JsonPropertyName("comparisonList")]
        public List<CrossSourceValueComparison> ComparisonList { get; set; }

        /// <summary>
        /// Used to track the state of LcidName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LcidNameOption { get; private set; }

        /// <summary>
        /// LCID name
        /// </summary>
        /// <value>LCID name</value>
        [JsonPropertyName("lcidName")]
        public string? LcidName { get { return this.LcidNameOption; } set { this.LcidNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextField {\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  Lcid: ").Append(Lcid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ValidityStatus: ").Append(ValidityStatus).Append("\n");
            sb.Append("  ComparisonStatus: ").Append(ComparisonStatus).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueList: ").Append(ValueList).Append("\n");
            sb.Append("  ValidityList: ").Append(ValidityList).Append("\n");
            sb.Append("  ComparisonList: ").Append(ComparisonList).Append("\n");
            sb.Append("  LcidName: ").Append(LcidName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TextField" />
    /// </summary>
    public class TextFieldJsonConverter : JsonConverter<TextField>
    {
        /// <summary>
        /// Deserializes json to <see cref="TextField" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TextField Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TextFieldType?> fieldType = default;
            Option<string?> fieldName = default;
            Option<LCID?> lcid = default;
            Option<CheckResult?> status = default;
            Option<CheckResult?> validityStatus = default;
            Option<CheckResult?> comparisonStatus = default;
            Option<string?> value = default;
            Option<List<TextFieldValue>?> valueList = default;
            Option<List<SourceValidity>?> validityList = default;
            Option<List<CrossSourceValueComparison>?> comparisonList = default;
            Option<string?> lcidName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fieldType":
                            string? fieldTypeRawValue = utf8JsonReader.GetString();
                            if (fieldTypeRawValue != null)
                                fieldType = new Option<TextFieldType?>(TextFieldTypeValueConverter.FromStringOrDefault(fieldTypeRawValue));
                            break;
                        case "fieldName":
                            fieldName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lcid":
                            string? lcidRawValue = utf8JsonReader.GetString();
                            if (lcidRawValue != null)
                                lcid = new Option<LCID?>(LCIDValueConverter.FromStringOrDefault(lcidRawValue));
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "validityStatus":
                            string? validityStatusRawValue = utf8JsonReader.GetString();
                            if (validityStatusRawValue != null)
                                validityStatus = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(validityStatusRawValue));
                            break;
                        case "comparisonStatus":
                            string? comparisonStatusRawValue = utf8JsonReader.GetString();
                            if (comparisonStatusRawValue != null)
                                comparisonStatus = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(comparisonStatusRawValue));
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "valueList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                valueList = new Option<List<TextFieldValue>?>(JsonSerializer.Deserialize<List<TextFieldValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "validityList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validityList = new Option<List<SourceValidity>?>(JsonSerializer.Deserialize<List<SourceValidity>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "comparisonList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                comparisonList = new Option<List<CrossSourceValueComparison>?>(JsonSerializer.Deserialize<List<CrossSourceValueComparison>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "lcidName":
                            lcidName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fieldType.IsSet)
                throw new ArgumentException("Property is required for class TextField.", nameof(fieldType));

            if (!fieldName.IsSet)
                throw new ArgumentException("Property is required for class TextField.", nameof(fieldName));

            if (!lcid.IsSet)
                throw new ArgumentException("Property is required for class TextField.", nameof(lcid));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class TextField.", nameof(status));

            if (!validityStatus.IsSet)
                throw new ArgumentException("Property is required for class TextField.", nameof(validityStatus));

            if (!comparisonStatus.IsSet)
                throw new ArgumentException("Property is required for class TextField.", nameof(comparisonStatus));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class TextField.", nameof(value));

            if (!valueList.IsSet)
                throw new ArgumentException("Property is required for class TextField.", nameof(valueList));

            if (!validityList.IsSet)
                throw new ArgumentException("Property is required for class TextField.", nameof(validityList));

            if (!comparisonList.IsSet)
                throw new ArgumentException("Property is required for class TextField.", nameof(comparisonList));

            if (fieldType.IsSet && fieldType.Value == null)
                throw new ArgumentNullException(nameof(fieldType), "Property is not nullable for class TextField.");

            if (fieldName.IsSet && fieldName.Value == null)
                throw new ArgumentNullException(nameof(fieldName), "Property is not nullable for class TextField.");

            if (lcid.IsSet && lcid.Value == null)
                throw new ArgumentNullException(nameof(lcid), "Property is not nullable for class TextField.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class TextField.");

            if (validityStatus.IsSet && validityStatus.Value == null)
                throw new ArgumentNullException(nameof(validityStatus), "Property is not nullable for class TextField.");

            if (comparisonStatus.IsSet && comparisonStatus.Value == null)
                throw new ArgumentNullException(nameof(comparisonStatus), "Property is not nullable for class TextField.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class TextField.");

            if (valueList.IsSet && valueList.Value == null)
                throw new ArgumentNullException(nameof(valueList), "Property is not nullable for class TextField.");

            if (validityList.IsSet && validityList.Value == null)
                throw new ArgumentNullException(nameof(validityList), "Property is not nullable for class TextField.");

            if (comparisonList.IsSet && comparisonList.Value == null)
                throw new ArgumentNullException(nameof(comparisonList), "Property is not nullable for class TextField.");

            if (lcidName.IsSet && lcidName.Value == null)
                throw new ArgumentNullException(nameof(lcidName), "Property is not nullable for class TextField.");

            return new TextField(fieldType.Value!.Value!, fieldName.Value!, lcid.Value!.Value!, status.Value!.Value!, validityStatus.Value!.Value!, comparisonStatus.Value!.Value!, value.Value!, valueList.Value!, validityList.Value!, comparisonList.Value!, lcidName);
        }

        /// <summary>
        /// Serializes a <see cref="TextField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="textField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TextField textField, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, textField, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TextField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="textField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TextField textField, JsonSerializerOptions jsonSerializerOptions)
        {
            if (textField.FieldName == null)
                throw new ArgumentNullException(nameof(textField.FieldName), "Property is required for class TextField.");

            if (textField.Value == null)
                throw new ArgumentNullException(nameof(textField.Value), "Property is required for class TextField.");

            if (textField.ValueList == null)
                throw new ArgumentNullException(nameof(textField.ValueList), "Property is required for class TextField.");

            if (textField.ValidityList == null)
                throw new ArgumentNullException(nameof(textField.ValidityList), "Property is required for class TextField.");

            if (textField.ComparisonList == null)
                throw new ArgumentNullException(nameof(textField.ComparisonList), "Property is required for class TextField.");

            if (textField.LcidNameOption.IsSet && textField.LcidName == null)
                throw new ArgumentNullException(nameof(textField.LcidName), "Property is required for class TextField.");

            var fieldTypeRawValue = TextFieldTypeValueConverter.ToJsonValue(textField.FieldType);
            writer.WriteNumber("fieldType", fieldTypeRawValue);

            writer.WriteString("fieldName", textField.FieldName);

            var lcidRawValue = LCIDValueConverter.ToJsonValue(textField.Lcid);
            writer.WriteNumber("lcid", lcidRawValue);

            var statusRawValue = CheckResultValueConverter.ToJsonValue(textField.Status);
            writer.WriteNumber("status", statusRawValue);

            var validityStatusRawValue = CheckResultValueConverter.ToJsonValue(textField.ValidityStatus);
            writer.WriteNumber("validityStatus", validityStatusRawValue);

            var comparisonStatusRawValue = CheckResultValueConverter.ToJsonValue(textField.ComparisonStatus);
            writer.WriteNumber("comparisonStatus", comparisonStatusRawValue);

            writer.WriteString("value", textField.Value);

            writer.WritePropertyName("valueList");
            JsonSerializer.Serialize(writer, textField.ValueList, jsonSerializerOptions);
            writer.WritePropertyName("validityList");
            JsonSerializer.Serialize(writer, textField.ValidityList, jsonSerializerOptions);
            writer.WritePropertyName("comparisonList");
            JsonSerializer.Serialize(writer, textField.ComparisonList, jsonSerializerOptions);
            if (textField.LcidNameOption.IsSet)
                writer.WriteString("lcidName", textField.LcidName);
        }
    }
}
