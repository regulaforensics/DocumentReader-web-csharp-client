/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.7.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TextField
    /// </summary>
    [DataContract]
    public partial class TextField :  IEquatable<TextField>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name="fieldType", EmitDefaultValue=true)]
        public TextFieldType FieldType { get; set; }
        /// <summary>
        /// Gets or Sets Lcid
        /// </summary>
        [DataMember(Name="lcid", EmitDefaultValue=false)]
        public LCID? Lcid { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public CheckResult Status { get; set; }
        /// <summary>
        /// Gets or Sets ValidityStatus
        /// </summary>
        [DataMember(Name="validityStatus", EmitDefaultValue=true)]
        public CheckResult ValidityStatus { get; set; }
        /// <summary>
        /// Gets or Sets ComparisonStatus
        /// </summary>
        [DataMember(Name="comparisonStatus", EmitDefaultValue=true)]
        public CheckResult ComparisonStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextField" /> class.
        /// </summary>
        /// <param name="fieldType">fieldType (required).</param>
        /// <param name="fieldName">Field name. Only use to search values for fields with fieldType&#x3D;50(other). In general, use fieldType for lookup. (required).</param>
        /// <param name="lcid">lcid.</param>
        /// <param name="status">status (required).</param>
        /// <param name="validityStatus">validityStatus (required).</param>
        /// <param name="comparisonStatus">comparisonStatus (required).</param>
        /// <param name="value">The most confidence value, selected from valueList (required).</param>
        /// <param name="valueList">valueList (required).</param>
        /// <param name="validityList">Validity of all field values for given source. If there are two values on different pages for one field-source pair, then validity also will include logical match checking. If such values do not match, validity will return error. (required).</param>
        /// <param name="comparisonList">comparisonList (required).</param>
        public TextField(TextFieldType fieldType = default(TextFieldType), string fieldName = default(string), LCID? lcid = default(LCID?), CheckResult status = default(CheckResult), CheckResult validityStatus = default(CheckResult), CheckResult comparisonStatus = default(CheckResult), string value = default(string), List<TextFieldValue> valueList = default(List<TextFieldValue>), List<SourceValidity> validityList = default(List<SourceValidity>), List<CrossSourceValueComparison> comparisonList = default(List<CrossSourceValueComparison>))
        {
            // to ensure "fieldType" is required (not null)
            if (fieldType == null)
            {
                throw new InvalidDataException("fieldType is a required property for TextField and cannot be null");
            }
            else
            {
                this.FieldType = fieldType;
            }
            
            // to ensure "fieldName" is required (not null)
            if (fieldName == null)
            {
                throw new InvalidDataException("fieldName is a required property for TextField and cannot be null");
            }
            else
            {
                this.FieldName = fieldName;
            }
            
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for TextField and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            
            // to ensure "validityStatus" is required (not null)
            if (validityStatus == null)
            {
                throw new InvalidDataException("validityStatus is a required property for TextField and cannot be null");
            }
            else
            {
                this.ValidityStatus = validityStatus;
            }
            
            // to ensure "comparisonStatus" is required (not null)
            if (comparisonStatus == null)
            {
                throw new InvalidDataException("comparisonStatus is a required property for TextField and cannot be null");
            }
            else
            {
                this.ComparisonStatus = comparisonStatus;
            }
            
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for TextField and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            
            // to ensure "valueList" is required (not null)
            if (valueList == null)
            {
                throw new InvalidDataException("valueList is a required property for TextField and cannot be null");
            }
            else
            {
                this.ValueList = valueList;
            }
            
            // to ensure "validityList" is required (not null)
            if (validityList == null)
            {
                throw new InvalidDataException("validityList is a required property for TextField and cannot be null");
            }
            else
            {
                this.ValidityList = validityList;
            }
            
            // to ensure "comparisonList" is required (not null)
            if (comparisonList == null)
            {
                throw new InvalidDataException("comparisonList is a required property for TextField and cannot be null");
            }
            else
            {
                this.ComparisonList = comparisonList;
            }
            
            this.Lcid = lcid;
        }
        

        /// <summary>
        /// Field name. Only use to search values for fields with fieldType&#x3D;50(other). In general, use fieldType for lookup.
        /// </summary>
        /// <value>Field name. Only use to search values for fields with fieldType&#x3D;50(other). In general, use fieldType for lookup.</value>
        [DataMember(Name="fieldName", EmitDefaultValue=true)]
        public string FieldName { get; set; }





        /// <summary>
        /// The most confidence value, selected from valueList
        /// </summary>
        /// <value>The most confidence value, selected from valueList</value>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets ValueList
        /// </summary>
        [DataMember(Name="valueList", EmitDefaultValue=true)]
        public List<TextFieldValue> ValueList { get; set; }

        /// <summary>
        /// Validity of all field values for given source. If there are two values on different pages for one field-source pair, then validity also will include logical match checking. If such values do not match, validity will return error.
        /// </summary>
        /// <value>Validity of all field values for given source. If there are two values on different pages for one field-source pair, then validity also will include logical match checking. If such values do not match, validity will return error.</value>
        [DataMember(Name="validityList", EmitDefaultValue=true)]
        public List<SourceValidity> ValidityList { get; set; }

        /// <summary>
        /// Gets or Sets ComparisonList
        /// </summary>
        [DataMember(Name="comparisonList", EmitDefaultValue=true)]
        public List<CrossSourceValueComparison> ComparisonList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextField {\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  Lcid: ").Append(Lcid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ValidityStatus: ").Append(ValidityStatus).Append("\n");
            sb.Append("  ComparisonStatus: ").Append(ComparisonStatus).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueList: ").Append(ValueList).Append("\n");
            sb.Append("  ValidityList: ").Append(ValidityList).Append("\n");
            sb.Append("  ComparisonList: ").Append(ComparisonList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextField);
        }

        /// <summary>
        /// Returns true if TextField instances are equal
        /// </summary>
        /// <param name="input">Instance of TextField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.Lcid == input.Lcid ||
                    (this.Lcid != null &&
                    this.Lcid.Equals(input.Lcid))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ValidityStatus == input.ValidityStatus ||
                    (this.ValidityStatus != null &&
                    this.ValidityStatus.Equals(input.ValidityStatus))
                ) && 
                (
                    this.ComparisonStatus == input.ComparisonStatus ||
                    (this.ComparisonStatus != null &&
                    this.ComparisonStatus.Equals(input.ComparisonStatus))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ValueList == input.ValueList ||
                    this.ValueList != null &&
                    input.ValueList != null &&
                    this.ValueList.SequenceEqual(input.ValueList)
                ) && 
                (
                    this.ValidityList == input.ValidityList ||
                    this.ValidityList != null &&
                    input.ValidityList != null &&
                    this.ValidityList.SequenceEqual(input.ValidityList)
                ) && 
                (
                    this.ComparisonList == input.ComparisonList ||
                    this.ComparisonList != null &&
                    input.ComparisonList != null &&
                    this.ComparisonList.SequenceEqual(input.ComparisonList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldType != null)
                    hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.Lcid != null)
                    hashCode = hashCode * 59 + this.Lcid.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ValidityStatus != null)
                    hashCode = hashCode * 59 + this.ValidityStatus.GetHashCode();
                if (this.ComparisonStatus != null)
                    hashCode = hashCode * 59 + this.ComparisonStatus.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ValueList != null)
                    hashCode = hashCode * 59 + this.ValueList.GetHashCode();
                if (this.ValidityList != null)
                    hashCode = hashCode * 59 + this.ValidityList.GetHashCode();
                if (this.ComparisonList != null)
                    hashCode = hashCode * 59 + this.ComparisonList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
