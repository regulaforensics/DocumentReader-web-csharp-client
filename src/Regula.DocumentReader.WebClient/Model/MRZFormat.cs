// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Defines MRZFormat
    /// </summary>
    public enum MRZFormat
    {
        /// <summary>
        /// Enum IDL for value: 1x30
        /// </summary>
        IDL = 1,

        /// <summary>
        /// Enum ID1 for value: 3x30
        /// </summary>
        ID1 = 2,

        /// <summary>
        /// Enum ID2 for value: 2x36
        /// </summary>
        ID2 = 3,

        /// <summary>
        /// Enum ID3 for value: 2x44
        /// </summary>
        ID3 = 4,

        /// <summary>
        /// Enum CAN for value: 1x6
        /// </summary>
        CAN = 5,

        /// <summary>
        /// Enum ID1_2_30 for value: 2x30
        /// </summary>
        ID1_2_30 = 6
    }

    /// <summary>
    /// Converts <see cref="MRZFormat"/> to and from the JSON value
    /// </summary>
    public static class MRZFormatValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="MRZFormat"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MRZFormat FromString(string value)
        {
            if (value.Equals("1x30"))
                return MRZFormat.IDL;

            if (value.Equals("3x30"))
                return MRZFormat.ID1;

            if (value.Equals("2x36"))
                return MRZFormat.ID2;

            if (value.Equals("2x44"))
                return MRZFormat.ID3;

            if (value.Equals("1x6"))
                return MRZFormat.CAN;

            if (value.Equals("2x30"))
                return MRZFormat.ID1_2_30;

            throw new NotImplementedException($"Could not convert value to type MRZFormat: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="MRZFormat"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MRZFormat? FromStringOrDefault(string value)
        {
            if (value.Equals("1x30"))
                return MRZFormat.IDL;

            if (value.Equals("3x30"))
                return MRZFormat.ID1;

            if (value.Equals("2x36"))
                return MRZFormat.ID2;

            if (value.Equals("2x44"))
                return MRZFormat.ID3;

            if (value.Equals("1x6"))
                return MRZFormat.CAN;

            if (value.Equals("2x30"))
                return MRZFormat.ID1_2_30;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MRZFormat"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(MRZFormat value)
        {
            if (value == MRZFormat.IDL)
                return "1x30";

            if (value == MRZFormat.ID1)
                return "3x30";

            if (value == MRZFormat.ID2)
                return "2x36";

            if (value == MRZFormat.ID3)
                return "2x44";

            if (value == MRZFormat.CAN)
                return "1x6";

            if (value == MRZFormat.ID1_2_30)
                return "2x30";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MRZFormat"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class MRZFormatJsonConverter : JsonConverter<MRZFormat>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MRZFormat Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            MRZFormat? result = rawValue == null
                ? null
                : MRZFormatValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the MRZFormat to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mRZFormat"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MRZFormat mRZFormat, JsonSerializerOptions options)
        {
            writer.WriteStringValue(mRZFormat.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MRZFormat"/>
    /// </summary>
    public class MRZFormatNullableJsonConverter : JsonConverter<MRZFormat?>
    {
        /// <summary>
        /// Returns a MRZFormat from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MRZFormat? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            MRZFormat? result = rawValue == null
                ? null
                : MRZFormatValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mRZFormat"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MRZFormat? mRZFormat, JsonSerializerOptions options)
        {
            writer.WriteStringValue(mRZFormat?.ToString() ?? "null");
        }
    }
}
