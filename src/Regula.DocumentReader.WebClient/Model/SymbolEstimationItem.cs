/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// SymbolEstimationItem
    /// </summary>
    [DataContract(Name = "SymbolEstimationItem")]
    public partial class SymbolEstimationItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolEstimationItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SymbolEstimationItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolEstimationItem" /> class.
        /// </summary>
        /// <param name="aLIGNMENTNEARESTSYMBOLS">aLIGNMENTNEARESTSYMBOLS (required).</param>
        /// <param name="cONTRASTPRINT">cONTRASTPRINT (required).</param>
        /// <param name="cONTRASTSYMBOL">cONTRASTSYMBOL (required).</param>
        /// <param name="charSymbol">charSymbol (required).</param>
        /// <param name="eDGE">eDGE (required).</param>
        /// <param name="eMPTINESS">eMPTINESS (required).</param>
        /// <param name="sTAIN">sTAIN (required).</param>
        /// <param name="sYMBOLSINTERVAL">sYMBOLSINTERVAL (required).</param>
        /// <param name="sYMBOLPARAM">sYMBOLPARAM (required).</param>
        /// <param name="sYMBOLSIZE">sYMBOLSIZE (required).</param>
        /// <param name="sizeErrorAlignWithNext">sizeErrorAlignWithNext (required).</param>
        /// <param name="sizeErrorAlignWithPrev">sizeErrorAlignWithPrev (required).</param>
        /// <param name="sizeErrorIntervWithNext">sizeErrorIntervWithNext (required).</param>
        /// <param name="sizeErrorIntervWithPrev">sizeErrorIntervWithPrev (required).</param>
        /// <param name="sizeErrorSymbolHeight">sizeErrorSymbolHeight (required).</param>
        /// <param name="sizeErrorSymbolWidth">sizeErrorSymbolWidth (required).</param>
        /// <param name="symbolBounds">symbolBounds (required).</param>
        public SymbolEstimationItem(int aLIGNMENTNEARESTSYMBOLS = default(int), int cONTRASTPRINT = default(int), int cONTRASTSYMBOL = default(int), int charSymbol = default(int), int eDGE = default(int), int eMPTINESS = default(int), int sTAIN = default(int), int sYMBOLSINTERVAL = default(int), int sYMBOLPARAM = default(int), int sYMBOLSIZE = default(int), decimal sizeErrorAlignWithNext = default(decimal), decimal sizeErrorAlignWithPrev = default(decimal), decimal sizeErrorIntervWithNext = default(decimal), decimal sizeErrorIntervWithPrev = default(decimal), decimal sizeErrorSymbolHeight = default(decimal), decimal sizeErrorSymbolWidth = default(decimal), RectangleCoordinates symbolBounds = default(RectangleCoordinates))
        {
            this.ALIGNMENT_NEAREST_SYMBOLS = aLIGNMENTNEARESTSYMBOLS;
            this.CONTRAST_PRINT = cONTRASTPRINT;
            this.CONTRAST_SYMBOL = cONTRASTSYMBOL;
            this.CharSymbol = charSymbol;
            this.EDGE = eDGE;
            this.EMPTINESS = eMPTINESS;
            this.STAIN = sTAIN;
            this.SYMBOLS_INTERVAL = sYMBOLSINTERVAL;
            this.SYMBOL_PARAM = sYMBOLPARAM;
            this.SYMBOL_SIZE = sYMBOLSIZE;
            this.SizeErrorAlignWithNext = sizeErrorAlignWithNext;
            this.SizeErrorAlignWithPrev = sizeErrorAlignWithPrev;
            this.SizeErrorIntervWithNext = sizeErrorIntervWithNext;
            this.SizeErrorIntervWithPrev = sizeErrorIntervWithPrev;
            this.SizeErrorSymbolHeight = sizeErrorSymbolHeight;
            this.SizeErrorSymbolWidth = sizeErrorSymbolWidth;
            // to ensure "symbolBounds" is required (not null)
            if (symbolBounds == null)
            {
                throw new ArgumentNullException("symbolBounds is a required property for SymbolEstimationItem and cannot be null");
            }
            this.SymbolBounds = symbolBounds;
        }

        /// <summary>
        /// Gets or Sets ALIGNMENT_NEAREST_SYMBOLS
        /// </summary>
        [DataMember(Name = "ALIGNMENT_NEAREST_SYMBOLS", IsRequired = true, EmitDefaultValue = true)]
        public int ALIGNMENT_NEAREST_SYMBOLS { get; set; }

        /// <summary>
        /// Gets or Sets CONTRAST_PRINT
        /// </summary>
        [DataMember(Name = "CONTRAST_PRINT", IsRequired = true, EmitDefaultValue = true)]
        public int CONTRAST_PRINT { get; set; }

        /// <summary>
        /// Gets or Sets CONTRAST_SYMBOL
        /// </summary>
        [DataMember(Name = "CONTRAST_SYMBOL", IsRequired = true, EmitDefaultValue = true)]
        public int CONTRAST_SYMBOL { get; set; }

        /// <summary>
        /// Gets or Sets CharSymbol
        /// </summary>
        [DataMember(Name = "CharSymbol", IsRequired = true, EmitDefaultValue = true)]
        public int CharSymbol { get; set; }

        /// <summary>
        /// Gets or Sets EDGE
        /// </summary>
        [DataMember(Name = "EDGE", IsRequired = true, EmitDefaultValue = true)]
        public int EDGE { get; set; }

        /// <summary>
        /// Gets or Sets EMPTINESS
        /// </summary>
        [DataMember(Name = "EMPTINESS", IsRequired = true, EmitDefaultValue = true)]
        public int EMPTINESS { get; set; }

        /// <summary>
        /// Gets or Sets STAIN
        /// </summary>
        [DataMember(Name = "STAIN", IsRequired = true, EmitDefaultValue = true)]
        public int STAIN { get; set; }

        /// <summary>
        /// Gets or Sets SYMBOLS_INTERVAL
        /// </summary>
        [DataMember(Name = "SYMBOLS_INTERVAL", IsRequired = true, EmitDefaultValue = true)]
        public int SYMBOLS_INTERVAL { get; set; }

        /// <summary>
        /// Gets or Sets SYMBOL_PARAM
        /// </summary>
        [DataMember(Name = "SYMBOL_PARAM", IsRequired = true, EmitDefaultValue = true)]
        public int SYMBOL_PARAM { get; set; }

        /// <summary>
        /// Gets or Sets SYMBOL_SIZE
        /// </summary>
        [DataMember(Name = "SYMBOL_SIZE", IsRequired = true, EmitDefaultValue = true)]
        public int SYMBOL_SIZE { get; set; }

        /// <summary>
        /// Gets or Sets SizeErrorAlignWithNext
        /// </summary>
        [DataMember(Name = "SizeErrorAlignWithNext", IsRequired = true, EmitDefaultValue = true)]
        public decimal SizeErrorAlignWithNext { get; set; }

        /// <summary>
        /// Gets or Sets SizeErrorAlignWithPrev
        /// </summary>
        [DataMember(Name = "SizeErrorAlignWithPrev", IsRequired = true, EmitDefaultValue = true)]
        public decimal SizeErrorAlignWithPrev { get; set; }

        /// <summary>
        /// Gets or Sets SizeErrorIntervWithNext
        /// </summary>
        [DataMember(Name = "SizeErrorIntervWithNext", IsRequired = true, EmitDefaultValue = true)]
        public decimal SizeErrorIntervWithNext { get; set; }

        /// <summary>
        /// Gets or Sets SizeErrorIntervWithPrev
        /// </summary>
        [DataMember(Name = "SizeErrorIntervWithPrev", IsRequired = true, EmitDefaultValue = true)]
        public decimal SizeErrorIntervWithPrev { get; set; }

        /// <summary>
        /// Gets or Sets SizeErrorSymbolHeight
        /// </summary>
        [DataMember(Name = "SizeErrorSymbolHeight", IsRequired = true, EmitDefaultValue = true)]
        public decimal SizeErrorSymbolHeight { get; set; }

        /// <summary>
        /// Gets or Sets SizeErrorSymbolWidth
        /// </summary>
        [DataMember(Name = "SizeErrorSymbolWidth", IsRequired = true, EmitDefaultValue = true)]
        public decimal SizeErrorSymbolWidth { get; set; }

        /// <summary>
        /// Gets or Sets SymbolBounds
        /// </summary>
        [DataMember(Name = "SymbolBounds", IsRequired = true, EmitDefaultValue = true)]
        public RectangleCoordinates SymbolBounds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SymbolEstimationItem {\n");
            sb.Append("  ALIGNMENT_NEAREST_SYMBOLS: ").Append(ALIGNMENT_NEAREST_SYMBOLS).Append("\n");
            sb.Append("  CONTRAST_PRINT: ").Append(CONTRAST_PRINT).Append("\n");
            sb.Append("  CONTRAST_SYMBOL: ").Append(CONTRAST_SYMBOL).Append("\n");
            sb.Append("  CharSymbol: ").Append(CharSymbol).Append("\n");
            sb.Append("  EDGE: ").Append(EDGE).Append("\n");
            sb.Append("  EMPTINESS: ").Append(EMPTINESS).Append("\n");
            sb.Append("  STAIN: ").Append(STAIN).Append("\n");
            sb.Append("  SYMBOLS_INTERVAL: ").Append(SYMBOLS_INTERVAL).Append("\n");
            sb.Append("  SYMBOL_PARAM: ").Append(SYMBOL_PARAM).Append("\n");
            sb.Append("  SYMBOL_SIZE: ").Append(SYMBOL_SIZE).Append("\n");
            sb.Append("  SizeErrorAlignWithNext: ").Append(SizeErrorAlignWithNext).Append("\n");
            sb.Append("  SizeErrorAlignWithPrev: ").Append(SizeErrorAlignWithPrev).Append("\n");
            sb.Append("  SizeErrorIntervWithNext: ").Append(SizeErrorIntervWithNext).Append("\n");
            sb.Append("  SizeErrorIntervWithPrev: ").Append(SizeErrorIntervWithPrev).Append("\n");
            sb.Append("  SizeErrorSymbolHeight: ").Append(SizeErrorSymbolHeight).Append("\n");
            sb.Append("  SizeErrorSymbolWidth: ").Append(SizeErrorSymbolWidth).Append("\n");
            sb.Append("  SymbolBounds: ").Append(SymbolBounds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
