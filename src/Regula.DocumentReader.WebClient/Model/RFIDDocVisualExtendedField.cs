// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// RFIDDocVisualExtendedField
    /// </summary>
    public partial class RFIDDocVisualExtendedField : VisualExtendedFieldItem, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RFIDDocVisualExtendedField" /> class.
        /// </summary>
        /// <param name="fieldType">fieldType</param>
        /// <param name="wFieldType">wFieldType</param>
        /// <param name="fieldName">Field symbolic name (null-terminated string)</param>
        /// <param name="stringsCount">Number of StringsResult array elements</param>
        /// <param name="stringsResult">Array of recognizing probabilities for a each line of text field. Only for Result.VISUAL_TEXT and Result.MRZ_TEXT results.</param>
        /// <param name="bufLength">Buf_Text text string length</param>
        /// <param name="bufText">Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;</param>
        /// <param name="originDG">originDG</param>
        /// <param name="originTagEntry">Record index of the text field source in the data group</param>
        /// <param name="fieldMask">fieldMask</param>
        /// <param name="validity">validity</param>
        /// <param name="inComparison">inComparison</param>
        /// <param name="wLCID">wLCID</param>
        /// <param name="reserved2">reserved2</param>
        /// <param name="reserved3">reserved3</param>
        /// <param name="originDGTag">originDGTag</param>
        /// <param name="originEntryView">originEntryView</param>
        [JsonConstructor]
        public RFIDDocVisualExtendedField(int fieldType, TextFieldType wFieldType, string fieldName, decimal stringsCount, List<StringRecognitionResult> stringsResult, decimal bufLength, string bufText, int originDG, decimal originTagEntry, Option<string?> fieldMask = default, Option<int?> validity = default, Option<int?> inComparison = default, Option<int?> wLCID = default, Option<int?> reserved2 = default, Option<int?> reserved3 = default, Option<int?> originDGTag = default, Option<int?> originEntryView = default) : base(fieldType, wFieldType, fieldName, stringsCount, stringsResult, bufLength, bufText, fieldMask, validity, inComparison, wLCID, reserved2, reserved3)
        {
            OriginDG = originDG;
            OriginTagEntry = originTagEntry;
            OriginDGTagOption = originDGTag;
            OriginEntryViewOption = originEntryView;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets OriginDG
        /// </summary>
        [JsonPropertyName("OriginDG")]
        public int OriginDG { get; set; }

        /// <summary>
        /// Record index of the text field source in the data group
        /// </summary>
        /// <value>Record index of the text field source in the data group</value>
        [JsonPropertyName("OriginTagEntry")]
        public decimal OriginTagEntry { get; set; }

        /// <summary>
        /// Used to track the state of OriginDGTag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OriginDGTagOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginDGTag
        /// </summary>
        [JsonPropertyName("OriginDGTag")]
        public int? OriginDGTag { get { return this.OriginDGTagOption; } set { this.OriginDGTagOption = new(value); } }

        /// <summary>
        /// Used to track the state of OriginEntryView
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OriginEntryViewOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginEntryView
        /// </summary>
        [JsonPropertyName("OriginEntryView")]
        public int? OriginEntryView { get { return this.OriginEntryViewOption; } set { this.OriginEntryViewOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RFIDDocVisualExtendedField {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  OriginDG: ").Append(OriginDG).Append("\n");
            sb.Append("  OriginTagEntry: ").Append(OriginTagEntry).Append("\n");
            sb.Append("  OriginDGTag: ").Append(OriginDGTag).Append("\n");
            sb.Append("  OriginEntryView: ").Append(OriginEntryView).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RFIDDocVisualExtendedField" />
    /// </summary>
    public class RFIDDocVisualExtendedFieldJsonConverter : JsonConverter<RFIDDocVisualExtendedField>
    {
        /// <summary>
        /// Deserializes json to <see cref="RFIDDocVisualExtendedField" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RFIDDocVisualExtendedField Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> fieldType = default;
            Option<TextFieldType?> wFieldType = default;
            Option<string?> fieldName = default;
            Option<decimal?> stringsCount = default;
            Option<List<StringRecognitionResult>?> stringsResult = default;
            Option<decimal?> bufLength = default;
            Option<string?> bufText = default;
            Option<int?> originDG = default;
            Option<decimal?> originTagEntry = default;
            Option<string?> fieldMask = default;
            Option<int?> validity = default;
            Option<int?> inComparison = default;
            Option<int?> wLCID = default;
            Option<int?> reserved2 = default;
            Option<int?> reserved3 = default;
            Option<int?> originDGTag = default;
            Option<int?> originEntryView = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "FieldType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "wFieldType":
                            string? wFieldTypeRawValue = utf8JsonReader.GetString();
                            if (wFieldTypeRawValue != null)
                                wFieldType = new Option<TextFieldType?>(TextFieldTypeValueConverter.FromStringOrDefault(wFieldTypeRawValue));
                            break;
                        case "FieldName":
                            fieldName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "StringsCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stringsCount = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "StringsResult":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stringsResult = new Option<List<StringRecognitionResult>?>(JsonSerializer.Deserialize<List<StringRecognitionResult>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Buf_Length":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bufLength = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Buf_Text":
                            bufText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "OriginDG":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originDG = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "OriginTagEntry":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originTagEntry = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "FieldMask":
                            fieldMask = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Validity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validity = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "InComparison":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inComparison = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "wLCID":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                wLCID = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Reserved2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved2 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Reserved3":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved3 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "OriginDGTag":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originDGTag = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "OriginEntryView":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originEntryView = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fieldType.IsSet)
                throw new ArgumentException("Property is required for class RFIDDocVisualExtendedField.", nameof(fieldType));

            if (!wFieldType.IsSet)
                throw new ArgumentException("Property is required for class RFIDDocVisualExtendedField.", nameof(wFieldType));

            if (!fieldName.IsSet)
                throw new ArgumentException("Property is required for class RFIDDocVisualExtendedField.", nameof(fieldName));

            if (!stringsCount.IsSet)
                throw new ArgumentException("Property is required for class RFIDDocVisualExtendedField.", nameof(stringsCount));

            if (!stringsResult.IsSet)
                throw new ArgumentException("Property is required for class RFIDDocVisualExtendedField.", nameof(stringsResult));

            if (!bufLength.IsSet)
                throw new ArgumentException("Property is required for class RFIDDocVisualExtendedField.", nameof(bufLength));

            if (!bufText.IsSet)
                throw new ArgumentException("Property is required for class RFIDDocVisualExtendedField.", nameof(bufText));

            if (!originDG.IsSet)
                throw new ArgumentException("Property is required for class RFIDDocVisualExtendedField.", nameof(originDG));

            if (!originTagEntry.IsSet)
                throw new ArgumentException("Property is required for class RFIDDocVisualExtendedField.", nameof(originTagEntry));

            if (fieldType.IsSet && fieldType.Value == null)
                throw new ArgumentNullException(nameof(fieldType), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (wFieldType.IsSet && wFieldType.Value == null)
                throw new ArgumentNullException(nameof(wFieldType), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (fieldName.IsSet && fieldName.Value == null)
                throw new ArgumentNullException(nameof(fieldName), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (stringsCount.IsSet && stringsCount.Value == null)
                throw new ArgumentNullException(nameof(stringsCount), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (stringsResult.IsSet && stringsResult.Value == null)
                throw new ArgumentNullException(nameof(stringsResult), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (bufLength.IsSet && bufLength.Value == null)
                throw new ArgumentNullException(nameof(bufLength), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (bufText.IsSet && bufText.Value == null)
                throw new ArgumentNullException(nameof(bufText), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (originDG.IsSet && originDG.Value == null)
                throw new ArgumentNullException(nameof(originDG), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (originTagEntry.IsSet && originTagEntry.Value == null)
                throw new ArgumentNullException(nameof(originTagEntry), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (fieldMask.IsSet && fieldMask.Value == null)
                throw new ArgumentNullException(nameof(fieldMask), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (validity.IsSet && validity.Value == null)
                throw new ArgumentNullException(nameof(validity), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (inComparison.IsSet && inComparison.Value == null)
                throw new ArgumentNullException(nameof(inComparison), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (wLCID.IsSet && wLCID.Value == null)
                throw new ArgumentNullException(nameof(wLCID), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (reserved2.IsSet && reserved2.Value == null)
                throw new ArgumentNullException(nameof(reserved2), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (reserved3.IsSet && reserved3.Value == null)
                throw new ArgumentNullException(nameof(reserved3), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (originDGTag.IsSet && originDGTag.Value == null)
                throw new ArgumentNullException(nameof(originDGTag), "Property is not nullable for class RFIDDocVisualExtendedField.");

            if (originEntryView.IsSet && originEntryView.Value == null)
                throw new ArgumentNullException(nameof(originEntryView), "Property is not nullable for class RFIDDocVisualExtendedField.");

            return new RFIDDocVisualExtendedField(fieldType.Value!.Value!, wFieldType.Value!.Value!, fieldName.Value!, stringsCount.Value!.Value!, stringsResult.Value!, bufLength.Value!.Value!, bufText.Value!, originDG.Value!.Value!, originTagEntry.Value!.Value!, fieldMask, validity, inComparison, wLCID, reserved2, reserved3, originDGTag, originEntryView);
        }

        /// <summary>
        /// Serializes a <see cref="RFIDDocVisualExtendedField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rFIDDocVisualExtendedField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RFIDDocVisualExtendedField rFIDDocVisualExtendedField, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rFIDDocVisualExtendedField, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RFIDDocVisualExtendedField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rFIDDocVisualExtendedField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RFIDDocVisualExtendedField rFIDDocVisualExtendedField, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rFIDDocVisualExtendedField.FieldName == null)
                throw new ArgumentNullException(nameof(rFIDDocVisualExtendedField.FieldName), "Property is required for class RFIDDocVisualExtendedField.");

            if (rFIDDocVisualExtendedField.StringsResult == null)
                throw new ArgumentNullException(nameof(rFIDDocVisualExtendedField.StringsResult), "Property is required for class RFIDDocVisualExtendedField.");

            if (rFIDDocVisualExtendedField.BufText == null)
                throw new ArgumentNullException(nameof(rFIDDocVisualExtendedField.BufText), "Property is required for class RFIDDocVisualExtendedField.");

            if (rFIDDocVisualExtendedField.FieldMaskOption.IsSet && rFIDDocVisualExtendedField.FieldMask == null)
                throw new ArgumentNullException(nameof(rFIDDocVisualExtendedField.FieldMask), "Property is required for class RFIDDocVisualExtendedField.");

            writer.WriteNumber("FieldType", rFIDDocVisualExtendedField.FieldType);

            var wFieldTypeRawValue = TextFieldTypeValueConverter.ToJsonValue(rFIDDocVisualExtendedField.WFieldType);
            writer.WriteNumber("wFieldType", wFieldTypeRawValue);

            writer.WriteString("FieldName", rFIDDocVisualExtendedField.FieldName);

            writer.WriteNumber("StringsCount", rFIDDocVisualExtendedField.StringsCount);

            writer.WritePropertyName("StringsResult");
            JsonSerializer.Serialize(writer, rFIDDocVisualExtendedField.StringsResult, jsonSerializerOptions);
            writer.WriteNumber("Buf_Length", rFIDDocVisualExtendedField.BufLength);

            writer.WriteString("Buf_Text", rFIDDocVisualExtendedField.BufText);

            writer.WriteNumber("OriginDG", rFIDDocVisualExtendedField.OriginDG);

            writer.WriteNumber("OriginTagEntry", rFIDDocVisualExtendedField.OriginTagEntry);

            if (rFIDDocVisualExtendedField.FieldMaskOption.IsSet)
                writer.WriteString("FieldMask", rFIDDocVisualExtendedField.FieldMask);

            if (rFIDDocVisualExtendedField.ValidityOption.IsSet)
                writer.WriteNumber("Validity", rFIDDocVisualExtendedField.ValidityOption.Value!.Value);

            if (rFIDDocVisualExtendedField.InComparisonOption.IsSet)
                writer.WriteNumber("InComparison", rFIDDocVisualExtendedField.InComparisonOption.Value!.Value);

            if (rFIDDocVisualExtendedField.WLCIDOption.IsSet)
                writer.WriteNumber("wLCID", rFIDDocVisualExtendedField.WLCIDOption.Value!.Value);

            if (rFIDDocVisualExtendedField.Reserved2Option.IsSet)
                writer.WriteNumber("Reserved2", rFIDDocVisualExtendedField.Reserved2Option.Value!.Value);

            if (rFIDDocVisualExtendedField.Reserved3Option.IsSet)
                writer.WriteNumber("Reserved3", rFIDDocVisualExtendedField.Reserved3Option.Value!.Value);

            if (rFIDDocVisualExtendedField.OriginDGTagOption.IsSet)
                writer.WriteNumber("OriginDGTag", rFIDDocVisualExtendedField.OriginDGTagOption.Value!.Value);

            if (rFIDDocVisualExtendedField.OriginEntryViewOption.IsSet)
                writer.WriteNumber("OriginEntryView", rFIDDocVisualExtendedField.OriginEntryViewOption.Value!.Value);
        }
    }
}
