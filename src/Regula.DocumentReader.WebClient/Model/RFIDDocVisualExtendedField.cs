/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// RFIDDocVisualExtendedField
    /// </summary>
    [DataContract(Name = "RFIDDocVisualExtendedField")]
    public partial class RFIDDocVisualExtendedField : VisualExtendedFieldItem, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RFIDDocVisualExtendedField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RFIDDocVisualExtendedField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RFIDDocVisualExtendedField" /> class.
        /// </summary>
        /// <param name="originDG">originDG (required).</param>
        /// <param name="originDGTag">originDGTag.</param>
        /// <param name="originTagEntry">Record index of the text field source in the data group (required).</param>
        /// <param name="originEntryView">originEntryView.</param>
        /// <param name="fieldType">fieldType (required).</param>
        /// <param name="wFieldType">wFieldType (required).</param>
        /// <param name="fieldName">Field symbolic name (null-terminated string) (required).</param>
        /// <param name="stringsCount">Number of StringsResult array elements (required).</param>
        /// <param name="stringsResult">Array of recognizing probabilities for a each line of text field. Only for Result.VISUAL_TEXT and Result.MRZ_TEXT results. (required).</param>
        /// <param name="bufLength">Buf_Text text string length (required).</param>
        /// <param name="bufText">Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39; (required).</param>
        /// <param name="fieldMask">fieldMask.</param>
        /// <param name="validity">validity.</param>
        /// <param name="inComparison">inComparison.</param>
        /// <param name="wLCID">wLCID.</param>
        /// <param name="reserved2">reserved2.</param>
        /// <param name="reserved3">reserved3.</param>
        public RFIDDocVisualExtendedField(int originDG = default(int), int originDGTag = default(int), decimal originTagEntry = default(decimal), int originEntryView = default(int), int fieldType = default(int), TextFieldType wFieldType = default(TextFieldType), string fieldName = default(string), decimal stringsCount = default(decimal), List<StringRecognitionResult> stringsResult = default(List<StringRecognitionResult>), decimal bufLength = default(decimal), string bufText = default(string), string fieldMask = default(string), int validity = default(int), int inComparison = default(int), int wLCID = default(int), int reserved2 = default(int), int reserved3 = default(int)) : base(fieldType, wFieldType, fieldName, stringsCount, stringsResult, bufLength, bufText, fieldMask, validity, inComparison, wLCID, reserved2, reserved3)
        {
            this.OriginDG = originDG;
            this.OriginTagEntry = originTagEntry;
            this.OriginDGTag = originDGTag;
            this.OriginEntryView = originEntryView;
        }

        /// <summary>
        /// Gets or Sets OriginDG
        /// </summary>
        [DataMember(Name = "OriginDG", IsRequired = true, EmitDefaultValue = true)]
        public int OriginDG { get; set; }

        /// <summary>
        /// Gets or Sets OriginDGTag
        /// </summary>
        [DataMember(Name = "OriginDGTag", EmitDefaultValue = false)]
        public int OriginDGTag { get; set; }

        /// <summary>
        /// Record index of the text field source in the data group
        /// </summary>
        /// <value>Record index of the text field source in the data group</value>
        [DataMember(Name = "OriginTagEntry", IsRequired = true, EmitDefaultValue = true)]
        public decimal OriginTagEntry { get; set; }

        /// <summary>
        /// Gets or Sets OriginEntryView
        /// </summary>
        [DataMember(Name = "OriginEntryView", EmitDefaultValue = false)]
        public int OriginEntryView { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RFIDDocVisualExtendedField {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  OriginDG: ").Append(OriginDG).Append("\n");
            sb.Append("  OriginDGTag: ").Append(OriginDGTag).Append("\n");
            sb.Append("  OriginTagEntry: ").Append(OriginTagEntry).Append("\n");
            sb.Append("  OriginEntryView: ").Append(OriginEntryView).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
