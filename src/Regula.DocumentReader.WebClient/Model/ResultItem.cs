// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Common fields for all result objects
    /// </summary>
    public partial class ResultItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultItem" /> class.
        /// </summary>
        /// <param name="bufLength">bufLength</param>
        /// <param name="light">light</param>
        /// <param name="listIdx">listIdx</param>
        /// <param name="pageIdx">pageIdx</param>
        [JsonConstructor]
        public ResultItem(Option<int?> bufLength = default, Option<int?> light = default, Option<int?> listIdx = default, Option<int?> pageIdx = default)
        {
            BufLengthOption = bufLength;
            LightOption = light;
            ListIdxOption = listIdx;
            PageIdxOption = pageIdx;
            ResultType = this.GetType().Name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BufLength
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BufLengthOption { get; private set; }

        /// <summary>
        /// Gets or Sets BufLength
        /// </summary>
        [JsonPropertyName("buf_length")]
        public int? BufLength { get { return this.BufLengthOption; } set { this.BufLengthOption = new(value); } }

        /// <summary>
        /// Used to track the state of Light
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LightOption { get; private set; }

        /// <summary>
        /// Gets or Sets Light
        /// </summary>
        [JsonPropertyName("light")]
        public int? Light { get { return this.LightOption; } set { this.LightOption = new(value); } }

        /// <summary>
        /// Used to track the state of ListIdx
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ListIdxOption { get; private set; }

        /// <summary>
        /// Gets or Sets ListIdx
        /// </summary>
        [JsonPropertyName("list_idx")]
        public int? ListIdx { get { return this.ListIdxOption; } set { this.ListIdxOption = new(value); } }

        /// <summary>
        /// Used to track the state of PageIdx
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageIdxOption { get; private set; }

        /// <summary>
        /// Gets or Sets PageIdx
        /// </summary>
        [JsonPropertyName("page_idx")]
        public int? PageIdx { get { return this.PageIdxOption; } set { this.PageIdxOption = new(value); } }

        /// <summary>
        /// The discriminator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public int ResultType { get; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultItem {\n");
            sb.Append("  BufLength: ").Append(BufLength).Append("\n");
            sb.Append("  Light: ").Append(Light).Append("\n");
            sb.Append("  ListIdx: ").Append(ListIdx).Append("\n");
            sb.Append("  PageIdx: ").Append(PageIdx).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultItem" />
    /// </summary>
    public class ResultItemJsonConverter : JsonConverter<ResultItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResultItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResultItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> bufLength = default;
            Option<int?> light = default;
            Option<int?> listIdx = default;
            Option<int?> pageIdx = default;
            Option<int?> resultType = default;

            string? discriminator = ClientUtils.GetDiscriminator(utf8JsonReader, "result_type");

            if (discriminator != null && discriminator.Equals("AuthenticityResult"))
                return JsonSerializer.Deserialize<AuthenticityResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("ByteArrayResult"))
                return JsonSerializer.Deserialize<ByteArrayResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("ChosenDocumentTypeResult"))
                return JsonSerializer.Deserialize<ChosenDocumentTypeResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("DocBarCodeInfo"))
                return JsonSerializer.Deserialize<DocBarCodeInfo>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("DocumentBinaryInfoResult"))
                return JsonSerializer.Deserialize<DocumentBinaryInfoResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("DocumentImageResult"))
                return JsonSerializer.Deserialize<DocumentImageResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("DocumentPositionResult"))
                return JsonSerializer.Deserialize<DocumentPositionResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("DocumentTypesCandidatesResult"))
                return JsonSerializer.Deserialize<DocumentTypesCandidatesResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("EncryptedRCLResult"))
                return JsonSerializer.Deserialize<EncryptedRCLResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("FaceDetectionResult"))
                return JsonSerializer.Deserialize<FaceDetectionResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("GraphicsResult"))
                return JsonSerializer.Deserialize<GraphicsResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("ImageQualityResult"))
                return JsonSerializer.Deserialize<ImageQualityResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("ImagesResult"))
                return JsonSerializer.Deserialize<ImagesResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("LexicalAnalysisResult"))
                return JsonSerializer.Deserialize<LexicalAnalysisResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("LicenseResult"))
                return JsonSerializer.Deserialize<LicenseResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("MRZDetectorResult"))
                return JsonSerializer.Deserialize<MRZDetectorResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("MRZPositionResult"))
                return JsonSerializer.Deserialize<MRZPositionResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("MRZTestQualityResult"))
                return JsonSerializer.Deserialize<MRZTestQualityResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("RFIDGraphicsInfoResult"))
                return JsonSerializer.Deserialize<RFIDGraphicsInfoResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("RFIDTextDataResult"))
                return JsonSerializer.Deserialize<RFIDTextDataResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("StatusResult"))
                return JsonSerializer.Deserialize<StatusResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("TextDataResult"))
                return JsonSerializer.Deserialize<TextDataResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("TextResult"))
                return JsonSerializer.Deserialize<TextResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "buf_length":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bufLength = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "light":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                light = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "list_idx":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                listIdx = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "page_idx":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pageIdx = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "result_type":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resultType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!resultType.IsSet)
                throw new ArgumentException("Property is required for class ResultItem.", nameof(resultType));

            if (bufLength.IsSet && bufLength.Value == null)
                throw new ArgumentNullException(nameof(bufLength), "Property is not nullable for class ResultItem.");

            if (light.IsSet && light.Value == null)
                throw new ArgumentNullException(nameof(light), "Property is not nullable for class ResultItem.");

            if (listIdx.IsSet && listIdx.Value == null)
                throw new ArgumentNullException(nameof(listIdx), "Property is not nullable for class ResultItem.");

            if (pageIdx.IsSet && pageIdx.Value == null)
                throw new ArgumentNullException(nameof(pageIdx), "Property is not nullable for class ResultItem.");

            if (resultType.IsSet && resultType.Value == null)
                throw new ArgumentNullException(nameof(resultType), "Property is not nullable for class ResultItem.");

            return new ResultItem(bufLength, light, listIdx, pageIdx);
        }

        /// <summary>
        /// Serializes a <see cref="ResultItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResultItem resultItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resultItem is AuthenticityResult authenticityResult){
                JsonSerializer.Serialize<AuthenticityResult>(writer, authenticityResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is ByteArrayResult byteArrayResult){
                JsonSerializer.Serialize<ByteArrayResult>(writer, byteArrayResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is ChosenDocumentTypeResult chosenDocumentTypeResult){
                JsonSerializer.Serialize<ChosenDocumentTypeResult>(writer, chosenDocumentTypeResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is DocBarCodeInfo docBarCodeInfo){
                JsonSerializer.Serialize<DocBarCodeInfo>(writer, docBarCodeInfo, jsonSerializerOptions);
                return;
            }

            if (resultItem is DocumentBinaryInfoResult documentBinaryInfoResult){
                JsonSerializer.Serialize<DocumentBinaryInfoResult>(writer, documentBinaryInfoResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is DocumentImageResult documentImageResult){
                JsonSerializer.Serialize<DocumentImageResult>(writer, documentImageResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is DocumentPositionResult documentPositionResult){
                JsonSerializer.Serialize<DocumentPositionResult>(writer, documentPositionResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is DocumentTypesCandidatesResult documentTypesCandidatesResult){
                JsonSerializer.Serialize<DocumentTypesCandidatesResult>(writer, documentTypesCandidatesResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is EncryptedRCLResult encryptedRCLResult){
                JsonSerializer.Serialize<EncryptedRCLResult>(writer, encryptedRCLResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is FaceDetectionResult faceDetectionResult){
                JsonSerializer.Serialize<FaceDetectionResult>(writer, faceDetectionResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is GraphicsResult graphicsResult){
                JsonSerializer.Serialize<GraphicsResult>(writer, graphicsResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is ImageQualityResult imageQualityResult){
                JsonSerializer.Serialize<ImageQualityResult>(writer, imageQualityResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is ImagesResult imagesResult){
                JsonSerializer.Serialize<ImagesResult>(writer, imagesResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is LexicalAnalysisResult lexicalAnalysisResult){
                JsonSerializer.Serialize<LexicalAnalysisResult>(writer, lexicalAnalysisResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is LicenseResult licenseResult){
                JsonSerializer.Serialize<LicenseResult>(writer, licenseResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is MRZDetectorResult mRZDetectorResult){
                JsonSerializer.Serialize<MRZDetectorResult>(writer, mRZDetectorResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is MRZPositionResult mRZPositionResult){
                JsonSerializer.Serialize<MRZPositionResult>(writer, mRZPositionResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is MRZTestQualityResult mRZTestQualityResult){
                JsonSerializer.Serialize<MRZTestQualityResult>(writer, mRZTestQualityResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is RFIDGraphicsInfoResult rFIDGraphicsInfoResult){
                JsonSerializer.Serialize<RFIDGraphicsInfoResult>(writer, rFIDGraphicsInfoResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is RFIDTextDataResult rFIDTextDataResult){
                JsonSerializer.Serialize<RFIDTextDataResult>(writer, rFIDTextDataResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is StatusResult statusResult){
                JsonSerializer.Serialize<StatusResult>(writer, statusResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is TextDataResult textDataResult){
                JsonSerializer.Serialize<TextDataResult>(writer, textDataResult, jsonSerializerOptions);
                return;
            }

            if (resultItem is TextResult textResult){
                JsonSerializer.Serialize<TextResult>(writer, textResult, jsonSerializerOptions);
                return;
            }

            writer.WriteStartObject();

            WriteProperties(writer, resultItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResultItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResultItem resultItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resultItem.BufLengthOption.IsSet)
                writer.WriteNumber("buf_length", resultItem.BufLengthOption.Value!.Value);

            if (resultItem.LightOption.IsSet)
                writer.WriteNumber("light", resultItem.LightOption.Value!.Value);

            if (resultItem.ListIdxOption.IsSet)
                writer.WriteNumber("list_idx", resultItem.ListIdxOption.Value!.Value);

            if (resultItem.PageIdxOption.IsSet)
                writer.WriteNumber("page_idx", resultItem.PageIdxOption.Value!.Value);

            writer.WriteString("result_type", resultItem.ResultType);
        }
    }
}
