// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Enumeration contains a set of constants that define the type of authentication or secure data access procedure
    /// </summary>
    /// <value>Enumeration contains a set of constants that define the type of authentication or secure data access procedure</value>
    public enum RfidAccessControlProcedureType
    {
        /// <summary>
        /// Enum UNDEFINED for value: 0
        /// </summary>
        UNDEFINED = 0,

        /// <summary>
        /// Enum BAC for value: 1
        /// </summary>
        BAC = 1,

        /// <summary>
        /// Enum PACE for value: 2
        /// </summary>
        PACE = 2,

        /// <summary>
        /// Enum CA for value: 3
        /// </summary>
        CA = 3,

        /// <summary>
        /// Enum TA for value: 4
        /// </summary>
        TA = 4,

        /// <summary>
        /// Enum AA for value: 5
        /// </summary>
        AA = 5,

        /// <summary>
        /// Enum RI for value: 6
        /// </summary>
        RI = 6,

        /// <summary>
        /// Enum CARD_INFO for value: 10
        /// </summary>
        CARD_INFO = 10
    }

    /// <summary>
    /// Converts <see cref="RfidAccessControlProcedureType"/> to and from the JSON value
    /// </summary>
    public static class RfidAccessControlProcedureTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RfidAccessControlProcedureType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RfidAccessControlProcedureType FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return RfidAccessControlProcedureType.UNDEFINED;

            if (value.Equals((1).ToString()))
                return RfidAccessControlProcedureType.BAC;

            if (value.Equals((2).ToString()))
                return RfidAccessControlProcedureType.PACE;

            if (value.Equals((3).ToString()))
                return RfidAccessControlProcedureType.CA;

            if (value.Equals((4).ToString()))
                return RfidAccessControlProcedureType.TA;

            if (value.Equals((5).ToString()))
                return RfidAccessControlProcedureType.AA;

            if (value.Equals((6).ToString()))
                return RfidAccessControlProcedureType.RI;

            if (value.Equals((10).ToString()))
                return RfidAccessControlProcedureType.CARD_INFO;

            throw new NotImplementedException($"Could not convert value to type RfidAccessControlProcedureType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RfidAccessControlProcedureType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RfidAccessControlProcedureType? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return RfidAccessControlProcedureType.UNDEFINED;

            if (value.Equals((1).ToString()))
                return RfidAccessControlProcedureType.BAC;

            if (value.Equals((2).ToString()))
                return RfidAccessControlProcedureType.PACE;

            if (value.Equals((3).ToString()))
                return RfidAccessControlProcedureType.CA;

            if (value.Equals((4).ToString()))
                return RfidAccessControlProcedureType.TA;

            if (value.Equals((5).ToString()))
                return RfidAccessControlProcedureType.AA;

            if (value.Equals((6).ToString()))
                return RfidAccessControlProcedureType.RI;

            if (value.Equals((10).ToString()))
                return RfidAccessControlProcedureType.CARD_INFO;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RfidAccessControlProcedureType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(RfidAccessControlProcedureType value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidAccessControlProcedureType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RfidAccessControlProcedureTypeJsonConverter : JsonConverter<RfidAccessControlProcedureType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RfidAccessControlProcedureType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RfidAccessControlProcedureType? result = rawValue == null
                ? null
                : RfidAccessControlProcedureTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RfidAccessControlProcedureType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidAccessControlProcedureType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RfidAccessControlProcedureType rfidAccessControlProcedureType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(rfidAccessControlProcedureType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidAccessControlProcedureType"/>
    /// </summary>
    public class RfidAccessControlProcedureTypeNullableJsonConverter : JsonConverter<RfidAccessControlProcedureType?>
    {
        /// <summary>
        /// Returns a RfidAccessControlProcedureType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RfidAccessControlProcedureType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RfidAccessControlProcedureType? result = rawValue == null
                ? null
                : RfidAccessControlProcedureTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidAccessControlProcedureType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RfidAccessControlProcedureType? rfidAccessControlProcedureType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(rfidAccessControlProcedureType?.ToString() ?? "null");
        }
    }
}
