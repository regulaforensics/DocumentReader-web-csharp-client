/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// OCRSecurityTextResult
    /// </summary>
    [DataContract]
    public partial class OCRSecurityTextResult :  IEquatable<OCRSecurityTextResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OCRSecurityTextResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OCRSecurityTextResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OCRSecurityTextResult" /> class.
        /// </summary>
        /// <param name="type">Same as authenticity result type, but used for safe parsing of not-described values: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/authenticity-result-type/ (required) (default to 0).</param>
        /// <param name="elementResult">elementResult.</param>
        /// <param name="elementDiagnose">elementDiagnose.</param>
        /// <param name="percentValue">percentValue.</param>
        /// <param name="criticalFlag">criticalFlag (required).</param>
        /// <param name="lightType">lightType (required).</param>
        /// <param name="fieldRect">fieldRect (required).</param>
        /// <param name="etalonResultType">etalonResultType (required).</param>
        /// <param name="etalonFieldType">etalonFieldType (required).</param>
        /// <param name="etalonLightType">etalonLightType (required).</param>
        /// <param name="etalonFieldRect">etalonFieldRect (required).</param>
        /// <param name="securityTextResultOCR">securityTextResultOCR (required).</param>
        /// <param name="etalonResultOCR">etalonResultOCR (required).</param>
        /// <param name="reserved1">reserved1.</param>
        /// <param name="reserved2">reserved2.</param>
        public OCRSecurityTextResult(int type = 0, int elementResult = default(int), int elementDiagnose = default(int), int percentValue = default(int), int criticalFlag = default(int), int lightType = default(int), RectangleCoordinates fieldRect = default(RectangleCoordinates), int etalonResultType = default(int), int etalonFieldType = default(int), int etalonLightType = default(int), RectangleCoordinates etalonFieldRect = default(RectangleCoordinates), string securityTextResultOCR = default(string), string etalonResultOCR = default(string), int reserved1 = default(int), int reserved2 = default(int))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for OCRSecurityTextResult and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            // to ensure "criticalFlag" is required (not null)
            if (criticalFlag == null)
            {
                throw new InvalidDataException("criticalFlag is a required property for OCRSecurityTextResult and cannot be null");
            }
            else
            {
                this.CriticalFlag = criticalFlag;
            }
            
            // to ensure "lightType" is required (not null)
            if (lightType == null)
            {
                throw new InvalidDataException("lightType is a required property for OCRSecurityTextResult and cannot be null");
            }
            else
            {
                this.LightType = lightType;
            }
            
            // to ensure "fieldRect" is required (not null)
            if (fieldRect == null)
            {
                throw new InvalidDataException("fieldRect is a required property for OCRSecurityTextResult and cannot be null");
            }
            else
            {
                this.FieldRect = fieldRect;
            }
            
            // to ensure "etalonResultType" is required (not null)
            if (etalonResultType == null)
            {
                throw new InvalidDataException("etalonResultType is a required property for OCRSecurityTextResult and cannot be null");
            }
            else
            {
                this.EtalonResultType = etalonResultType;
            }
            
            // to ensure "etalonFieldType" is required (not null)
            if (etalonFieldType == null)
            {
                throw new InvalidDataException("etalonFieldType is a required property for OCRSecurityTextResult and cannot be null");
            }
            else
            {
                this.EtalonFieldType = etalonFieldType;
            }
            
            // to ensure "etalonLightType" is required (not null)
            if (etalonLightType == null)
            {
                throw new InvalidDataException("etalonLightType is a required property for OCRSecurityTextResult and cannot be null");
            }
            else
            {
                this.EtalonLightType = etalonLightType;
            }
            
            // to ensure "etalonFieldRect" is required (not null)
            if (etalonFieldRect == null)
            {
                throw new InvalidDataException("etalonFieldRect is a required property for OCRSecurityTextResult and cannot be null");
            }
            else
            {
                this.EtalonFieldRect = etalonFieldRect;
            }
            
            // to ensure "securityTextResultOCR" is required (not null)
            if (securityTextResultOCR == null)
            {
                throw new InvalidDataException("securityTextResultOCR is a required property for OCRSecurityTextResult and cannot be null");
            }
            else
            {
                this.SecurityTextResultOCR = securityTextResultOCR;
            }
            
            // to ensure "etalonResultOCR" is required (not null)
            if (etalonResultOCR == null)
            {
                throw new InvalidDataException("etalonResultOCR is a required property for OCRSecurityTextResult and cannot be null");
            }
            else
            {
                this.EtalonResultOCR = etalonResultOCR;
            }
            
            this.ElementResult = elementResult;
            this.ElementDiagnose = elementDiagnose;
            this.PercentValue = percentValue;
            this.Reserved1 = reserved1;
            this.Reserved2 = reserved2;
        }
        
        /// <summary>
        /// Same as authenticity result type, but used for safe parsing of not-described values: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/authenticity-result-type/
        /// </summary>
        /// <value>Same as authenticity result type, but used for safe parsing of not-described values: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/authenticity-result-type/</value>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public int Type { get; set; }

        /// <summary>
        /// Gets or Sets ElementResult
        /// </summary>
        [DataMember(Name="ElementResult", EmitDefaultValue=false)]
        public int ElementResult { get; set; }

        /// <summary>
        /// Gets or Sets ElementDiagnose
        /// </summary>
        [DataMember(Name="ElementDiagnose", EmitDefaultValue=false)]
        public int ElementDiagnose { get; set; }

        /// <summary>
        /// Gets or Sets PercentValue
        /// </summary>
        [DataMember(Name="PercentValue", EmitDefaultValue=false)]
        public int PercentValue { get; set; }

        /// <summary>
        /// Gets or Sets CriticalFlag
        /// </summary>
        [DataMember(Name="CriticalFlag", EmitDefaultValue=true)]
        public int CriticalFlag { get; set; }

        /// <summary>
        /// Gets or Sets LightType
        /// </summary>
        [DataMember(Name="LightType", EmitDefaultValue=true)]
        public int LightType { get; set; }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [DataMember(Name="FieldRect", EmitDefaultValue=true)]
        public RectangleCoordinates FieldRect { get; set; }

        /// <summary>
        /// Gets or Sets EtalonResultType
        /// </summary>
        [DataMember(Name="EtalonResultType", EmitDefaultValue=true)]
        public int EtalonResultType { get; set; }

        /// <summary>
        /// Gets or Sets EtalonFieldType
        /// </summary>
        [DataMember(Name="EtalonFieldType", EmitDefaultValue=true)]
        public int EtalonFieldType { get; set; }

        /// <summary>
        /// Gets or Sets EtalonLightType
        /// </summary>
        [DataMember(Name="EtalonLightType", EmitDefaultValue=true)]
        public int EtalonLightType { get; set; }

        /// <summary>
        /// Gets or Sets EtalonFieldRect
        /// </summary>
        [DataMember(Name="EtalonFieldRect", EmitDefaultValue=true)]
        public RectangleCoordinates EtalonFieldRect { get; set; }

        /// <summary>
        /// Gets or Sets SecurityTextResultOCR
        /// </summary>
        [DataMember(Name="SecurityTextResultOCR", EmitDefaultValue=true)]
        public string SecurityTextResultOCR { get; set; }

        /// <summary>
        /// Gets or Sets EtalonResultOCR
        /// </summary>
        [DataMember(Name="EtalonResultOCR", EmitDefaultValue=true)]
        public string EtalonResultOCR { get; set; }

        /// <summary>
        /// Gets or Sets Reserved1
        /// </summary>
        [DataMember(Name="Reserved1", EmitDefaultValue=false)]
        public int Reserved1 { get; set; }

        /// <summary>
        /// Gets or Sets Reserved2
        /// </summary>
        [DataMember(Name="Reserved2", EmitDefaultValue=false)]
        public int Reserved2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OCRSecurityTextResult {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ElementResult: ").Append(ElementResult).Append("\n");
            sb.Append("  ElementDiagnose: ").Append(ElementDiagnose).Append("\n");
            sb.Append("  PercentValue: ").Append(PercentValue).Append("\n");
            sb.Append("  CriticalFlag: ").Append(CriticalFlag).Append("\n");
            sb.Append("  LightType: ").Append(LightType).Append("\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  EtalonResultType: ").Append(EtalonResultType).Append("\n");
            sb.Append("  EtalonFieldType: ").Append(EtalonFieldType).Append("\n");
            sb.Append("  EtalonLightType: ").Append(EtalonLightType).Append("\n");
            sb.Append("  EtalonFieldRect: ").Append(EtalonFieldRect).Append("\n");
            sb.Append("  SecurityTextResultOCR: ").Append(SecurityTextResultOCR).Append("\n");
            sb.Append("  EtalonResultOCR: ").Append(EtalonResultOCR).Append("\n");
            sb.Append("  Reserved1: ").Append(Reserved1).Append("\n");
            sb.Append("  Reserved2: ").Append(Reserved2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OCRSecurityTextResult);
        }

        /// <summary>
        /// Returns true if OCRSecurityTextResult instances are equal
        /// </summary>
        /// <param name="input">Instance of OCRSecurityTextResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OCRSecurityTextResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ElementResult == input.ElementResult ||
                    (this.ElementResult != null &&
                    this.ElementResult.Equals(input.ElementResult))
                ) && 
                (
                    this.ElementDiagnose == input.ElementDiagnose ||
                    (this.ElementDiagnose != null &&
                    this.ElementDiagnose.Equals(input.ElementDiagnose))
                ) && 
                (
                    this.PercentValue == input.PercentValue ||
                    (this.PercentValue != null &&
                    this.PercentValue.Equals(input.PercentValue))
                ) && 
                (
                    this.CriticalFlag == input.CriticalFlag ||
                    (this.CriticalFlag != null &&
                    this.CriticalFlag.Equals(input.CriticalFlag))
                ) && 
                (
                    this.LightType == input.LightType ||
                    (this.LightType != null &&
                    this.LightType.Equals(input.LightType))
                ) && 
                (
                    this.FieldRect == input.FieldRect ||
                    (this.FieldRect != null &&
                    this.FieldRect.Equals(input.FieldRect))
                ) && 
                (
                    this.EtalonResultType == input.EtalonResultType ||
                    (this.EtalonResultType != null &&
                    this.EtalonResultType.Equals(input.EtalonResultType))
                ) && 
                (
                    this.EtalonFieldType == input.EtalonFieldType ||
                    (this.EtalonFieldType != null &&
                    this.EtalonFieldType.Equals(input.EtalonFieldType))
                ) && 
                (
                    this.EtalonLightType == input.EtalonLightType ||
                    (this.EtalonLightType != null &&
                    this.EtalonLightType.Equals(input.EtalonLightType))
                ) && 
                (
                    this.EtalonFieldRect == input.EtalonFieldRect ||
                    (this.EtalonFieldRect != null &&
                    this.EtalonFieldRect.Equals(input.EtalonFieldRect))
                ) && 
                (
                    this.SecurityTextResultOCR == input.SecurityTextResultOCR ||
                    (this.SecurityTextResultOCR != null &&
                    this.SecurityTextResultOCR.Equals(input.SecurityTextResultOCR))
                ) && 
                (
                    this.EtalonResultOCR == input.EtalonResultOCR ||
                    (this.EtalonResultOCR != null &&
                    this.EtalonResultOCR.Equals(input.EtalonResultOCR))
                ) && 
                (
                    this.Reserved1 == input.Reserved1 ||
                    (this.Reserved1 != null &&
                    this.Reserved1.Equals(input.Reserved1))
                ) && 
                (
                    this.Reserved2 == input.Reserved2 ||
                    (this.Reserved2 != null &&
                    this.Reserved2.Equals(input.Reserved2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ElementResult != null)
                    hashCode = hashCode * 59 + this.ElementResult.GetHashCode();
                if (this.ElementDiagnose != null)
                    hashCode = hashCode * 59 + this.ElementDiagnose.GetHashCode();
                if (this.PercentValue != null)
                    hashCode = hashCode * 59 + this.PercentValue.GetHashCode();
                if (this.CriticalFlag != null)
                    hashCode = hashCode * 59 + this.CriticalFlag.GetHashCode();
                if (this.LightType != null)
                    hashCode = hashCode * 59 + this.LightType.GetHashCode();
                if (this.FieldRect != null)
                    hashCode = hashCode * 59 + this.FieldRect.GetHashCode();
                if (this.EtalonResultType != null)
                    hashCode = hashCode * 59 + this.EtalonResultType.GetHashCode();
                if (this.EtalonFieldType != null)
                    hashCode = hashCode * 59 + this.EtalonFieldType.GetHashCode();
                if (this.EtalonLightType != null)
                    hashCode = hashCode * 59 + this.EtalonLightType.GetHashCode();
                if (this.EtalonFieldRect != null)
                    hashCode = hashCode * 59 + this.EtalonFieldRect.GetHashCode();
                if (this.SecurityTextResultOCR != null)
                    hashCode = hashCode * 59 + this.SecurityTextResultOCR.GetHashCode();
                if (this.EtalonResultOCR != null)
                    hashCode = hashCode * 59 + this.EtalonResultOCR.GetHashCode();
                if (this.Reserved1 != null)
                    hashCode = hashCode * 59 + this.Reserved1.GetHashCode();
                if (this.Reserved2 != null)
                    hashCode = hashCode * 59 + this.Reserved2.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
