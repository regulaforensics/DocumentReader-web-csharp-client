// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// 0 - result is negative; 1 - result is positive; 2 - сheck was not performed
    /// </summary>
    /// <value>0 - result is negative; 1 - result is positive; 2 - сheck was not performed</value>
    public enum CheckResult
    {
        /// <summary>
        /// Enum ERROR for value: 0
        /// </summary>
        ERROR = 0,

        /// <summary>
        /// Enum OK for value: 1
        /// </summary>
        OK = 1,

        /// <summary>
        /// Enum WAS_NOT_DONE for value: 2
        /// </summary>
        WAS_NOT_DONE = 2
    }

    /// <summary>
    /// Converts <see cref="CheckResult"/> to and from the JSON value
    /// </summary>
    public static class CheckResultValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="CheckResult"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CheckResult FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return CheckResult.ERROR;

            if (value.Equals((1).ToString()))
                return CheckResult.OK;

            if (value.Equals((2).ToString()))
                return CheckResult.WAS_NOT_DONE;

            throw new NotImplementedException($"Could not convert value to type CheckResult: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="CheckResult"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CheckResult? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return CheckResult.ERROR;

            if (value.Equals((1).ToString()))
                return CheckResult.OK;

            if (value.Equals((2).ToString()))
                return CheckResult.WAS_NOT_DONE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CheckResult"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(CheckResult value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheckResult"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CheckResultJsonConverter : JsonConverter<CheckResult>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CheckResult Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CheckResult? result = rawValue == null
                ? null
                : CheckResultValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CheckResult to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkResult"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CheckResult checkResult, JsonSerializerOptions options)
        {
            writer.WriteStringValue(checkResult.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheckResult"/>
    /// </summary>
    public class CheckResultNullableJsonConverter : JsonConverter<CheckResult?>
    {
        /// <summary>
        /// Returns a CheckResult from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CheckResult? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CheckResult? result = rawValue == null
                ? null
                : CheckResultValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkResult"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CheckResult? checkResult, JsonSerializerOptions options)
        {
            writer.WriteStringValue(checkResult?.ToString() ?? "null");
        }
    }
}
