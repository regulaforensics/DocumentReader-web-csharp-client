/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to store extended information about the characteristics of the RFID-chip located in the scope of the reader
    /// </summary>
    [DataContract(Name = "RfidCardPropertiesExt")]
    public partial class RfidCardPropertiesExt : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RFIDType
        /// </summary>
        [DataMember(Name = "RFID_Type", IsRequired = true, EmitDefaultValue = true)]
        public RfidType RFIDType { get; set; }

        /// <summary>
        /// Gets or Sets ChipTypeA
        /// </summary>
        [DataMember(Name = "ChipType_A", IsRequired = true, EmitDefaultValue = true)]
        public RfidAChip ChipTypeA { get; set; }

        /// <summary>
        /// Gets or Sets BitRateS
        /// </summary>
        [DataMember(Name = "BitRateS", IsRequired = true, EmitDefaultValue = true)]
        public RfidBaudRate BitRateS { get; set; }

        /// <summary>
        /// Gets or Sets BitRateR
        /// </summary>
        [DataMember(Name = "BitRateR", IsRequired = true, EmitDefaultValue = true)]
        public RfidBaudRate BitRateR { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidCardPropertiesExt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidCardPropertiesExt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidCardPropertiesExt" /> class.
        /// </summary>
        /// <param name="rFIDType">rFIDType (required).</param>
        /// <param name="baudrate1">Numeric Baudrate1 value in hexadecimal format (e.g. 0x0000000F) (required).</param>
        /// <param name="baudrate2">Numeric Baudrate2 value in hexadecimal format (required).</param>
        /// <param name="support4">Boolean Support_4 value (required).</param>
        /// <param name="chipTypeA">chipTypeA (required).</param>
        /// <param name="supportMifare">Sign of support for ISO/IEC 14443-3 data exchange protocol (required).</param>
        /// <param name="mifareMemory">Amount of operational memory MIFARE® of the chip, kilobytes (required).</param>
        /// <param name="uID">UID contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. F9 4F 41 60) (required).</param>
        /// <param name="aTQA">Reply of the «A» type chip to «REQA» command of ISO/IEC 14443-3 protocol (Answer To Request, Type A – ATQA) – for the internal use by the main control library (required).</param>
        /// <param name="sAK">Response of type-A RFID-chip to SELECT command of ISO/IEC 14443-3 protocol (Select Acknowledge, SAK). (required).</param>
        /// <param name="aTQB">ATQ_B contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 50 F9 4F 41 60 00 00 00 00 77 81 81) (required).</param>
        /// <param name="bitRateS">bitRateS (required).</param>
        /// <param name="bitRateR">bitRateR (required).</param>
        /// <param name="aTR">ATR-string of RFID-chip (required).</param>
        public RfidCardPropertiesExt(RfidType rFIDType = default(RfidType), string baudrate1 = default(string), string baudrate2 = default(string), bool support4 = default(bool), RfidAChip chipTypeA = default(RfidAChip), bool supportMifare = default(bool), decimal mifareMemory = default(decimal), string uID = default(string), Object aTQA = default(Object), Object sAK = default(Object), Object aTQB = default(Object), RfidBaudRate bitRateS = default(RfidBaudRate), RfidBaudRate bitRateR = default(RfidBaudRate), string aTR = default(string))
        {
            this.RFIDType = rFIDType;
            // to ensure "baudrate1" is required (not null)
            if (baudrate1 == null)
            {
                throw new ArgumentNullException("baudrate1 is a required property for RfidCardPropertiesExt and cannot be null");
            }
            this.Baudrate1 = baudrate1;
            // to ensure "baudrate2" is required (not null)
            if (baudrate2 == null)
            {
                throw new ArgumentNullException("baudrate2 is a required property for RfidCardPropertiesExt and cannot be null");
            }
            this.Baudrate2 = baudrate2;
            this.Support4 = support4;
            this.ChipTypeA = chipTypeA;
            this.SupportMifare = supportMifare;
            this.MifareMemory = mifareMemory;
            // to ensure "uID" is required (not null)
            if (uID == null)
            {
                throw new ArgumentNullException("uID is a required property for RfidCardPropertiesExt and cannot be null");
            }
            this.UID = uID;
            // to ensure "aTQA" is required (not null)
            if (aTQA == null)
            {
                throw new ArgumentNullException("aTQA is a required property for RfidCardPropertiesExt and cannot be null");
            }
            this.ATQ_A = aTQA;
            // to ensure "sAK" is required (not null)
            if (sAK == null)
            {
                throw new ArgumentNullException("sAK is a required property for RfidCardPropertiesExt and cannot be null");
            }
            this.SAK = sAK;
            // to ensure "aTQB" is required (not null)
            if (aTQB == null)
            {
                throw new ArgumentNullException("aTQB is a required property for RfidCardPropertiesExt and cannot be null");
            }
            this.ATQ_B = aTQB;
            this.BitRateS = bitRateS;
            this.BitRateR = bitRateR;
            // to ensure "aTR" is required (not null)
            if (aTR == null)
            {
                throw new ArgumentNullException("aTR is a required property for RfidCardPropertiesExt and cannot be null");
            }
            this.ATR = aTR;
        }

        /// <summary>
        /// Numeric Baudrate1 value in hexadecimal format (e.g. 0x0000000F)
        /// </summary>
        /// <value>Numeric Baudrate1 value in hexadecimal format (e.g. 0x0000000F)</value>
        [DataMember(Name = "Baudrate1", IsRequired = true, EmitDefaultValue = true)]
        public string Baudrate1 { get; set; }

        /// <summary>
        /// Numeric Baudrate2 value in hexadecimal format
        /// </summary>
        /// <value>Numeric Baudrate2 value in hexadecimal format</value>
        [DataMember(Name = "Baudrate2", IsRequired = true, EmitDefaultValue = true)]
        public string Baudrate2 { get; set; }

        /// <summary>
        /// Boolean Support_4 value
        /// </summary>
        /// <value>Boolean Support_4 value</value>
        [DataMember(Name = "Support_4", IsRequired = true, EmitDefaultValue = true)]
        public bool Support4 { get; set; }

        /// <summary>
        /// Sign of support for ISO/IEC 14443-3 data exchange protocol
        /// </summary>
        /// <value>Sign of support for ISO/IEC 14443-3 data exchange protocol</value>
        [DataMember(Name = "Support_Mifare", IsRequired = true, EmitDefaultValue = true)]
        public bool SupportMifare { get; set; }

        /// <summary>
        /// Amount of operational memory MIFARE® of the chip, kilobytes
        /// </summary>
        /// <value>Amount of operational memory MIFARE® of the chip, kilobytes</value>
        [DataMember(Name = "MifareMemory", IsRequired = true, EmitDefaultValue = true)]
        public decimal MifareMemory { get; set; }

        /// <summary>
        /// UID contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. F9 4F 41 60)
        /// </summary>
        /// <value>UID contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. F9 4F 41 60)</value>
        [DataMember(Name = "UID", IsRequired = true, EmitDefaultValue = true)]
        public string UID { get; set; }

        /// <summary>
        /// Reply of the «A» type chip to «REQA» command of ISO/IEC 14443-3 protocol (Answer To Request, Type A – ATQA) – for the internal use by the main control library
        /// </summary>
        /// <value>Reply of the «A» type chip to «REQA» command of ISO/IEC 14443-3 protocol (Answer To Request, Type A – ATQA) – for the internal use by the main control library</value>
        [DataMember(Name = "ATQ_A", IsRequired = true, EmitDefaultValue = true)]
        public Object ATQ_A { get; set; }

        /// <summary>
        /// Response of type-A RFID-chip to SELECT command of ISO/IEC 14443-3 protocol (Select Acknowledge, SAK).
        /// </summary>
        /// <value>Response of type-A RFID-chip to SELECT command of ISO/IEC 14443-3 protocol (Select Acknowledge, SAK).</value>
        [DataMember(Name = "SAK", IsRequired = true, EmitDefaultValue = true)]
        public Object SAK { get; set; }

        /// <summary>
        /// ATQ_B contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 50 F9 4F 41 60 00 00 00 00 77 81 81)
        /// </summary>
        /// <value>ATQ_B contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 50 F9 4F 41 60 00 00 00 00 77 81 81)</value>
        [DataMember(Name = "ATQ_B", IsRequired = true, EmitDefaultValue = true)]
        public Object ATQ_B { get; set; }

        /// <summary>
        /// ATR-string of RFID-chip
        /// </summary>
        /// <value>ATR-string of RFID-chip</value>
        [DataMember(Name = "ATR", IsRequired = true, EmitDefaultValue = true)]
        public string ATR { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidCardPropertiesExt {\n");
            sb.Append("  RFIDType: ").Append(RFIDType).Append("\n");
            sb.Append("  Baudrate1: ").Append(Baudrate1).Append("\n");
            sb.Append("  Baudrate2: ").Append(Baudrate2).Append("\n");
            sb.Append("  Support4: ").Append(Support4).Append("\n");
            sb.Append("  ChipTypeA: ").Append(ChipTypeA).Append("\n");
            sb.Append("  SupportMifare: ").Append(SupportMifare).Append("\n");
            sb.Append("  MifareMemory: ").Append(MifareMemory).Append("\n");
            sb.Append("  UID: ").Append(UID).Append("\n");
            sb.Append("  ATQ_A: ").Append(ATQ_A).Append("\n");
            sb.Append("  SAK: ").Append(SAK).Append("\n");
            sb.Append("  ATQ_B: ").Append(ATQ_B).Append("\n");
            sb.Append("  BitRateS: ").Append(BitRateS).Append("\n");
            sb.Append("  BitRateR: ").Append(BitRateR).Append("\n");
            sb.Append("  ATR: ").Append(ATR).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
