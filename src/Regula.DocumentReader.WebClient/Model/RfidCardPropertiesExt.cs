// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to store extended information about the characteristics of the RFID-chip located in the scope of the reader
    /// </summary>
    public partial class RfidCardPropertiesExt : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidCardPropertiesExt" /> class.
        /// </summary>
        /// <param name="rFIDType">rFIDType</param>
        /// <param name="baudrate1">Numeric Baudrate1 value in hexadecimal format (e.g. 0x0000000F)</param>
        /// <param name="baudrate2">Numeric Baudrate2 value in hexadecimal format</param>
        /// <param name="support4">Boolean Support_4 value</param>
        /// <param name="chipTypeA">chipTypeA</param>
        /// <param name="supportMifare">Sign of support for ISO/IEC 14443-3 data exchange protocol</param>
        /// <param name="mifareMemory">Amount of operational memory MIFARE® of the chip, kilobytes</param>
        /// <param name="uID">UID contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. F9 4F 41 60)</param>
        /// <param name="bitRateS">bitRateS</param>
        /// <param name="bitRateR">bitRateR</param>
        /// <param name="aTR">ATR-string of RFID-chip</param>
        /// <param name="aTQA">Reply of the «A» type chip to «REQA» command of ISO/IEC 14443-3 protocol (Answer To Request, Type A – ATQA) – for the internal use by the main control library</param>
        /// <param name="sAK">Response of type-A RFID-chip to SELECT command of ISO/IEC 14443-3 protocol (Select Acknowledge, SAK).</param>
        /// <param name="aTQB">ATQ_B contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 50 F9 4F 41 60 00 00 00 00 77 81 81)</param>
        [JsonConstructor]
        public RfidCardPropertiesExt(RfidType rFIDType, string baudrate1, string baudrate2, bool support4, RfidAChip chipTypeA, bool supportMifare, decimal mifareMemory, string uID, RfidBaudRate bitRateS, RfidBaudRate bitRateR, string aTR, Object? aTQA = default, Object? sAK = default, Object? aTQB = default)
        {
            RFIDType = rFIDType;
            Baudrate1 = baudrate1;
            Baudrate2 = baudrate2;
            Support4 = support4;
            ChipTypeA = chipTypeA;
            SupportMifare = supportMifare;
            MifareMemory = mifareMemory;
            UID = uID;
            BitRateS = bitRateS;
            BitRateR = bitRateR;
            ATR = aTR;
            ATQ_A = aTQA;
            SAK = sAK;
            ATQ_B = aTQB;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RFIDType
        /// </summary>
        [JsonPropertyName("RFID_Type")]
        public RfidType RFIDType { get; set; }

        /// <summary>
        /// Gets or Sets ChipTypeA
        /// </summary>
        [JsonPropertyName("ChipType_A")]
        public RfidAChip ChipTypeA { get; set; }

        /// <summary>
        /// Gets or Sets BitRateS
        /// </summary>
        [JsonPropertyName("BitRateS")]
        public RfidBaudRate BitRateS { get; set; }

        /// <summary>
        /// Gets or Sets BitRateR
        /// </summary>
        [JsonPropertyName("BitRateR")]
        public RfidBaudRate BitRateR { get; set; }

        /// <summary>
        /// Numeric Baudrate1 value in hexadecimal format (e.g. 0x0000000F)
        /// </summary>
        /// <value>Numeric Baudrate1 value in hexadecimal format (e.g. 0x0000000F)</value>
        [JsonPropertyName("Baudrate1")]
        public string Baudrate1 { get; set; }

        /// <summary>
        /// Numeric Baudrate2 value in hexadecimal format
        /// </summary>
        /// <value>Numeric Baudrate2 value in hexadecimal format</value>
        [JsonPropertyName("Baudrate2")]
        public string Baudrate2 { get; set; }

        /// <summary>
        /// Boolean Support_4 value
        /// </summary>
        /// <value>Boolean Support_4 value</value>
        [JsonPropertyName("Support_4")]
        public bool Support4 { get; set; }

        /// <summary>
        /// Sign of support for ISO/IEC 14443-3 data exchange protocol
        /// </summary>
        /// <value>Sign of support for ISO/IEC 14443-3 data exchange protocol</value>
        [JsonPropertyName("Support_Mifare")]
        public bool SupportMifare { get; set; }

        /// <summary>
        /// Amount of operational memory MIFARE® of the chip, kilobytes
        /// </summary>
        /// <value>Amount of operational memory MIFARE® of the chip, kilobytes</value>
        [JsonPropertyName("MifareMemory")]
        public decimal MifareMemory { get; set; }

        /// <summary>
        /// UID contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. F9 4F 41 60)
        /// </summary>
        /// <value>UID contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. F9 4F 41 60)</value>
        [JsonPropertyName("UID")]
        public string UID { get; set; }

        /// <summary>
        /// ATR-string of RFID-chip
        /// </summary>
        /// <value>ATR-string of RFID-chip</value>
        [JsonPropertyName("ATR")]
        public string ATR { get; set; }

        /// <summary>
        /// Reply of the «A» type chip to «REQA» command of ISO/IEC 14443-3 protocol (Answer To Request, Type A – ATQA) – for the internal use by the main control library
        /// </summary>
        /// <value>Reply of the «A» type chip to «REQA» command of ISO/IEC 14443-3 protocol (Answer To Request, Type A – ATQA) – for the internal use by the main control library</value>
        [JsonPropertyName("ATQ_A")]
        public Object? ATQ_A { get; set; }

        /// <summary>
        /// Response of type-A RFID-chip to SELECT command of ISO/IEC 14443-3 protocol (Select Acknowledge, SAK).
        /// </summary>
        /// <value>Response of type-A RFID-chip to SELECT command of ISO/IEC 14443-3 protocol (Select Acknowledge, SAK).</value>
        [JsonPropertyName("SAK")]
        public Object? SAK { get; set; }

        /// <summary>
        /// ATQ_B contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 50 F9 4F 41 60 00 00 00 00 77 81 81)
        /// </summary>
        /// <value>ATQ_B contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 50 F9 4F 41 60 00 00 00 00 77 81 81)</value>
        [JsonPropertyName("ATQ_B")]
        public Object? ATQ_B { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidCardPropertiesExt {\n");
            sb.Append("  RFIDType: ").Append(RFIDType).Append("\n");
            sb.Append("  Baudrate1: ").Append(Baudrate1).Append("\n");
            sb.Append("  Baudrate2: ").Append(Baudrate2).Append("\n");
            sb.Append("  Support4: ").Append(Support4).Append("\n");
            sb.Append("  ChipTypeA: ").Append(ChipTypeA).Append("\n");
            sb.Append("  SupportMifare: ").Append(SupportMifare).Append("\n");
            sb.Append("  MifareMemory: ").Append(MifareMemory).Append("\n");
            sb.Append("  UID: ").Append(UID).Append("\n");
            sb.Append("  BitRateS: ").Append(BitRateS).Append("\n");
            sb.Append("  BitRateR: ").Append(BitRateR).Append("\n");
            sb.Append("  ATR: ").Append(ATR).Append("\n");
            sb.Append("  ATQ_A: ").Append(ATQ_A).Append("\n");
            sb.Append("  SAK: ").Append(SAK).Append("\n");
            sb.Append("  ATQ_B: ").Append(ATQ_B).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidCardPropertiesExt" />
    /// </summary>
    public class RfidCardPropertiesExtJsonConverter : JsonConverter<RfidCardPropertiesExt>
    {
        /// <summary>
        /// Deserializes json to <see cref="RfidCardPropertiesExt" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RfidCardPropertiesExt Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RfidType?> rFIDType = default;
            Option<string?> baudrate1 = default;
            Option<string?> baudrate2 = default;
            Option<bool?> support4 = default;
            Option<RfidAChip?> chipTypeA = default;
            Option<bool?> supportMifare = default;
            Option<decimal?> mifareMemory = default;
            Option<string?> uID = default;
            Option<RfidBaudRate?> bitRateS = default;
            Option<RfidBaudRate?> bitRateR = default;
            Option<string?> aTR = default;
            Option<Object?> aTQA = default;
            Option<Object?> sAK = default;
            Option<Object?> aTQB = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "RFID_Type":
                            string? rFIDTypeRawValue = utf8JsonReader.GetString();
                            if (rFIDTypeRawValue != null)
                                rFIDType = new Option<RfidType?>(RfidTypeValueConverter.FromStringOrDefault(rFIDTypeRawValue));
                            break;
                        case "Baudrate1":
                            baudrate1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Baudrate2":
                            baudrate2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Support_4":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                support4 = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ChipType_A":
                            string? chipTypeARawValue = utf8JsonReader.GetString();
                            if (chipTypeARawValue != null)
                                chipTypeA = new Option<RfidAChip?>(RfidAChipValueConverter.FromStringOrDefault(chipTypeARawValue));
                            break;
                        case "Support_Mifare":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supportMifare = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "MifareMemory":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mifareMemory = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "UID":
                            uID = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "BitRateS":
                            string? bitRateSRawValue = utf8JsonReader.GetString();
                            if (bitRateSRawValue != null)
                                bitRateS = new Option<RfidBaudRate?>(RfidBaudRateValueConverter.FromStringOrDefault(bitRateSRawValue));
                            break;
                        case "BitRateR":
                            string? bitRateRRawValue = utf8JsonReader.GetString();
                            if (bitRateRRawValue != null)
                                bitRateR = new Option<RfidBaudRate?>(RfidBaudRateValueConverter.FromStringOrDefault(bitRateRRawValue));
                            break;
                        case "ATR":
                            aTR = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ATQ_A":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                aTQA = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "SAK":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sAK = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ATQ_B":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                aTQB = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!rFIDType.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(rFIDType));

            if (!baudrate1.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(baudrate1));

            if (!baudrate2.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(baudrate2));

            if (!support4.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(support4));

            if (!chipTypeA.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(chipTypeA));

            if (!supportMifare.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(supportMifare));

            if (!mifareMemory.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(mifareMemory));

            if (!uID.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(uID));

            if (!bitRateS.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(bitRateS));

            if (!bitRateR.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(bitRateR));

            if (!aTR.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(aTR));

            if (!aTQA.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(aTQA));

            if (!sAK.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(sAK));

            if (!aTQB.IsSet)
                throw new ArgumentException("Property is required for class RfidCardPropertiesExt.", nameof(aTQB));

            if (rFIDType.IsSet && rFIDType.Value == null)
                throw new ArgumentNullException(nameof(rFIDType), "Property is not nullable for class RfidCardPropertiesExt.");

            if (baudrate1.IsSet && baudrate1.Value == null)
                throw new ArgumentNullException(nameof(baudrate1), "Property is not nullable for class RfidCardPropertiesExt.");

            if (baudrate2.IsSet && baudrate2.Value == null)
                throw new ArgumentNullException(nameof(baudrate2), "Property is not nullable for class RfidCardPropertiesExt.");

            if (support4.IsSet && support4.Value == null)
                throw new ArgumentNullException(nameof(support4), "Property is not nullable for class RfidCardPropertiesExt.");

            if (chipTypeA.IsSet && chipTypeA.Value == null)
                throw new ArgumentNullException(nameof(chipTypeA), "Property is not nullable for class RfidCardPropertiesExt.");

            if (supportMifare.IsSet && supportMifare.Value == null)
                throw new ArgumentNullException(nameof(supportMifare), "Property is not nullable for class RfidCardPropertiesExt.");

            if (mifareMemory.IsSet && mifareMemory.Value == null)
                throw new ArgumentNullException(nameof(mifareMemory), "Property is not nullable for class RfidCardPropertiesExt.");

            if (uID.IsSet && uID.Value == null)
                throw new ArgumentNullException(nameof(uID), "Property is not nullable for class RfidCardPropertiesExt.");

            if (bitRateS.IsSet && bitRateS.Value == null)
                throw new ArgumentNullException(nameof(bitRateS), "Property is not nullable for class RfidCardPropertiesExt.");

            if (bitRateR.IsSet && bitRateR.Value == null)
                throw new ArgumentNullException(nameof(bitRateR), "Property is not nullable for class RfidCardPropertiesExt.");

            if (aTR.IsSet && aTR.Value == null)
                throw new ArgumentNullException(nameof(aTR), "Property is not nullable for class RfidCardPropertiesExt.");

            return new RfidCardPropertiesExt(rFIDType.Value!.Value!, baudrate1.Value!, baudrate2.Value!, support4.Value!.Value!, chipTypeA.Value!.Value!, supportMifare.Value!.Value!, mifareMemory.Value!.Value!, uID.Value!, bitRateS.Value!.Value!, bitRateR.Value!.Value!, aTR.Value!, aTQA.Value!, sAK.Value!, aTQB.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RfidCardPropertiesExt" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidCardPropertiesExt"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RfidCardPropertiesExt rfidCardPropertiesExt, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rfidCardPropertiesExt, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RfidCardPropertiesExt" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidCardPropertiesExt"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RfidCardPropertiesExt rfidCardPropertiesExt, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rfidCardPropertiesExt.Baudrate1 == null)
                throw new ArgumentNullException(nameof(rfidCardPropertiesExt.Baudrate1), "Property is required for class RfidCardPropertiesExt.");

            if (rfidCardPropertiesExt.Baudrate2 == null)
                throw new ArgumentNullException(nameof(rfidCardPropertiesExt.Baudrate2), "Property is required for class RfidCardPropertiesExt.");

            if (rfidCardPropertiesExt.UID == null)
                throw new ArgumentNullException(nameof(rfidCardPropertiesExt.UID), "Property is required for class RfidCardPropertiesExt.");

            if (rfidCardPropertiesExt.ATR == null)
                throw new ArgumentNullException(nameof(rfidCardPropertiesExt.ATR), "Property is required for class RfidCardPropertiesExt.");

            var rFIDTypeRawValue = RfidTypeValueConverter.ToJsonValue(rfidCardPropertiesExt.RFIDType);
            writer.WriteNumber("RFID_Type", rFIDTypeRawValue);

            writer.WriteString("Baudrate1", rfidCardPropertiesExt.Baudrate1);

            writer.WriteString("Baudrate2", rfidCardPropertiesExt.Baudrate2);

            writer.WriteBoolean("Support_4", rfidCardPropertiesExt.Support4);

            var chipTypeARawValue = RfidAChipValueConverter.ToJsonValue(rfidCardPropertiesExt.ChipTypeA);
            writer.WriteNumber("ChipType_A", chipTypeARawValue);

            writer.WriteBoolean("Support_Mifare", rfidCardPropertiesExt.SupportMifare);

            writer.WriteNumber("MifareMemory", rfidCardPropertiesExt.MifareMemory);

            writer.WriteString("UID", rfidCardPropertiesExt.UID);

            var bitRateSRawValue = RfidBaudRateValueConverter.ToJsonValue(rfidCardPropertiesExt.BitRateS);
            writer.WriteNumber("BitRateS", bitRateSRawValue);

            var bitRateRRawValue = RfidBaudRateValueConverter.ToJsonValue(rfidCardPropertiesExt.BitRateR);
            writer.WriteNumber("BitRateR", bitRateRRawValue);

            writer.WriteString("ATR", rfidCardPropertiesExt.ATR);

            if (rfidCardPropertiesExt.ATQ_A != null)
            {
                writer.WritePropertyName("ATQ_A");
                JsonSerializer.Serialize(writer, rfidCardPropertiesExt.ATQ_A, jsonSerializerOptions);
            }
            else
                writer.WriteNull("ATQ_A");
            if (rfidCardPropertiesExt.SAK != null)
            {
                writer.WritePropertyName("SAK");
                JsonSerializer.Serialize(writer, rfidCardPropertiesExt.SAK, jsonSerializerOptions);
            }
            else
                writer.WriteNull("SAK");
            if (rfidCardPropertiesExt.ATQ_B != null)
            {
                writer.WritePropertyName("ATQ_B");
                JsonSerializer.Serialize(writer, rfidCardPropertiesExt.ATQ_B, jsonSerializerOptions);
            }
            else
                writer.WriteNull("ATQ_B");
        }
    }
}
