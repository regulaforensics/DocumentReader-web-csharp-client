/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Database information.
    /// </summary>
    [DataContract]
    public partial class HealthcheckDocumentsDatabase :  IEquatable<HealthcheckDocumentsDatabase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthcheckDocumentsDatabase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HealthcheckDocumentsDatabase() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthcheckDocumentsDatabase" /> class.
        /// </summary>
        /// <param name="id">Database identifier. (required).</param>
        /// <param name="version">Database version. (required).</param>
        /// <param name="exportDate">Date of database creation. (required).</param>
        /// <param name="description">Description of the database contents, such as the list of supported countries and documents. (required).</param>
        public HealthcheckDocumentsDatabase(string id = default(string), string version = default(string), DateTime? exportDate = default(DateTime?), string description = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for HealthcheckDocumentsDatabase and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            
            this.Id = id;
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for HealthcheckDocumentsDatabase and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            
            this.Version = version;
            // to ensure "exportDate" is required (not null)
            if (exportDate == null)
            {
                throw new InvalidDataException("exportDate is a required property for HealthcheckDocumentsDatabase and cannot be null");
            }
            else
            {
                this.ExportDate = exportDate;
            }
            
            this.ExportDate = exportDate;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for HealthcheckDocumentsDatabase and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            
            this.Description = description;
        }
        
        /// <summary>
        /// Database identifier.
        /// </summary>
        /// <value>Database identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Database version.
        /// </summary>
        /// <value>Database version.</value>
        [DataMember(Name="version", EmitDefaultValue=true)]
        public string Version { get; set; }

        /// <summary>
        /// Date of database creation.
        /// </summary>
        /// <value>Date of database creation.</value>
        [DataMember(Name="exportDate", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ExportDate { get; set; }

        /// <summary>
        /// Description of the database contents, such as the list of supported countries and documents.
        /// </summary>
        /// <value>Description of the database contents, such as the list of supported countries and documents.</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HealthcheckDocumentsDatabase {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  ExportDate: ").Append(ExportDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HealthcheckDocumentsDatabase);
        }

        /// <summary>
        /// Returns true if HealthcheckDocumentsDatabase instances are equal
        /// </summary>
        /// <param name="input">Instance of HealthcheckDocumentsDatabase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HealthcheckDocumentsDatabase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.ExportDate == input.ExportDate ||
                    (this.ExportDate != null &&
                    this.ExportDate.Equals(input.ExportDate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.ExportDate != null)
                    hashCode = hashCode * 59 + this.ExportDate.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
