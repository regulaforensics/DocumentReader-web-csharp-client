// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Database information.
    /// </summary>
    public partial class HealthcheckDocumentsDatabase : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthcheckDocumentsDatabase" /> class.
        /// </summary>
        /// <param name="id">Database identifier.</param>
        /// <param name="varVersion">Database version.</param>
        /// <param name="exportDate">Date of database creation.</param>
        /// <param name="description">Description of the database contents, such as the list of supported countries and documents.</param>
        [JsonConstructor]
        public HealthcheckDocumentsDatabase(string? id = default, string? varVersion = default, string? exportDate = default, string? description = default)
        {
            Id = id;
            VarVersion = varVersion;
            ExportDate = exportDate;
            Description = description;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Database identifier.
        /// </summary>
        /// <value>Database identifier.</value>
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Database version.
        /// </summary>
        /// <value>Database version.</value>
        [JsonPropertyName("version")]
        public string? VarVersion { get; set; }

        /// <summary>
        /// Date of database creation.
        /// </summary>
        /// <value>Date of database creation.</value>
        [JsonPropertyName("exportDate")]
        public string? ExportDate { get; set; }

        /// <summary>
        /// Description of the database contents, such as the list of supported countries and documents.
        /// </summary>
        /// <value>Description of the database contents, such as the list of supported countries and documents.</value>
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HealthcheckDocumentsDatabase {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  ExportDate: ").Append(ExportDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HealthcheckDocumentsDatabase" />
    /// </summary>
    public class HealthcheckDocumentsDatabaseJsonConverter : JsonConverter<HealthcheckDocumentsDatabase>
    {
        /// <summary>
        /// Deserializes json to <see cref="HealthcheckDocumentsDatabase" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HealthcheckDocumentsDatabase Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> varVersion = default;
            Option<string?> exportDate = default;
            Option<string?> description = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "exportDate":
                            exportDate = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class HealthcheckDocumentsDatabase.", nameof(id));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class HealthcheckDocumentsDatabase.", nameof(varVersion));

            if (!exportDate.IsSet)
                throw new ArgumentException("Property is required for class HealthcheckDocumentsDatabase.", nameof(exportDate));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class HealthcheckDocumentsDatabase.", nameof(description));

            return new HealthcheckDocumentsDatabase(id.Value!, varVersion.Value!, exportDate.Value!, description.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="HealthcheckDocumentsDatabase" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="healthcheckDocumentsDatabase"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HealthcheckDocumentsDatabase healthcheckDocumentsDatabase, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, healthcheckDocumentsDatabase, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HealthcheckDocumentsDatabase" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="healthcheckDocumentsDatabase"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HealthcheckDocumentsDatabase healthcheckDocumentsDatabase, JsonSerializerOptions jsonSerializerOptions)
        {
            if (healthcheckDocumentsDatabase.Id != null)
                writer.WriteString("id", healthcheckDocumentsDatabase.Id);
            else
                writer.WriteNull("id");

            if (healthcheckDocumentsDatabase.VarVersion != null)
                writer.WriteString("version", healthcheckDocumentsDatabase.VarVersion);
            else
                writer.WriteNull("version");

            if (healthcheckDocumentsDatabase.ExportDate != null)
                writer.WriteString("exportDate", healthcheckDocumentsDatabase.ExportDate);
            else
                writer.WriteNull("exportDate");

            if (healthcheckDocumentsDatabase.Description != null)
                writer.WriteString("description", healthcheckDocumentsDatabase.Description);
            else
                writer.WriteNull("description");
        }
    }
}
