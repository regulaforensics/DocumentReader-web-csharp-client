/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TextAvailableSource
    /// </summary>
    [DataContract(Name = "TextAvailableSource")]
    public partial class TextAvailableSource : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public Source Source { get; set; }

        /// <summary>
        /// Gets or Sets ValidityStatus
        /// </summary>
        [DataMember(Name = "validityStatus", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult ValidityStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextAvailableSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextAvailableSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextAvailableSource" /> class.
        /// </summary>
        /// <param name="source">source (required).</param>
        /// <param name="validityStatus">validityStatus (required).</param>
        /// <param name="containerType">Same as Result type, but used for safe parsing of not-described values. See Result type. (default to 0).</param>
        public TextAvailableSource(Source source = default(Source), CheckResult validityStatus = default(CheckResult), int containerType = 0)
        {
            this.Source = source;
            this.ValidityStatus = validityStatus;
            this.ContainerType = containerType;
        }

        /// <summary>
        /// Same as Result type, but used for safe parsing of not-described values. See Result type.
        /// </summary>
        /// <value>Same as Result type, but used for safe parsing of not-described values. See Result type.</value>
        [DataMember(Name = "containerType", EmitDefaultValue = false)]
        public int? ContainerType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextAvailableSource {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  ValidityStatus: ").Append(ValidityStatus).Append("\n");
            sb.Append("  ContainerType: ").Append(ContainerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
