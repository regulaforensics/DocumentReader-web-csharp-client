// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// FaceItem
    /// </summary>
    public partial class FaceItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceItem" /> class.
        /// </summary>
        /// <param name="coincidenceToPhotoArea">coincidenceToPhotoArea</param>
        /// <param name="faceRect">faceRect</param>
        /// <param name="fieldRect">fieldRect</param>
        /// <param name="graphFieldNumber">graphFieldNumber</param>
        /// <param name="landmarks">landmarks</param>
        /// <param name="lightType">lightType</param>
        /// <param name="orientation">orientation</param>
        /// <param name="probability">probability</param>
        [JsonConstructor]
        public FaceItem(int coincidenceToPhotoArea, RectangleCoordinates faceRect, RectangleCoordinates fieldRect, int graphFieldNumber, List<Point> landmarks, Light lightType, int orientation, int probability)
        {
            CoincidenceToPhotoArea = coincidenceToPhotoArea;
            FaceRect = faceRect;
            FieldRect = fieldRect;
            GraphFieldNumber = graphFieldNumber;
            Landmarks = landmarks;
            LightType = lightType;
            Orientation = orientation;
            Probability = probability;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets LightType
        /// </summary>
        [JsonPropertyName("LightType")]
        public Light LightType { get; set; }

        /// <summary>
        /// Gets or Sets CoincidenceToPhotoArea
        /// </summary>
        [JsonPropertyName("CoincidenceToPhotoArea")]
        public int CoincidenceToPhotoArea { get; set; }

        /// <summary>
        /// Gets or Sets FaceRect
        /// </summary>
        [JsonPropertyName("FaceRect")]
        public RectangleCoordinates FaceRect { get; set; }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [JsonPropertyName("FieldRect")]
        public RectangleCoordinates FieldRect { get; set; }

        /// <summary>
        /// Gets or Sets GraphFieldNumber
        /// </summary>
        [JsonPropertyName("GraphFieldNumber")]
        public int GraphFieldNumber { get; set; }

        /// <summary>
        /// Gets or Sets Landmarks
        /// </summary>
        [JsonPropertyName("Landmarks")]
        public List<Point> Landmarks { get; set; }

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [JsonPropertyName("Orientation")]
        public int Orientation { get; set; }

        /// <summary>
        /// Gets or Sets Probability
        /// </summary>
        [JsonPropertyName("Probability")]
        public int Probability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaceItem {\n");
            sb.Append("  CoincidenceToPhotoArea: ").Append(CoincidenceToPhotoArea).Append("\n");
            sb.Append("  FaceRect: ").Append(FaceRect).Append("\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  GraphFieldNumber: ").Append(GraphFieldNumber).Append("\n");
            sb.Append("  Landmarks: ").Append(Landmarks).Append("\n");
            sb.Append("  LightType: ").Append(LightType).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FaceItem" />
    /// </summary>
    public class FaceItemJsonConverter : JsonConverter<FaceItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="FaceItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FaceItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> coincidenceToPhotoArea = default;
            Option<RectangleCoordinates?> faceRect = default;
            Option<RectangleCoordinates?> fieldRect = default;
            Option<int?> graphFieldNumber = default;
            Option<List<Point>?> landmarks = default;
            Option<Light?> lightType = default;
            Option<int?> orientation = default;
            Option<int?> probability = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "CoincidenceToPhotoArea":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                coincidenceToPhotoArea = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "FaceRect":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                faceRect = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "FieldRect":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldRect = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "GraphFieldNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                graphFieldNumber = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Landmarks":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                landmarks = new Option<List<Point>?>(JsonSerializer.Deserialize<List<Point>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "LightType":
                            string? lightTypeRawValue = utf8JsonReader.GetString();
                            if (lightTypeRawValue != null)
                                lightType = new Option<Light?>(LightValueConverter.FromStringOrDefault(lightTypeRawValue));
                            break;
                        case "Orientation":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                orientation = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Probability":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                probability = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!coincidenceToPhotoArea.IsSet)
                throw new ArgumentException("Property is required for class FaceItem.", nameof(coincidenceToPhotoArea));

            if (!faceRect.IsSet)
                throw new ArgumentException("Property is required for class FaceItem.", nameof(faceRect));

            if (!fieldRect.IsSet)
                throw new ArgumentException("Property is required for class FaceItem.", nameof(fieldRect));

            if (!graphFieldNumber.IsSet)
                throw new ArgumentException("Property is required for class FaceItem.", nameof(graphFieldNumber));

            if (!landmarks.IsSet)
                throw new ArgumentException("Property is required for class FaceItem.", nameof(landmarks));

            if (!lightType.IsSet)
                throw new ArgumentException("Property is required for class FaceItem.", nameof(lightType));

            if (!orientation.IsSet)
                throw new ArgumentException("Property is required for class FaceItem.", nameof(orientation));

            if (!probability.IsSet)
                throw new ArgumentException("Property is required for class FaceItem.", nameof(probability));

            if (coincidenceToPhotoArea.IsSet && coincidenceToPhotoArea.Value == null)
                throw new ArgumentNullException(nameof(coincidenceToPhotoArea), "Property is not nullable for class FaceItem.");

            if (faceRect.IsSet && faceRect.Value == null)
                throw new ArgumentNullException(nameof(faceRect), "Property is not nullable for class FaceItem.");

            if (fieldRect.IsSet && fieldRect.Value == null)
                throw new ArgumentNullException(nameof(fieldRect), "Property is not nullable for class FaceItem.");

            if (graphFieldNumber.IsSet && graphFieldNumber.Value == null)
                throw new ArgumentNullException(nameof(graphFieldNumber), "Property is not nullable for class FaceItem.");

            if (landmarks.IsSet && landmarks.Value == null)
                throw new ArgumentNullException(nameof(landmarks), "Property is not nullable for class FaceItem.");

            if (lightType.IsSet && lightType.Value == null)
                throw new ArgumentNullException(nameof(lightType), "Property is not nullable for class FaceItem.");

            if (orientation.IsSet && orientation.Value == null)
                throw new ArgumentNullException(nameof(orientation), "Property is not nullable for class FaceItem.");

            if (probability.IsSet && probability.Value == null)
                throw new ArgumentNullException(nameof(probability), "Property is not nullable for class FaceItem.");

            return new FaceItem(coincidenceToPhotoArea.Value!.Value!, faceRect.Value!, fieldRect.Value!, graphFieldNumber.Value!.Value!, landmarks.Value!, lightType.Value!.Value!, orientation.Value!.Value!, probability.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="FaceItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="faceItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FaceItem faceItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, faceItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FaceItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="faceItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FaceItem faceItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (faceItem.FaceRect == null)
                throw new ArgumentNullException(nameof(faceItem.FaceRect), "Property is required for class FaceItem.");

            if (faceItem.FieldRect == null)
                throw new ArgumentNullException(nameof(faceItem.FieldRect), "Property is required for class FaceItem.");

            if (faceItem.Landmarks == null)
                throw new ArgumentNullException(nameof(faceItem.Landmarks), "Property is required for class FaceItem.");

            writer.WriteNumber("CoincidenceToPhotoArea", faceItem.CoincidenceToPhotoArea);

            writer.WritePropertyName("FaceRect");
            JsonSerializer.Serialize(writer, faceItem.FaceRect, jsonSerializerOptions);
            writer.WritePropertyName("FieldRect");
            JsonSerializer.Serialize(writer, faceItem.FieldRect, jsonSerializerOptions);
            writer.WriteNumber("GraphFieldNumber", faceItem.GraphFieldNumber);

            writer.WritePropertyName("Landmarks");
            JsonSerializer.Serialize(writer, faceItem.Landmarks, jsonSerializerOptions);
            var lightTypeRawValue = LightValueConverter.ToJsonValue(faceItem.LightType);
            writer.WriteNumber("LightType", lightTypeRawValue);

            writer.WriteNumber("Orientation", faceItem.Orientation);

            writer.WriteNumber("Probability", faceItem.Probability);
        }
    }
}
