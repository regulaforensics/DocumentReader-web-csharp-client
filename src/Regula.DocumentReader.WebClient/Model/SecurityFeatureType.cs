// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Enumeration contains identifiers determining type of features for a document authenticity checks: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/security-feature-type/
    /// </summary>
    /// <value>Enumeration contains identifiers determining type of features for a document authenticity checks: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/security-feature-type/</value>
    public enum SecurityFeatureType
    {
        /// <summary>
        /// Enum BLANK for value: 0
        /// </summary>
        BLANK = 0,

        /// <summary>
        /// Enum FILL for value: 1
        /// </summary>
        FILL = 1,

        /// <summary>
        /// Enum PHOTO for value: 2
        /// </summary>
        PHOTO = 2,

        /// <summary>
        /// Enum MRZ for value: 3
        /// </summary>
        MRZ = 3,

        /// <summary>
        /// Enum FALSE_LUMINESCENCE for value: 4
        /// </summary>
        FALSE_LUMINESCENCE = 4,

        /// <summary>
        /// Enum HOLO_SIMPLE for value: 5
        /// </summary>
        HOLO_SIMPLE = 5,

        /// <summary>
        /// Enum HOLO_VERIFY_STATIC for value: 6
        /// </summary>
        HOLO_VERIFY_STATIC = 6,

        /// <summary>
        /// Enum HOLO_VERIFY_MULTI_STATIC for value: 7
        /// </summary>
        HOLO_VERIFY_MULTI_STATIC = 7,

        /// <summary>
        /// Enum HOLO_VERIFY_DYNAMIC for value: 8
        /// </summary>
        HOLO_VERIFY_DYNAMIC = 8,

        /// <summary>
        /// Enum PATTERN_NOT_INTERRUPTED for value: 9
        /// </summary>
        PATTERN_NOT_INTERRUPTED = 9,

        /// <summary>
        /// Enum PATTERN_NOT_SHIFTED for value: 10
        /// </summary>
        PATTERN_NOT_SHIFTED = 10,

        /// <summary>
        /// Enum PATTERN_SAME_COLORS for value: 11
        /// </summary>
        PATTERN_SAME_COLORS = 11,

        /// <summary>
        /// Enum PATTERN_IR_INVISIBLE for value: 12
        /// </summary>
        PATTERN_IR_INVISIBLE = 12,

        /// <summary>
        /// Enum PHOTO_SIZE_CHECK for value: 13
        /// </summary>
        PHOTO_SIZE_CHECK = 13,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_VS_GHOST for value: 14
        /// </summary>
        PORTRAIT_COMPARISON_VS_GHOST = 14,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_VS_RFID for value: 15
        /// </summary>
        PORTRAIT_COMPARISON_VS_RFID = 15,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_VS_VISUAL for value: 16
        /// </summary>
        PORTRAIT_COMPARISON_VS_VISUAL = 16,

        /// <summary>
        /// Enum BARCODE for value: 17
        /// </summary>
        BARCODE = 17,

        /// <summary>
        /// Enum PATTERN_DIFFERENT_LINES_THICKNESS for value: 18
        /// </summary>
        PATTERN_DIFFERENT_LINES_THICKNESS = 18,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_VS_CAMERA for value: 19
        /// </summary>
        PORTRAIT_COMPARISON_VS_CAMERA = 19,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_RFID_VS_CAMERA for value: 20
        /// </summary>
        PORTRAIT_COMPARISON_RFID_VS_CAMERA = 20,

        /// <summary>
        /// Enum GHOST_PHOTO for value: 21
        /// </summary>
        GHOST_PHOTO = 21,

        /// <summary>
        /// Enum CLEAR_GHOST_PHOTO for value: 22
        /// </summary>
        CLEAR_GHOST_PHOTO = 22,

        /// <summary>
        /// Enum INVISIBLE_OBJECT for value: 23
        /// </summary>
        INVISIBLE_OBJECT = 23,

        /// <summary>
        /// Enum LOW_CONTRAST_OBJECT for value: 24
        /// </summary>
        LOW_CONTRAST_OBJECT = 24,

        /// <summary>
        /// Enum PHOTO_COLOR for value: 25
        /// </summary>
        PHOTO_COLOR = 25,

        /// <summary>
        /// Enum PHOTO_SHAPE for value: 26
        /// </summary>
        PHOTO_SHAPE = 26,

        /// <summary>
        /// Enum PHOTO_CORNERS for value: 27
        /// </summary>
        PHOTO_CORNERS = 27,

        /// <summary>
        /// Enum OCR for value: 28
        /// </summary>
        OCR = 28,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_EXT_VS_VISUAL for value: 29
        /// </summary>
        PORTRAIT_COMPARISON_EXT_VS_VISUAL = 29,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_EXT_VS_RFID for value: 30
        /// </summary>
        PORTRAIT_COMPARISON_EXT_VS_RFID = 30,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_EXT_VS_CAMERA for value: 31
        /// </summary>
        PORTRAIT_COMPARISON_EXT_VS_CAMERA = 31,

        /// <summary>
        /// Enum LIVENESS_DEPTH for value: 32
        /// </summary>
        LIVENESS_DEPTH = 32,

        /// <summary>
        /// Enum MICRO_TEXT for value: 33
        /// </summary>
        MICRO_TEXT = 33,

        /// <summary>
        /// Enum FLUORESCENT_OBJECT for value: 34
        /// </summary>
        FLUORESCENT_OBJECT = 34,

        /// <summary>
        /// Enum LANDMARK_CHECK for value: 35
        /// </summary>
        LANDMARK_CHECK = 35,

        /// <summary>
        /// Enum FACE_PRESENCE for value: 36
        /// </summary>
        FACE_PRESENCE = 36,

        /// <summary>
        /// Enum FACE_ABSENCE for value: 38
        /// </summary>
        FACE_ABSENCE = 38,

        /// <summary>
        /// Enum LIVENESS_SCREEN_CAPTURE for value: 39
        /// </summary>
        LIVENESS_SCREEN_CAPTURE = 39,

        /// <summary>
        /// Enum LIVENESS_ELECTRONIC_DEVICE for value: 40
        /// </summary>
        LIVENESS_ELECTRONIC_DEVICE = 40,

        /// <summary>
        /// Enum LIVENESS_OVI for value: 41
        /// </summary>
        LIVENESS_OVI = 41,

        /// <summary>
        /// Enum BARCODE_SIZE_CHECK for value: 42
        /// </summary>
        BARCODE_SIZE_CHECK = 42,

        /// <summary>
        /// Enum LASINK for value: 43
        /// </summary>
        LASINK = 43,

        /// <summary>
        /// Enum LIVENESS_MLI for value: 44
        /// </summary>
        LIVENESS_MLI = 44,

        /// <summary>
        /// Enum LIVENESS_BARCODE_BACKGROUND for value: 45
        /// </summary>
        LIVENESS_BARCODE_BACKGROUND = 45,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_VS_BARCODE for value: 46
        /// </summary>
        PORTRAIT_COMPARISON_VS_BARCODE = 46,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_RFID_VS_BARCODE for value: 47
        /// </summary>
        PORTRAIT_COMPARISON_RFID_VS_BARCODE = 47,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_EXT_VS_BARCODE for value: 48
        /// </summary>
        PORTRAIT_COMPARISON_EXT_VS_BARCODE = 48,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_BARCODE_VS_CAMERA for value: 49
        /// </summary>
        PORTRAIT_COMPARISON_BARCODE_VS_CAMERA = 49,

        /// <summary>
        /// Enum CHECK_DIGITAL_SIGNATURE for value: 50
        /// </summary>
        CHECK_DIGITAL_SIGNATURE = 50,

        /// <summary>
        /// Enum CONTACT_CHIP_CLASSIFICATION for value: 51
        /// </summary>
        CONTACT_CHIP_CLASSIFICATION = 51,

        /// <summary>
        /// Enum HEAD_POSITION_CHECK for value: 52
        /// </summary>
        HEAD_POSITION_CHECK = 52,

        /// <summary>
        /// Enum LIVENESS_BLACK_AND_WHITE_COPY_CHECK for value: 53
        /// </summary>
        LIVENESS_BLACK_AND_WHITE_COPY_CHECK = 53
    }

    /// <summary>
    /// Converts <see cref="SecurityFeatureType"/> to and from the JSON value
    /// </summary>
    public static class SecurityFeatureTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SecurityFeatureType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SecurityFeatureType FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return SecurityFeatureType.BLANK;

            if (value.Equals((1).ToString()))
                return SecurityFeatureType.FILL;

            if (value.Equals((2).ToString()))
                return SecurityFeatureType.PHOTO;

            if (value.Equals((3).ToString()))
                return SecurityFeatureType.MRZ;

            if (value.Equals((4).ToString()))
                return SecurityFeatureType.FALSE_LUMINESCENCE;

            if (value.Equals((5).ToString()))
                return SecurityFeatureType.HOLO_SIMPLE;

            if (value.Equals((6).ToString()))
                return SecurityFeatureType.HOLO_VERIFY_STATIC;

            if (value.Equals((7).ToString()))
                return SecurityFeatureType.HOLO_VERIFY_MULTI_STATIC;

            if (value.Equals((8).ToString()))
                return SecurityFeatureType.HOLO_VERIFY_DYNAMIC;

            if (value.Equals((9).ToString()))
                return SecurityFeatureType.PATTERN_NOT_INTERRUPTED;

            if (value.Equals((10).ToString()))
                return SecurityFeatureType.PATTERN_NOT_SHIFTED;

            if (value.Equals((11).ToString()))
                return SecurityFeatureType.PATTERN_SAME_COLORS;

            if (value.Equals((12).ToString()))
                return SecurityFeatureType.PATTERN_IR_INVISIBLE;

            if (value.Equals((13).ToString()))
                return SecurityFeatureType.PHOTO_SIZE_CHECK;

            if (value.Equals((14).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_VS_GHOST;

            if (value.Equals((15).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_VS_RFID;

            if (value.Equals((16).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_VS_VISUAL;

            if (value.Equals((17).ToString()))
                return SecurityFeatureType.BARCODE;

            if (value.Equals((18).ToString()))
                return SecurityFeatureType.PATTERN_DIFFERENT_LINES_THICKNESS;

            if (value.Equals((19).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_VS_CAMERA;

            if (value.Equals((20).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_RFID_VS_CAMERA;

            if (value.Equals((21).ToString()))
                return SecurityFeatureType.GHOST_PHOTO;

            if (value.Equals((22).ToString()))
                return SecurityFeatureType.CLEAR_GHOST_PHOTO;

            if (value.Equals((23).ToString()))
                return SecurityFeatureType.INVISIBLE_OBJECT;

            if (value.Equals((24).ToString()))
                return SecurityFeatureType.LOW_CONTRAST_OBJECT;

            if (value.Equals((25).ToString()))
                return SecurityFeatureType.PHOTO_COLOR;

            if (value.Equals((26).ToString()))
                return SecurityFeatureType.PHOTO_SHAPE;

            if (value.Equals((27).ToString()))
                return SecurityFeatureType.PHOTO_CORNERS;

            if (value.Equals((28).ToString()))
                return SecurityFeatureType.OCR;

            if (value.Equals((29).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_EXT_VS_VISUAL;

            if (value.Equals((30).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_EXT_VS_RFID;

            if (value.Equals((31).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_EXT_VS_CAMERA;

            if (value.Equals((32).ToString()))
                return SecurityFeatureType.LIVENESS_DEPTH;

            if (value.Equals((33).ToString()))
                return SecurityFeatureType.MICRO_TEXT;

            if (value.Equals((34).ToString()))
                return SecurityFeatureType.FLUORESCENT_OBJECT;

            if (value.Equals((35).ToString()))
                return SecurityFeatureType.LANDMARK_CHECK;

            if (value.Equals((36).ToString()))
                return SecurityFeatureType.FACE_PRESENCE;

            if (value.Equals((38).ToString()))
                return SecurityFeatureType.FACE_ABSENCE;

            if (value.Equals((39).ToString()))
                return SecurityFeatureType.LIVENESS_SCREEN_CAPTURE;

            if (value.Equals((40).ToString()))
                return SecurityFeatureType.LIVENESS_ELECTRONIC_DEVICE;

            if (value.Equals((41).ToString()))
                return SecurityFeatureType.LIVENESS_OVI;

            if (value.Equals((42).ToString()))
                return SecurityFeatureType.BARCODE_SIZE_CHECK;

            if (value.Equals((43).ToString()))
                return SecurityFeatureType.LASINK;

            if (value.Equals((44).ToString()))
                return SecurityFeatureType.LIVENESS_MLI;

            if (value.Equals((45).ToString()))
                return SecurityFeatureType.LIVENESS_BARCODE_BACKGROUND;

            if (value.Equals((46).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_VS_BARCODE;

            if (value.Equals((47).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_RFID_VS_BARCODE;

            if (value.Equals((48).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_EXT_VS_BARCODE;

            if (value.Equals((49).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_BARCODE_VS_CAMERA;

            if (value.Equals((50).ToString()))
                return SecurityFeatureType.CHECK_DIGITAL_SIGNATURE;

            if (value.Equals((51).ToString()))
                return SecurityFeatureType.CONTACT_CHIP_CLASSIFICATION;

            if (value.Equals((52).ToString()))
                return SecurityFeatureType.HEAD_POSITION_CHECK;

            if (value.Equals((53).ToString()))
                return SecurityFeatureType.LIVENESS_BLACK_AND_WHITE_COPY_CHECK;

            throw new NotImplementedException($"Could not convert value to type SecurityFeatureType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="SecurityFeatureType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SecurityFeatureType? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return SecurityFeatureType.BLANK;

            if (value.Equals((1).ToString()))
                return SecurityFeatureType.FILL;

            if (value.Equals((2).ToString()))
                return SecurityFeatureType.PHOTO;

            if (value.Equals((3).ToString()))
                return SecurityFeatureType.MRZ;

            if (value.Equals((4).ToString()))
                return SecurityFeatureType.FALSE_LUMINESCENCE;

            if (value.Equals((5).ToString()))
                return SecurityFeatureType.HOLO_SIMPLE;

            if (value.Equals((6).ToString()))
                return SecurityFeatureType.HOLO_VERIFY_STATIC;

            if (value.Equals((7).ToString()))
                return SecurityFeatureType.HOLO_VERIFY_MULTI_STATIC;

            if (value.Equals((8).ToString()))
                return SecurityFeatureType.HOLO_VERIFY_DYNAMIC;

            if (value.Equals((9).ToString()))
                return SecurityFeatureType.PATTERN_NOT_INTERRUPTED;

            if (value.Equals((10).ToString()))
                return SecurityFeatureType.PATTERN_NOT_SHIFTED;

            if (value.Equals((11).ToString()))
                return SecurityFeatureType.PATTERN_SAME_COLORS;

            if (value.Equals((12).ToString()))
                return SecurityFeatureType.PATTERN_IR_INVISIBLE;

            if (value.Equals((13).ToString()))
                return SecurityFeatureType.PHOTO_SIZE_CHECK;

            if (value.Equals((14).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_VS_GHOST;

            if (value.Equals((15).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_VS_RFID;

            if (value.Equals((16).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_VS_VISUAL;

            if (value.Equals((17).ToString()))
                return SecurityFeatureType.BARCODE;

            if (value.Equals((18).ToString()))
                return SecurityFeatureType.PATTERN_DIFFERENT_LINES_THICKNESS;

            if (value.Equals((19).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_VS_CAMERA;

            if (value.Equals((20).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_RFID_VS_CAMERA;

            if (value.Equals((21).ToString()))
                return SecurityFeatureType.GHOST_PHOTO;

            if (value.Equals((22).ToString()))
                return SecurityFeatureType.CLEAR_GHOST_PHOTO;

            if (value.Equals((23).ToString()))
                return SecurityFeatureType.INVISIBLE_OBJECT;

            if (value.Equals((24).ToString()))
                return SecurityFeatureType.LOW_CONTRAST_OBJECT;

            if (value.Equals((25).ToString()))
                return SecurityFeatureType.PHOTO_COLOR;

            if (value.Equals((26).ToString()))
                return SecurityFeatureType.PHOTO_SHAPE;

            if (value.Equals((27).ToString()))
                return SecurityFeatureType.PHOTO_CORNERS;

            if (value.Equals((28).ToString()))
                return SecurityFeatureType.OCR;

            if (value.Equals((29).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_EXT_VS_VISUAL;

            if (value.Equals((30).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_EXT_VS_RFID;

            if (value.Equals((31).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_EXT_VS_CAMERA;

            if (value.Equals((32).ToString()))
                return SecurityFeatureType.LIVENESS_DEPTH;

            if (value.Equals((33).ToString()))
                return SecurityFeatureType.MICRO_TEXT;

            if (value.Equals((34).ToString()))
                return SecurityFeatureType.FLUORESCENT_OBJECT;

            if (value.Equals((35).ToString()))
                return SecurityFeatureType.LANDMARK_CHECK;

            if (value.Equals((36).ToString()))
                return SecurityFeatureType.FACE_PRESENCE;

            if (value.Equals((38).ToString()))
                return SecurityFeatureType.FACE_ABSENCE;

            if (value.Equals((39).ToString()))
                return SecurityFeatureType.LIVENESS_SCREEN_CAPTURE;

            if (value.Equals((40).ToString()))
                return SecurityFeatureType.LIVENESS_ELECTRONIC_DEVICE;

            if (value.Equals((41).ToString()))
                return SecurityFeatureType.LIVENESS_OVI;

            if (value.Equals((42).ToString()))
                return SecurityFeatureType.BARCODE_SIZE_CHECK;

            if (value.Equals((43).ToString()))
                return SecurityFeatureType.LASINK;

            if (value.Equals((44).ToString()))
                return SecurityFeatureType.LIVENESS_MLI;

            if (value.Equals((45).ToString()))
                return SecurityFeatureType.LIVENESS_BARCODE_BACKGROUND;

            if (value.Equals((46).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_VS_BARCODE;

            if (value.Equals((47).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_RFID_VS_BARCODE;

            if (value.Equals((48).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_EXT_VS_BARCODE;

            if (value.Equals((49).ToString()))
                return SecurityFeatureType.PORTRAIT_COMPARISON_BARCODE_VS_CAMERA;

            if (value.Equals((50).ToString()))
                return SecurityFeatureType.CHECK_DIGITAL_SIGNATURE;

            if (value.Equals((51).ToString()))
                return SecurityFeatureType.CONTACT_CHIP_CLASSIFICATION;

            if (value.Equals((52).ToString()))
                return SecurityFeatureType.HEAD_POSITION_CHECK;

            if (value.Equals((53).ToString()))
                return SecurityFeatureType.LIVENESS_BLACK_AND_WHITE_COPY_CHECK;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SecurityFeatureType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(SecurityFeatureType value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SecurityFeatureType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SecurityFeatureTypeJsonConverter : JsonConverter<SecurityFeatureType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SecurityFeatureType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SecurityFeatureType? result = rawValue == null
                ? null
                : SecurityFeatureTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the SecurityFeatureType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="securityFeatureType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SecurityFeatureType securityFeatureType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(securityFeatureType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SecurityFeatureType"/>
    /// </summary>
    public class SecurityFeatureTypeNullableJsonConverter : JsonConverter<SecurityFeatureType?>
    {
        /// <summary>
        /// Returns a SecurityFeatureType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SecurityFeatureType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SecurityFeatureType? result = rawValue == null
                ? null
                : SecurityFeatureTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="securityFeatureType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SecurityFeatureType? securityFeatureType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(securityFeatureType?.ToString() ?? "null");
        }
    }
}
