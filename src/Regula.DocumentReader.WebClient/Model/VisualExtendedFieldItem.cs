// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// VisualExtendedFieldItem
    /// </summary>
    public partial class VisualExtendedFieldItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VisualExtendedFieldItem" /> class.
        /// </summary>
        /// <param name="fieldType">fieldType</param>
        /// <param name="wFieldType">wFieldType</param>
        /// <param name="fieldName">Field symbolic name (null-terminated string)</param>
        /// <param name="stringsCount">Number of StringsResult array elements</param>
        /// <param name="stringsResult">Array of recognizing probabilities for a each line of text field. Only for Result.VISUAL_TEXT and Result.MRZ_TEXT results.</param>
        /// <param name="bufLength">Buf_Text text string length</param>
        /// <param name="bufText">Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;</param>
        /// <param name="fieldMask">fieldMask</param>
        /// <param name="validity">validity</param>
        /// <param name="inComparison">inComparison</param>
        /// <param name="wLCID">wLCID</param>
        /// <param name="reserved2">reserved2</param>
        /// <param name="reserved3">reserved3</param>
        [JsonConstructor]
        public VisualExtendedFieldItem(int fieldType, TextFieldType wFieldType, string fieldName, decimal stringsCount, List<StringRecognitionResult> stringsResult, decimal bufLength, string bufText, Option<string?> fieldMask = default, Option<int?> validity = default, Option<int?> inComparison = default, Option<int?> wLCID = default, Option<int?> reserved2 = default, Option<int?> reserved3 = default)
        {
            FieldType = fieldType;
            WFieldType = wFieldType;
            FieldName = fieldName;
            StringsCount = stringsCount;
            StringsResult = stringsResult;
            BufLength = bufLength;
            BufText = bufText;
            FieldMaskOption = fieldMask;
            ValidityOption = validity;
            InComparisonOption = inComparison;
            WLCIDOption = wLCID;
            Reserved2Option = reserved2;
            Reserved3Option = reserved3;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets WFieldType
        /// </summary>
        [JsonPropertyName("wFieldType")]
        public TextFieldType WFieldType { get; set; }

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [JsonPropertyName("FieldType")]
        public int FieldType { get; set; }

        /// <summary>
        /// Field symbolic name (null-terminated string)
        /// </summary>
        /// <value>Field symbolic name (null-terminated string)</value>
        [JsonPropertyName("FieldName")]
        public string FieldName { get; set; }

        /// <summary>
        /// Number of StringsResult array elements
        /// </summary>
        /// <value>Number of StringsResult array elements</value>
        [JsonPropertyName("StringsCount")]
        public decimal StringsCount { get; set; }

        /// <summary>
        /// Array of recognizing probabilities for a each line of text field. Only for Result.VISUAL_TEXT and Result.MRZ_TEXT results.
        /// </summary>
        /// <value>Array of recognizing probabilities for a each line of text field. Only for Result.VISUAL_TEXT and Result.MRZ_TEXT results.</value>
        [JsonPropertyName("StringsResult")]
        public List<StringRecognitionResult> StringsResult { get; set; }

        /// <summary>
        /// Buf_Text text string length
        /// </summary>
        /// <value>Buf_Text text string length</value>
        [JsonPropertyName("Buf_Length")]
        public decimal BufLength { get; set; }

        /// <summary>
        /// Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;
        /// </summary>
        /// <value>Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;</value>
        [JsonPropertyName("Buf_Text")]
        public string BufText { get; set; }

        /// <summary>
        /// Used to track the state of FieldMask
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FieldMaskOption { get; private set; }

        /// <summary>
        /// Gets or Sets FieldMask
        /// </summary>
        [JsonPropertyName("FieldMask")]
        public string? FieldMask { get { return this.FieldMaskOption; } set { this.FieldMaskOption = new(value); } }

        /// <summary>
        /// Used to track the state of Validity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ValidityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Validity
        /// </summary>
        [JsonPropertyName("Validity")]
        public int? Validity { get { return this.ValidityOption; } set { this.ValidityOption = new(value); } }

        /// <summary>
        /// Used to track the state of InComparison
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InComparisonOption { get; private set; }

        /// <summary>
        /// Gets or Sets InComparison
        /// </summary>
        [JsonPropertyName("InComparison")]
        public int? InComparison { get { return this.InComparisonOption; } set { this.InComparisonOption = new(value); } }

        /// <summary>
        /// Used to track the state of WLCID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WLCIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets WLCID
        /// </summary>
        [JsonPropertyName("wLCID")]
        public int? WLCID { get { return this.WLCIDOption; } set { this.WLCIDOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reserved2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> Reserved2Option { get; private set; }

        /// <summary>
        /// Gets or Sets Reserved2
        /// </summary>
        [JsonPropertyName("Reserved2")]
        public int? Reserved2 { get { return this.Reserved2Option; } set { this.Reserved2Option = new(value); } }

        /// <summary>
        /// Used to track the state of Reserved3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> Reserved3Option { get; private set; }

        /// <summary>
        /// Gets or Sets Reserved3
        /// </summary>
        [JsonPropertyName("Reserved3")]
        public int? Reserved3 { get { return this.Reserved3Option; } set { this.Reserved3Option = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VisualExtendedFieldItem {\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  WFieldType: ").Append(WFieldType).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  StringsCount: ").Append(StringsCount).Append("\n");
            sb.Append("  StringsResult: ").Append(StringsResult).Append("\n");
            sb.Append("  BufLength: ").Append(BufLength).Append("\n");
            sb.Append("  BufText: ").Append(BufText).Append("\n");
            sb.Append("  FieldMask: ").Append(FieldMask).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  InComparison: ").Append(InComparison).Append("\n");
            sb.Append("  WLCID: ").Append(WLCID).Append("\n");
            sb.Append("  Reserved2: ").Append(Reserved2).Append("\n");
            sb.Append("  Reserved3: ").Append(Reserved3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VisualExtendedFieldItem" />
    /// </summary>
    public class VisualExtendedFieldItemJsonConverter : JsonConverter<VisualExtendedFieldItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="VisualExtendedFieldItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VisualExtendedFieldItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> fieldType = default;
            Option<TextFieldType?> wFieldType = default;
            Option<string?> fieldName = default;
            Option<decimal?> stringsCount = default;
            Option<List<StringRecognitionResult>?> stringsResult = default;
            Option<decimal?> bufLength = default;
            Option<string?> bufText = default;
            Option<string?> fieldMask = default;
            Option<int?> validity = default;
            Option<int?> inComparison = default;
            Option<int?> wLCID = default;
            Option<int?> reserved2 = default;
            Option<int?> reserved3 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "FieldType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "wFieldType":
                            string? wFieldTypeRawValue = utf8JsonReader.GetString();
                            if (wFieldTypeRawValue != null)
                                wFieldType = new Option<TextFieldType?>(TextFieldTypeValueConverter.FromStringOrDefault(wFieldTypeRawValue));
                            break;
                        case "FieldName":
                            fieldName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "StringsCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stringsCount = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "StringsResult":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stringsResult = new Option<List<StringRecognitionResult>?>(JsonSerializer.Deserialize<List<StringRecognitionResult>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Buf_Length":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bufLength = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Buf_Text":
                            bufText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "FieldMask":
                            fieldMask = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Validity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validity = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "InComparison":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inComparison = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "wLCID":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                wLCID = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Reserved2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved2 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Reserved3":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved3 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fieldType.IsSet)
                throw new ArgumentException("Property is required for class VisualExtendedFieldItem.", nameof(fieldType));

            if (!wFieldType.IsSet)
                throw new ArgumentException("Property is required for class VisualExtendedFieldItem.", nameof(wFieldType));

            if (!fieldName.IsSet)
                throw new ArgumentException("Property is required for class VisualExtendedFieldItem.", nameof(fieldName));

            if (!stringsCount.IsSet)
                throw new ArgumentException("Property is required for class VisualExtendedFieldItem.", nameof(stringsCount));

            if (!stringsResult.IsSet)
                throw new ArgumentException("Property is required for class VisualExtendedFieldItem.", nameof(stringsResult));

            if (!bufLength.IsSet)
                throw new ArgumentException("Property is required for class VisualExtendedFieldItem.", nameof(bufLength));

            if (!bufText.IsSet)
                throw new ArgumentException("Property is required for class VisualExtendedFieldItem.", nameof(bufText));

            if (fieldType.IsSet && fieldType.Value == null)
                throw new ArgumentNullException(nameof(fieldType), "Property is not nullable for class VisualExtendedFieldItem.");

            if (wFieldType.IsSet && wFieldType.Value == null)
                throw new ArgumentNullException(nameof(wFieldType), "Property is not nullable for class VisualExtendedFieldItem.");

            if (fieldName.IsSet && fieldName.Value == null)
                throw new ArgumentNullException(nameof(fieldName), "Property is not nullable for class VisualExtendedFieldItem.");

            if (stringsCount.IsSet && stringsCount.Value == null)
                throw new ArgumentNullException(nameof(stringsCount), "Property is not nullable for class VisualExtendedFieldItem.");

            if (stringsResult.IsSet && stringsResult.Value == null)
                throw new ArgumentNullException(nameof(stringsResult), "Property is not nullable for class VisualExtendedFieldItem.");

            if (bufLength.IsSet && bufLength.Value == null)
                throw new ArgumentNullException(nameof(bufLength), "Property is not nullable for class VisualExtendedFieldItem.");

            if (bufText.IsSet && bufText.Value == null)
                throw new ArgumentNullException(nameof(bufText), "Property is not nullable for class VisualExtendedFieldItem.");

            if (fieldMask.IsSet && fieldMask.Value == null)
                throw new ArgumentNullException(nameof(fieldMask), "Property is not nullable for class VisualExtendedFieldItem.");

            if (validity.IsSet && validity.Value == null)
                throw new ArgumentNullException(nameof(validity), "Property is not nullable for class VisualExtendedFieldItem.");

            if (inComparison.IsSet && inComparison.Value == null)
                throw new ArgumentNullException(nameof(inComparison), "Property is not nullable for class VisualExtendedFieldItem.");

            if (wLCID.IsSet && wLCID.Value == null)
                throw new ArgumentNullException(nameof(wLCID), "Property is not nullable for class VisualExtendedFieldItem.");

            if (reserved2.IsSet && reserved2.Value == null)
                throw new ArgumentNullException(nameof(reserved2), "Property is not nullable for class VisualExtendedFieldItem.");

            if (reserved3.IsSet && reserved3.Value == null)
                throw new ArgumentNullException(nameof(reserved3), "Property is not nullable for class VisualExtendedFieldItem.");

            return new VisualExtendedFieldItem(fieldType.Value!.Value!, wFieldType.Value!.Value!, fieldName.Value!, stringsCount.Value!.Value!, stringsResult.Value!, bufLength.Value!.Value!, bufText.Value!, fieldMask, validity, inComparison, wLCID, reserved2, reserved3);
        }

        /// <summary>
        /// Serializes a <see cref="VisualExtendedFieldItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="visualExtendedFieldItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VisualExtendedFieldItem visualExtendedFieldItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, visualExtendedFieldItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VisualExtendedFieldItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="visualExtendedFieldItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VisualExtendedFieldItem visualExtendedFieldItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (visualExtendedFieldItem.FieldName == null)
                throw new ArgumentNullException(nameof(visualExtendedFieldItem.FieldName), "Property is required for class VisualExtendedFieldItem.");

            if (visualExtendedFieldItem.StringsResult == null)
                throw new ArgumentNullException(nameof(visualExtendedFieldItem.StringsResult), "Property is required for class VisualExtendedFieldItem.");

            if (visualExtendedFieldItem.BufText == null)
                throw new ArgumentNullException(nameof(visualExtendedFieldItem.BufText), "Property is required for class VisualExtendedFieldItem.");

            if (visualExtendedFieldItem.FieldMaskOption.IsSet && visualExtendedFieldItem.FieldMask == null)
                throw new ArgumentNullException(nameof(visualExtendedFieldItem.FieldMask), "Property is required for class VisualExtendedFieldItem.");

            writer.WriteNumber("FieldType", visualExtendedFieldItem.FieldType);

            var wFieldTypeRawValue = TextFieldTypeValueConverter.ToJsonValue(visualExtendedFieldItem.WFieldType);
            writer.WriteNumber("wFieldType", wFieldTypeRawValue);

            writer.WriteString("FieldName", visualExtendedFieldItem.FieldName);

            writer.WriteNumber("StringsCount", visualExtendedFieldItem.StringsCount);

            writer.WritePropertyName("StringsResult");
            JsonSerializer.Serialize(writer, visualExtendedFieldItem.StringsResult, jsonSerializerOptions);
            writer.WriteNumber("Buf_Length", visualExtendedFieldItem.BufLength);

            writer.WriteString("Buf_Text", visualExtendedFieldItem.BufText);

            if (visualExtendedFieldItem.FieldMaskOption.IsSet)
                writer.WriteString("FieldMask", visualExtendedFieldItem.FieldMask);

            if (visualExtendedFieldItem.ValidityOption.IsSet)
                writer.WriteNumber("Validity", visualExtendedFieldItem.ValidityOption.Value!.Value);

            if (visualExtendedFieldItem.InComparisonOption.IsSet)
                writer.WriteNumber("InComparison", visualExtendedFieldItem.InComparisonOption.Value!.Value);

            if (visualExtendedFieldItem.WLCIDOption.IsSet)
                writer.WriteNumber("wLCID", visualExtendedFieldItem.WLCIDOption.Value!.Value);

            if (visualExtendedFieldItem.Reserved2Option.IsSet)
                writer.WriteNumber("Reserved2", visualExtendedFieldItem.Reserved2Option.Value!.Value);

            if (visualExtendedFieldItem.Reserved3Option.IsSet)
                writer.WriteNumber("Reserved3", visualExtendedFieldItem.Reserved3Option.Value!.Value);
        }
    }
}
