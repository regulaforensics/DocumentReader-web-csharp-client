/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// VisualExtendedFieldItem
    /// </summary>
    [DataContract(Name = "VisualExtendedFieldItem")]
    public partial class VisualExtendedFieldItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets WFieldType
        /// </summary>
        [DataMember(Name = "wFieldType", IsRequired = true, EmitDefaultValue = true)]
        public TextFieldType WFieldType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VisualExtendedFieldItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VisualExtendedFieldItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VisualExtendedFieldItem" /> class.
        /// </summary>
        /// <param name="fieldType">fieldType (required).</param>
        /// <param name="wFieldType">wFieldType (required).</param>
        /// <param name="fieldName">Field symbolic name (null-terminated string) (required).</param>
        /// <param name="stringsCount">Number of StringsResult array elements (required).</param>
        /// <param name="stringsResult">Array of recognizing probabilities for a each line of text field. Only for Result.VISUAL_TEXT and Result.MRZ_TEXT results. (required).</param>
        /// <param name="bufLength">Buf_Text text string length (required).</param>
        /// <param name="bufText">Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39; (required).</param>
        /// <param name="fieldMask">fieldMask.</param>
        /// <param name="validity">validity.</param>
        /// <param name="inComparison">inComparison.</param>
        /// <param name="wLCID">wLCID.</param>
        /// <param name="reserved2">reserved2.</param>
        /// <param name="reserved3">reserved3.</param>
        public VisualExtendedFieldItem(int fieldType = default(int), TextFieldType wFieldType = default(TextFieldType), string fieldName = default(string), decimal stringsCount = default(decimal), List<StringRecognitionResult> stringsResult = default(List<StringRecognitionResult>), decimal bufLength = default(decimal), string bufText = default(string), string fieldMask = default(string), int validity = default(int), int inComparison = default(int), int wLCID = default(int), int reserved2 = default(int), int reserved3 = default(int))
        {
            this.FieldType = fieldType;
            this.WFieldType = wFieldType;
            // to ensure "fieldName" is required (not null)
            if (fieldName == null)
            {
                throw new ArgumentNullException("fieldName is a required property for VisualExtendedFieldItem and cannot be null");
            }
            this.FieldName = fieldName;
            this.StringsCount = stringsCount;
            // to ensure "stringsResult" is required (not null)
            if (stringsResult == null)
            {
                throw new ArgumentNullException("stringsResult is a required property for VisualExtendedFieldItem and cannot be null");
            }
            this.StringsResult = stringsResult;
            this.BufLength = bufLength;
            // to ensure "bufText" is required (not null)
            if (bufText == null)
            {
                throw new ArgumentNullException("bufText is a required property for VisualExtendedFieldItem and cannot be null");
            }
            this.BufText = bufText;
            this.FieldMask = fieldMask;
            this.Validity = validity;
            this.InComparison = inComparison;
            this.WLCID = wLCID;
            this.Reserved2 = reserved2;
            this.Reserved3 = reserved3;
        }

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name = "FieldType", IsRequired = true, EmitDefaultValue = true)]
        public int FieldType { get; set; }

        /// <summary>
        /// Field symbolic name (null-terminated string)
        /// </summary>
        /// <value>Field symbolic name (null-terminated string)</value>
        [DataMember(Name = "FieldName", IsRequired = true, EmitDefaultValue = true)]
        public string FieldName { get; set; }

        /// <summary>
        /// Number of StringsResult array elements
        /// </summary>
        /// <value>Number of StringsResult array elements</value>
        [DataMember(Name = "StringsCount", IsRequired = true, EmitDefaultValue = true)]
        public decimal StringsCount { get; set; }

        /// <summary>
        /// Array of recognizing probabilities for a each line of text field. Only for Result.VISUAL_TEXT and Result.MRZ_TEXT results.
        /// </summary>
        /// <value>Array of recognizing probabilities for a each line of text field. Only for Result.VISUAL_TEXT and Result.MRZ_TEXT results.</value>
        [DataMember(Name = "StringsResult", IsRequired = true, EmitDefaultValue = true)]
        public List<StringRecognitionResult> StringsResult { get; set; }

        /// <summary>
        /// Buf_Text text string length
        /// </summary>
        /// <value>Buf_Text text string length</value>
        [DataMember(Name = "Buf_Length", IsRequired = true, EmitDefaultValue = true)]
        public decimal BufLength { get; set; }

        /// <summary>
        /// Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;
        /// </summary>
        /// <value>Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;</value>
        [DataMember(Name = "Buf_Text", IsRequired = true, EmitDefaultValue = true)]
        public string BufText { get; set; }

        /// <summary>
        /// Gets or Sets FieldMask
        /// </summary>
        [DataMember(Name = "FieldMask", EmitDefaultValue = false)]
        public string FieldMask { get; set; }

        /// <summary>
        /// Gets or Sets Validity
        /// </summary>
        [DataMember(Name = "Validity", EmitDefaultValue = false)]
        public int Validity { get; set; }

        /// <summary>
        /// Gets or Sets InComparison
        /// </summary>
        [DataMember(Name = "InComparison", EmitDefaultValue = false)]
        public int InComparison { get; set; }

        /// <summary>
        /// Gets or Sets WLCID
        /// </summary>
        [DataMember(Name = "wLCID", EmitDefaultValue = false)]
        public int WLCID { get; set; }

        /// <summary>
        /// Gets or Sets Reserved2
        /// </summary>
        [DataMember(Name = "Reserved2", EmitDefaultValue = false)]
        public int Reserved2 { get; set; }

        /// <summary>
        /// Gets or Sets Reserved3
        /// </summary>
        [DataMember(Name = "Reserved3", EmitDefaultValue = false)]
        public int Reserved3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VisualExtendedFieldItem {\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  WFieldType: ").Append(WFieldType).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  StringsCount: ").Append(StringsCount).Append("\n");
            sb.Append("  StringsResult: ").Append(StringsResult).Append("\n");
            sb.Append("  BufLength: ").Append(BufLength).Append("\n");
            sb.Append("  BufText: ").Append(BufText).Append("\n");
            sb.Append("  FieldMask: ").Append(FieldMask).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  InComparison: ").Append(InComparison).Append("\n");
            sb.Append("  WLCID: ").Append(WLCID).Append("\n");
            sb.Append("  Reserved2: ").Append(Reserved2).Append("\n");
            sb.Append("  Reserved3: ").Append(Reserved3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
