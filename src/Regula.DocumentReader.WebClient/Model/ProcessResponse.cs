/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ProcessResponse
    /// </summary>
    [DataContract(Name = "ProcessResponse")]
    public partial class ProcessResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ChipPage
        /// </summary>
        [DataMember(Name = "ChipPage", IsRequired = true, EmitDefaultValue = true)]
        public RfidLocation ChipPage { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingFinished
        /// </summary>
        [DataMember(Name = "ProcessingFinished", IsRequired = true, EmitDefaultValue = true)]
        public ProcessingStatus ProcessingFinished { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessResponse" /> class.
        /// </summary>
        /// <param name="chipPage">chipPage (required).</param>
        /// <param name="coreLibResultCode">coreLibResultCode.</param>
        /// <param name="processingFinished">processingFinished (required).</param>
        /// <param name="containerList">containerList (required).</param>
        /// <param name="transactionInfo">transactionInfo (required).</param>
        /// <param name="log">Base64 encoded transaction processing log.</param>
        /// <param name="passBackObject">Free-form object provided in request. See passBackObject property of ProcessRequest..</param>
        /// <param name="morePagesAvailable">morePagesAvailable (required).</param>
        /// <param name="elapsedTime">Time the document processing has taken, ms. (required).</param>
        /// <param name="metadata">metadata.</param>
        public ProcessResponse(RfidLocation chipPage = default(RfidLocation), int coreLibResultCode = default(int), ProcessingStatus processingFinished = default(ProcessingStatus), ContainerList containerList = default(ContainerList), TransactionInfo transactionInfo = default(TransactionInfo), string log = default(string), Dictionary<string, Object> passBackObject = default(Dictionary<string, Object>), int morePagesAvailable = default(int), int elapsedTime = default(int), Dictionary<string, Object> metadata = default(Dictionary<string, Object>))
        {
            this.ChipPage = chipPage;
            this.ProcessingFinished = processingFinished;
            // to ensure "containerList" is required (not null)
            if (containerList == null)
            {
                throw new ArgumentNullException("containerList is a required property for ProcessResponse and cannot be null");
            }
            this.ContainerList = containerList;
            // to ensure "transactionInfo" is required (not null)
            if (transactionInfo == null)
            {
                throw new ArgumentNullException("transactionInfo is a required property for ProcessResponse and cannot be null");
            }
            this.TransactionInfo = transactionInfo;
            this.MorePagesAvailable = morePagesAvailable;
            this.ElapsedTime = elapsedTime;
            this.CoreLibResultCode = coreLibResultCode;
            this.Log = log;
            this.PassBackObject = passBackObject;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Gets or Sets CoreLibResultCode
        /// </summary>
        [DataMember(Name = "CoreLibResultCode", EmitDefaultValue = false)]
        public int? CoreLibResultCode { get; set; }

        /// <summary>
        /// Gets or Sets ContainerList
        /// </summary>
        [DataMember(Name = "ContainerList", IsRequired = true, EmitDefaultValue = true)]
        public ContainerList ContainerList { get; set; }

        /// <summary>
        /// Gets or Sets TransactionInfo
        /// </summary>
        [DataMember(Name = "TransactionInfo", IsRequired = true, EmitDefaultValue = true)]
        public TransactionInfo TransactionInfo { get; set; }

        /// <summary>
        /// Base64 encoded transaction processing log
        /// </summary>
        /// <value>Base64 encoded transaction processing log</value>
        [DataMember(Name = "log", EmitDefaultValue = false)]
        public string? Log { get; set; }

        /// <summary>
        /// Free-form object provided in request. See passBackObject property of ProcessRequest.
        /// </summary>
        /// <value>Free-form object provided in request. See passBackObject property of ProcessRequest.</value>
        [DataMember(Name = "passBackObject", EmitDefaultValue = false)]
        public Dictionary<string, Object>? PassBackObject { get; set; }

        /// <summary>
        /// Gets or Sets MorePagesAvailable
        /// </summary>
        [DataMember(Name = "morePagesAvailable", IsRequired = true, EmitDefaultValue = true)]
        public int MorePagesAvailable { get; set; }

        /// <summary>
        /// Time the document processing has taken, ms.
        /// </summary>
        /// <value>Time the document processing has taken, ms.</value>
        [DataMember(Name = "elapsedTime", IsRequired = true, EmitDefaultValue = true)]
        public int ElapsedTime { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object>? Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessResponse {\n");
            sb.Append("  ChipPage: ").Append(ChipPage).Append("\n");
            sb.Append("  CoreLibResultCode: ").Append(CoreLibResultCode).Append("\n");
            sb.Append("  ProcessingFinished: ").Append(ProcessingFinished).Append("\n");
            sb.Append("  ContainerList: ").Append(ContainerList).Append("\n");
            sb.Append("  TransactionInfo: ").Append(TransactionInfo).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  PassBackObject: ").Append(PassBackObject).Append("\n");
            sb.Append("  MorePagesAvailable: ").Append(MorePagesAvailable).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
