/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ProcessResponse
    /// </summary>
    [DataContract]
    public partial class ProcessResponse :  IEquatable<ProcessResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessResponse" /> class.
        /// </summary>
        /// <param name="chipPage">chipPage (required).</param>
        /// <param name="processingFinished">processingFinished (required).</param>
        /// <param name="containerList">containerList (required).</param>
        /// <param name="transactionInfo">transactionInfo (required).</param>
        /// <param name="log">Base64 encoded transaction processing log.</param>
        /// <param name="passBackObject">Free-form object provided in request. See passBackObject property of ProcessRequest..</param>
        /// <param name="morePagesAvailable">morePagesAvailable (required).</param>
        /// <param name="elapsedTime">Time the document processing has taken, ms. (required).</param>
        /// <param name="metadata">metadata.</param>
        public ProcessResponse(int chipPage = default(int), int processingFinished = default(int), ContainerList containerList = default(ContainerList), TransactionInfo transactionInfo = default(TransactionInfo), string log = default(string), Dictionary<string, Object> passBackObject = default(Dictionary<string, Object>), int morePagesAvailable = default(int), int elapsedTime = default(int), Dictionary<string, Object> metadata = default(Dictionary<string, Object>))
        {
            // to ensure "chipPage" is required (not null)
            if (chipPage == null)
            {
                throw new InvalidDataException("chipPage is a required property for ProcessResponse and cannot be null");
            }
            else
            {
                this.ChipPage = chipPage;
            }
            
            // to ensure "processingFinished" is required (not null)
            if (processingFinished == null)
            {
                throw new InvalidDataException("processingFinished is a required property for ProcessResponse and cannot be null");
            }
            else
            {
                this.ProcessingFinished = processingFinished;
            }
            
            // to ensure "containerList" is required (not null)
            if (containerList == null)
            {
                throw new InvalidDataException("containerList is a required property for ProcessResponse and cannot be null");
            }
            else
            {
                this.ContainerList = containerList;
            }
            
            // to ensure "transactionInfo" is required (not null)
            if (transactionInfo == null)
            {
                throw new InvalidDataException("transactionInfo is a required property for ProcessResponse and cannot be null");
            }
            else
            {
                this.TransactionInfo = transactionInfo;
            }
            
            // to ensure "morePagesAvailable" is required (not null)
            if (morePagesAvailable == null)
            {
                throw new InvalidDataException("morePagesAvailable is a required property for ProcessResponse and cannot be null");
            }
            else
            {
                this.MorePagesAvailable = morePagesAvailable;
            }
            
            // to ensure "elapsedTime" is required (not null)
            if (elapsedTime == null)
            {
                throw new InvalidDataException("elapsedTime is a required property for ProcessResponse and cannot be null");
            }
            else
            {
                this.ElapsedTime = elapsedTime;
            }
            
            this.Log = log;
            this.PassBackObject = passBackObject;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// Gets or Sets ChipPage
        /// </summary>
        [DataMember(Name="ChipPage", EmitDefaultValue=true)]
        public int ChipPage { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingFinished
        /// </summary>
        [DataMember(Name="ProcessingFinished", EmitDefaultValue=true)]
        public int ProcessingFinished { get; set; }

        /// <summary>
        /// Gets or Sets ContainerList
        /// </summary>
        [DataMember(Name="ContainerList", EmitDefaultValue=true)]
        public ContainerList ContainerList { get; set; }

        /// <summary>
        /// Gets or Sets TransactionInfo
        /// </summary>
        [DataMember(Name="TransactionInfo", EmitDefaultValue=true)]
        public TransactionInfo TransactionInfo { get; set; }

        /// <summary>
        /// Base64 encoded transaction processing log
        /// </summary>
        /// <value>Base64 encoded transaction processing log</value>
        [DataMember(Name="log", EmitDefaultValue=false)]
        public string Log { get; set; }

        /// <summary>
        /// Free-form object provided in request. See passBackObject property of ProcessRequest.
        /// </summary>
        /// <value>Free-form object provided in request. See passBackObject property of ProcessRequest.</value>
        [DataMember(Name="passBackObject", EmitDefaultValue=false)]
        public Dictionary<string, Object> PassBackObject { get; set; }

        /// <summary>
        /// Gets or Sets MorePagesAvailable
        /// </summary>
        [DataMember(Name="morePagesAvailable", EmitDefaultValue=true)]
        public int MorePagesAvailable { get; set; }

        /// <summary>
        /// Time the document processing has taken, ms.
        /// </summary>
        /// <value>Time the document processing has taken, ms.</value>
        [DataMember(Name="elapsedTime", EmitDefaultValue=true)]
        public int ElapsedTime { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessResponse {\n");
            sb.Append("  ChipPage: ").Append(ChipPage).Append("\n");
            sb.Append("  ProcessingFinished: ").Append(ProcessingFinished).Append("\n");
            sb.Append("  ContainerList: ").Append(ContainerList).Append("\n");
            sb.Append("  TransactionInfo: ").Append(TransactionInfo).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  PassBackObject: ").Append(PassBackObject).Append("\n");
            sb.Append("  MorePagesAvailable: ").Append(MorePagesAvailable).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessResponse);
        }

        /// <summary>
        /// Returns true if ProcessResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChipPage == input.ChipPage ||
                    (this.ChipPage != null &&
                    this.ChipPage.Equals(input.ChipPage))
                ) && 
                (
                    this.ProcessingFinished == input.ProcessingFinished ||
                    (this.ProcessingFinished != null &&
                    this.ProcessingFinished.Equals(input.ProcessingFinished))
                ) && 
                (
                    this.ContainerList == input.ContainerList ||
                    (this.ContainerList != null &&
                    this.ContainerList.Equals(input.ContainerList))
                ) && 
                (
                    this.TransactionInfo == input.TransactionInfo ||
                    (this.TransactionInfo != null &&
                    this.TransactionInfo.Equals(input.TransactionInfo))
                ) && 
                (
                    this.Log == input.Log ||
                    (this.Log != null &&
                    this.Log.Equals(input.Log))
                ) && 
                (
                    this.PassBackObject == input.PassBackObject ||
                    this.PassBackObject != null &&
                    input.PassBackObject != null &&
                    this.PassBackObject.SequenceEqual(input.PassBackObject)
                ) && 
                (
                    this.MorePagesAvailable == input.MorePagesAvailable ||
                    (this.MorePagesAvailable != null &&
                    this.MorePagesAvailable.Equals(input.MorePagesAvailable))
                ) && 
                (
                    this.ElapsedTime == input.ElapsedTime ||
                    (this.ElapsedTime != null &&
                    this.ElapsedTime.Equals(input.ElapsedTime))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChipPage != null)
                    hashCode = hashCode * 59 + this.ChipPage.GetHashCode();
                if (this.ProcessingFinished != null)
                    hashCode = hashCode * 59 + this.ProcessingFinished.GetHashCode();
                if (this.ContainerList != null)
                    hashCode = hashCode * 59 + this.ContainerList.GetHashCode();
                if (this.TransactionInfo != null)
                    hashCode = hashCode * 59 + this.TransactionInfo.GetHashCode();
                if (this.Log != null)
                    hashCode = hashCode * 59 + this.Log.GetHashCode();
                if (this.PassBackObject != null)
                    hashCode = hashCode * 59 + this.PassBackObject.GetHashCode();
                if (this.MorePagesAvailable != null)
                    hashCode = hashCode * 59 + this.MorePagesAvailable.GetHashCode();
                if (this.ElapsedTime != null)
                    hashCode = hashCode * 59 + this.ElapsedTime.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
