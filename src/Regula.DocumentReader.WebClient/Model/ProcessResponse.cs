// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ProcessResponse
    /// </summary>
    public partial class ProcessResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessResponse" /> class.
        /// </summary>
        /// <param name="chipPage">chipPage</param>
        /// <param name="processingFinished">processingFinished</param>
        /// <param name="containerList">containerList</param>
        /// <param name="transactionInfo">transactionInfo</param>
        /// <param name="morePagesAvailable">morePagesAvailable</param>
        /// <param name="elapsedTime">Time the document processing has taken, ms.</param>
        /// <param name="coreLibResultCode">coreLibResultCode</param>
        /// <param name="log">Base64 encoded transaction processing log</param>
        /// <param name="passBackObject">Free-form object provided in request. See passBackObject property of ProcessRequest.</param>
        /// <param name="metadata">metadata</param>
        [JsonConstructor]
        public ProcessResponse(RfidLocation chipPage, ProcessingStatus processingFinished, ContainerList containerList, TransactionInfo transactionInfo, int morePagesAvailable, int elapsedTime, Option<int?> coreLibResultCode = default, Option<string?> log = default, Option<Dictionary<string, Object>?> passBackObject = default, Option<Dictionary<string, Object>?> metadata = default)
        {
            ChipPage = chipPage;
            ProcessingFinished = processingFinished;
            ContainerList = containerList;
            TransactionInfo = transactionInfo;
            MorePagesAvailable = morePagesAvailable;
            ElapsedTime = elapsedTime;
            CoreLibResultCodeOption = coreLibResultCode;
            LogOption = log;
            PassBackObjectOption = passBackObject;
            MetadataOption = metadata;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ChipPage
        /// </summary>
        [JsonPropertyName("ChipPage")]
        public RfidLocation ChipPage { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingFinished
        /// </summary>
        [JsonPropertyName("ProcessingFinished")]
        public ProcessingStatus ProcessingFinished { get; set; }

        /// <summary>
        /// Gets or Sets ContainerList
        /// </summary>
        [JsonPropertyName("ContainerList")]
        public ContainerList ContainerList { get; set; }

        /// <summary>
        /// Gets or Sets TransactionInfo
        /// </summary>
        [JsonPropertyName("TransactionInfo")]
        public TransactionInfo TransactionInfo { get; set; }

        /// <summary>
        /// Gets or Sets MorePagesAvailable
        /// </summary>
        [JsonPropertyName("morePagesAvailable")]
        public int MorePagesAvailable { get; set; }

        /// <summary>
        /// Time the document processing has taken, ms.
        /// </summary>
        /// <value>Time the document processing has taken, ms.</value>
        [JsonPropertyName("elapsedTime")]
        public int ElapsedTime { get; set; }

        /// <summary>
        /// Used to track the state of CoreLibResultCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CoreLibResultCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CoreLibResultCode
        /// </summary>
        [JsonPropertyName("CoreLibResultCode")]
        public int? CoreLibResultCode { get { return this.CoreLibResultCodeOption; } set { this.CoreLibResultCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Log
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LogOption { get; private set; }

        /// <summary>
        /// Base64 encoded transaction processing log
        /// </summary>
        /// <value>Base64 encoded transaction processing log</value>
        [JsonPropertyName("log")]
        public string? Log { get { return this.LogOption; } set { this.LogOption = new(value); } }

        /// <summary>
        /// Used to track the state of PassBackObject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> PassBackObjectOption { get; private set; }

        /// <summary>
        /// Free-form object provided in request. See passBackObject property of ProcessRequest.
        /// </summary>
        /// <value>Free-form object provided in request. See passBackObject property of ProcessRequest.</value>
        [JsonPropertyName("passBackObject")]
        public Dictionary<string, Object>? PassBackObject { get { return this.PassBackObjectOption; } set { this.PassBackObjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> MetadataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [JsonPropertyName("metadata")]
        public Dictionary<string, Object>? Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessResponse {\n");
            sb.Append("  ChipPage: ").Append(ChipPage).Append("\n");
            sb.Append("  ProcessingFinished: ").Append(ProcessingFinished).Append("\n");
            sb.Append("  ContainerList: ").Append(ContainerList).Append("\n");
            sb.Append("  TransactionInfo: ").Append(TransactionInfo).Append("\n");
            sb.Append("  MorePagesAvailable: ").Append(MorePagesAvailable).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  CoreLibResultCode: ").Append(CoreLibResultCode).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  PassBackObject: ").Append(PassBackObject).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProcessResponse" />
    /// </summary>
    public class ProcessResponseJsonConverter : JsonConverter<ProcessResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ProcessResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProcessResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RfidLocation?> chipPage = default;
            Option<ProcessingStatus?> processingFinished = default;
            Option<ContainerList?> containerList = default;
            Option<TransactionInfo?> transactionInfo = default;
            Option<int?> morePagesAvailable = default;
            Option<int?> elapsedTime = default;
            Option<int?> coreLibResultCode = default;
            Option<string?> log = default;
            Option<Dictionary<string, Object>?> passBackObject = default;
            Option<Dictionary<string, Object>?> metadata = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ChipPage":
                            string? chipPageRawValue = utf8JsonReader.GetString();
                            if (chipPageRawValue != null)
                                chipPage = new Option<RfidLocation?>(RfidLocationValueConverter.FromStringOrDefault(chipPageRawValue));
                            break;
                        case "ProcessingFinished":
                            string? processingFinishedRawValue = utf8JsonReader.GetString();
                            if (processingFinishedRawValue != null)
                                processingFinished = new Option<ProcessingStatus?>(ProcessingStatusValueConverter.FromStringOrDefault(processingFinishedRawValue));
                            break;
                        case "ContainerList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                containerList = new Option<ContainerList?>(JsonSerializer.Deserialize<ContainerList>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "TransactionInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transactionInfo = new Option<TransactionInfo?>(JsonSerializer.Deserialize<TransactionInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "morePagesAvailable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                morePagesAvailable = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "elapsedTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                elapsedTime = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "CoreLibResultCode":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                coreLibResultCode = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "log":
                            log = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "passBackObject":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passBackObject = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "metadata":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                metadata = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!chipPage.IsSet)
                throw new ArgumentException("Property is required for class ProcessResponse.", nameof(chipPage));

            if (!processingFinished.IsSet)
                throw new ArgumentException("Property is required for class ProcessResponse.", nameof(processingFinished));

            if (!containerList.IsSet)
                throw new ArgumentException("Property is required for class ProcessResponse.", nameof(containerList));

            if (!transactionInfo.IsSet)
                throw new ArgumentException("Property is required for class ProcessResponse.", nameof(transactionInfo));

            if (!morePagesAvailable.IsSet)
                throw new ArgumentException("Property is required for class ProcessResponse.", nameof(morePagesAvailable));

            if (!elapsedTime.IsSet)
                throw new ArgumentException("Property is required for class ProcessResponse.", nameof(elapsedTime));

            if (chipPage.IsSet && chipPage.Value == null)
                throw new ArgumentNullException(nameof(chipPage), "Property is not nullable for class ProcessResponse.");

            if (processingFinished.IsSet && processingFinished.Value == null)
                throw new ArgumentNullException(nameof(processingFinished), "Property is not nullable for class ProcessResponse.");

            if (containerList.IsSet && containerList.Value == null)
                throw new ArgumentNullException(nameof(containerList), "Property is not nullable for class ProcessResponse.");

            if (transactionInfo.IsSet && transactionInfo.Value == null)
                throw new ArgumentNullException(nameof(transactionInfo), "Property is not nullable for class ProcessResponse.");

            if (morePagesAvailable.IsSet && morePagesAvailable.Value == null)
                throw new ArgumentNullException(nameof(morePagesAvailable), "Property is not nullable for class ProcessResponse.");

            if (elapsedTime.IsSet && elapsedTime.Value == null)
                throw new ArgumentNullException(nameof(elapsedTime), "Property is not nullable for class ProcessResponse.");

            if (coreLibResultCode.IsSet && coreLibResultCode.Value == null)
                throw new ArgumentNullException(nameof(coreLibResultCode), "Property is not nullable for class ProcessResponse.");

            if (log.IsSet && log.Value == null)
                throw new ArgumentNullException(nameof(log), "Property is not nullable for class ProcessResponse.");

            if (passBackObject.IsSet && passBackObject.Value == null)
                throw new ArgumentNullException(nameof(passBackObject), "Property is not nullable for class ProcessResponse.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class ProcessResponse.");

            return new ProcessResponse(chipPage.Value!.Value!, processingFinished.Value!.Value!, containerList.Value!, transactionInfo.Value!, morePagesAvailable.Value!.Value!, elapsedTime.Value!.Value!, coreLibResultCode, log, passBackObject, metadata);
        }

        /// <summary>
        /// Serializes a <see cref="ProcessResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="processResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProcessResponse processResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, processResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProcessResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="processResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ProcessResponse processResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (processResponse.ContainerList == null)
                throw new ArgumentNullException(nameof(processResponse.ContainerList), "Property is required for class ProcessResponse.");

            if (processResponse.TransactionInfo == null)
                throw new ArgumentNullException(nameof(processResponse.TransactionInfo), "Property is required for class ProcessResponse.");

            if (processResponse.LogOption.IsSet && processResponse.Log == null)
                throw new ArgumentNullException(nameof(processResponse.Log), "Property is required for class ProcessResponse.");

            if (processResponse.PassBackObjectOption.IsSet && processResponse.PassBackObject == null)
                throw new ArgumentNullException(nameof(processResponse.PassBackObject), "Property is required for class ProcessResponse.");

            if (processResponse.MetadataOption.IsSet && processResponse.Metadata == null)
                throw new ArgumentNullException(nameof(processResponse.Metadata), "Property is required for class ProcessResponse.");

            var chipPageRawValue = RfidLocationValueConverter.ToJsonValue(processResponse.ChipPage);
            writer.WriteNumber("ChipPage", chipPageRawValue);

            var processingFinishedRawValue = ProcessingStatusValueConverter.ToJsonValue(processResponse.ProcessingFinished);
            writer.WriteNumber("ProcessingFinished", processingFinishedRawValue);

            writer.WritePropertyName("ContainerList");
            JsonSerializer.Serialize(writer, processResponse.ContainerList, jsonSerializerOptions);
            writer.WritePropertyName("TransactionInfo");
            JsonSerializer.Serialize(writer, processResponse.TransactionInfo, jsonSerializerOptions);
            writer.WriteNumber("morePagesAvailable", processResponse.MorePagesAvailable);

            writer.WriteNumber("elapsedTime", processResponse.ElapsedTime);

            if (processResponse.CoreLibResultCodeOption.IsSet)
                writer.WriteNumber("CoreLibResultCode", processResponse.CoreLibResultCodeOption.Value!.Value);

            if (processResponse.LogOption.IsSet)
                writer.WriteString("log", processResponse.Log);

            if (processResponse.PassBackObjectOption.IsSet)
            {
                writer.WritePropertyName("passBackObject");
                JsonSerializer.Serialize(writer, processResponse.PassBackObject, jsonSerializerOptions);
            }
            if (processResponse.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, processResponse.Metadata, jsonSerializerOptions);
            }
        }
    }
}
