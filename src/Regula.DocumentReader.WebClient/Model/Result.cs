// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Defines Result
    /// </summary>
    public enum Result
    {
        /// <summary>
        /// Enum DOCUMENT_IMAGE for value: 1
        /// </summary>
        DOCUMENT_IMAGE = 1,

        /// <summary>
        /// Enum MRZ_TEXT for value: 3
        /// </summary>
        MRZ_TEXT = 3,

        /// <summary>
        /// Enum BARCODES for value: 5
        /// </summary>
        BARCODES = 5,

        /// <summary>
        /// Enum VISUAL_GRAPHICS for value: 6
        /// </summary>
        VISUAL_GRAPHICS = 6,

        /// <summary>
        /// Enum MRZ_TEST_QUALITY for value: 7
        /// </summary>
        MRZ_TEST_QUALITY = 7,

        /// <summary>
        /// Enum DOCUMENT_TYPE_CANDIDATES for value: 8
        /// </summary>
        DOCUMENT_TYPE_CANDIDATES = 8,

        /// <summary>
        /// Enum DOCUMENT_TYPE for value: 9
        /// </summary>
        DOCUMENT_TYPE = 9,

        /// <summary>
        /// Enum LEXICAL_ANALYSIS for value: 15
        /// </summary>
        LEXICAL_ANALYSIS = 15,

        /// <summary>
        /// Enum RAW_UNCROPPED_IMAGE for value: 16
        /// </summary>
        RAW_UNCROPPED_IMAGE = 16,

        /// <summary>
        /// Enum VISUAL_TEXT for value: 17
        /// </summary>
        VISUAL_TEXT = 17,

        /// <summary>
        /// Enum BARCODE_TEXT for value: 18
        /// </summary>
        BARCODE_TEXT = 18,

        /// <summary>
        /// Enum BARCODE_GRAPHICS for value: 19
        /// </summary>
        BARCODE_GRAPHICS = 19,

        /// <summary>
        /// Enum AUTHENTICITY for value: 20
        /// </summary>
        AUTHENTICITY = 20,

        /// <summary>
        /// Enum MAGNETIC_STRIPE_TEXT_DATA for value: 26
        /// </summary>
        MAGNETIC_STRIPE_TEXT_DATA = 26,

        /// <summary>
        /// Enum IMAGE_QUALITY for value: 30
        /// </summary>
        IMAGE_QUALITY = 30,

        /// <summary>
        /// Enum LIVE_PORTRAIT for value: 32
        /// </summary>
        LIVE_PORTRAIT = 32,

        /// <summary>
        /// Enum STATUS for value: 33
        /// </summary>
        STATUS = 33,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON for value: 34
        /// </summary>
        PORTRAIT_COMPARISON = 34,

        /// <summary>
        /// Enum EXT_PORTRAIT for value: 35
        /// </summary>
        EXT_PORTRAIT = 35,

        /// <summary>
        /// Enum TEXT for value: 36
        /// </summary>
        TEXT = 36,

        /// <summary>
        /// Enum IMAGES for value: 37
        /// </summary>
        IMAGES = 37,

        /// <summary>
        /// Enum FINGERPRINTS for value: 38
        /// </summary>
        FINGERPRINTS = 38,

        /// <summary>
        /// Enum FINGERPRINT_COMPARISON for value: 39
        /// </summary>
        FINGERPRINT_COMPARISON = 39,

        /// <summary>
        /// Enum ENCRYPTED_RCL for value: 49
        /// </summary>
        ENCRYPTED_RCL = 49,

        /// <summary>
        /// Enum LICENSE for value: 50
        /// </summary>
        LICENSE = 50,

        /// <summary>
        /// Enum MRZ_POSITION for value: 61
        /// </summary>
        MRZ_POSITION = 61,

        /// <summary>
        /// Enum BARCODE_POSITION for value: 62
        /// </summary>
        BARCODE_POSITION = 62,

        /// <summary>
        /// Enum DOCUMENT_POSITION for value: 85
        /// </summary>
        DOCUMENT_POSITION = 85,

        /// <summary>
        /// Enum MRZ_DETECTOR for value: 87
        /// </summary>
        MRZ_DETECTOR = 87,

        /// <summary>
        /// Enum FACE_DETECTION for value: 97
        /// </summary>
        FACE_DETECTION = 97,

        /// <summary>
        /// Enum RFID_RAW_DATA for value: 101
        /// </summary>
        RFID_RAW_DATA = 101,

        /// <summary>
        /// Enum RFID_TEXT for value: 102
        /// </summary>
        RFID_TEXT = 102,

        /// <summary>
        /// Enum RFID_GRAPHICS for value: 103
        /// </summary>
        RFID_GRAPHICS = 103,

        /// <summary>
        /// Enum RFID_BINARY_DATA for value: 104
        /// </summary>
        RFID_BINARY_DATA = 104,

        /// <summary>
        /// Enum RFID_ORIGINAL_GRAPHICS for value: 105
        /// </summary>
        RFID_ORIGINAL_GRAPHICS = 105,

        /// <summary>
        /// Enum DTC_VC for value: 109
        /// </summary>
        DTC_VC = 109
    }

    /// <summary>
    /// Converts <see cref="Result"/> to and from the JSON value
    /// </summary>
    public static class ResultValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Result"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Result FromString(string value)
        {
            if (value.Equals((1).ToString()))
                return Result.DOCUMENT_IMAGE;

            if (value.Equals((3).ToString()))
                return Result.MRZ_TEXT;

            if (value.Equals((5).ToString()))
                return Result.BARCODES;

            if (value.Equals((6).ToString()))
                return Result.VISUAL_GRAPHICS;

            if (value.Equals((7).ToString()))
                return Result.MRZ_TEST_QUALITY;

            if (value.Equals((8).ToString()))
                return Result.DOCUMENT_TYPE_CANDIDATES;

            if (value.Equals((9).ToString()))
                return Result.DOCUMENT_TYPE;

            if (value.Equals((15).ToString()))
                return Result.LEXICAL_ANALYSIS;

            if (value.Equals((16).ToString()))
                return Result.RAW_UNCROPPED_IMAGE;

            if (value.Equals((17).ToString()))
                return Result.VISUAL_TEXT;

            if (value.Equals((18).ToString()))
                return Result.BARCODE_TEXT;

            if (value.Equals((19).ToString()))
                return Result.BARCODE_GRAPHICS;

            if (value.Equals((20).ToString()))
                return Result.AUTHENTICITY;

            if (value.Equals((26).ToString()))
                return Result.MAGNETIC_STRIPE_TEXT_DATA;

            if (value.Equals((30).ToString()))
                return Result.IMAGE_QUALITY;

            if (value.Equals((32).ToString()))
                return Result.LIVE_PORTRAIT;

            if (value.Equals((33).ToString()))
                return Result.STATUS;

            if (value.Equals((34).ToString()))
                return Result.PORTRAIT_COMPARISON;

            if (value.Equals((35).ToString()))
                return Result.EXT_PORTRAIT;

            if (value.Equals((36).ToString()))
                return Result.TEXT;

            if (value.Equals((37).ToString()))
                return Result.IMAGES;

            if (value.Equals((38).ToString()))
                return Result.FINGERPRINTS;

            if (value.Equals((39).ToString()))
                return Result.FINGERPRINT_COMPARISON;

            if (value.Equals((49).ToString()))
                return Result.ENCRYPTED_RCL;

            if (value.Equals((50).ToString()))
                return Result.LICENSE;

            if (value.Equals((61).ToString()))
                return Result.MRZ_POSITION;

            if (value.Equals((62).ToString()))
                return Result.BARCODE_POSITION;

            if (value.Equals((85).ToString()))
                return Result.DOCUMENT_POSITION;

            if (value.Equals((87).ToString()))
                return Result.MRZ_DETECTOR;

            if (value.Equals((97).ToString()))
                return Result.FACE_DETECTION;

            if (value.Equals((101).ToString()))
                return Result.RFID_RAW_DATA;

            if (value.Equals((102).ToString()))
                return Result.RFID_TEXT;

            if (value.Equals((103).ToString()))
                return Result.RFID_GRAPHICS;

            if (value.Equals((104).ToString()))
                return Result.RFID_BINARY_DATA;

            if (value.Equals((105).ToString()))
                return Result.RFID_ORIGINAL_GRAPHICS;

            if (value.Equals((109).ToString()))
                return Result.DTC_VC;

            throw new NotImplementedException($"Could not convert value to type Result: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Result"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Result? FromStringOrDefault(string value)
        {
            if (value.Equals((1).ToString()))
                return Result.DOCUMENT_IMAGE;

            if (value.Equals((3).ToString()))
                return Result.MRZ_TEXT;

            if (value.Equals((5).ToString()))
                return Result.BARCODES;

            if (value.Equals((6).ToString()))
                return Result.VISUAL_GRAPHICS;

            if (value.Equals((7).ToString()))
                return Result.MRZ_TEST_QUALITY;

            if (value.Equals((8).ToString()))
                return Result.DOCUMENT_TYPE_CANDIDATES;

            if (value.Equals((9).ToString()))
                return Result.DOCUMENT_TYPE;

            if (value.Equals((15).ToString()))
                return Result.LEXICAL_ANALYSIS;

            if (value.Equals((16).ToString()))
                return Result.RAW_UNCROPPED_IMAGE;

            if (value.Equals((17).ToString()))
                return Result.VISUAL_TEXT;

            if (value.Equals((18).ToString()))
                return Result.BARCODE_TEXT;

            if (value.Equals((19).ToString()))
                return Result.BARCODE_GRAPHICS;

            if (value.Equals((20).ToString()))
                return Result.AUTHENTICITY;

            if (value.Equals((26).ToString()))
                return Result.MAGNETIC_STRIPE_TEXT_DATA;

            if (value.Equals((30).ToString()))
                return Result.IMAGE_QUALITY;

            if (value.Equals((32).ToString()))
                return Result.LIVE_PORTRAIT;

            if (value.Equals((33).ToString()))
                return Result.STATUS;

            if (value.Equals((34).ToString()))
                return Result.PORTRAIT_COMPARISON;

            if (value.Equals((35).ToString()))
                return Result.EXT_PORTRAIT;

            if (value.Equals((36).ToString()))
                return Result.TEXT;

            if (value.Equals((37).ToString()))
                return Result.IMAGES;

            if (value.Equals((38).ToString()))
                return Result.FINGERPRINTS;

            if (value.Equals((39).ToString()))
                return Result.FINGERPRINT_COMPARISON;

            if (value.Equals((49).ToString()))
                return Result.ENCRYPTED_RCL;

            if (value.Equals((50).ToString()))
                return Result.LICENSE;

            if (value.Equals((61).ToString()))
                return Result.MRZ_POSITION;

            if (value.Equals((62).ToString()))
                return Result.BARCODE_POSITION;

            if (value.Equals((85).ToString()))
                return Result.DOCUMENT_POSITION;

            if (value.Equals((87).ToString()))
                return Result.MRZ_DETECTOR;

            if (value.Equals((97).ToString()))
                return Result.FACE_DETECTION;

            if (value.Equals((101).ToString()))
                return Result.RFID_RAW_DATA;

            if (value.Equals((102).ToString()))
                return Result.RFID_TEXT;

            if (value.Equals((103).ToString()))
                return Result.RFID_GRAPHICS;

            if (value.Equals((104).ToString()))
                return Result.RFID_BINARY_DATA;

            if (value.Equals((105).ToString()))
                return Result.RFID_ORIGINAL_GRAPHICS;

            if (value.Equals((109).ToString()))
                return Result.DTC_VC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Result"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(Result value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Result"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ResultJsonConverter : JsonConverter<Result>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Result Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Result? result = rawValue == null
                ? null
                : ResultValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Result to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="result"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Result result, JsonSerializerOptions options)
        {
            writer.WriteStringValue(result.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Result"/>
    /// </summary>
    public class ResultNullableJsonConverter : JsonConverter<Result?>
    {
        /// <summary>
        /// Returns a Result from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Result? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Result? result = rawValue == null
                ? null
                : ResultValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="result"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Result? result, JsonSerializerOptions options)
        {
            writer.WriteStringValue(result?.ToString() ?? "null");
        }
    }
}
