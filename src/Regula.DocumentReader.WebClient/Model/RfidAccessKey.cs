/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the contents of secure data access key within the context of the communication session with electronic document
    /// </summary>
    [DataContract(Name = "RfidAccessKey")]
    public partial class RfidAccessKey : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets KeyType
        /// </summary>
        [DataMember(Name = "KeyType", IsRequired = true, EmitDefaultValue = true)]
        public RfidPasswordType KeyType { get; set; }

        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>
        [DataMember(Name = "AccessType", IsRequired = true, EmitDefaultValue = true)]
        public RfidAccessControlProcedureType AccessType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidAccessKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidAccessKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidAccessKey" /> class.
        /// </summary>
        /// <param name="accessKey">Key contents (required).</param>
        /// <param name="keyType">keyType (required).</param>
        /// <param name="accessType">accessType (required).</param>
        /// <param name="checkFullKeyMatching">Logical sign of the need for a full comparison of AccessKey contents with the contents of DG1 (MRZ) data group (required).</param>
        public RfidAccessKey(string accessKey = default(string), RfidPasswordType keyType = default(RfidPasswordType), RfidAccessControlProcedureType accessType = default(RfidAccessControlProcedureType), bool checkFullKeyMatching = default(bool))
        {
            // to ensure "accessKey" is required (not null)
            if (accessKey == null)
            {
                throw new ArgumentNullException("accessKey is a required property for RfidAccessKey and cannot be null");
            }
            this.AccessKey = accessKey;
            this.KeyType = keyType;
            this.AccessType = accessType;
            this.CheckFullKeyMatching = checkFullKeyMatching;
        }

        /// <summary>
        /// Key contents
        /// </summary>
        /// <value>Key contents</value>
        [DataMember(Name = "AccessKey", IsRequired = true, EmitDefaultValue = true)]
        public string AccessKey { get; set; }

        /// <summary>
        /// Logical sign of the need for a full comparison of AccessKey contents with the contents of DG1 (MRZ) data group
        /// </summary>
        /// <value>Logical sign of the need for a full comparison of AccessKey contents with the contents of DG1 (MRZ) data group</value>
        [DataMember(Name = "CheckFullKeyMatching", IsRequired = true, EmitDefaultValue = true)]
        public bool CheckFullKeyMatching { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidAccessKey {\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  KeyType: ").Append(KeyType).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  CheckFullKeyMatching: ").Append(CheckFullKeyMatching).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
