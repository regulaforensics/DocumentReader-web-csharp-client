// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the contents of secure data access key within the context of the communication session with electronic document
    /// </summary>
    public partial class RfidAccessKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidAccessKey" /> class.
        /// </summary>
        /// <param name="accessKey">Key contents</param>
        /// <param name="keyType">keyType</param>
        /// <param name="accessType">accessType</param>
        /// <param name="checkFullKeyMatching">Logical sign of the need for a full comparison of AccessKey contents with the contents of DG1 (MRZ) data group</param>
        [JsonConstructor]
        public RfidAccessKey(string accessKey, RfidPasswordType keyType, RfidAccessControlProcedureType accessType, bool checkFullKeyMatching)
        {
            AccessKey = accessKey;
            KeyType = keyType;
            AccessType = accessType;
            CheckFullKeyMatching = checkFullKeyMatching;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets KeyType
        /// </summary>
        [JsonPropertyName("KeyType")]
        public RfidPasswordType KeyType { get; set; }

        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>
        [JsonPropertyName("AccessType")]
        public RfidAccessControlProcedureType AccessType { get; set; }

        /// <summary>
        /// Key contents
        /// </summary>
        /// <value>Key contents</value>
        [JsonPropertyName("AccessKey")]
        public string AccessKey { get; set; }

        /// <summary>
        /// Logical sign of the need for a full comparison of AccessKey contents with the contents of DG1 (MRZ) data group
        /// </summary>
        /// <value>Logical sign of the need for a full comparison of AccessKey contents with the contents of DG1 (MRZ) data group</value>
        [JsonPropertyName("CheckFullKeyMatching")]
        public bool CheckFullKeyMatching { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidAccessKey {\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  KeyType: ").Append(KeyType).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  CheckFullKeyMatching: ").Append(CheckFullKeyMatching).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidAccessKey" />
    /// </summary>
    public class RfidAccessKeyJsonConverter : JsonConverter<RfidAccessKey>
    {
        /// <summary>
        /// Deserializes json to <see cref="RfidAccessKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RfidAccessKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accessKey = default;
            Option<RfidPasswordType?> keyType = default;
            Option<RfidAccessControlProcedureType?> accessType = default;
            Option<bool?> checkFullKeyMatching = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AccessKey":
                            accessKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "KeyType":
                            string? keyTypeRawValue = utf8JsonReader.GetString();
                            if (keyTypeRawValue != null)
                                keyType = new Option<RfidPasswordType?>(RfidPasswordTypeValueConverter.FromStringOrDefault(keyTypeRawValue));
                            break;
                        case "AccessType":
                            string? accessTypeRawValue = utf8JsonReader.GetString();
                            if (accessTypeRawValue != null)
                                accessType = new Option<RfidAccessControlProcedureType?>(RfidAccessControlProcedureTypeValueConverter.FromStringOrDefault(accessTypeRawValue));
                            break;
                        case "CheckFullKeyMatching":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkFullKeyMatching = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accessKey.IsSet)
                throw new ArgumentException("Property is required for class RfidAccessKey.", nameof(accessKey));

            if (!keyType.IsSet)
                throw new ArgumentException("Property is required for class RfidAccessKey.", nameof(keyType));

            if (!accessType.IsSet)
                throw new ArgumentException("Property is required for class RfidAccessKey.", nameof(accessType));

            if (!checkFullKeyMatching.IsSet)
                throw new ArgumentException("Property is required for class RfidAccessKey.", nameof(checkFullKeyMatching));

            if (accessKey.IsSet && accessKey.Value == null)
                throw new ArgumentNullException(nameof(accessKey), "Property is not nullable for class RfidAccessKey.");

            if (keyType.IsSet && keyType.Value == null)
                throw new ArgumentNullException(nameof(keyType), "Property is not nullable for class RfidAccessKey.");

            if (accessType.IsSet && accessType.Value == null)
                throw new ArgumentNullException(nameof(accessType), "Property is not nullable for class RfidAccessKey.");

            if (checkFullKeyMatching.IsSet && checkFullKeyMatching.Value == null)
                throw new ArgumentNullException(nameof(checkFullKeyMatching), "Property is not nullable for class RfidAccessKey.");

            return new RfidAccessKey(accessKey.Value!, keyType.Value!.Value!, accessType.Value!.Value!, checkFullKeyMatching.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RfidAccessKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidAccessKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RfidAccessKey rfidAccessKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rfidAccessKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RfidAccessKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidAccessKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RfidAccessKey rfidAccessKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rfidAccessKey.AccessKey == null)
                throw new ArgumentNullException(nameof(rfidAccessKey.AccessKey), "Property is required for class RfidAccessKey.");

            writer.WriteString("AccessKey", rfidAccessKey.AccessKey);

            var keyTypeRawValue = RfidPasswordTypeValueConverter.ToJsonValue(rfidAccessKey.KeyType);
            writer.WriteNumber("KeyType", keyTypeRawValue);

            var accessTypeRawValue = RfidAccessControlProcedureTypeValueConverter.ToJsonValue(rfidAccessKey.AccessType);
            writer.WriteNumber("AccessType", accessTypeRawValue);

            writer.WriteBoolean("CheckFullKeyMatching", rfidAccessKey.CheckFullKeyMatching);
        }
    }
}
