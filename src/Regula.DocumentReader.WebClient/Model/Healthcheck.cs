// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Healthcheck
    /// </summary>
    public partial class Healthcheck : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Healthcheck" /> class.
        /// </summary>
        /// <param name="app">Application name.</param>
        /// <param name="licenseId">Unique license identifier.</param>
        /// <param name="licenseType">License type.</param>
        /// <param name="licenseSerial">License serial number.</param>
        /// <param name="licenseValidUntil">License validity date.</param>
        /// <param name="scenarios">List of supported scenarios.</param>
        /// <param name="varVersion">Product version.</param>
        /// <param name="metadata">metadata</param>
        /// <param name="documentsDatabase">documentsDatabase</param>
        [JsonConstructor]
        public Healthcheck(string app, string? licenseId = default, string? licenseType = default, string? licenseSerial = default, DateTime? licenseValidUntil = default, List<string>? scenarios = default, string? varVersion = default, Option<Dictionary<string, Object>?> metadata = default, Option<HealthcheckDocumentsDatabase?> documentsDatabase = default)
        {
            App = app;
            LicenseId = licenseId;
            LicenseType = licenseType;
            LicenseSerial = licenseSerial;
            LicenseValidUntil = licenseValidUntil;
            Scenarios = scenarios;
            VarVersion = varVersion;
            MetadataOption = metadata;
            DocumentsDatabaseOption = documentsDatabase;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Application name.
        /// </summary>
        /// <value>Application name.</value>
        [JsonPropertyName("app")]
        public string App { get; set; }

        /// <summary>
        /// Unique license identifier.
        /// </summary>
        /// <value>Unique license identifier.</value>
        [JsonPropertyName("licenseId")]
        public string? LicenseId { get; set; }

        /// <summary>
        /// License type.
        /// </summary>
        /// <value>License type.</value>
        [JsonPropertyName("licenseType")]
        public string? LicenseType { get; set; }

        /// <summary>
        /// License serial number.
        /// </summary>
        /// <value>License serial number.</value>
        [JsonPropertyName("licenseSerial")]
        public string? LicenseSerial { get; set; }

        /// <summary>
        /// License validity date.
        /// </summary>
        /// <value>License validity date.</value>
        [JsonPropertyName("licenseValidUntil")]
        public DateTime? LicenseValidUntil { get; set; }

        /// <summary>
        /// List of supported scenarios.
        /// </summary>
        /// <value>List of supported scenarios.</value>
        [JsonPropertyName("scenarios")]
        public List<string>? Scenarios { get; set; }

        /// <summary>
        /// Product version.
        /// </summary>
        /// <value>Product version.</value>
        [JsonPropertyName("version")]
        public string? VarVersion { get; set; }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> MetadataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [JsonPropertyName("metadata")]
        public Dictionary<string, Object>? Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of DocumentsDatabase
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<HealthcheckDocumentsDatabase?> DocumentsDatabaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentsDatabase
        /// </summary>
        [JsonPropertyName("documentsDatabase")]
        public HealthcheckDocumentsDatabase? DocumentsDatabase { get { return this.DocumentsDatabaseOption; } set { this.DocumentsDatabaseOption = new Option<HealthcheckDocumentsDatabase?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Healthcheck {\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  LicenseId: ").Append(LicenseId).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  LicenseSerial: ").Append(LicenseSerial).Append("\n");
            sb.Append("  LicenseValidUntil: ").Append(LicenseValidUntil).Append("\n");
            sb.Append("  Scenarios: ").Append(Scenarios).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  DocumentsDatabase: ").Append(DocumentsDatabase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Healthcheck" />
    /// </summary>
    public class HealthcheckJsonConverter : JsonConverter<Healthcheck>
    {
        /// <summary>
        /// The format to use to serialize LicenseValidUntil
        /// </summary>
        public static string LicenseValidUntilFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Healthcheck" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Healthcheck Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> app = default;
            Option<string?> licenseId = default;
            Option<string?> licenseType = default;
            Option<string?> licenseSerial = default;
            Option<DateTime?> licenseValidUntil = default;
            Option<List<string>?> scenarios = default;
            Option<string?> varVersion = default;
            Option<Dictionary<string, Object>?> metadata = default;
            Option<HealthcheckDocumentsDatabase?> documentsDatabase = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "app":
                            app = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "licenseId":
                            licenseId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "licenseType":
                            licenseType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "licenseSerial":
                            licenseSerial = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "licenseValidUntil":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                licenseValidUntil = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "scenarios":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                scenarios = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "metadata":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                metadata = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "documentsDatabase":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                documentsDatabase = new Option<HealthcheckDocumentsDatabase?>(JsonSerializer.Deserialize<HealthcheckDocumentsDatabase>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!app.IsSet)
                throw new ArgumentException("Property is required for class Healthcheck.", nameof(app));

            if (!licenseId.IsSet)
                throw new ArgumentException("Property is required for class Healthcheck.", nameof(licenseId));

            if (!licenseType.IsSet)
                throw new ArgumentException("Property is required for class Healthcheck.", nameof(licenseType));

            if (!licenseSerial.IsSet)
                throw new ArgumentException("Property is required for class Healthcheck.", nameof(licenseSerial));

            if (!licenseValidUntil.IsSet)
                throw new ArgumentException("Property is required for class Healthcheck.", nameof(licenseValidUntil));

            if (!scenarios.IsSet)
                throw new ArgumentException("Property is required for class Healthcheck.", nameof(scenarios));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class Healthcheck.", nameof(varVersion));

            if (app.IsSet && app.Value == null)
                throw new ArgumentNullException(nameof(app), "Property is not nullable for class Healthcheck.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class Healthcheck.");

            if (documentsDatabase.IsSet && documentsDatabase.Value == null)
                throw new ArgumentNullException(nameof(documentsDatabase), "Property is not nullable for class Healthcheck.");

            return new Healthcheck(app.Value!, licenseId.Value!, licenseType.Value!, licenseSerial.Value!, licenseValidUntil.Value!, scenarios.Value!, varVersion.Value!, metadata, documentsDatabase);
        }

        /// <summary>
        /// Serializes a <see cref="Healthcheck" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="healthcheck"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Healthcheck healthcheck, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, healthcheck, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Healthcheck" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="healthcheck"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Healthcheck healthcheck, JsonSerializerOptions jsonSerializerOptions)
        {
            if (healthcheck.App == null)
                throw new ArgumentNullException(nameof(healthcheck.App), "Property is required for class Healthcheck.");

            if (healthcheck.MetadataOption.IsSet && healthcheck.Metadata == null)
                throw new ArgumentNullException(nameof(healthcheck.Metadata), "Property is required for class Healthcheck.");

            if (healthcheck.DocumentsDatabaseOption.IsSet && healthcheck.DocumentsDatabase == null)
                throw new ArgumentNullException(nameof(healthcheck.DocumentsDatabase), "Property is required for class Healthcheck.");

            writer.WriteString("app", healthcheck.App);

            if (healthcheck.LicenseId != null)
                writer.WriteString("licenseId", healthcheck.LicenseId);
            else
                writer.WriteNull("licenseId");

            if (healthcheck.LicenseType != null)
                writer.WriteString("licenseType", healthcheck.LicenseType);
            else
                writer.WriteNull("licenseType");

            if (healthcheck.LicenseSerial != null)
                writer.WriteString("licenseSerial", healthcheck.LicenseSerial);
            else
                writer.WriteNull("licenseSerial");

            if (healthcheck.LicenseValidUntil != null)
                writer.WriteString("licenseValidUntil", healthcheck.LicenseValidUntil.Value.ToString(LicenseValidUntilFormat));
            else
                writer.WriteNull("licenseValidUntil");

            if (healthcheck.Scenarios != null)
            {
                writer.WritePropertyName("scenarios");
                JsonSerializer.Serialize(writer, healthcheck.Scenarios, jsonSerializerOptions);
            }
            else
                writer.WriteNull("scenarios");
            if (healthcheck.VarVersion != null)
                writer.WriteString("version", healthcheck.VarVersion);
            else
                writer.WriteNull("version");

            if (healthcheck.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, healthcheck.Metadata, jsonSerializerOptions);
            }
            if (healthcheck.DocumentsDatabaseOption.IsSet)
            {
                writer.WritePropertyName("documentsDatabase");
                JsonSerializer.Serialize(writer, healthcheck.DocumentsDatabase, jsonSerializerOptions);
            }
        }
    }
}
