/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Healthcheck
    /// </summary>
    [DataContract(Name = "Healthcheck")]
    public partial class Healthcheck : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Healthcheck" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Healthcheck() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Healthcheck" /> class.
        /// </summary>
        /// <param name="app">Application name. (required).</param>
        /// <param name="licenseId">Unique license identifier. (required).</param>
        /// <param name="licenseType">License type. (required).</param>
        /// <param name="licenseSerial">License serial number. (required).</param>
        /// <param name="licenseValidUntil">License validity date. (required).</param>
        /// <param name="scenarios">List of supported scenarios. (required).</param>
        /// <param name="varVersion">Product version. (required).</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="documentsDatabase">documentsDatabase.</param>
        public Healthcheck(string app = default(string), string licenseId = default(string), string licenseType = default(string), string licenseSerial = default(string), DateTime? licenseValidUntil = default(DateTime?), List<string> scenarios = default(List<string>), string varVersion = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), HealthcheckDocumentsDatabase documentsDatabase = default(HealthcheckDocumentsDatabase))
        {
            // to ensure "app" is required (not null)
            if (app == null)
            {
                throw new ArgumentNullException("app is a required property for Healthcheck and cannot be null");
            }
            this.App = app;
            // to ensure "licenseId" is required (not null)
            if (licenseId == null)
            {
                throw new ArgumentNullException("licenseId is a required property for Healthcheck and cannot be null");
            }
            this.LicenseId = licenseId;
            // to ensure "licenseType" is required (not null)
            if (licenseType == null)
            {
                throw new ArgumentNullException("licenseType is a required property for Healthcheck and cannot be null");
            }
            this.LicenseType = licenseType;
            // to ensure "licenseSerial" is required (not null)
            if (licenseSerial == null)
            {
                throw new ArgumentNullException("licenseSerial is a required property for Healthcheck and cannot be null");
            }
            this.LicenseSerial = licenseSerial;
            // to ensure "licenseValidUntil" is required (not null)
            if (licenseValidUntil == null)
            {
                throw new ArgumentNullException("licenseValidUntil is a required property for Healthcheck and cannot be null");
            }
            this.LicenseValidUntil = licenseValidUntil;
            // to ensure "scenarios" is required (not null)
            if (scenarios == null)
            {
                throw new ArgumentNullException("scenarios is a required property for Healthcheck and cannot be null");
            }
            this.Scenarios = scenarios;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for Healthcheck and cannot be null");
            }
            this.VarVersion = varVersion;
            this.Metadata = metadata;
            this.DocumentsDatabase = documentsDatabase;
        }

        /// <summary>
        /// Application name.
        /// </summary>
        /// <value>Application name.</value>
        [DataMember(Name = "app", IsRequired = true, EmitDefaultValue = true)]
        public string App { get; set; }

        /// <summary>
        /// Unique license identifier.
        /// </summary>
        /// <value>Unique license identifier.</value>
        [DataMember(Name = "licenseId", IsRequired = true, EmitDefaultValue = true)]
        public string LicenseId { get; set; }

        /// <summary>
        /// License type.
        /// </summary>
        /// <value>License type.</value>
        [DataMember(Name = "licenseType", IsRequired = true, EmitDefaultValue = true)]
        public string LicenseType { get; set; }

        /// <summary>
        /// License serial number.
        /// </summary>
        /// <value>License serial number.</value>
        [DataMember(Name = "licenseSerial", IsRequired = true, EmitDefaultValue = true)]
        public string LicenseSerial { get; set; }

        /// <summary>
        /// License validity date.
        /// </summary>
        /// <value>License validity date.</value>
        [DataMember(Name = "licenseValidUntil", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? LicenseValidUntil { get; set; }

        /// <summary>
        /// List of supported scenarios.
        /// </summary>
        /// <value>List of supported scenarios.</value>
        [DataMember(Name = "scenarios", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Scenarios { get; set; }

        /// <summary>
        /// Product version.
        /// </summary>
        /// <value>Product version.</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsDatabase
        /// </summary>
        [DataMember(Name = "documentsDatabase", EmitDefaultValue = false)]
        public HealthcheckDocumentsDatabase DocumentsDatabase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Healthcheck {\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  LicenseId: ").Append(LicenseId).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  LicenseSerial: ").Append(LicenseSerial).Append("\n");
            sb.Append("  LicenseValidUntil: ").Append(LicenseValidUntil).Append("\n");
            sb.Append("  Scenarios: ").Append(Scenarios).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  DocumentsDatabase: ").Append(DocumentsDatabase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
