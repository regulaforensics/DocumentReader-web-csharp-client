// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ProcessSystemInfo
    /// </summary>
    public partial class ProcessSystemInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessSystemInfo" /> class.
        /// </summary>
        /// <param name="license">Base64 encoded license file</param>
        /// <param name="recaptchaToken">For internal use. Demo-sites recaptcha token.</param>
        [JsonConstructor]
        public ProcessSystemInfo(Option<string?> license = default, Option<string?> recaptchaToken = default)
        {
            LicenseOption = license;
            RecaptchaTokenOption = recaptchaToken;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of License
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LicenseOption { get; private set; }

        /// <summary>
        /// Base64 encoded license file
        /// </summary>
        /// <value>Base64 encoded license file</value>
        [JsonPropertyName("license")]
        public string? License { get { return this.LicenseOption; } set { this.LicenseOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecaptchaToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RecaptchaTokenOption { get; private set; }

        /// <summary>
        /// For internal use. Demo-sites recaptcha token.
        /// </summary>
        /// <value>For internal use. Demo-sites recaptcha token.</value>
        [JsonPropertyName("recaptcha_token")]
        public string? RecaptchaToken { get { return this.RecaptchaTokenOption; } set { this.RecaptchaTokenOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessSystemInfo {\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  RecaptchaToken: ").Append(RecaptchaToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProcessSystemInfo" />
    /// </summary>
    public class ProcessSystemInfoJsonConverter : JsonConverter<ProcessSystemInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="ProcessSystemInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProcessSystemInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> license = default;
            Option<string?> recaptchaToken = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "license":
                            license = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "recaptcha_token":
                            recaptchaToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (license.IsSet && license.Value == null)
                throw new ArgumentNullException(nameof(license), "Property is not nullable for class ProcessSystemInfo.");

            if (recaptchaToken.IsSet && recaptchaToken.Value == null)
                throw new ArgumentNullException(nameof(recaptchaToken), "Property is not nullable for class ProcessSystemInfo.");

            return new ProcessSystemInfo(license, recaptchaToken);
        }

        /// <summary>
        /// Serializes a <see cref="ProcessSystemInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="processSystemInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProcessSystemInfo processSystemInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, processSystemInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProcessSystemInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="processSystemInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ProcessSystemInfo processSystemInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (processSystemInfo.LicenseOption.IsSet && processSystemInfo.License == null)
                throw new ArgumentNullException(nameof(processSystemInfo.License), "Property is required for class ProcessSystemInfo.");

            if (processSystemInfo.RecaptchaTokenOption.IsSet && processSystemInfo.RecaptchaToken == null)
                throw new ArgumentNullException(nameof(processSystemInfo.RecaptchaToken), "Property is required for class ProcessSystemInfo.");

            if (processSystemInfo.LicenseOption.IsSet)
                writer.WriteString("license", processSystemInfo.License);

            if (processSystemInfo.RecaptchaTokenOption.IsSet)
                writer.WriteString("recaptcha_token", processSystemInfo.RecaptchaToken);
        }
    }
}
