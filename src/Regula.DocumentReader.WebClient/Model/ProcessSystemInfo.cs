/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ProcessSystemInfo
    /// </summary>
    [DataContract]
    public partial class ProcessSystemInfo :  IEquatable<ProcessSystemInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessSystemInfo" /> class.
        /// </summary>
        /// <param name="license">Base64 encoded license file.</param>
        /// <param name="recaptchaToken">For internal use. Demo-sites recaptcha token..</param>
        public ProcessSystemInfo(string license = default(string), string recaptchaToken = default(string))
        {
            this.License = license;
            this.RecaptchaToken = recaptchaToken;
        }
        
        /// <summary>
        /// Base64 encoded license file
        /// </summary>
        /// <value>Base64 encoded license file</value>
        [DataMember(Name="license", EmitDefaultValue=false)]
        public string License { get; set; }

        /// <summary>
        /// For internal use. Demo-sites recaptcha token.
        /// </summary>
        /// <value>For internal use. Demo-sites recaptcha token.</value>
        [DataMember(Name="recaptcha_token", EmitDefaultValue=false)]
        public string RecaptchaToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessSystemInfo {\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  RecaptchaToken: ").Append(RecaptchaToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessSystemInfo);
        }

        /// <summary>
        /// Returns true if ProcessSystemInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessSystemInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessSystemInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.RecaptchaToken == input.RecaptchaToken ||
                    (this.RecaptchaToken != null &&
                    this.RecaptchaToken.Equals(input.RecaptchaToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.RecaptchaToken != null)
                    hashCode = hashCode * 59 + this.RecaptchaToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
