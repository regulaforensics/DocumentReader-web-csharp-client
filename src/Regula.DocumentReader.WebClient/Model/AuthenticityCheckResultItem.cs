/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Common fields for all authenticity result objects
    /// </summary>
    [DataContract(Name = "AuthenticityCheckResultItem")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(SecurityFeatureResult), "1")]
    [JsonSubtypes.KnownSubType(typeof(IdentResult), "1024")]
    [JsonSubtypes.KnownSubType(typeof(IdentResult), "1048576")]
    [JsonSubtypes.KnownSubType(typeof(PhotoIdentResult), "128")]
    [JsonSubtypes.KnownSubType(typeof(IdentResult), "131072")]
    [JsonSubtypes.KnownSubType(typeof(FiberResult), "16")]
    [JsonSubtypes.KnownSubType(typeof(OCRSecurityTextResult), "16777216")]
    [JsonSubtypes.KnownSubType(typeof(SecurityFeatureResult), "2")]
    [JsonSubtypes.KnownSubType(typeof(IdentResult), "2097152")]
    [JsonSubtypes.KnownSubType(typeof(IdentResult), "262144")]
    [JsonSubtypes.KnownSubType(typeof(IdentResult), "32")]
    [JsonSubtypes.KnownSubType(typeof(IdentResult), "32768")]
    [JsonSubtypes.KnownSubType(typeof(IdentResult), "4")]
    [JsonSubtypes.KnownSubType(typeof(SecurityFeatureResult), "4096")]
    [JsonSubtypes.KnownSubType(typeof(SecurityFeatureResult), "4194304")]
    [JsonSubtypes.KnownSubType(typeof(SecurityFeatureResult), "512")]
    [JsonSubtypes.KnownSubType(typeof(IdentResult), "524288")]
    [JsonSubtypes.KnownSubType(typeof(OCRSecurityTextResult), "64")]
    [JsonSubtypes.KnownSubType(typeof(SecurityFeatureResult), "65536")]
    [JsonSubtypes.KnownSubType(typeof(SecurityFeatureResult), "8")]
    [JsonSubtypes.KnownSubType(typeof(SecurityFeatureResult), "8192")]
    [JsonSubtypes.KnownSubType(typeof(SecurityFeatureResult), "8388608")]
    public partial class AuthenticityCheckResultItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", IsRequired = true, EmitDefaultValue = true)]
        public AuthenticityResultType Type { get; set; }

        /// <summary>
        /// Gets or Sets ElementResult
        /// </summary>
        [DataMember(Name = "ElementResult", EmitDefaultValue = false)]
        public CheckResult? ElementResult { get; set; }

        /// <summary>
        /// Gets or Sets ElementDiagnose
        /// </summary>
        [DataMember(Name = "ElementDiagnose", EmitDefaultValue = false)]
        public CheckDiagnose? ElementDiagnose { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthenticityCheckResultItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultItem" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="elementResult">elementResult.</param>
        /// <param name="elementDiagnose">elementDiagnose.</param>
        /// <param name="percentValue">percentValue.</param>
        public AuthenticityCheckResultItem(AuthenticityResultType type = default(AuthenticityResultType), CheckResult? elementResult = default(CheckResult?), CheckDiagnose? elementDiagnose = default(CheckDiagnose?), int percentValue = default(int))
        {
            this.Type = type;
            this.ElementResult = elementResult;
            this.ElementDiagnose = elementDiagnose;
            this.PercentValue = percentValue;
        }

        /// <summary>
        /// Gets or Sets PercentValue
        /// </summary>
        [DataMember(Name = "PercentValue", EmitDefaultValue = false)]
        public int? PercentValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticityCheckResultItem {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ElementResult: ").Append(ElementResult).Append("\n");
            sb.Append("  ElementDiagnose: ").Append(ElementDiagnose).Append("\n");
            sb.Append("  PercentValue: ").Append(PercentValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
