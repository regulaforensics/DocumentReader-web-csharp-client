/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 5.5.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Common fields for all authenticity result objects
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "type")]
    [JsonSubtypes.KnownSubType(typeof(SecurityFeatureResult), "SecurityFeatureResult")]
    [JsonSubtypes.KnownSubType(typeof(IdentResult), "IdentResult")]
    [JsonSubtypes.KnownSubType(typeof(PhotoIdentResult), "PhotoIdentResult")]
    [JsonSubtypes.KnownSubType(typeof(OCRSecurityTextResult), "OCRSecurityTextResult")]
    [JsonSubtypes.KnownSubType(typeof(FiberResult), "FiberResult")]
    public partial class AuthenticityCheckResultItem :  IEquatable<AuthenticityCheckResultItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthenticityCheckResultItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultItem" /> class.
        /// </summary>
        /// <param name="type">Same as authenticity result type, but used for safe parsing of not-described values. See authenticity result type (required) (default to 0).</param>
        /// <param name="elementResult">elementResult.</param>
        /// <param name="elementDiagnose">elementDiagnose.</param>
        public AuthenticityCheckResultItem(int type = 0, int elementResult = default(int), int elementDiagnose = default(int))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for AuthenticityCheckResultItem and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            this.ElementResult = elementResult;
            this.ElementDiagnose = elementDiagnose;
        }

        /// <summary>
        /// Same as authenticity result type, but used for safe parsing of not-described values. See authenticity result type
        /// </summary>
        /// <value>Same as authenticity result type, but used for safe parsing of not-described values. See authenticity result type</value>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public int Type { get; set; }

        /// <summary>
        /// Gets or Sets LightIndex
        /// </summary>
        [DataMember(Name="LightIndex", EmitDefaultValue=false)]
        public int LightIndex { get; set; }

        /// <summary>
        /// Gets or Sets ElementResult
        /// </summary>
        [DataMember(Name="ElementResult", EmitDefaultValue=false)]
        public int ElementResult { get; set; }

        /// <summary>
        /// Gets or Sets ElementDiagnose
        /// </summary>
        [DataMember(Name="ElementDiagnose", EmitDefaultValue=false)]
        public int ElementDiagnose { get; set; }

        /// <summary>
        /// Gets or Sets the Area
        /// </summary>
        [DataMember(Name="Area", EmitDefaultValue=false)]
        public RectangleCoordinates Area { get; set; }

        /// <summary>
        /// Gets or Sets ElementType
        /// </summary>
        [DataMember(Name="ElementType", EmitDefaultValue=false)]
        public int ElementType { get; set; }

        /// <summary>
        /// Gets or Sets PercentValue
        /// </summary>
        [DataMember(Name="PercentValue", EmitDefaultValue=false)]
        public int PercentValue { get; set; }

        /// <summary>
        /// Gets or Sets EtalonImage
        /// </summary>
        [DataMember(Name="EtalonImage", EmitDefaultValue=false)]
        public ImageData EtalonImage { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public ImageData Image { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="Result", EmitDefaultValue=false)]
        public int Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticityCheckResultItem {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ElementResult: ").Append(ElementResult).Append("\n");
            sb.Append("  ElementDiagnose: ").Append(ElementDiagnose).Append("\n");
            sb.Append("  LightIndex: ").Append(LightIndex).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  ElementType: ").Append(ElementType).Append("\n");
            sb.Append("  PercentValue: ").Append(PercentValue).Append("\n");
            sb.Append("  EtalonImage: ").Append(EtalonImage).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticityCheckResultItem);
        }

        /// <summary>
        /// Returns true if AuthenticityCheckResultItem instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticityCheckResultItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticityCheckResultItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) &&
                (
                    this.LightIndex == input.LightIndex ||
                    (this.LightIndex != null &&
                    this.LightIndex.Equals(input.LightIndex))
                ) &&
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) &&
                (
                    this.ElementType == input.ElementType ||
                    (this.ElementType != null &&
                    this.ElementType.Equals(input.ElementType))
                ) &&
                (
                    this.PercentValue == input.PercentValue ||
                    (this.PercentValue != null &&
                    this.PercentValue.Equals(input.PercentValue))
                ) &&
                (
                    this.EtalonImage == input.EtalonImage ||
                    (this.EtalonImage != null &&
                    this.EtalonImage.Equals(input.EtalonImage))
                ) &&
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) &&
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) &&
                (
                    this.ElementResult == input.ElementResult ||
                    (this.ElementResult != null &&
                    this.ElementResult.Equals(input.ElementResult))
                ) && 
                (
                    this.ElementDiagnose == input.ElementDiagnose ||
                    (this.ElementDiagnose != null &&
                    this.ElementDiagnose.Equals(input.ElementDiagnose))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ElementResult != null)
                    hashCode = hashCode * 59 + this.ElementResult.GetHashCode();
                if (this.ElementDiagnose != null)
                    hashCode = hashCode * 59 + this.ElementDiagnose.GetHashCode();
                if (this.LightIndex != null)
                    hashCode = hashCode * 59 + this.LightIndex.GetHashCode();
                if (this.Area != null)
                    hashCode = hashCode * 59 + this.Area.GetHashCode();
                if (this.ElementType != null)
                    hashCode = hashCode * 59 + this.ElementType.GetHashCode();
                if (this.PercentValue != null)
                    hashCode = hashCode * 59 + this.PercentValue.GetHashCode();
                if (this.EtalonImage != null)
                    hashCode = hashCode * 59 + this.EtalonImage.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
