// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Common fields for all authenticity result objects
    /// </summary>
    public partial class AuthenticityCheckResultItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultItem" /> class.
        /// </summary>
        /// <param name="elementResult">elementResult</param>
        /// <param name="elementDiagnose">elementDiagnose</param>
        /// <param name="percentValue">percentValue</param>
        [JsonConstructor]
        public AuthenticityCheckResultItem(Option<CheckResult?> elementResult = default, Option<CheckDiagnose?> elementDiagnose = default, Option<int?> percentValue = default)
        {
            Type = this.GetType().Name;
            ElementResultOption = elementResult;
            ElementDiagnoseOption = elementDiagnose;
            PercentValueOption = percentValue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ElementResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CheckResult?> ElementResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets ElementResult
        /// </summary>
        [JsonPropertyName("ElementResult")]
        public CheckResult? ElementResult { get { return this.ElementResultOption; } set { this.ElementResultOption = new(value); } }

        /// <summary>
        /// Used to track the state of ElementDiagnose
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CheckDiagnose?> ElementDiagnoseOption { get; private set; }

        /// <summary>
        /// Gets or Sets ElementDiagnose
        /// </summary>
        [JsonPropertyName("ElementDiagnose")]
        public CheckDiagnose? ElementDiagnose { get { return this.ElementDiagnoseOption; } set { this.ElementDiagnoseOption = new(value); } }

        /// <summary>
        /// The discriminator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public int Type { get; }

        /// <summary>
        /// Used to track the state of PercentValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PercentValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets PercentValue
        /// </summary>
        [JsonPropertyName("PercentValue")]
        public int? PercentValue { get { return this.PercentValueOption; } set { this.PercentValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticityCheckResultItem {\n");
            sb.Append("  ElementResult: ").Append(ElementResult).Append("\n");
            sb.Append("  ElementDiagnose: ").Append(ElementDiagnose).Append("\n");
            sb.Append("  PercentValue: ").Append(PercentValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthenticityCheckResultItem" />
    /// </summary>
    public class AuthenticityCheckResultItemJsonConverter : JsonConverter<AuthenticityCheckResultItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthenticityCheckResultItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthenticityCheckResultItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> type = default;
            Option<CheckResult?> elementResult = default;
            Option<CheckDiagnose?> elementDiagnose = default;
            Option<int?> percentValue = default;

            string? discriminator = ClientUtils.GetDiscriminator(utf8JsonReader, "Type");

            if (discriminator != null && discriminator.Equals("FiberResult"))
                return JsonSerializer.Deserialize<FiberResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("IdentResult"))
                return JsonSerializer.Deserialize<IdentResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("OCRSecurityTextResult"))
                return JsonSerializer.Deserialize<OCRSecurityTextResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("PhotoIdentResult"))
                return JsonSerializer.Deserialize<PhotoIdentResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("SecurityFeatureResult"))
                return JsonSerializer.Deserialize<SecurityFeatureResult>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Type":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                type = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ElementResult":
                            string? elementResultRawValue = utf8JsonReader.GetString();
                            if (elementResultRawValue != null)
                                elementResult = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(elementResultRawValue));
                            break;
                        case "ElementDiagnose":
                            string? elementDiagnoseRawValue = utf8JsonReader.GetString();
                            if (elementDiagnoseRawValue != null)
                                elementDiagnose = new Option<CheckDiagnose?>(CheckDiagnoseValueConverter.FromStringOrDefault(elementDiagnoseRawValue));
                            break;
                        case "PercentValue":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                percentValue = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class AuthenticityCheckResultItem.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class AuthenticityCheckResultItem.");

            if (elementResult.IsSet && elementResult.Value == null)
                throw new ArgumentNullException(nameof(elementResult), "Property is not nullable for class AuthenticityCheckResultItem.");

            if (elementDiagnose.IsSet && elementDiagnose.Value == null)
                throw new ArgumentNullException(nameof(elementDiagnose), "Property is not nullable for class AuthenticityCheckResultItem.");

            if (percentValue.IsSet && percentValue.Value == null)
                throw new ArgumentNullException(nameof(percentValue), "Property is not nullable for class AuthenticityCheckResultItem.");

            return new AuthenticityCheckResultItem(elementResult, elementDiagnose, percentValue);
        }

        /// <summary>
        /// Serializes a <see cref="AuthenticityCheckResultItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authenticityCheckResultItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthenticityCheckResultItem authenticityCheckResultItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authenticityCheckResultItem is FiberResult fiberResult){
                JsonSerializer.Serialize<FiberResult>(writer, fiberResult, jsonSerializerOptions);
                return;
            }

            if (authenticityCheckResultItem is IdentResult identResult){
                JsonSerializer.Serialize<IdentResult>(writer, identResult, jsonSerializerOptions);
                return;
            }

            if (authenticityCheckResultItem is OCRSecurityTextResult oCRSecurityTextResult){
                JsonSerializer.Serialize<OCRSecurityTextResult>(writer, oCRSecurityTextResult, jsonSerializerOptions);
                return;
            }

            if (authenticityCheckResultItem is PhotoIdentResult photoIdentResult){
                JsonSerializer.Serialize<PhotoIdentResult>(writer, photoIdentResult, jsonSerializerOptions);
                return;
            }

            if (authenticityCheckResultItem is SecurityFeatureResult securityFeatureResult){
                JsonSerializer.Serialize<SecurityFeatureResult>(writer, securityFeatureResult, jsonSerializerOptions);
                return;
            }

            writer.WriteStartObject();

            WriteProperties(writer, authenticityCheckResultItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthenticityCheckResultItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authenticityCheckResultItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthenticityCheckResultItem authenticityCheckResultItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("Type", authenticityCheckResultItem.Type);

            if (authenticityCheckResultItem.ElementResultOption.IsSet)
            {
                var elementResultRawValue = CheckResultValueConverter.ToJsonValue(authenticityCheckResultItem.ElementResult!.Value);
                writer.WriteNumber("ElementResult", elementResultRawValue);
            }
            if (authenticityCheckResultItem.ElementDiagnoseOption.IsSet)
            {
                var elementDiagnoseRawValue = CheckDiagnoseValueConverter.ToJsonValue(authenticityCheckResultItem.ElementDiagnose!.Value);
                writer.WriteNumber("ElementDiagnose", elementDiagnoseRawValue);
            }
            if (authenticityCheckResultItem.PercentValueOption.IsSet)
                writer.WriteNumber("PercentValue", authenticityCheckResultItem.PercentValueOption.Value!.Value);
        }
    }
}
