// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ErrorCoordinates
    /// </summary>
    public partial class ErrorCoordinates : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorCoordinates" /> class.
        /// </summary>
        /// <param name="left">left</param>
        /// <param name="top">top</param>
        /// <param name="right">right</param>
        /// <param name="bottom">bottom</param>
        [JsonConstructor]
        public ErrorCoordinates(Option<decimal?> left = default, Option<decimal?> top = default, Option<decimal?> right = default, Option<decimal?> bottom = default)
        {
            LeftOption = left;
            TopOption = top;
            RightOption = right;
            BottomOption = bottom;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Left
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LeftOption { get; private set; }

        /// <summary>
        /// Gets or Sets Left
        /// </summary>
        [JsonPropertyName("Left")]
        public decimal? Left { get { return this.LeftOption; } set { this.LeftOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Top
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TopOption { get; private set; }

        /// <summary>
        /// Gets or Sets Top
        /// </summary>
        [JsonPropertyName("Top")]
        public decimal? Top { get { return this.TopOption; } set { this.TopOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Right
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> RightOption { get; private set; }

        /// <summary>
        /// Gets or Sets Right
        /// </summary>
        [JsonPropertyName("Right")]
        public decimal? Right { get { return this.RightOption; } set { this.RightOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Bottom
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> BottomOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bottom
        /// </summary>
        [JsonPropertyName("Bottom")]
        public decimal? Bottom { get { return this.BottomOption; } set { this.BottomOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorCoordinates {\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  Bottom: ").Append(Bottom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ErrorCoordinates" />
    /// </summary>
    public class ErrorCoordinatesJsonConverter : JsonConverter<ErrorCoordinates>
    {
        /// <summary>
        /// Deserializes json to <see cref="ErrorCoordinates" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ErrorCoordinates Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> left = default;
            Option<decimal?> top = default;
            Option<decimal?> right = default;
            Option<decimal?> bottom = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Left":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                left = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Top":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                top = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Right":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                right = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Bottom":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bottom = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (left.IsSet && left.Value == null)
                throw new ArgumentNullException(nameof(left), "Property is not nullable for class ErrorCoordinates.");

            if (top.IsSet && top.Value == null)
                throw new ArgumentNullException(nameof(top), "Property is not nullable for class ErrorCoordinates.");

            if (right.IsSet && right.Value == null)
                throw new ArgumentNullException(nameof(right), "Property is not nullable for class ErrorCoordinates.");

            if (bottom.IsSet && bottom.Value == null)
                throw new ArgumentNullException(nameof(bottom), "Property is not nullable for class ErrorCoordinates.");

            return new ErrorCoordinates(left, top, right, bottom);
        }

        /// <summary>
        /// Serializes a <see cref="ErrorCoordinates" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errorCoordinates"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ErrorCoordinates errorCoordinates, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, errorCoordinates, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ErrorCoordinates" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errorCoordinates"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ErrorCoordinates errorCoordinates, JsonSerializerOptions jsonSerializerOptions)
        {
            if (errorCoordinates.LeftOption.IsSet)
                writer.WriteNumber("Left", errorCoordinates.LeftOption.Value!.Value);

            if (errorCoordinates.TopOption.IsSet)
                writer.WriteNumber("Top", errorCoordinates.TopOption.Value!.Value);

            if (errorCoordinates.RightOption.IsSet)
                writer.WriteNumber("Right", errorCoordinates.RightOption.Value!.Value);

            if (errorCoordinates.BottomOption.IsSet)
                writer.WriteNumber("Bottom", errorCoordinates.BottomOption.Value!.Value);
        }
    }
}
