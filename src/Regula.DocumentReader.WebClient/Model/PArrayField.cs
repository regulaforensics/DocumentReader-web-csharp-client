// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// PArrayField
    /// </summary>
    public partial class PArrayField : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PArrayField" /> class.
        /// </summary>
        /// <param name="bcAngleDETECT">bcAngleDETECT</param>
        /// <param name="bcCodeResult">bcCodeResult</param>
        /// <param name="bcCountModule">bcCountModule</param>
        /// <param name="bcDataModule">bcDataModule</param>
        /// <param name="bcROIDETECT">bcROIDETECT</param>
        /// <param name="bcTypeDECODE">bcTypeDECODE</param>
        /// <param name="bcTypeDETECT">bcTypeDETECT</param>
        /// <param name="bcPDF417INFO">bcPDF417INFO</param>
        /// <param name="bcTextDecoderTypes">bcTextDecoderTypes</param>
        /// <param name="bcTextFieldType">bcTextFieldType</param>
        [JsonConstructor]
        public PArrayField(float bcAngleDETECT, int bcCodeResult, int bcCountModule, List<DataModule> bcDataModule, BcROIDETECT bcROIDETECT, BarcodeType bcTypeDECODE, int bcTypeDETECT, Option<BcPDF417INFO?> bcPDF417INFO = default, Option<int?> bcTextDecoderTypes = default, Option<int?> bcTextFieldType = default)
        {
            BcAngleDETECT = bcAngleDETECT;
            BcCodeResult = bcCodeResult;
            BcCountModule = bcCountModule;
            BcDataModule = bcDataModule;
            BcROIDETECT = bcROIDETECT;
            BcTypeDECODE = bcTypeDECODE;
            BcTypeDETECT = bcTypeDETECT;
            BcPDF417INFOOption = bcPDF417INFO;
            BcTextDecoderTypesOption = bcTextDecoderTypes;
            BcTextFieldTypeOption = bcTextFieldType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets BcTypeDECODE
        /// </summary>
        [JsonPropertyName("bcType_DECODE")]
        public BarcodeType BcTypeDECODE { get; set; }

        /// <summary>
        /// Gets or Sets BcAngleDETECT
        /// </summary>
        [JsonPropertyName("bcAngle_DETECT")]
        public float BcAngleDETECT { get; set; }

        /// <summary>
        /// Gets or Sets BcCodeResult
        /// </summary>
        [JsonPropertyName("bcCodeResult")]
        public int BcCodeResult { get; set; }

        /// <summary>
        /// Gets or Sets BcCountModule
        /// </summary>
        [JsonPropertyName("bcCountModule")]
        public int BcCountModule { get; set; }

        /// <summary>
        /// Gets or Sets BcDataModule
        /// </summary>
        [JsonPropertyName("bcDataModule")]
        public List<DataModule> BcDataModule { get; set; }

        /// <summary>
        /// Gets or Sets BcROIDETECT
        /// </summary>
        [JsonPropertyName("bcROI_DETECT")]
        public BcROIDETECT BcROIDETECT { get; set; }

        /// <summary>
        /// Gets or Sets BcTypeDETECT
        /// </summary>
        [JsonPropertyName("bcType_DETECT")]
        public int BcTypeDETECT { get; set; }

        /// <summary>
        /// Used to track the state of BcPDF417INFO
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BcPDF417INFO?> BcPDF417INFOOption { get; private set; }

        /// <summary>
        /// Gets or Sets BcPDF417INFO
        /// </summary>
        [JsonPropertyName("bcPDF417INFO")]
        public BcPDF417INFO? BcPDF417INFO { get { return this.BcPDF417INFOOption; } set { this.BcPDF417INFOOption = new(value); } }

        /// <summary>
        /// Used to track the state of BcTextDecoderTypes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BcTextDecoderTypesOption { get; private set; }

        /// <summary>
        /// Gets or Sets BcTextDecoderTypes
        /// </summary>
        [JsonPropertyName("bcTextDecoderTypes")]
        public int? BcTextDecoderTypes { get { return this.BcTextDecoderTypesOption; } set { this.BcTextDecoderTypesOption = new(value); } }

        /// <summary>
        /// Used to track the state of BcTextFieldType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BcTextFieldTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets BcTextFieldType
        /// </summary>
        [JsonPropertyName("bcTextFieldType")]
        public int? BcTextFieldType { get { return this.BcTextFieldTypeOption; } set { this.BcTextFieldTypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PArrayField {\n");
            sb.Append("  BcAngleDETECT: ").Append(BcAngleDETECT).Append("\n");
            sb.Append("  BcCodeResult: ").Append(BcCodeResult).Append("\n");
            sb.Append("  BcCountModule: ").Append(BcCountModule).Append("\n");
            sb.Append("  BcDataModule: ").Append(BcDataModule).Append("\n");
            sb.Append("  BcROIDETECT: ").Append(BcROIDETECT).Append("\n");
            sb.Append("  BcTypeDECODE: ").Append(BcTypeDECODE).Append("\n");
            sb.Append("  BcTypeDETECT: ").Append(BcTypeDETECT).Append("\n");
            sb.Append("  BcPDF417INFO: ").Append(BcPDF417INFO).Append("\n");
            sb.Append("  BcTextDecoderTypes: ").Append(BcTextDecoderTypes).Append("\n");
            sb.Append("  BcTextFieldType: ").Append(BcTextFieldType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PArrayField" />
    /// </summary>
    public class PArrayFieldJsonConverter : JsonConverter<PArrayField>
    {
        /// <summary>
        /// Deserializes json to <see cref="PArrayField" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PArrayField Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<float?> bcAngleDETECT = default;
            Option<int?> bcCodeResult = default;
            Option<int?> bcCountModule = default;
            Option<List<DataModule>?> bcDataModule = default;
            Option<BcROIDETECT?> bcROIDETECT = default;
            Option<BarcodeType?> bcTypeDECODE = default;
            Option<int?> bcTypeDETECT = default;
            Option<BcPDF417INFO?> bcPDF417INFO = default;
            Option<int?> bcTextDecoderTypes = default;
            Option<int?> bcTextFieldType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bcAngle_DETECT":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bcAngleDETECT = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "bcCodeResult":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bcCodeResult = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "bcCountModule":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bcCountModule = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "bcDataModule":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bcDataModule = new Option<List<DataModule>?>(JsonSerializer.Deserialize<List<DataModule>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "bcROI_DETECT":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bcROIDETECT = new Option<BcROIDETECT?>(JsonSerializer.Deserialize<BcROIDETECT>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "bcType_DECODE":
                            string? bcTypeDECODERawValue = utf8JsonReader.GetString();
                            if (bcTypeDECODERawValue != null)
                                bcTypeDECODE = new Option<BarcodeType?>(BarcodeTypeValueConverter.FromStringOrDefault(bcTypeDECODERawValue));
                            break;
                        case "bcType_DETECT":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bcTypeDETECT = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "bcPDF417INFO":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bcPDF417INFO = new Option<BcPDF417INFO?>(JsonSerializer.Deserialize<BcPDF417INFO>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "bcTextDecoderTypes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bcTextDecoderTypes = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "bcTextFieldType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bcTextFieldType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!bcAngleDETECT.IsSet)
                throw new ArgumentException("Property is required for class PArrayField.", nameof(bcAngleDETECT));

            if (!bcCodeResult.IsSet)
                throw new ArgumentException("Property is required for class PArrayField.", nameof(bcCodeResult));

            if (!bcCountModule.IsSet)
                throw new ArgumentException("Property is required for class PArrayField.", nameof(bcCountModule));

            if (!bcDataModule.IsSet)
                throw new ArgumentException("Property is required for class PArrayField.", nameof(bcDataModule));

            if (!bcROIDETECT.IsSet)
                throw new ArgumentException("Property is required for class PArrayField.", nameof(bcROIDETECT));

            if (!bcTypeDECODE.IsSet)
                throw new ArgumentException("Property is required for class PArrayField.", nameof(bcTypeDECODE));

            if (!bcTypeDETECT.IsSet)
                throw new ArgumentException("Property is required for class PArrayField.", nameof(bcTypeDETECT));

            if (bcAngleDETECT.IsSet && bcAngleDETECT.Value == null)
                throw new ArgumentNullException(nameof(bcAngleDETECT), "Property is not nullable for class PArrayField.");

            if (bcCodeResult.IsSet && bcCodeResult.Value == null)
                throw new ArgumentNullException(nameof(bcCodeResult), "Property is not nullable for class PArrayField.");

            if (bcCountModule.IsSet && bcCountModule.Value == null)
                throw new ArgumentNullException(nameof(bcCountModule), "Property is not nullable for class PArrayField.");

            if (bcDataModule.IsSet && bcDataModule.Value == null)
                throw new ArgumentNullException(nameof(bcDataModule), "Property is not nullable for class PArrayField.");

            if (bcROIDETECT.IsSet && bcROIDETECT.Value == null)
                throw new ArgumentNullException(nameof(bcROIDETECT), "Property is not nullable for class PArrayField.");

            if (bcTypeDECODE.IsSet && bcTypeDECODE.Value == null)
                throw new ArgumentNullException(nameof(bcTypeDECODE), "Property is not nullable for class PArrayField.");

            if (bcTypeDETECT.IsSet && bcTypeDETECT.Value == null)
                throw new ArgumentNullException(nameof(bcTypeDETECT), "Property is not nullable for class PArrayField.");

            if (bcPDF417INFO.IsSet && bcPDF417INFO.Value == null)
                throw new ArgumentNullException(nameof(bcPDF417INFO), "Property is not nullable for class PArrayField.");

            if (bcTextDecoderTypes.IsSet && bcTextDecoderTypes.Value == null)
                throw new ArgumentNullException(nameof(bcTextDecoderTypes), "Property is not nullable for class PArrayField.");

            if (bcTextFieldType.IsSet && bcTextFieldType.Value == null)
                throw new ArgumentNullException(nameof(bcTextFieldType), "Property is not nullable for class PArrayField.");

            return new PArrayField(bcAngleDETECT.Value!.Value!, bcCodeResult.Value!.Value!, bcCountModule.Value!.Value!, bcDataModule.Value!, bcROIDETECT.Value!, bcTypeDECODE.Value!.Value!, bcTypeDETECT.Value!.Value!, bcPDF417INFO, bcTextDecoderTypes, bcTextFieldType);
        }

        /// <summary>
        /// Serializes a <see cref="PArrayField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pArrayField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PArrayField pArrayField, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pArrayField, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PArrayField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pArrayField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PArrayField pArrayField, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pArrayField.BcDataModule == null)
                throw new ArgumentNullException(nameof(pArrayField.BcDataModule), "Property is required for class PArrayField.");

            if (pArrayField.BcROIDETECT == null)
                throw new ArgumentNullException(nameof(pArrayField.BcROIDETECT), "Property is required for class PArrayField.");

            if (pArrayField.BcPDF417INFOOption.IsSet && pArrayField.BcPDF417INFO == null)
                throw new ArgumentNullException(nameof(pArrayField.BcPDF417INFO), "Property is required for class PArrayField.");

            writer.WriteNumber("bcAngle_DETECT", pArrayField.BcAngleDETECT);

            writer.WriteNumber("bcCodeResult", pArrayField.BcCodeResult);

            writer.WriteNumber("bcCountModule", pArrayField.BcCountModule);

            writer.WritePropertyName("bcDataModule");
            JsonSerializer.Serialize(writer, pArrayField.BcDataModule, jsonSerializerOptions);
            writer.WritePropertyName("bcROI_DETECT");
            JsonSerializer.Serialize(writer, pArrayField.BcROIDETECT, jsonSerializerOptions);
            var bcTypeDECODERawValue = BarcodeTypeValueConverter.ToJsonValue(pArrayField.BcTypeDECODE);
            writer.WriteNumber("bcType_DECODE", bcTypeDECODERawValue);

            writer.WriteNumber("bcType_DETECT", pArrayField.BcTypeDETECT);

            if (pArrayField.BcPDF417INFOOption.IsSet)
            {
                writer.WritePropertyName("bcPDF417INFO");
                JsonSerializer.Serialize(writer, pArrayField.BcPDF417INFO, jsonSerializerOptions);
            }
            if (pArrayField.BcTextDecoderTypesOption.IsSet)
                writer.WriteNumber("bcTextDecoderTypes", pArrayField.BcTextDecoderTypesOption.Value!.Value);

            if (pArrayField.BcTextFieldTypeOption.IsSet)
                writer.WriteNumber("bcTextFieldType", pArrayField.BcTextFieldTypeOption.Value!.Value);
        }
    }
}
