/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// PArrayField
    /// </summary>
    [DataContract]
    public partial class PArrayField :  IEquatable<PArrayField>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets BcTypeDECODE
        /// </summary>
        [DataMember(Name="bcType_DECODE", EmitDefaultValue=true)]
        public BarcodeType BcTypeDECODE { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PArrayField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PArrayField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PArrayField" /> class.
        /// </summary>
        /// <param name="bcAngleDETECT">bcAngleDETECT (required).</param>
        /// <param name="bcCodeResult">bcCodeResult (required).</param>
        /// <param name="bcCountModule">bcCountModule (required).</param>
        /// <param name="bcDataModule">bcDataModule (required).</param>
        /// <param name="bcPDF417INFO">bcPDF417INFO.</param>
        /// <param name="bcROIDETECT">bcROIDETECT (required).</param>
        /// <param name="bcTextDecoderTypes">bcTextDecoderTypes.</param>
        /// <param name="bcTextFieldType">bcTextFieldType.</param>
        /// <param name="bcTypeDECODE">bcTypeDECODE (required).</param>
        /// <param name="bcTypeDETECT">bcTypeDETECT (required).</param>
        public PArrayField(float bcAngleDETECT = default(float), int bcCodeResult = default(int), int bcCountModule = default(int), List<DataModule> bcDataModule = default(List<DataModule>), BcPDF417INFO bcPDF417INFO = default(BcPDF417INFO), BcROIDETECT bcROIDETECT = default(BcROIDETECT), int bcTextDecoderTypes = default(int), int bcTextFieldType = default(int), BarcodeType bcTypeDECODE = default(BarcodeType), int bcTypeDETECT = default(int))
        {
            // to ensure "bcAngleDETECT" is required (not null)
            if (bcAngleDETECT == null)
            {
                throw new InvalidDataException("bcAngleDETECT is a required property for PArrayField and cannot be null");
            }
            else
            {
                this.BcAngleDETECT = bcAngleDETECT;
            }
            
            // to ensure "bcCodeResult" is required (not null)
            if (bcCodeResult == null)
            {
                throw new InvalidDataException("bcCodeResult is a required property for PArrayField and cannot be null");
            }
            else
            {
                this.BcCodeResult = bcCodeResult;
            }
            
            // to ensure "bcCountModule" is required (not null)
            if (bcCountModule == null)
            {
                throw new InvalidDataException("bcCountModule is a required property for PArrayField and cannot be null");
            }
            else
            {
                this.BcCountModule = bcCountModule;
            }
            
            // to ensure "bcDataModule" is required (not null)
            if (bcDataModule == null)
            {
                throw new InvalidDataException("bcDataModule is a required property for PArrayField and cannot be null");
            }
            else
            {
                this.BcDataModule = bcDataModule;
            }
            
            // to ensure "bcROIDETECT" is required (not null)
            if (bcROIDETECT == null)
            {
                throw new InvalidDataException("bcROIDETECT is a required property for PArrayField and cannot be null");
            }
            else
            {
                this.BcROIDETECT = bcROIDETECT;
            }
            
            // to ensure "bcTypeDECODE" is required (not null)
            if (bcTypeDECODE == null)
            {
                throw new InvalidDataException("bcTypeDECODE is a required property for PArrayField and cannot be null");
            }
            else
            {
                this.BcTypeDECODE = bcTypeDECODE;
            }
            
            // to ensure "bcTypeDETECT" is required (not null)
            if (bcTypeDETECT == null)
            {
                throw new InvalidDataException("bcTypeDETECT is a required property for PArrayField and cannot be null");
            }
            else
            {
                this.BcTypeDETECT = bcTypeDETECT;
            }
            
            this.BcPDF417INFO = bcPDF417INFO;
            this.BcTextDecoderTypes = bcTextDecoderTypes;
            this.BcTextFieldType = bcTextFieldType;
        }
        
        /// <summary>
        /// Gets or Sets BcAngleDETECT
        /// </summary>
        [DataMember(Name="bcAngle_DETECT", EmitDefaultValue=true)]
        public float BcAngleDETECT { get; set; }

        /// <summary>
        /// Gets or Sets BcCodeResult
        /// </summary>
        [DataMember(Name="bcCodeResult", EmitDefaultValue=true)]
        public int BcCodeResult { get; set; }

        /// <summary>
        /// Gets or Sets BcCountModule
        /// </summary>
        [DataMember(Name="bcCountModule", EmitDefaultValue=true)]
        public int BcCountModule { get; set; }

        /// <summary>
        /// Gets or Sets BcDataModule
        /// </summary>
        [DataMember(Name="bcDataModule", EmitDefaultValue=true)]
        public List<DataModule> BcDataModule { get; set; }

        /// <summary>
        /// Gets or Sets BcPDF417INFO
        /// </summary>
        [DataMember(Name="bcPDF417INFO", EmitDefaultValue=false)]
        public BcPDF417INFO BcPDF417INFO { get; set; }

        /// <summary>
        /// Gets or Sets BcROIDETECT
        /// </summary>
        [DataMember(Name="bcROI_DETECT", EmitDefaultValue=true)]
        public BcROIDETECT BcROIDETECT { get; set; }

        /// <summary>
        /// Gets or Sets BcTextDecoderTypes
        /// </summary>
        [DataMember(Name="bcTextDecoderTypes", EmitDefaultValue=false)]
        public int BcTextDecoderTypes { get; set; }

        /// <summary>
        /// Gets or Sets BcTextFieldType
        /// </summary>
        [DataMember(Name="bcTextFieldType", EmitDefaultValue=false)]
        public int BcTextFieldType { get; set; }


        /// <summary>
        /// Gets or Sets BcTypeDETECT
        /// </summary>
        [DataMember(Name="bcType_DETECT", EmitDefaultValue=true)]
        public int BcTypeDETECT { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PArrayField {\n");
            sb.Append("  BcAngleDETECT: ").Append(BcAngleDETECT).Append("\n");
            sb.Append("  BcCodeResult: ").Append(BcCodeResult).Append("\n");
            sb.Append("  BcCountModule: ").Append(BcCountModule).Append("\n");
            sb.Append("  BcDataModule: ").Append(BcDataModule).Append("\n");
            sb.Append("  BcPDF417INFO: ").Append(BcPDF417INFO).Append("\n");
            sb.Append("  BcROIDETECT: ").Append(BcROIDETECT).Append("\n");
            sb.Append("  BcTextDecoderTypes: ").Append(BcTextDecoderTypes).Append("\n");
            sb.Append("  BcTextFieldType: ").Append(BcTextFieldType).Append("\n");
            sb.Append("  BcTypeDECODE: ").Append(BcTypeDECODE).Append("\n");
            sb.Append("  BcTypeDETECT: ").Append(BcTypeDETECT).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PArrayField);
        }

        /// <summary>
        /// Returns true if PArrayField instances are equal
        /// </summary>
        /// <param name="input">Instance of PArrayField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PArrayField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BcAngleDETECT == input.BcAngleDETECT ||
                    (this.BcAngleDETECT != null &&
                    this.BcAngleDETECT.Equals(input.BcAngleDETECT))
                ) && 
                (
                    this.BcCodeResult == input.BcCodeResult ||
                    (this.BcCodeResult != null &&
                    this.BcCodeResult.Equals(input.BcCodeResult))
                ) && 
                (
                    this.BcCountModule == input.BcCountModule ||
                    (this.BcCountModule != null &&
                    this.BcCountModule.Equals(input.BcCountModule))
                ) && 
                (
                    this.BcDataModule == input.BcDataModule ||
                    this.BcDataModule != null &&
                    input.BcDataModule != null &&
                    this.BcDataModule.SequenceEqual(input.BcDataModule)
                ) && 
                (
                    this.BcPDF417INFO == input.BcPDF417INFO ||
                    (this.BcPDF417INFO != null &&
                    this.BcPDF417INFO.Equals(input.BcPDF417INFO))
                ) && 
                (
                    this.BcROIDETECT == input.BcROIDETECT ||
                    (this.BcROIDETECT != null &&
                    this.BcROIDETECT.Equals(input.BcROIDETECT))
                ) && 
                (
                    this.BcTextDecoderTypes == input.BcTextDecoderTypes ||
                    (this.BcTextDecoderTypes != null &&
                    this.BcTextDecoderTypes.Equals(input.BcTextDecoderTypes))
                ) && 
                (
                    this.BcTextFieldType == input.BcTextFieldType ||
                    (this.BcTextFieldType != null &&
                    this.BcTextFieldType.Equals(input.BcTextFieldType))
                ) && 
                (
                    this.BcTypeDECODE == input.BcTypeDECODE ||
                    (this.BcTypeDECODE != null &&
                    this.BcTypeDECODE.Equals(input.BcTypeDECODE))
                ) && 
                (
                    this.BcTypeDETECT == input.BcTypeDETECT ||
                    (this.BcTypeDETECT != null &&
                    this.BcTypeDETECT.Equals(input.BcTypeDETECT))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BcAngleDETECT != null)
                    hashCode = hashCode * 59 + this.BcAngleDETECT.GetHashCode();
                if (this.BcCodeResult != null)
                    hashCode = hashCode * 59 + this.BcCodeResult.GetHashCode();
                if (this.BcCountModule != null)
                    hashCode = hashCode * 59 + this.BcCountModule.GetHashCode();
                if (this.BcDataModule != null)
                    hashCode = hashCode * 59 + this.BcDataModule.GetHashCode();
                if (this.BcPDF417INFO != null)
                    hashCode = hashCode * 59 + this.BcPDF417INFO.GetHashCode();
                if (this.BcROIDETECT != null)
                    hashCode = hashCode * 59 + this.BcROIDETECT.GetHashCode();
                if (this.BcTextDecoderTypes != null)
                    hashCode = hashCode * 59 + this.BcTextDecoderTypes.GetHashCode();
                if (this.BcTextFieldType != null)
                    hashCode = hashCode * 59 + this.BcTextFieldType.GetHashCode();
                if (this.BcTypeDECODE != null)
                    hashCode = hashCode * 59 + this.BcTypeDECODE.GetHashCode();
                if (this.BcTypeDETECT != null)
                    hashCode = hashCode * 59 + this.BcTypeDETECT.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
