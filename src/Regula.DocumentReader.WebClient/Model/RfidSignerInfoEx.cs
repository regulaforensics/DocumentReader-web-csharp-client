/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the contents of a single copy of digital signature of the document security object and the results of its check within the context of the communication session with electronic document
    /// </summary>
    [DataContract]
    public partial class RfidSignerInfoEx :  IEquatable<RfidSignerInfoEx>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PAStatus
        /// </summary>
        [DataMember(Name="PA_Status", EmitDefaultValue=true)]
        public RFIDErrorCodes PAStatus { get; set; }
        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name="Notifications", EmitDefaultValue=true)]
        public ParsingErrorCodes Notifications { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidSignerInfoEx" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidSignerInfoEx() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidSignerInfoEx" /> class.
        /// </summary>
        /// <param name="version">Version of SignerInfo ASN.1 structure (required).</param>
        /// <param name="issuer">issuer (required).</param>
        /// <param name="serialNumber">serialNumber (required).</param>
        /// <param name="subjectKeyIdentifier">subjectKeyIdentifier (required).</param>
        /// <param name="digestAlgorithm">Hash algorithm identifier (OID) for digital signature generation (required).</param>
        /// <param name="signedAttributes">List of the signed attributes (required).</param>
        /// <param name="signatureAlgorithm">Digital signature algorithm identifier (OID) (required).</param>
        /// <param name="signature">signature (required).</param>
        /// <param name="pAStatus">pAStatus (required).</param>
        /// <param name="certificateChain">Certificate chain, used for the digital signature verification. (required).</param>
        /// <param name="dataToHash">Binary data array used to calculate the hash value for digital signature verification. Base64 encoded. (required).</param>
        /// <param name="notifications">notifications (required).</param>
        public RfidSignerInfoEx(decimal version = default(decimal), RfidDistinguishedName issuer = default(RfidDistinguishedName), TrfFtBytes serialNumber = default(TrfFtBytes), TrfFtBytes subjectKeyIdentifier = default(TrfFtBytes), string digestAlgorithm = default(string), List<RfidAttributeData> signedAttributes = default(List<RfidAttributeData>), string signatureAlgorithm = default(string), TrfFtBytes signature = default(TrfFtBytes), RFIDErrorCodes pAStatus = default(RFIDErrorCodes), List<RfidCertificateEx> certificateChain = default(List<RfidCertificateEx>), string dataToHash = default(string), ParsingErrorCodes notifications = default(ParsingErrorCodes))
        {
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for RfidSignerInfoEx and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            
            // to ensure "issuer" is required (not null)
            if (issuer == null)
            {
                throw new InvalidDataException("issuer is a required property for RfidSignerInfoEx and cannot be null");
            }
            else
            {
                this.Issuer = issuer;
            }
            
            // to ensure "serialNumber" is required (not null)
            if (serialNumber == null)
            {
                throw new InvalidDataException("serialNumber is a required property for RfidSignerInfoEx and cannot be null");
            }
            else
            {
                this.SerialNumber = serialNumber;
            }
            
            // to ensure "subjectKeyIdentifier" is required (not null)
            if (subjectKeyIdentifier == null)
            {
                throw new InvalidDataException("subjectKeyIdentifier is a required property for RfidSignerInfoEx and cannot be null");
            }
            else
            {
                this.SubjectKeyIdentifier = subjectKeyIdentifier;
            }
            
            // to ensure "digestAlgorithm" is required (not null)
            if (digestAlgorithm == null)
            {
                throw new InvalidDataException("digestAlgorithm is a required property for RfidSignerInfoEx and cannot be null");
            }
            else
            {
                this.DigestAlgorithm = digestAlgorithm;
            }
            
            // to ensure "signedAttributes" is required (not null)
            if (signedAttributes == null)
            {
                throw new InvalidDataException("signedAttributes is a required property for RfidSignerInfoEx and cannot be null");
            }
            else
            {
                this.SignedAttributes = signedAttributes;
            }
            
            // to ensure "signatureAlgorithm" is required (not null)
            if (signatureAlgorithm == null)
            {
                throw new InvalidDataException("signatureAlgorithm is a required property for RfidSignerInfoEx and cannot be null");
            }
            else
            {
                this.SignatureAlgorithm = signatureAlgorithm;
            }
            
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new InvalidDataException("signature is a required property for RfidSignerInfoEx and cannot be null");
            }
            else
            {
                this.Signature = signature;
            }
            
            // to ensure "pAStatus" is required (not null)
            if (pAStatus == null)
            {
                throw new InvalidDataException("pAStatus is a required property for RfidSignerInfoEx and cannot be null");
            }
            else
            {
                this.PAStatus = pAStatus;
            }
            
            // to ensure "certificateChain" is required (not null)
            if (certificateChain == null)
            {
                throw new InvalidDataException("certificateChain is a required property for RfidSignerInfoEx and cannot be null");
            }
            else
            {
                this.CertificateChain = certificateChain;
            }
            
            // to ensure "dataToHash" is required (not null)
            if (dataToHash == null)
            {
                throw new InvalidDataException("dataToHash is a required property for RfidSignerInfoEx and cannot be null");
            }
            else
            {
                this.DataToHash = dataToHash;
            }
            
            // to ensure "notifications" is required (not null)
            if (notifications == null)
            {
                throw new InvalidDataException("notifications is a required property for RfidSignerInfoEx and cannot be null");
            }
            else
            {
                this.Notifications = notifications;
            }
            
        }
        
        /// <summary>
        /// Version of SignerInfo ASN.1 structure
        /// </summary>
        /// <value>Version of SignerInfo ASN.1 structure</value>
        [DataMember(Name="Version", EmitDefaultValue=true)]
        public decimal Version { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name="Issuer", EmitDefaultValue=true)]
        public RfidDistinguishedName Issuer { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="SerialNumber", EmitDefaultValue=true)]
        public TrfFtBytes SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets SubjectKeyIdentifier
        /// </summary>
        [DataMember(Name="SubjectKeyIdentifier", EmitDefaultValue=true)]
        public TrfFtBytes SubjectKeyIdentifier { get; set; }

        /// <summary>
        /// Hash algorithm identifier (OID) for digital signature generation
        /// </summary>
        /// <value>Hash algorithm identifier (OID) for digital signature generation</value>
        [DataMember(Name="DigestAlgorithm", EmitDefaultValue=true)]
        public string DigestAlgorithm { get; set; }

        /// <summary>
        /// List of the signed attributes
        /// </summary>
        /// <value>List of the signed attributes</value>
        [DataMember(Name="SignedAttributes", EmitDefaultValue=true)]
        public List<RfidAttributeData> SignedAttributes { get; set; }

        /// <summary>
        /// Digital signature algorithm identifier (OID)
        /// </summary>
        /// <value>Digital signature algorithm identifier (OID)</value>
        [DataMember(Name="SignatureAlgorithm", EmitDefaultValue=true)]
        public string SignatureAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name="Signature", EmitDefaultValue=true)]
        public TrfFtBytes Signature { get; set; }


        /// <summary>
        /// Certificate chain, used for the digital signature verification.
        /// </summary>
        /// <value>Certificate chain, used for the digital signature verification.</value>
        [DataMember(Name="CertificateChain", EmitDefaultValue=true)]
        public List<RfidCertificateEx> CertificateChain { get; set; }

        /// <summary>
        /// Binary data array used to calculate the hash value for digital signature verification. Base64 encoded.
        /// </summary>
        /// <value>Binary data array used to calculate the hash value for digital signature verification. Base64 encoded.</value>
        [DataMember(Name="DataToHash", EmitDefaultValue=true)]
        public string DataToHash { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RfidSignerInfoEx {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  SubjectKeyIdentifier: ").Append(SubjectKeyIdentifier).Append("\n");
            sb.Append("  DigestAlgorithm: ").Append(DigestAlgorithm).Append("\n");
            sb.Append("  SignedAttributes: ").Append(SignedAttributes).Append("\n");
            sb.Append("  SignatureAlgorithm: ").Append(SignatureAlgorithm).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  PAStatus: ").Append(PAStatus).Append("\n");
            sb.Append("  CertificateChain: ").Append(CertificateChain).Append("\n");
            sb.Append("  DataToHash: ").Append(DataToHash).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RfidSignerInfoEx);
        }

        /// <summary>
        /// Returns true if RfidSignerInfoEx instances are equal
        /// </summary>
        /// <param name="input">Instance of RfidSignerInfoEx to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RfidSignerInfoEx input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.SubjectKeyIdentifier == input.SubjectKeyIdentifier ||
                    (this.SubjectKeyIdentifier != null &&
                    this.SubjectKeyIdentifier.Equals(input.SubjectKeyIdentifier))
                ) && 
                (
                    this.DigestAlgorithm == input.DigestAlgorithm ||
                    (this.DigestAlgorithm != null &&
                    this.DigestAlgorithm.Equals(input.DigestAlgorithm))
                ) && 
                (
                    this.SignedAttributes == input.SignedAttributes ||
                    this.SignedAttributes != null &&
                    input.SignedAttributes != null &&
                    this.SignedAttributes.SequenceEqual(input.SignedAttributes)
                ) && 
                (
                    this.SignatureAlgorithm == input.SignatureAlgorithm ||
                    (this.SignatureAlgorithm != null &&
                    this.SignatureAlgorithm.Equals(input.SignatureAlgorithm))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.PAStatus == input.PAStatus ||
                    (this.PAStatus != null &&
                    this.PAStatus.Equals(input.PAStatus))
                ) && 
                (
                    this.CertificateChain == input.CertificateChain ||
                    this.CertificateChain != null &&
                    input.CertificateChain != null &&
                    this.CertificateChain.SequenceEqual(input.CertificateChain)
                ) && 
                (
                    this.DataToHash == input.DataToHash ||
                    (this.DataToHash != null &&
                    this.DataToHash.Equals(input.DataToHash))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    (this.Notifications != null &&
                    this.Notifications.Equals(input.Notifications))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Issuer != null)
                    hashCode = hashCode * 59 + this.Issuer.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.SubjectKeyIdentifier != null)
                    hashCode = hashCode * 59 + this.SubjectKeyIdentifier.GetHashCode();
                if (this.DigestAlgorithm != null)
                    hashCode = hashCode * 59 + this.DigestAlgorithm.GetHashCode();
                if (this.SignedAttributes != null)
                    hashCode = hashCode * 59 + this.SignedAttributes.GetHashCode();
                if (this.SignatureAlgorithm != null)
                    hashCode = hashCode * 59 + this.SignatureAlgorithm.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                if (this.PAStatus != null)
                    hashCode = hashCode * 59 + this.PAStatus.GetHashCode();
                if (this.CertificateChain != null)
                    hashCode = hashCode * 59 + this.CertificateChain.GetHashCode();
                if (this.DataToHash != null)
                    hashCode = hashCode * 59 + this.DataToHash.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
