// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the contents of a single copy of digital signature of the document security object and the results of its check within the context of the communication session with electronic document
    /// </summary>
    public partial class RfidSignerInfoEx : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidSignerInfoEx" /> class.
        /// </summary>
        /// <param name="varVersion">Version of SignerInfo ASN.1 structure</param>
        /// <param name="issuer">issuer</param>
        /// <param name="serialNumber">serialNumber</param>
        /// <param name="subjectKeyIdentifier">subjectKeyIdentifier</param>
        /// <param name="digestAlgorithm">Hash algorithm identifier (OID) for digital signature generation</param>
        /// <param name="signedAttributes">List of the signed attributes</param>
        /// <param name="signatureAlgorithm">Digital signature algorithm identifier (OID)</param>
        /// <param name="signature">signature</param>
        /// <param name="pAStatus">pAStatus</param>
        /// <param name="certificateChain">Certificate chain, used for the digital signature verification.</param>
        /// <param name="dataToHash">Binary data array used to calculate the hash value for digital signature verification. Base64 encoded.</param>
        /// <param name="notifications">notifications</param>
        [JsonConstructor]
        public RfidSignerInfoEx(decimal varVersion, RfidDistinguishedName issuer, TrfFtBytes serialNumber, TrfFtBytes subjectKeyIdentifier, string digestAlgorithm, List<RfidAttributeData> signedAttributes, string signatureAlgorithm, TrfFtBytes signature, RFIDErrorCodes pAStatus, List<RfidCertificateEx> certificateChain, string dataToHash, List<ParsingNotificationCodes> notifications)
        {
            VarVersion = varVersion;
            Issuer = issuer;
            SerialNumber = serialNumber;
            SubjectKeyIdentifier = subjectKeyIdentifier;
            DigestAlgorithm = digestAlgorithm;
            SignedAttributes = signedAttributes;
            SignatureAlgorithm = signatureAlgorithm;
            Signature = signature;
            PAStatus = pAStatus;
            CertificateChain = certificateChain;
            DataToHash = dataToHash;
            Notifications = notifications;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets PAStatus
        /// </summary>
        [JsonPropertyName("PA_Status")]
        public RFIDErrorCodes PAStatus { get; set; }

        /// <summary>
        /// Version of SignerInfo ASN.1 structure
        /// </summary>
        /// <value>Version of SignerInfo ASN.1 structure</value>
        [JsonPropertyName("Version")]
        public decimal VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [JsonPropertyName("Issuer")]
        public RfidDistinguishedName Issuer { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [JsonPropertyName("SerialNumber")]
        public TrfFtBytes SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets SubjectKeyIdentifier
        /// </summary>
        [JsonPropertyName("SubjectKeyIdentifier")]
        public TrfFtBytes SubjectKeyIdentifier { get; set; }

        /// <summary>
        /// Hash algorithm identifier (OID) for digital signature generation
        /// </summary>
        /// <value>Hash algorithm identifier (OID) for digital signature generation</value>
        [JsonPropertyName("DigestAlgorithm")]
        public string DigestAlgorithm { get; set; }

        /// <summary>
        /// List of the signed attributes
        /// </summary>
        /// <value>List of the signed attributes</value>
        [JsonPropertyName("SignedAttributes")]
        public List<RfidAttributeData> SignedAttributes { get; set; }

        /// <summary>
        /// Digital signature algorithm identifier (OID)
        /// </summary>
        /// <value>Digital signature algorithm identifier (OID)</value>
        [JsonPropertyName("SignatureAlgorithm")]
        public string SignatureAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [JsonPropertyName("Signature")]
        public TrfFtBytes Signature { get; set; }

        /// <summary>
        /// Certificate chain, used for the digital signature verification.
        /// </summary>
        /// <value>Certificate chain, used for the digital signature verification.</value>
        [JsonPropertyName("CertificateChain")]
        public List<RfidCertificateEx> CertificateChain { get; set; }

        /// <summary>
        /// Binary data array used to calculate the hash value for digital signature verification. Base64 encoded.
        /// </summary>
        /// <value>Binary data array used to calculate the hash value for digital signature verification. Base64 encoded.</value>
        [JsonPropertyName("DataToHash")]
        public string DataToHash { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [JsonPropertyName("Notifications")]
        public List<ParsingNotificationCodes> Notifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidSignerInfoEx {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  SubjectKeyIdentifier: ").Append(SubjectKeyIdentifier).Append("\n");
            sb.Append("  DigestAlgorithm: ").Append(DigestAlgorithm).Append("\n");
            sb.Append("  SignedAttributes: ").Append(SignedAttributes).Append("\n");
            sb.Append("  SignatureAlgorithm: ").Append(SignatureAlgorithm).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  PAStatus: ").Append(PAStatus).Append("\n");
            sb.Append("  CertificateChain: ").Append(CertificateChain).Append("\n");
            sb.Append("  DataToHash: ").Append(DataToHash).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidSignerInfoEx" />
    /// </summary>
    public class RfidSignerInfoExJsonConverter : JsonConverter<RfidSignerInfoEx>
    {
        /// <summary>
        /// Deserializes json to <see cref="RfidSignerInfoEx" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RfidSignerInfoEx Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> varVersion = default;
            Option<RfidDistinguishedName?> issuer = default;
            Option<TrfFtBytes?> serialNumber = default;
            Option<TrfFtBytes?> subjectKeyIdentifier = default;
            Option<string?> digestAlgorithm = default;
            Option<List<RfidAttributeData>?> signedAttributes = default;
            Option<string?> signatureAlgorithm = default;
            Option<TrfFtBytes?> signature = default;
            Option<RFIDErrorCodes?> pAStatus = default;
            Option<List<RfidCertificateEx>?> certificateChain = default;
            Option<string?> dataToHash = default;
            Option<List<ParsingNotificationCodes>?> notifications = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Version":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varVersion = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Issuer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                issuer = new Option<RfidDistinguishedName?>(JsonSerializer.Deserialize<RfidDistinguishedName>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "SerialNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                serialNumber = new Option<TrfFtBytes?>(JsonSerializer.Deserialize<TrfFtBytes>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "SubjectKeyIdentifier":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subjectKeyIdentifier = new Option<TrfFtBytes?>(JsonSerializer.Deserialize<TrfFtBytes>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "DigestAlgorithm":
                            digestAlgorithm = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "SignedAttributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                signedAttributes = new Option<List<RfidAttributeData>?>(JsonSerializer.Deserialize<List<RfidAttributeData>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "SignatureAlgorithm":
                            signatureAlgorithm = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Signature":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                signature = new Option<TrfFtBytes?>(JsonSerializer.Deserialize<TrfFtBytes>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "PA_Status":
                            string? pAStatusRawValue = utf8JsonReader.GetString();
                            if (pAStatusRawValue != null)
                                pAStatus = new Option<RFIDErrorCodes?>(RFIDErrorCodesValueConverter.FromStringOrDefault(pAStatusRawValue));
                            break;
                        case "CertificateChain":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                certificateChain = new Option<List<RfidCertificateEx>?>(JsonSerializer.Deserialize<List<RfidCertificateEx>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "DataToHash":
                            dataToHash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Notifications":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                notifications = new Option<List<ParsingNotificationCodes>?>(JsonSerializer.Deserialize<List<ParsingNotificationCodes>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class RfidSignerInfoEx.", nameof(varVersion));

            if (!issuer.IsSet)
                throw new ArgumentException("Property is required for class RfidSignerInfoEx.", nameof(issuer));

            if (!serialNumber.IsSet)
                throw new ArgumentException("Property is required for class RfidSignerInfoEx.", nameof(serialNumber));

            if (!subjectKeyIdentifier.IsSet)
                throw new ArgumentException("Property is required for class RfidSignerInfoEx.", nameof(subjectKeyIdentifier));

            if (!digestAlgorithm.IsSet)
                throw new ArgumentException("Property is required for class RfidSignerInfoEx.", nameof(digestAlgorithm));

            if (!signedAttributes.IsSet)
                throw new ArgumentException("Property is required for class RfidSignerInfoEx.", nameof(signedAttributes));

            if (!signatureAlgorithm.IsSet)
                throw new ArgumentException("Property is required for class RfidSignerInfoEx.", nameof(signatureAlgorithm));

            if (!signature.IsSet)
                throw new ArgumentException("Property is required for class RfidSignerInfoEx.", nameof(signature));

            if (!pAStatus.IsSet)
                throw new ArgumentException("Property is required for class RfidSignerInfoEx.", nameof(pAStatus));

            if (!certificateChain.IsSet)
                throw new ArgumentException("Property is required for class RfidSignerInfoEx.", nameof(certificateChain));

            if (!dataToHash.IsSet)
                throw new ArgumentException("Property is required for class RfidSignerInfoEx.", nameof(dataToHash));

            if (!notifications.IsSet)
                throw new ArgumentException("Property is required for class RfidSignerInfoEx.", nameof(notifications));

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class RfidSignerInfoEx.");

            if (issuer.IsSet && issuer.Value == null)
                throw new ArgumentNullException(nameof(issuer), "Property is not nullable for class RfidSignerInfoEx.");

            if (serialNumber.IsSet && serialNumber.Value == null)
                throw new ArgumentNullException(nameof(serialNumber), "Property is not nullable for class RfidSignerInfoEx.");

            if (subjectKeyIdentifier.IsSet && subjectKeyIdentifier.Value == null)
                throw new ArgumentNullException(nameof(subjectKeyIdentifier), "Property is not nullable for class RfidSignerInfoEx.");

            if (digestAlgorithm.IsSet && digestAlgorithm.Value == null)
                throw new ArgumentNullException(nameof(digestAlgorithm), "Property is not nullable for class RfidSignerInfoEx.");

            if (signedAttributes.IsSet && signedAttributes.Value == null)
                throw new ArgumentNullException(nameof(signedAttributes), "Property is not nullable for class RfidSignerInfoEx.");

            if (signatureAlgorithm.IsSet && signatureAlgorithm.Value == null)
                throw new ArgumentNullException(nameof(signatureAlgorithm), "Property is not nullable for class RfidSignerInfoEx.");

            if (signature.IsSet && signature.Value == null)
                throw new ArgumentNullException(nameof(signature), "Property is not nullable for class RfidSignerInfoEx.");

            if (pAStatus.IsSet && pAStatus.Value == null)
                throw new ArgumentNullException(nameof(pAStatus), "Property is not nullable for class RfidSignerInfoEx.");

            if (certificateChain.IsSet && certificateChain.Value == null)
                throw new ArgumentNullException(nameof(certificateChain), "Property is not nullable for class RfidSignerInfoEx.");

            if (dataToHash.IsSet && dataToHash.Value == null)
                throw new ArgumentNullException(nameof(dataToHash), "Property is not nullable for class RfidSignerInfoEx.");

            if (notifications.IsSet && notifications.Value == null)
                throw new ArgumentNullException(nameof(notifications), "Property is not nullable for class RfidSignerInfoEx.");

            return new RfidSignerInfoEx(varVersion.Value!.Value!, issuer.Value!, serialNumber.Value!, subjectKeyIdentifier.Value!, digestAlgorithm.Value!, signedAttributes.Value!, signatureAlgorithm.Value!, signature.Value!, pAStatus.Value!.Value!, certificateChain.Value!, dataToHash.Value!, notifications.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RfidSignerInfoEx" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidSignerInfoEx"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RfidSignerInfoEx rfidSignerInfoEx, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rfidSignerInfoEx, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RfidSignerInfoEx" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidSignerInfoEx"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RfidSignerInfoEx rfidSignerInfoEx, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rfidSignerInfoEx.Issuer == null)
                throw new ArgumentNullException(nameof(rfidSignerInfoEx.Issuer), "Property is required for class RfidSignerInfoEx.");

            if (rfidSignerInfoEx.SerialNumber == null)
                throw new ArgumentNullException(nameof(rfidSignerInfoEx.SerialNumber), "Property is required for class RfidSignerInfoEx.");

            if (rfidSignerInfoEx.SubjectKeyIdentifier == null)
                throw new ArgumentNullException(nameof(rfidSignerInfoEx.SubjectKeyIdentifier), "Property is required for class RfidSignerInfoEx.");

            if (rfidSignerInfoEx.DigestAlgorithm == null)
                throw new ArgumentNullException(nameof(rfidSignerInfoEx.DigestAlgorithm), "Property is required for class RfidSignerInfoEx.");

            if (rfidSignerInfoEx.SignedAttributes == null)
                throw new ArgumentNullException(nameof(rfidSignerInfoEx.SignedAttributes), "Property is required for class RfidSignerInfoEx.");

            if (rfidSignerInfoEx.SignatureAlgorithm == null)
                throw new ArgumentNullException(nameof(rfidSignerInfoEx.SignatureAlgorithm), "Property is required for class RfidSignerInfoEx.");

            if (rfidSignerInfoEx.Signature == null)
                throw new ArgumentNullException(nameof(rfidSignerInfoEx.Signature), "Property is required for class RfidSignerInfoEx.");

            if (rfidSignerInfoEx.CertificateChain == null)
                throw new ArgumentNullException(nameof(rfidSignerInfoEx.CertificateChain), "Property is required for class RfidSignerInfoEx.");

            if (rfidSignerInfoEx.DataToHash == null)
                throw new ArgumentNullException(nameof(rfidSignerInfoEx.DataToHash), "Property is required for class RfidSignerInfoEx.");

            if (rfidSignerInfoEx.Notifications == null)
                throw new ArgumentNullException(nameof(rfidSignerInfoEx.Notifications), "Property is required for class RfidSignerInfoEx.");

            writer.WriteNumber("Version", rfidSignerInfoEx.VarVersion);

            writer.WritePropertyName("Issuer");
            JsonSerializer.Serialize(writer, rfidSignerInfoEx.Issuer, jsonSerializerOptions);
            writer.WritePropertyName("SerialNumber");
            JsonSerializer.Serialize(writer, rfidSignerInfoEx.SerialNumber, jsonSerializerOptions);
            writer.WritePropertyName("SubjectKeyIdentifier");
            JsonSerializer.Serialize(writer, rfidSignerInfoEx.SubjectKeyIdentifier, jsonSerializerOptions);
            writer.WriteString("DigestAlgorithm", rfidSignerInfoEx.DigestAlgorithm);

            writer.WritePropertyName("SignedAttributes");
            JsonSerializer.Serialize(writer, rfidSignerInfoEx.SignedAttributes, jsonSerializerOptions);
            writer.WriteString("SignatureAlgorithm", rfidSignerInfoEx.SignatureAlgorithm);

            writer.WritePropertyName("Signature");
            JsonSerializer.Serialize(writer, rfidSignerInfoEx.Signature, jsonSerializerOptions);
            var pAStatusRawValue = RFIDErrorCodesValueConverter.ToJsonValue(rfidSignerInfoEx.PAStatus);
            writer.WriteNumber("PA_Status", pAStatusRawValue);

            writer.WritePropertyName("CertificateChain");
            JsonSerializer.Serialize(writer, rfidSignerInfoEx.CertificateChain, jsonSerializerOptions);
            writer.WriteString("DataToHash", rfidSignerInfoEx.DataToHash);

            writer.WritePropertyName("Notifications");
            JsonSerializer.Serialize(writer, rfidSignerInfoEx.Notifications, jsonSerializerOptions);
        }
    }
}
