// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ContainerListListInner
    /// </summary>
    public partial class ContainerListListInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="statusResult"></param>
        public ContainerListListInner(StatusResult statusResult)
        {
            StatusResult = statusResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="textResult"></param>
        public ContainerListListInner(TextResult textResult)
        {
            TextResult = textResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="documentImageResult"></param>
        public ContainerListListInner(DocumentImageResult documentImageResult)
        {
            DocumentImageResult = documentImageResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="imagesResult"></param>
        public ContainerListListInner(ImagesResult imagesResult)
        {
            ImagesResult = imagesResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="chosenDocumentTypeResult"></param>
        public ContainerListListInner(ChosenDocumentTypeResult chosenDocumentTypeResult)
        {
            ChosenDocumentTypeResult = chosenDocumentTypeResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="documentTypesCandidatesResult"></param>
        public ContainerListListInner(DocumentTypesCandidatesResult documentTypesCandidatesResult)
        {
            DocumentTypesCandidatesResult = documentTypesCandidatesResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="textDataResult"></param>
        public ContainerListListInner(TextDataResult textDataResult)
        {
            TextDataResult = textDataResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="graphicsResult"></param>
        public ContainerListListInner(GraphicsResult graphicsResult)
        {
            GraphicsResult = graphicsResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="lexicalAnalysisResult"></param>
        public ContainerListListInner(LexicalAnalysisResult lexicalAnalysisResult)
        {
            LexicalAnalysisResult = lexicalAnalysisResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="authenticityResult"></param>
        public ContainerListListInner(AuthenticityResult authenticityResult)
        {
            AuthenticityResult = authenticityResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="imageQualityResult"></param>
        public ContainerListListInner(ImageQualityResult imageQualityResult)
        {
            ImageQualityResult = imageQualityResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="documentPositionResult"></param>
        public ContainerListListInner(DocumentPositionResult documentPositionResult)
        {
            DocumentPositionResult = documentPositionResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="docBarCodeInfo"></param>
        public ContainerListListInner(DocBarCodeInfo docBarCodeInfo)
        {
            DocBarCodeInfo = docBarCodeInfo;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="licenseResult"></param>
        public ContainerListListInner(LicenseResult licenseResult)
        {
            LicenseResult = licenseResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="encryptedRCLResult"></param>
        public ContainerListListInner(EncryptedRCLResult encryptedRCLResult)
        {
            EncryptedRCLResult = encryptedRCLResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="documentBinaryInfoResult"></param>
        public ContainerListListInner(DocumentBinaryInfoResult documentBinaryInfoResult)
        {
            DocumentBinaryInfoResult = documentBinaryInfoResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="byteArrayResult"></param>
        public ContainerListListInner(ByteArrayResult byteArrayResult)
        {
            ByteArrayResult = byteArrayResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="faceDetectionResult"></param>
        public ContainerListListInner(FaceDetectionResult faceDetectionResult)
        {
            FaceDetectionResult = faceDetectionResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="mRZDetectorResult"></param>
        public ContainerListListInner(MRZDetectorResult mRZDetectorResult)
        {
            MRZDetectorResult = mRZDetectorResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="mRZPositionResult"></param>
        public ContainerListListInner(MRZPositionResult mRZPositionResult)
        {
            MRZPositionResult = mRZPositionResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="mRZTestQualityResult"></param>
        public ContainerListListInner(MRZTestQualityResult mRZTestQualityResult)
        {
            MRZTestQualityResult = mRZTestQualityResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="rFIDGraphicsInfoResult"></param>
        public ContainerListListInner(RFIDGraphicsInfoResult rFIDGraphicsInfoResult)
        {
            RFIDGraphicsInfoResult = rFIDGraphicsInfoResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class.
        /// </summary>
        /// <param name="rFIDTextDataResult"></param>
        public ContainerListListInner(RFIDTextDataResult rFIDTextDataResult)
        {
            RFIDTextDataResult = rFIDTextDataResult;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets StatusResult
        /// </summary>
        public StatusResult? StatusResult { get; set; }

        /// <summary>
        /// Gets or Sets TextResult
        /// </summary>
        public TextResult? TextResult { get; set; }

        /// <summary>
        /// Gets or Sets DocumentImageResult
        /// </summary>
        public DocumentImageResult? DocumentImageResult { get; set; }

        /// <summary>
        /// Gets or Sets ImagesResult
        /// </summary>
        public ImagesResult? ImagesResult { get; set; }

        /// <summary>
        /// Gets or Sets ChosenDocumentTypeResult
        /// </summary>
        public ChosenDocumentTypeResult? ChosenDocumentTypeResult { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypesCandidatesResult
        /// </summary>
        public DocumentTypesCandidatesResult? DocumentTypesCandidatesResult { get; set; }

        /// <summary>
        /// Gets or Sets TextDataResult
        /// </summary>
        public TextDataResult? TextDataResult { get; set; }

        /// <summary>
        /// Gets or Sets GraphicsResult
        /// </summary>
        public GraphicsResult? GraphicsResult { get; set; }

        /// <summary>
        /// Gets or Sets LexicalAnalysisResult
        /// </summary>
        public LexicalAnalysisResult? LexicalAnalysisResult { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticityResult
        /// </summary>
        public AuthenticityResult? AuthenticityResult { get; set; }

        /// <summary>
        /// Gets or Sets ImageQualityResult
        /// </summary>
        public ImageQualityResult? ImageQualityResult { get; set; }

        /// <summary>
        /// Gets or Sets DocumentPositionResult
        /// </summary>
        public DocumentPositionResult? DocumentPositionResult { get; set; }

        /// <summary>
        /// Gets or Sets DocBarCodeInfo
        /// </summary>
        public DocBarCodeInfo? DocBarCodeInfo { get; set; }

        /// <summary>
        /// Gets or Sets LicenseResult
        /// </summary>
        public LicenseResult? LicenseResult { get; set; }

        /// <summary>
        /// Gets or Sets EncryptedRCLResult
        /// </summary>
        public EncryptedRCLResult? EncryptedRCLResult { get; set; }

        /// <summary>
        /// Gets or Sets DocumentBinaryInfoResult
        /// </summary>
        public DocumentBinaryInfoResult? DocumentBinaryInfoResult { get; set; }

        /// <summary>
        /// Gets or Sets ByteArrayResult
        /// </summary>
        public ByteArrayResult? ByteArrayResult { get; set; }

        /// <summary>
        /// Gets or Sets FaceDetectionResult
        /// </summary>
        public FaceDetectionResult? FaceDetectionResult { get; set; }

        /// <summary>
        /// Gets or Sets MRZDetectorResult
        /// </summary>
        public MRZDetectorResult? MRZDetectorResult { get; set; }

        /// <summary>
        /// Gets or Sets MRZPositionResult
        /// </summary>
        public MRZPositionResult? MRZPositionResult { get; set; }

        /// <summary>
        /// Gets or Sets MRZTestQualityResult
        /// </summary>
        public MRZTestQualityResult? MRZTestQualityResult { get; set; }

        /// <summary>
        /// Gets or Sets RFIDGraphicsInfoResult
        /// </summary>
        public RFIDGraphicsInfoResult? RFIDGraphicsInfoResult { get; set; }

        /// <summary>
        /// Gets or Sets RFIDTextDataResult
        /// </summary>
        public RFIDTextDataResult? RFIDTextDataResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContainerListListInner {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ContainerListListInner" />
    /// </summary>
    public class ContainerListListInnerJsonConverter : JsonConverter<ContainerListListInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="ContainerListListInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ContainerListListInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> resultType = default;

            DocumentImageResult? documentImageResult = null;
            DocumentBinaryInfoResult? documentBinaryInfoResult = null;
            RFIDTextDataResult? rFIDTextDataResult = null;
            GraphicsResult? graphicsResult = null;
            DocumentBinaryInfoResult? documentBinaryInfoResult = null;
            RFIDGraphicsInfoResult? rFIDGraphicsInfoResult = null;
            ByteArrayResult? byteArrayResult = null;
            LexicalAnalysisResult? lexicalAnalysisResult = null;
            DocumentImageResult? documentImageResult = null;
            TextDataResult? textDataResult = null;
            TextDataResult? textDataResult = null;
            GraphicsResult? graphicsResult = null;
            AuthenticityResult? authenticityResult = null;
            TextDataResult? textDataResult = null;
            TextDataResult? textDataResult = null;
            ImageQualityResult? imageQualityResult = null;
            GraphicsResult? graphicsResult = null;
            StatusResult? statusResult = null;
            AuthenticityResult? authenticityResult = null;
            GraphicsResult? graphicsResult = null;
            TextResult? textResult = null;
            ImagesResult? imagesResult = null;
            GraphicsResult? graphicsResult = null;
            AuthenticityResult? authenticityResult = null;
            EncryptedRCLResult? encryptedRCLResult = null;
            DocBarCodeInfo? docBarCodeInfo = null;
            LicenseResult? licenseResult = null;
            GraphicsResult? graphicsResult = null;
            MRZPositionResult? mRZPositionResult = null;
            DocumentPositionResult? documentPositionResult = null;
            MRZTestQualityResult? mRZTestQualityResult = null;
            DocumentTypesCandidatesResult? documentTypesCandidatesResult = null;
            DocumentPositionResult? documentPositionResult = null;
            MRZDetectorResult? mRZDetectorResult = null;
            ChosenDocumentTypeResult? chosenDocumentTypeResult = null;
            FaceDetectionResult? faceDetectionResult = null;
            AuthenticityResult? authenticityResult = null;
            ByteArrayResult? byteArrayResult = null;
            ChosenDocumentTypeResult? chosenDocumentTypeResult = null;
            DocBarCodeInfo? docBarCodeInfo = null;
            DocumentBinaryInfoResult? documentBinaryInfoResult = null;
            DocumentImageResult? documentImageResult = null;
            DocumentPositionResult? documentPositionResult = null;
            DocumentTypesCandidatesResult? documentTypesCandidatesResult = null;
            EncryptedRCLResult? encryptedRCLResult = null;
            FaceDetectionResult? faceDetectionResult = null;
            GraphicsResult? graphicsResult = null;
            ImageQualityResult? imageQualityResult = null;
            ImagesResult? imagesResult = null;
            LexicalAnalysisResult? lexicalAnalysisResult = null;
            LicenseResult? licenseResult = null;
            MRZDetectorResult? mRZDetectorResult = null;
            MRZPositionResult? mRZPositionResult = null;
            MRZTestQualityResult? mRZTestQualityResult = null;
            RFIDGraphicsInfoResult? rFIDGraphicsInfoResult = null;
            RFIDTextDataResult? rFIDTextDataResult = null;
            StatusResult? statusResult = null;
            TextDataResult? textDataResult = null;
            TextResult? textResult = null;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName?.Equals("result_type") ?? false)
                    {
                        string? discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator?.Equals("1") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocumentImageResult = utf8JsonReader;
                            documentImageResult = JsonSerializer.Deserialize<DocumentImageResult>(ref utf8JsonReaderDocumentImageResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("101") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocumentBinaryInfoResult = utf8JsonReader;
                            documentBinaryInfoResult = JsonSerializer.Deserialize<DocumentBinaryInfoResult>(ref utf8JsonReaderDocumentBinaryInfoResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("102") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderRFIDTextDataResult = utf8JsonReader;
                            rFIDTextDataResult = JsonSerializer.Deserialize<RFIDTextDataResult>(ref utf8JsonReaderRFIDTextDataResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("103") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderGraphicsResult = utf8JsonReader;
                            graphicsResult = JsonSerializer.Deserialize<GraphicsResult>(ref utf8JsonReaderGraphicsResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("104") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocumentBinaryInfoResult = utf8JsonReader;
                            documentBinaryInfoResult = JsonSerializer.Deserialize<DocumentBinaryInfoResult>(ref utf8JsonReaderDocumentBinaryInfoResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("105") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderRFIDGraphicsInfoResult = utf8JsonReader;
                            rFIDGraphicsInfoResult = JsonSerializer.Deserialize<RFIDGraphicsInfoResult>(ref utf8JsonReaderRFIDGraphicsInfoResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("109") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderByteArrayResult = utf8JsonReader;
                            byteArrayResult = JsonSerializer.Deserialize<ByteArrayResult>(ref utf8JsonReaderByteArrayResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("15") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderLexicalAnalysisResult = utf8JsonReader;
                            lexicalAnalysisResult = JsonSerializer.Deserialize<LexicalAnalysisResult>(ref utf8JsonReaderLexicalAnalysisResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("16") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocumentImageResult = utf8JsonReader;
                            documentImageResult = JsonSerializer.Deserialize<DocumentImageResult>(ref utf8JsonReaderDocumentImageResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("17") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderTextDataResult = utf8JsonReader;
                            textDataResult = JsonSerializer.Deserialize<TextDataResult>(ref utf8JsonReaderTextDataResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("18") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderTextDataResult = utf8JsonReader;
                            textDataResult = JsonSerializer.Deserialize<TextDataResult>(ref utf8JsonReaderTextDataResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("19") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderGraphicsResult = utf8JsonReader;
                            graphicsResult = JsonSerializer.Deserialize<GraphicsResult>(ref utf8JsonReaderGraphicsResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("20") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderAuthenticityResult = utf8JsonReader;
                            authenticityResult = JsonSerializer.Deserialize<AuthenticityResult>(ref utf8JsonReaderAuthenticityResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("26") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderTextDataResult = utf8JsonReader;
                            textDataResult = JsonSerializer.Deserialize<TextDataResult>(ref utf8JsonReaderTextDataResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("3") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderTextDataResult = utf8JsonReader;
                            textDataResult = JsonSerializer.Deserialize<TextDataResult>(ref utf8JsonReaderTextDataResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("30") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderImageQualityResult = utf8JsonReader;
                            imageQualityResult = JsonSerializer.Deserialize<ImageQualityResult>(ref utf8JsonReaderImageQualityResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("32") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderGraphicsResult = utf8JsonReader;
                            graphicsResult = JsonSerializer.Deserialize<GraphicsResult>(ref utf8JsonReaderGraphicsResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("33") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderStatusResult = utf8JsonReader;
                            statusResult = JsonSerializer.Deserialize<StatusResult>(ref utf8JsonReaderStatusResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("34") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderAuthenticityResult = utf8JsonReader;
                            authenticityResult = JsonSerializer.Deserialize<AuthenticityResult>(ref utf8JsonReaderAuthenticityResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("35") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderGraphicsResult = utf8JsonReader;
                            graphicsResult = JsonSerializer.Deserialize<GraphicsResult>(ref utf8JsonReaderGraphicsResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("36") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderTextResult = utf8JsonReader;
                            textResult = JsonSerializer.Deserialize<TextResult>(ref utf8JsonReaderTextResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("37") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderImagesResult = utf8JsonReader;
                            imagesResult = JsonSerializer.Deserialize<ImagesResult>(ref utf8JsonReaderImagesResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("38") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderGraphicsResult = utf8JsonReader;
                            graphicsResult = JsonSerializer.Deserialize<GraphicsResult>(ref utf8JsonReaderGraphicsResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("39") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderAuthenticityResult = utf8JsonReader;
                            authenticityResult = JsonSerializer.Deserialize<AuthenticityResult>(ref utf8JsonReaderAuthenticityResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("49") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderEncryptedRCLResult = utf8JsonReader;
                            encryptedRCLResult = JsonSerializer.Deserialize<EncryptedRCLResult>(ref utf8JsonReaderEncryptedRCLResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("5") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocBarCodeInfo = utf8JsonReader;
                            docBarCodeInfo = JsonSerializer.Deserialize<DocBarCodeInfo>(ref utf8JsonReaderDocBarCodeInfo, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("50") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderLicenseResult = utf8JsonReader;
                            licenseResult = JsonSerializer.Deserialize<LicenseResult>(ref utf8JsonReaderLicenseResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("6") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderGraphicsResult = utf8JsonReader;
                            graphicsResult = JsonSerializer.Deserialize<GraphicsResult>(ref utf8JsonReaderGraphicsResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("61") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderMRZPositionResult = utf8JsonReader;
                            mRZPositionResult = JsonSerializer.Deserialize<MRZPositionResult>(ref utf8JsonReaderMRZPositionResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("62") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocumentPositionResult = utf8JsonReader;
                            documentPositionResult = JsonSerializer.Deserialize<DocumentPositionResult>(ref utf8JsonReaderDocumentPositionResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("7") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderMRZTestQualityResult = utf8JsonReader;
                            mRZTestQualityResult = JsonSerializer.Deserialize<MRZTestQualityResult>(ref utf8JsonReaderMRZTestQualityResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("8") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocumentTypesCandidatesResult = utf8JsonReader;
                            documentTypesCandidatesResult = JsonSerializer.Deserialize<DocumentTypesCandidatesResult>(ref utf8JsonReaderDocumentTypesCandidatesResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("85") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocumentPositionResult = utf8JsonReader;
                            documentPositionResult = JsonSerializer.Deserialize<DocumentPositionResult>(ref utf8JsonReaderDocumentPositionResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("87") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderMRZDetectorResult = utf8JsonReader;
                            mRZDetectorResult = JsonSerializer.Deserialize<MRZDetectorResult>(ref utf8JsonReaderMRZDetectorResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("9") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderChosenDocumentTypeResult = utf8JsonReader;
                            chosenDocumentTypeResult = JsonSerializer.Deserialize<ChosenDocumentTypeResult>(ref utf8JsonReaderChosenDocumentTypeResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("97") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderFaceDetectionResult = utf8JsonReader;
                            faceDetectionResult = JsonSerializer.Deserialize<FaceDetectionResult>(ref utf8JsonReaderFaceDetectionResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("AuthenticityResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderAuthenticityResult = utf8JsonReader;
                            authenticityResult = JsonSerializer.Deserialize<AuthenticityResult>(ref utf8JsonReaderAuthenticityResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("ByteArrayResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderByteArrayResult = utf8JsonReader;
                            byteArrayResult = JsonSerializer.Deserialize<ByteArrayResult>(ref utf8JsonReaderByteArrayResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("ChosenDocumentTypeResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderChosenDocumentTypeResult = utf8JsonReader;
                            chosenDocumentTypeResult = JsonSerializer.Deserialize<ChosenDocumentTypeResult>(ref utf8JsonReaderChosenDocumentTypeResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("DocBarCodeInfo") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocBarCodeInfo = utf8JsonReader;
                            docBarCodeInfo = JsonSerializer.Deserialize<DocBarCodeInfo>(ref utf8JsonReaderDocBarCodeInfo, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("DocumentBinaryInfoResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocumentBinaryInfoResult = utf8JsonReader;
                            documentBinaryInfoResult = JsonSerializer.Deserialize<DocumentBinaryInfoResult>(ref utf8JsonReaderDocumentBinaryInfoResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("DocumentImageResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocumentImageResult = utf8JsonReader;
                            documentImageResult = JsonSerializer.Deserialize<DocumentImageResult>(ref utf8JsonReaderDocumentImageResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("DocumentPositionResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocumentPositionResult = utf8JsonReader;
                            documentPositionResult = JsonSerializer.Deserialize<DocumentPositionResult>(ref utf8JsonReaderDocumentPositionResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("DocumentTypesCandidatesResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDocumentTypesCandidatesResult = utf8JsonReader;
                            documentTypesCandidatesResult = JsonSerializer.Deserialize<DocumentTypesCandidatesResult>(ref utf8JsonReaderDocumentTypesCandidatesResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("EncryptedRCLResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderEncryptedRCLResult = utf8JsonReader;
                            encryptedRCLResult = JsonSerializer.Deserialize<EncryptedRCLResult>(ref utf8JsonReaderEncryptedRCLResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("FaceDetectionResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderFaceDetectionResult = utf8JsonReader;
                            faceDetectionResult = JsonSerializer.Deserialize<FaceDetectionResult>(ref utf8JsonReaderFaceDetectionResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("GraphicsResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderGraphicsResult = utf8JsonReader;
                            graphicsResult = JsonSerializer.Deserialize<GraphicsResult>(ref utf8JsonReaderGraphicsResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("ImageQualityResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderImageQualityResult = utf8JsonReader;
                            imageQualityResult = JsonSerializer.Deserialize<ImageQualityResult>(ref utf8JsonReaderImageQualityResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("ImagesResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderImagesResult = utf8JsonReader;
                            imagesResult = JsonSerializer.Deserialize<ImagesResult>(ref utf8JsonReaderImagesResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("LexicalAnalysisResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderLexicalAnalysisResult = utf8JsonReader;
                            lexicalAnalysisResult = JsonSerializer.Deserialize<LexicalAnalysisResult>(ref utf8JsonReaderLexicalAnalysisResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("LicenseResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderLicenseResult = utf8JsonReader;
                            licenseResult = JsonSerializer.Deserialize<LicenseResult>(ref utf8JsonReaderLicenseResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("MRZDetectorResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderMRZDetectorResult = utf8JsonReader;
                            mRZDetectorResult = JsonSerializer.Deserialize<MRZDetectorResult>(ref utf8JsonReaderMRZDetectorResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("MRZPositionResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderMRZPositionResult = utf8JsonReader;
                            mRZPositionResult = JsonSerializer.Deserialize<MRZPositionResult>(ref utf8JsonReaderMRZPositionResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("MRZTestQualityResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderMRZTestQualityResult = utf8JsonReader;
                            mRZTestQualityResult = JsonSerializer.Deserialize<MRZTestQualityResult>(ref utf8JsonReaderMRZTestQualityResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("RFIDGraphicsInfoResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderRFIDGraphicsInfoResult = utf8JsonReader;
                            rFIDGraphicsInfoResult = JsonSerializer.Deserialize<RFIDGraphicsInfoResult>(ref utf8JsonReaderRFIDGraphicsInfoResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("RFIDTextDataResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderRFIDTextDataResult = utf8JsonReader;
                            rFIDTextDataResult = JsonSerializer.Deserialize<RFIDTextDataResult>(ref utf8JsonReaderRFIDTextDataResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("StatusResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderStatusResult = utf8JsonReader;
                            statusResult = JsonSerializer.Deserialize<StatusResult>(ref utf8JsonReaderStatusResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("TextDataResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderTextDataResult = utf8JsonReader;
                            textDataResult = JsonSerializer.Deserialize<TextDataResult>(ref utf8JsonReaderTextDataResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("TextResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderTextResult = utf8JsonReader;
                            textResult = JsonSerializer.Deserialize<TextResult>(ref utf8JsonReaderTextResult, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "result_type":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resultType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!resultType.IsSet)
                throw new ArgumentException("Property is required for class ContainerListListInner.", nameof(resultType));

            if (resultType.IsSet && resultType.Value == null)
                throw new ArgumentNullException(nameof(resultType), "Property is not nullable for class ContainerListListInner.");

            if (documentImageResult != null)
                return new ContainerListListInner(documentImageResult);

            if (documentBinaryInfoResult != null)
                return new ContainerListListInner(documentBinaryInfoResult);

            if (rFIDTextDataResult != null)
                return new ContainerListListInner(rFIDTextDataResult);

            if (graphicsResult != null)
                return new ContainerListListInner(graphicsResult);

            if (documentBinaryInfoResult != null)
                return new ContainerListListInner(documentBinaryInfoResult);

            if (rFIDGraphicsInfoResult != null)
                return new ContainerListListInner(rFIDGraphicsInfoResult);

            if (byteArrayResult != null)
                return new ContainerListListInner(byteArrayResult);

            if (lexicalAnalysisResult != null)
                return new ContainerListListInner(lexicalAnalysisResult);

            if (documentImageResult != null)
                return new ContainerListListInner(documentImageResult);

            if (textDataResult != null)
                return new ContainerListListInner(textDataResult);

            if (textDataResult != null)
                return new ContainerListListInner(textDataResult);

            if (graphicsResult != null)
                return new ContainerListListInner(graphicsResult);

            if (authenticityResult != null)
                return new ContainerListListInner(authenticityResult);

            if (textDataResult != null)
                return new ContainerListListInner(textDataResult);

            if (textDataResult != null)
                return new ContainerListListInner(textDataResult);

            if (imageQualityResult != null)
                return new ContainerListListInner(imageQualityResult);

            if (graphicsResult != null)
                return new ContainerListListInner(graphicsResult);

            if (statusResult != null)
                return new ContainerListListInner(statusResult);

            if (authenticityResult != null)
                return new ContainerListListInner(authenticityResult);

            if (graphicsResult != null)
                return new ContainerListListInner(graphicsResult);

            if (textResult != null)
                return new ContainerListListInner(textResult);

            if (imagesResult != null)
                return new ContainerListListInner(imagesResult);

            if (graphicsResult != null)
                return new ContainerListListInner(graphicsResult);

            if (authenticityResult != null)
                return new ContainerListListInner(authenticityResult);

            if (encryptedRCLResult != null)
                return new ContainerListListInner(encryptedRCLResult);

            if (docBarCodeInfo != null)
                return new ContainerListListInner(docBarCodeInfo);

            if (licenseResult != null)
                return new ContainerListListInner(licenseResult);

            if (graphicsResult != null)
                return new ContainerListListInner(graphicsResult);

            if (mRZPositionResult != null)
                return new ContainerListListInner(mRZPositionResult);

            if (documentPositionResult != null)
                return new ContainerListListInner(documentPositionResult);

            if (mRZTestQualityResult != null)
                return new ContainerListListInner(mRZTestQualityResult);

            if (documentTypesCandidatesResult != null)
                return new ContainerListListInner(documentTypesCandidatesResult);

            if (documentPositionResult != null)
                return new ContainerListListInner(documentPositionResult);

            if (mRZDetectorResult != null)
                return new ContainerListListInner(mRZDetectorResult);

            if (chosenDocumentTypeResult != null)
                return new ContainerListListInner(chosenDocumentTypeResult);

            if (faceDetectionResult != null)
                return new ContainerListListInner(faceDetectionResult);

            if (authenticityResult != null)
                return new ContainerListListInner(authenticityResult);

            if (byteArrayResult != null)
                return new ContainerListListInner(byteArrayResult);

            if (chosenDocumentTypeResult != null)
                return new ContainerListListInner(chosenDocumentTypeResult);

            if (docBarCodeInfo != null)
                return new ContainerListListInner(docBarCodeInfo);

            if (documentBinaryInfoResult != null)
                return new ContainerListListInner(documentBinaryInfoResult);

            if (documentImageResult != null)
                return new ContainerListListInner(documentImageResult);

            if (documentPositionResult != null)
                return new ContainerListListInner(documentPositionResult);

            if (documentTypesCandidatesResult != null)
                return new ContainerListListInner(documentTypesCandidatesResult);

            if (encryptedRCLResult != null)
                return new ContainerListListInner(encryptedRCLResult);

            if (faceDetectionResult != null)
                return new ContainerListListInner(faceDetectionResult);

            if (graphicsResult != null)
                return new ContainerListListInner(graphicsResult);

            if (imageQualityResult != null)
                return new ContainerListListInner(imageQualityResult);

            if (imagesResult != null)
                return new ContainerListListInner(imagesResult);

            if (lexicalAnalysisResult != null)
                return new ContainerListListInner(lexicalAnalysisResult);

            if (licenseResult != null)
                return new ContainerListListInner(licenseResult);

            if (mRZDetectorResult != null)
                return new ContainerListListInner(mRZDetectorResult);

            if (mRZPositionResult != null)
                return new ContainerListListInner(mRZPositionResult);

            if (mRZTestQualityResult != null)
                return new ContainerListListInner(mRZTestQualityResult);

            if (rFIDGraphicsInfoResult != null)
                return new ContainerListListInner(rFIDGraphicsInfoResult);

            if (rFIDTextDataResult != null)
                return new ContainerListListInner(rFIDTextDataResult);

            if (statusResult != null)
                return new ContainerListListInner(statusResult);

            if (textDataResult != null)
                return new ContainerListListInner(textDataResult);

            if (textResult != null)
                return new ContainerListListInner(textResult);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="ContainerListListInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="containerListListInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ContainerListListInner containerListListInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (containerListListInner.StatusResult != null)
            {
                StatusResultJsonConverter statusResultJsonConverter = (StatusResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.StatusResult.GetType()));
                statusResultJsonConverter.WriteProperties(writer, containerListListInner.StatusResult, jsonSerializerOptions);
            }

            if (containerListListInner.TextResult != null)
            {
                TextResultJsonConverter textResultJsonConverter = (TextResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.TextResult.GetType()));
                textResultJsonConverter.WriteProperties(writer, containerListListInner.TextResult, jsonSerializerOptions);
            }

            if (containerListListInner.DocumentImageResult != null)
            {
                DocumentImageResultJsonConverter documentImageResultJsonConverter = (DocumentImageResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.DocumentImageResult.GetType()));
                documentImageResultJsonConverter.WriteProperties(writer, containerListListInner.DocumentImageResult, jsonSerializerOptions);
            }

            if (containerListListInner.ImagesResult != null)
            {
                ImagesResultJsonConverter imagesResultJsonConverter = (ImagesResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.ImagesResult.GetType()));
                imagesResultJsonConverter.WriteProperties(writer, containerListListInner.ImagesResult, jsonSerializerOptions);
            }

            if (containerListListInner.ChosenDocumentTypeResult != null)
            {
                ChosenDocumentTypeResultJsonConverter chosenDocumentTypeResultJsonConverter = (ChosenDocumentTypeResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.ChosenDocumentTypeResult.GetType()));
                chosenDocumentTypeResultJsonConverter.WriteProperties(writer, containerListListInner.ChosenDocumentTypeResult, jsonSerializerOptions);
            }

            if (containerListListInner.DocumentTypesCandidatesResult != null)
            {
                DocumentTypesCandidatesResultJsonConverter documentTypesCandidatesResultJsonConverter = (DocumentTypesCandidatesResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.DocumentTypesCandidatesResult.GetType()));
                documentTypesCandidatesResultJsonConverter.WriteProperties(writer, containerListListInner.DocumentTypesCandidatesResult, jsonSerializerOptions);
            }

            if (containerListListInner.TextDataResult != null)
            {
                TextDataResultJsonConverter textDataResultJsonConverter = (TextDataResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.TextDataResult.GetType()));
                textDataResultJsonConverter.WriteProperties(writer, containerListListInner.TextDataResult, jsonSerializerOptions);
            }

            if (containerListListInner.GraphicsResult != null)
            {
                GraphicsResultJsonConverter graphicsResultJsonConverter = (GraphicsResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.GraphicsResult.GetType()));
                graphicsResultJsonConverter.WriteProperties(writer, containerListListInner.GraphicsResult, jsonSerializerOptions);
            }

            if (containerListListInner.LexicalAnalysisResult != null)
            {
                LexicalAnalysisResultJsonConverter lexicalAnalysisResultJsonConverter = (LexicalAnalysisResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.LexicalAnalysisResult.GetType()));
                lexicalAnalysisResultJsonConverter.WriteProperties(writer, containerListListInner.LexicalAnalysisResult, jsonSerializerOptions);
            }

            if (containerListListInner.AuthenticityResult != null)
            {
                AuthenticityResultJsonConverter authenticityResultJsonConverter = (AuthenticityResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.AuthenticityResult.GetType()));
                authenticityResultJsonConverter.WriteProperties(writer, containerListListInner.AuthenticityResult, jsonSerializerOptions);
            }

            if (containerListListInner.ImageQualityResult != null)
            {
                ImageQualityResultJsonConverter imageQualityResultJsonConverter = (ImageQualityResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.ImageQualityResult.GetType()));
                imageQualityResultJsonConverter.WriteProperties(writer, containerListListInner.ImageQualityResult, jsonSerializerOptions);
            }

            if (containerListListInner.DocumentPositionResult != null)
            {
                DocumentPositionResultJsonConverter documentPositionResultJsonConverter = (DocumentPositionResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.DocumentPositionResult.GetType()));
                documentPositionResultJsonConverter.WriteProperties(writer, containerListListInner.DocumentPositionResult, jsonSerializerOptions);
            }

            if (containerListListInner.DocBarCodeInfo != null)
            {
                DocBarCodeInfoJsonConverter docBarCodeInfoJsonConverter = (DocBarCodeInfoJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.DocBarCodeInfo.GetType()));
                docBarCodeInfoJsonConverter.WriteProperties(writer, containerListListInner.DocBarCodeInfo, jsonSerializerOptions);
            }

            if (containerListListInner.LicenseResult != null)
            {
                LicenseResultJsonConverter licenseResultJsonConverter = (LicenseResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.LicenseResult.GetType()));
                licenseResultJsonConverter.WriteProperties(writer, containerListListInner.LicenseResult, jsonSerializerOptions);
            }

            if (containerListListInner.EncryptedRCLResult != null)
            {
                EncryptedRCLResultJsonConverter encryptedRCLResultJsonConverter = (EncryptedRCLResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.EncryptedRCLResult.GetType()));
                encryptedRCLResultJsonConverter.WriteProperties(writer, containerListListInner.EncryptedRCLResult, jsonSerializerOptions);
            }

            if (containerListListInner.DocumentBinaryInfoResult != null)
            {
                DocumentBinaryInfoResultJsonConverter documentBinaryInfoResultJsonConverter = (DocumentBinaryInfoResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.DocumentBinaryInfoResult.GetType()));
                documentBinaryInfoResultJsonConverter.WriteProperties(writer, containerListListInner.DocumentBinaryInfoResult, jsonSerializerOptions);
            }

            if (containerListListInner.ByteArrayResult != null)
            {
                ByteArrayResultJsonConverter byteArrayResultJsonConverter = (ByteArrayResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.ByteArrayResult.GetType()));
                byteArrayResultJsonConverter.WriteProperties(writer, containerListListInner.ByteArrayResult, jsonSerializerOptions);
            }

            if (containerListListInner.FaceDetectionResult != null)
            {
                FaceDetectionResultJsonConverter faceDetectionResultJsonConverter = (FaceDetectionResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.FaceDetectionResult.GetType()));
                faceDetectionResultJsonConverter.WriteProperties(writer, containerListListInner.FaceDetectionResult, jsonSerializerOptions);
            }

            if (containerListListInner.MRZDetectorResult != null)
            {
                MRZDetectorResultJsonConverter mRZDetectorResultJsonConverter = (MRZDetectorResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.MRZDetectorResult.GetType()));
                mRZDetectorResultJsonConverter.WriteProperties(writer, containerListListInner.MRZDetectorResult, jsonSerializerOptions);
            }

            if (containerListListInner.MRZPositionResult != null)
            {
                MRZPositionResultJsonConverter mRZPositionResultJsonConverter = (MRZPositionResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.MRZPositionResult.GetType()));
                mRZPositionResultJsonConverter.WriteProperties(writer, containerListListInner.MRZPositionResult, jsonSerializerOptions);
            }

            if (containerListListInner.MRZTestQualityResult != null)
            {
                MRZTestQualityResultJsonConverter mRZTestQualityResultJsonConverter = (MRZTestQualityResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.MRZTestQualityResult.GetType()));
                mRZTestQualityResultJsonConverter.WriteProperties(writer, containerListListInner.MRZTestQualityResult, jsonSerializerOptions);
            }

            if (containerListListInner.RFIDGraphicsInfoResult != null)
            {
                RFIDGraphicsInfoResultJsonConverter rFIDGraphicsInfoResultJsonConverter = (RFIDGraphicsInfoResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.RFIDGraphicsInfoResult.GetType()));
                rFIDGraphicsInfoResultJsonConverter.WriteProperties(writer, containerListListInner.RFIDGraphicsInfoResult, jsonSerializerOptions);
            }

            if (containerListListInner.RFIDTextDataResult != null)
            {
                RFIDTextDataResultJsonConverter rFIDTextDataResultJsonConverter = (RFIDTextDataResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(containerListListInner.RFIDTextDataResult.GetType()));
                rFIDTextDataResultJsonConverter.WriteProperties(writer, containerListListInner.RFIDTextDataResult, jsonSerializerOptions);
            }

            WriteProperties(writer, containerListListInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ContainerListListInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="containerListListInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ContainerListListInner containerListListInner, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
