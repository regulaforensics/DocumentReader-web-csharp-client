/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ContainerListListInner
    /// </summary>
    [JsonConverter(typeof(ContainerListListInnerJsonConverter))]
    [DataContract(Name = "ContainerList_List_inner")]
    public partial class ContainerListListInner : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="StatusResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of StatusResult.</param>
        public ContainerListListInner(StatusResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="TextResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of TextResult.</param>
        public ContainerListListInner(TextResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="DocumentImageResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DocumentImageResult.</param>
        public ContainerListListInner(DocumentImageResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="ImagesResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ImagesResult.</param>
        public ContainerListListInner(ImagesResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="ChosenDocumentTypeResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ChosenDocumentTypeResult.</param>
        public ContainerListListInner(ChosenDocumentTypeResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="DocumentTypesCandidatesResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DocumentTypesCandidatesResult.</param>
        public ContainerListListInner(DocumentTypesCandidatesResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="TextDataResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of TextDataResult.</param>
        public ContainerListListInner(TextDataResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="GraphicsResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GraphicsResult.</param>
        public ContainerListListInner(GraphicsResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="LexicalAnalysisResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LexicalAnalysisResult.</param>
        public ContainerListListInner(LexicalAnalysisResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="AuthenticityResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AuthenticityResult.</param>
        public ContainerListListInner(AuthenticityResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="ImageQualityResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ImageQualityResult.</param>
        public ContainerListListInner(ImageQualityResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="DocumentPositionResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DocumentPositionResult.</param>
        public ContainerListListInner(DocumentPositionResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="DocBarCodeInfo" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DocBarCodeInfo.</param>
        public ContainerListListInner(DocBarCodeInfo actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="LicenseResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LicenseResult.</param>
        public ContainerListListInner(LicenseResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="EncryptedRCLResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EncryptedRCLResult.</param>
        public ContainerListListInner(EncryptedRCLResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="DocumentBinaryInfoResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DocumentBinaryInfoResult.</param>
        public ContainerListListInner(DocumentBinaryInfoResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="ByteArrayResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ByteArrayResult.</param>
        public ContainerListListInner(ByteArrayResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="FaceDetectionResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of FaceDetectionResult.</param>
        public ContainerListListInner(FaceDetectionResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="MRZDetectorResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MRZDetectorResult.</param>
        public ContainerListListInner(MRZDetectorResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="MRZPositionResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MRZPositionResult.</param>
        public ContainerListListInner(MRZPositionResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="MRZTestQualityResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MRZTestQualityResult.</param>
        public ContainerListListInner(MRZTestQualityResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="RFIDGraphicsInfoResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RFIDGraphicsInfoResult.</param>
        public ContainerListListInner(RFIDGraphicsInfoResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerListListInner" /> class
        /// with the <see cref="RFIDTextDataResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RFIDTextDataResult.</param>
        public ContainerListListInner(RFIDTextDataResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AuthenticityResult) || value is AuthenticityResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ByteArrayResult) || value is ByteArrayResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ChosenDocumentTypeResult) || value is ChosenDocumentTypeResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DocBarCodeInfo) || value is DocBarCodeInfo)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DocumentBinaryInfoResult) || value is DocumentBinaryInfoResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DocumentImageResult) || value is DocumentImageResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DocumentPositionResult) || value is DocumentPositionResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DocumentTypesCandidatesResult) || value is DocumentTypesCandidatesResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EncryptedRCLResult) || value is EncryptedRCLResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(FaceDetectionResult) || value is FaceDetectionResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GraphicsResult) || value is GraphicsResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ImageQualityResult) || value is ImageQualityResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ImagesResult) || value is ImagesResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LexicalAnalysisResult) || value is LexicalAnalysisResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LicenseResult) || value is LicenseResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MRZDetectorResult) || value is MRZDetectorResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MRZPositionResult) || value is MRZPositionResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MRZTestQualityResult) || value is MRZTestQualityResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RFIDGraphicsInfoResult) || value is RFIDGraphicsInfoResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RFIDTextDataResult) || value is RFIDTextDataResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(StatusResult) || value is StatusResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(TextDataResult) || value is TextDataResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(TextResult) || value is TextResult)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AuthenticityResult, ByteArrayResult, ChosenDocumentTypeResult, DocBarCodeInfo, DocumentBinaryInfoResult, DocumentImageResult, DocumentPositionResult, DocumentTypesCandidatesResult, EncryptedRCLResult, FaceDetectionResult, GraphicsResult, ImageQualityResult, ImagesResult, LexicalAnalysisResult, LicenseResult, MRZDetectorResult, MRZPositionResult, MRZTestQualityResult, RFIDGraphicsInfoResult, RFIDTextDataResult, StatusResult, TextDataResult, TextResult");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `StatusResult`. If the actual instance is not `StatusResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of StatusResult</returns>
        public StatusResult GetStatusResult()
        {
            return (StatusResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `TextResult`. If the actual instance is not `TextResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of TextResult</returns>
        public TextResult GetTextResult()
        {
            return (TextResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DocumentImageResult`. If the actual instance is not `DocumentImageResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DocumentImageResult</returns>
        public DocumentImageResult GetDocumentImageResult()
        {
            return (DocumentImageResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ImagesResult`. If the actual instance is not `ImagesResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ImagesResult</returns>
        public ImagesResult GetImagesResult()
        {
            return (ImagesResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ChosenDocumentTypeResult`. If the actual instance is not `ChosenDocumentTypeResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ChosenDocumentTypeResult</returns>
        public ChosenDocumentTypeResult GetChosenDocumentTypeResult()
        {
            return (ChosenDocumentTypeResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DocumentTypesCandidatesResult`. If the actual instance is not `DocumentTypesCandidatesResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DocumentTypesCandidatesResult</returns>
        public DocumentTypesCandidatesResult GetDocumentTypesCandidatesResult()
        {
            return (DocumentTypesCandidatesResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `TextDataResult`. If the actual instance is not `TextDataResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of TextDataResult</returns>
        public TextDataResult GetTextDataResult()
        {
            return (TextDataResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GraphicsResult`. If the actual instance is not `GraphicsResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GraphicsResult</returns>
        public GraphicsResult GetGraphicsResult()
        {
            return (GraphicsResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LexicalAnalysisResult`. If the actual instance is not `LexicalAnalysisResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LexicalAnalysisResult</returns>
        public LexicalAnalysisResult GetLexicalAnalysisResult()
        {
            return (LexicalAnalysisResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AuthenticityResult`. If the actual instance is not `AuthenticityResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AuthenticityResult</returns>
        public AuthenticityResult GetAuthenticityResult()
        {
            return (AuthenticityResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ImageQualityResult`. If the actual instance is not `ImageQualityResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ImageQualityResult</returns>
        public ImageQualityResult GetImageQualityResult()
        {
            return (ImageQualityResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DocumentPositionResult`. If the actual instance is not `DocumentPositionResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DocumentPositionResult</returns>
        public DocumentPositionResult GetDocumentPositionResult()
        {
            return (DocumentPositionResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DocBarCodeInfo`. If the actual instance is not `DocBarCodeInfo`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DocBarCodeInfo</returns>
        public DocBarCodeInfo GetDocBarCodeInfo()
        {
            return (DocBarCodeInfo)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LicenseResult`. If the actual instance is not `LicenseResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LicenseResult</returns>
        public LicenseResult GetLicenseResult()
        {
            return (LicenseResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EncryptedRCLResult`. If the actual instance is not `EncryptedRCLResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EncryptedRCLResult</returns>
        public EncryptedRCLResult GetEncryptedRCLResult()
        {
            return (EncryptedRCLResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DocumentBinaryInfoResult`. If the actual instance is not `DocumentBinaryInfoResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DocumentBinaryInfoResult</returns>
        public DocumentBinaryInfoResult GetDocumentBinaryInfoResult()
        {
            return (DocumentBinaryInfoResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ByteArrayResult`. If the actual instance is not `ByteArrayResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ByteArrayResult</returns>
        public ByteArrayResult GetByteArrayResult()
        {
            return (ByteArrayResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `FaceDetectionResult`. If the actual instance is not `FaceDetectionResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of FaceDetectionResult</returns>
        public FaceDetectionResult GetFaceDetectionResult()
        {
            return (FaceDetectionResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MRZDetectorResult`. If the actual instance is not `MRZDetectorResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MRZDetectorResult</returns>
        public MRZDetectorResult GetMRZDetectorResult()
        {
            return (MRZDetectorResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MRZPositionResult`. If the actual instance is not `MRZPositionResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MRZPositionResult</returns>
        public MRZPositionResult GetMRZPositionResult()
        {
            return (MRZPositionResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MRZTestQualityResult`. If the actual instance is not `MRZTestQualityResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MRZTestQualityResult</returns>
        public MRZTestQualityResult GetMRZTestQualityResult()
        {
            return (MRZTestQualityResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RFIDGraphicsInfoResult`. If the actual instance is not `RFIDGraphicsInfoResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RFIDGraphicsInfoResult</returns>
        public RFIDGraphicsInfoResult GetRFIDGraphicsInfoResult()
        {
            return (RFIDGraphicsInfoResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RFIDTextDataResult`. If the actual instance is not `RFIDTextDataResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RFIDTextDataResult</returns>
        public RFIDTextDataResult GetRFIDTextDataResult()
        {
            return (RFIDTextDataResult)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerListListInner {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ContainerListListInner.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ContainerListListInner
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ContainerListListInner</returns>
        public static ContainerListListInner FromJson(string jsonString)
        {
            ContainerListListInner newContainerListListInner = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newContainerListListInner;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AuthenticityResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<AuthenticityResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<AuthenticityResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AuthenticityResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AuthenticityResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ByteArrayResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<ByteArrayResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<ByteArrayResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ByteArrayResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ByteArrayResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ChosenDocumentTypeResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<ChosenDocumentTypeResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<ChosenDocumentTypeResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ChosenDocumentTypeResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ChosenDocumentTypeResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DocBarCodeInfo).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<DocBarCodeInfo>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<DocBarCodeInfo>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DocBarCodeInfo");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DocBarCodeInfo: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DocumentBinaryInfoResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<DocumentBinaryInfoResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<DocumentBinaryInfoResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DocumentBinaryInfoResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DocumentBinaryInfoResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DocumentImageResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<DocumentImageResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<DocumentImageResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DocumentImageResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DocumentImageResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DocumentPositionResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<DocumentPositionResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<DocumentPositionResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DocumentPositionResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DocumentPositionResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DocumentTypesCandidatesResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<DocumentTypesCandidatesResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<DocumentTypesCandidatesResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DocumentTypesCandidatesResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DocumentTypesCandidatesResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(EncryptedRCLResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<EncryptedRCLResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<EncryptedRCLResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("EncryptedRCLResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EncryptedRCLResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(FaceDetectionResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<FaceDetectionResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<FaceDetectionResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("FaceDetectionResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into FaceDetectionResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(GraphicsResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<GraphicsResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<GraphicsResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("GraphicsResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GraphicsResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ImageQualityResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<ImageQualityResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<ImageQualityResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ImageQualityResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ImageQualityResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ImagesResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<ImagesResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<ImagesResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ImagesResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ImagesResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LexicalAnalysisResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<LexicalAnalysisResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<LexicalAnalysisResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LexicalAnalysisResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LexicalAnalysisResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LicenseResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<LicenseResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<LicenseResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LicenseResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LicenseResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(MRZDetectorResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<MRZDetectorResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<MRZDetectorResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("MRZDetectorResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MRZDetectorResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(MRZPositionResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<MRZPositionResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<MRZPositionResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("MRZPositionResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MRZPositionResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(MRZTestQualityResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<MRZTestQualityResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<MRZTestQualityResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("MRZTestQualityResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MRZTestQualityResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RFIDGraphicsInfoResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<RFIDGraphicsInfoResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<RFIDGraphicsInfoResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RFIDGraphicsInfoResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RFIDGraphicsInfoResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RFIDTextDataResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<RFIDTextDataResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<RFIDTextDataResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RFIDTextDataResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RFIDTextDataResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(StatusResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<StatusResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<StatusResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("StatusResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into StatusResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(TextDataResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<TextDataResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<TextDataResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("TextDataResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into TextDataResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(TextResult).GetProperty("AdditionalProperties") == null)
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<TextResult>(jsonString, ContainerListListInner.SerializerSettings));
                }
                else
                {
                    newContainerListListInner = new ContainerListListInner(JsonConvert.DeserializeObject<TextResult>(jsonString, ContainerListListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("TextResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into TextResult: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newContainerListListInner;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ContainerListListInner
    /// </summary>
    public class ContainerListListInnerJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ContainerListListInner).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return ContainerListListInner.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return ContainerListListInner.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
