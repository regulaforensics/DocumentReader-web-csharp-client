/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Contains information about document position on the input image, its center, angle, etc
    /// </summary>
    [DataContract(Name = "DocumentPositionResult")]
    public partial class DocumentPositionResult : ResultItem, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentPositionResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentPositionResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentPositionResult" /> class.
        /// </summary>
        /// <param name="documentPosition">documentPosition (required).</param>
        /// <param name="bufLength">bufLength.</param>
        /// <param name="light">light.</param>
        /// <param name="listIdx">listIdx.</param>
        /// <param name="pageIdx">pageIdx.</param>
        /// <param name="resultType">resultType (required) (default to Result.DOCUMENT_POSITION).</param>
        public DocumentPositionResult(DocumentPosition documentPosition = default(DocumentPosition), int bufLength = default(int), int light = default(int), int listIdx = default(int), int pageIdx = default(int), Result resultType = Result.DOCUMENT_POSITION) : base(bufLength, light, listIdx, pageIdx, resultType)
        {
            // to ensure "documentPosition" is required (not null)
            if (documentPosition == null)
            {
                throw new ArgumentNullException("documentPosition is a required property for DocumentPositionResult and cannot be null");
            }
            this.DocumentPosition = documentPosition;
        }

        /// <summary>
        /// Gets or Sets DocumentPosition
        /// </summary>
        [DataMember(Name = "DocumentPosition", IsRequired = true, EmitDefaultValue = true)]
        public DocumentPosition DocumentPosition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentPositionResult {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DocumentPosition: ").Append(DocumentPosition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
