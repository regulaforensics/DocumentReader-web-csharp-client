/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// BcPDF417INFO
    /// </summary>
    [DataContract]
    public partial class BcPDF417INFO :  IEquatable<BcPDF417INFO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BcPDF417INFO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BcPDF417INFO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BcPDF417INFO" /> class.
        /// </summary>
        /// <param name="angle">angle (required).</param>
        /// <param name="bcColumn">bcColumn (required).</param>
        /// <param name="bcErrorLevel">bcErrorLevel (required).</param>
        /// <param name="bcRow">bcRow (required).</param>
        /// <param name="minX">minX (required).</param>
        /// <param name="minY">minY (required).</param>
        public BcPDF417INFO(float angle = default(float), int bcColumn = default(int), int bcErrorLevel = default(int), int bcRow = default(int), float minX = default(float), float minY = default(float))
        {
            // to ensure "angle" is required (not null)
            if (angle == null)
            {
                throw new InvalidDataException("angle is a required property for BcPDF417INFO and cannot be null");
            }
            else
            {
                this.Angle = angle;
            }
            
            // to ensure "bcColumn" is required (not null)
            if (bcColumn == null)
            {
                throw new InvalidDataException("bcColumn is a required property for BcPDF417INFO and cannot be null");
            }
            else
            {
                this.BcColumn = bcColumn;
            }
            
            // to ensure "bcErrorLevel" is required (not null)
            if (bcErrorLevel == null)
            {
                throw new InvalidDataException("bcErrorLevel is a required property for BcPDF417INFO and cannot be null");
            }
            else
            {
                this.BcErrorLevel = bcErrorLevel;
            }
            
            // to ensure "bcRow" is required (not null)
            if (bcRow == null)
            {
                throw new InvalidDataException("bcRow is a required property for BcPDF417INFO and cannot be null");
            }
            else
            {
                this.BcRow = bcRow;
            }
            
            // to ensure "minX" is required (not null)
            if (minX == null)
            {
                throw new InvalidDataException("minX is a required property for BcPDF417INFO and cannot be null");
            }
            else
            {
                this.MinX = minX;
            }
            
            // to ensure "minY" is required (not null)
            if (minY == null)
            {
                throw new InvalidDataException("minY is a required property for BcPDF417INFO and cannot be null");
            }
            else
            {
                this.MinY = minY;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Angle
        /// </summary>
        [DataMember(Name="Angle", EmitDefaultValue=true)]
        public float Angle { get; set; }

        /// <summary>
        /// Gets or Sets BcColumn
        /// </summary>
        [DataMember(Name="bcColumn", EmitDefaultValue=true)]
        public int BcColumn { get; set; }

        /// <summary>
        /// Gets or Sets BcErrorLevel
        /// </summary>
        [DataMember(Name="bcErrorLevel", EmitDefaultValue=true)]
        public int BcErrorLevel { get; set; }

        /// <summary>
        /// Gets or Sets BcRow
        /// </summary>
        [DataMember(Name="bcRow", EmitDefaultValue=true)]
        public int BcRow { get; set; }

        /// <summary>
        /// Gets or Sets MinX
        /// </summary>
        [DataMember(Name="minX", EmitDefaultValue=true)]
        public float MinX { get; set; }

        /// <summary>
        /// Gets or Sets MinY
        /// </summary>
        [DataMember(Name="minY", EmitDefaultValue=true)]
        public float MinY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BcPDF417INFO {\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  BcColumn: ").Append(BcColumn).Append("\n");
            sb.Append("  BcErrorLevel: ").Append(BcErrorLevel).Append("\n");
            sb.Append("  BcRow: ").Append(BcRow).Append("\n");
            sb.Append("  MinX: ").Append(MinX).Append("\n");
            sb.Append("  MinY: ").Append(MinY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BcPDF417INFO);
        }

        /// <summary>
        /// Returns true if BcPDF417INFO instances are equal
        /// </summary>
        /// <param name="input">Instance of BcPDF417INFO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BcPDF417INFO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Angle == input.Angle ||
                    (this.Angle != null &&
                    this.Angle.Equals(input.Angle))
                ) && 
                (
                    this.BcColumn == input.BcColumn ||
                    (this.BcColumn != null &&
                    this.BcColumn.Equals(input.BcColumn))
                ) && 
                (
                    this.BcErrorLevel == input.BcErrorLevel ||
                    (this.BcErrorLevel != null &&
                    this.BcErrorLevel.Equals(input.BcErrorLevel))
                ) && 
                (
                    this.BcRow == input.BcRow ||
                    (this.BcRow != null &&
                    this.BcRow.Equals(input.BcRow))
                ) && 
                (
                    this.MinX == input.MinX ||
                    (this.MinX != null &&
                    this.MinX.Equals(input.MinX))
                ) && 
                (
                    this.MinY == input.MinY ||
                    (this.MinY != null &&
                    this.MinY.Equals(input.MinY))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Angle != null)
                    hashCode = hashCode * 59 + this.Angle.GetHashCode();
                if (this.BcColumn != null)
                    hashCode = hashCode * 59 + this.BcColumn.GetHashCode();
                if (this.BcErrorLevel != null)
                    hashCode = hashCode * 59 + this.BcErrorLevel.GetHashCode();
                if (this.BcRow != null)
                    hashCode = hashCode * 59 + this.BcRow.GetHashCode();
                if (this.MinX != null)
                    hashCode = hashCode * 59 + this.MinX.GetHashCode();
                if (this.MinY != null)
                    hashCode = hashCode * 59 + this.MinY.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
