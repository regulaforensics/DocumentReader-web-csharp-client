// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// BcPDF417INFO
    /// </summary>
    public partial class BcPDF417INFO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BcPDF417INFO" /> class.
        /// </summary>
        /// <param name="angle">angle</param>
        /// <param name="bcColumn">bcColumn</param>
        /// <param name="bcErrorLevel">bcErrorLevel</param>
        /// <param name="bcRow">bcRow</param>
        /// <param name="minX">minX</param>
        /// <param name="minY">minY</param>
        [JsonConstructor]
        public BcPDF417INFO(float angle, int bcColumn, int bcErrorLevel, int bcRow, float minX, float minY)
        {
            Angle = angle;
            BcColumn = bcColumn;
            BcErrorLevel = bcErrorLevel;
            BcRow = bcRow;
            MinX = minX;
            MinY = minY;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Angle
        /// </summary>
        [JsonPropertyName("Angle")]
        public float Angle { get; set; }

        /// <summary>
        /// Gets or Sets BcColumn
        /// </summary>
        [JsonPropertyName("bcColumn")]
        public int BcColumn { get; set; }

        /// <summary>
        /// Gets or Sets BcErrorLevel
        /// </summary>
        [JsonPropertyName("bcErrorLevel")]
        public int BcErrorLevel { get; set; }

        /// <summary>
        /// Gets or Sets BcRow
        /// </summary>
        [JsonPropertyName("bcRow")]
        public int BcRow { get; set; }

        /// <summary>
        /// Gets or Sets MinX
        /// </summary>
        [JsonPropertyName("minX")]
        public float MinX { get; set; }

        /// <summary>
        /// Gets or Sets MinY
        /// </summary>
        [JsonPropertyName("minY")]
        public float MinY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BcPDF417INFO {\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  BcColumn: ").Append(BcColumn).Append("\n");
            sb.Append("  BcErrorLevel: ").Append(BcErrorLevel).Append("\n");
            sb.Append("  BcRow: ").Append(BcRow).Append("\n");
            sb.Append("  MinX: ").Append(MinX).Append("\n");
            sb.Append("  MinY: ").Append(MinY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BcPDF417INFO" />
    /// </summary>
    public class BcPDF417INFOJsonConverter : JsonConverter<BcPDF417INFO>
    {
        /// <summary>
        /// Deserializes json to <see cref="BcPDF417INFO" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BcPDF417INFO Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<float?> angle = default;
            Option<int?> bcColumn = default;
            Option<int?> bcErrorLevel = default;
            Option<int?> bcRow = default;
            Option<float?> minX = default;
            Option<float?> minY = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Angle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                angle = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "bcColumn":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bcColumn = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "bcErrorLevel":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bcErrorLevel = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "bcRow":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bcRow = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "minX":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minX = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "minY":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minY = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!angle.IsSet)
                throw new ArgumentException("Property is required for class BcPDF417INFO.", nameof(angle));

            if (!bcColumn.IsSet)
                throw new ArgumentException("Property is required for class BcPDF417INFO.", nameof(bcColumn));

            if (!bcErrorLevel.IsSet)
                throw new ArgumentException("Property is required for class BcPDF417INFO.", nameof(bcErrorLevel));

            if (!bcRow.IsSet)
                throw new ArgumentException("Property is required for class BcPDF417INFO.", nameof(bcRow));

            if (!minX.IsSet)
                throw new ArgumentException("Property is required for class BcPDF417INFO.", nameof(minX));

            if (!minY.IsSet)
                throw new ArgumentException("Property is required for class BcPDF417INFO.", nameof(minY));

            if (angle.IsSet && angle.Value == null)
                throw new ArgumentNullException(nameof(angle), "Property is not nullable for class BcPDF417INFO.");

            if (bcColumn.IsSet && bcColumn.Value == null)
                throw new ArgumentNullException(nameof(bcColumn), "Property is not nullable for class BcPDF417INFO.");

            if (bcErrorLevel.IsSet && bcErrorLevel.Value == null)
                throw new ArgumentNullException(nameof(bcErrorLevel), "Property is not nullable for class BcPDF417INFO.");

            if (bcRow.IsSet && bcRow.Value == null)
                throw new ArgumentNullException(nameof(bcRow), "Property is not nullable for class BcPDF417INFO.");

            if (minX.IsSet && minX.Value == null)
                throw new ArgumentNullException(nameof(minX), "Property is not nullable for class BcPDF417INFO.");

            if (minY.IsSet && minY.Value == null)
                throw new ArgumentNullException(nameof(minY), "Property is not nullable for class BcPDF417INFO.");

            return new BcPDF417INFO(angle.Value!.Value!, bcColumn.Value!.Value!, bcErrorLevel.Value!.Value!, bcRow.Value!.Value!, minX.Value!.Value!, minY.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="BcPDF417INFO" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bcPDF417INFO"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BcPDF417INFO bcPDF417INFO, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bcPDF417INFO, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BcPDF417INFO" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bcPDF417INFO"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BcPDF417INFO bcPDF417INFO, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("Angle", bcPDF417INFO.Angle);

            writer.WriteNumber("bcColumn", bcPDF417INFO.BcColumn);

            writer.WriteNumber("bcErrorLevel", bcPDF417INFO.BcErrorLevel);

            writer.WriteNumber("bcRow", bcPDF417INFO.BcRow);

            writer.WriteNumber("minX", bcPDF417INFO.MinX);

            writer.WriteNumber("minY", bcPDF417INFO.MinY);
        }
    }
}
