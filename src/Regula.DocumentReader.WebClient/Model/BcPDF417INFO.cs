/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// BcPDF417INFO
    /// </summary>
    [DataContract(Name = "bcPDF417INFO")]
    public partial class BcPDF417INFO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BcPDF417INFO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BcPDF417INFO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BcPDF417INFO" /> class.
        /// </summary>
        /// <param name="angle">angle (required).</param>
        /// <param name="bcColumn">bcColumn (required).</param>
        /// <param name="bcErrorLevel">bcErrorLevel (required).</param>
        /// <param name="bcRow">bcRow (required).</param>
        /// <param name="minX">minX (required).</param>
        /// <param name="minY">minY (required).</param>
        public BcPDF417INFO(float angle = default(float), int bcColumn = default(int), int bcErrorLevel = default(int), int bcRow = default(int), float minX = default(float), float minY = default(float))
        {
            this.Angle = angle;
            this.BcColumn = bcColumn;
            this.BcErrorLevel = bcErrorLevel;
            this.BcRow = bcRow;
            this.MinX = minX;
            this.MinY = minY;
        }

        /// <summary>
        /// Gets or Sets Angle
        /// </summary>
        [DataMember(Name = "Angle", IsRequired = true, EmitDefaultValue = true)]
        public float Angle { get; set; }

        /// <summary>
        /// Gets or Sets BcColumn
        /// </summary>
        [DataMember(Name = "bcColumn", IsRequired = true, EmitDefaultValue = true)]
        public int BcColumn { get; set; }

        /// <summary>
        /// Gets or Sets BcErrorLevel
        /// </summary>
        [DataMember(Name = "bcErrorLevel", IsRequired = true, EmitDefaultValue = true)]
        public int BcErrorLevel { get; set; }

        /// <summary>
        /// Gets or Sets BcRow
        /// </summary>
        [DataMember(Name = "bcRow", IsRequired = true, EmitDefaultValue = true)]
        public int BcRow { get; set; }

        /// <summary>
        /// Gets or Sets MinX
        /// </summary>
        [DataMember(Name = "minX", IsRequired = true, EmitDefaultValue = true)]
        public float MinX { get; set; }

        /// <summary>
        /// Gets or Sets MinY
        /// </summary>
        [DataMember(Name = "minY", IsRequired = true, EmitDefaultValue = true)]
        public float MinY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BcPDF417INFO {\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  BcColumn: ").Append(BcColumn).Append("\n");
            sb.Append("  BcErrorLevel: ").Append(BcErrorLevel).Append("\n");
            sb.Append("  BcRow: ").Append(BcRow).Append("\n");
            sb.Append("  MinX: ").Append(MinX).Append("\n");
            sb.Append("  MinY: ").Append(MinY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
