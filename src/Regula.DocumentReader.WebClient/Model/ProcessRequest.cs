/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ProcessRequest
    /// </summary>
    [DataContract]
    public partial class ProcessRequest :  IEquatable<ProcessRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessRequest" /> class.
        /// </summary>
        /// <param name="tag">session id.</param>
        /// <param name="processParam">processParam (required).</param>
        /// <param name="list">list.</param>
        /// <param name="containerList">containerList.</param>
        /// <param name="systemInfo">systemInfo.</param>
        /// <param name="passBackObject">Free-form object to be included in response. Must be object, not list or simple value. Do not affect document processing. Use it freely to pass your app params. Stored in process logs..</param>
        public ProcessRequest(string tag = default(string), ProcessParams processParam = default(ProcessParams), List<ProcessRequestImage> list = default(List<ProcessRequestImage>), ContainerList containerList = default(ContainerList), ProcessSystemInfo systemInfo = default(ProcessSystemInfo), Dictionary<string, Object> passBackObject = default(Dictionary<string, Object>))
        {
            // to ensure "processParam" is required (not null)
            if (processParam == null)
            {
                throw new InvalidDataException("processParam is a required property for ProcessRequest and cannot be null");
            }
            else
            {
                this.ProcessParam = processParam;
            }
            
            this.Tag = tag;
            this.List = list;
            this.ContainerList = containerList;
            this.SystemInfo = systemInfo;
            this.PassBackObject = passBackObject;
        }
        
        /// <summary>
        /// session id
        /// </summary>
        /// <value>session id</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets ProcessParam
        /// </summary>
        [DataMember(Name="processParam", EmitDefaultValue=true)]
        public ProcessParams ProcessParam { get; set; }

        /// <summary>
        /// Gets or Sets List
        /// </summary>
        [DataMember(Name="List", EmitDefaultValue=false)]
        public List<ProcessRequestImage> List { get; set; }

        /// <summary>
        /// Gets or Sets ContainerList
        /// </summary>
        [DataMember(Name="ContainerList", EmitDefaultValue=false)]
        public ContainerList ContainerList { get; set; }

        /// <summary>
        /// Gets or Sets SystemInfo
        /// </summary>
        [DataMember(Name="systemInfo", EmitDefaultValue=false)]
        public ProcessSystemInfo SystemInfo { get; set; }

        /// <summary>
        /// Free-form object to be included in response. Must be object, not list or simple value. Do not affect document processing. Use it freely to pass your app params. Stored in process logs.
        /// </summary>
        /// <value>Free-form object to be included in response. Must be object, not list or simple value. Do not affect document processing. Use it freely to pass your app params. Stored in process logs.</value>
        [DataMember(Name="passBackObject", EmitDefaultValue=false)]
        public Dictionary<string, Object> PassBackObject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessRequest {\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  ProcessParam: ").Append(ProcessParam).Append("\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  ContainerList: ").Append(ContainerList).Append("\n");
            sb.Append("  SystemInfo: ").Append(SystemInfo).Append("\n");
            sb.Append("  PassBackObject: ").Append(PassBackObject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessRequest);
        }

        /// <summary>
        /// Returns true if ProcessRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.ProcessParam == input.ProcessParam ||
                    (this.ProcessParam != null &&
                    this.ProcessParam.Equals(input.ProcessParam))
                ) && 
                (
                    this.List == input.List ||
                    this.List != null &&
                    input.List != null &&
                    this.List.SequenceEqual(input.List)
                ) && 
                (
                    this.ContainerList == input.ContainerList ||
                    (this.ContainerList != null &&
                    this.ContainerList.Equals(input.ContainerList))
                ) && 
                (
                    this.SystemInfo == input.SystemInfo ||
                    (this.SystemInfo != null &&
                    this.SystemInfo.Equals(input.SystemInfo))
                ) && 
                (
                    this.PassBackObject == input.PassBackObject ||
                    this.PassBackObject != null &&
                    input.PassBackObject != null &&
                    this.PassBackObject.SequenceEqual(input.PassBackObject)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.ProcessParam != null)
                    hashCode = hashCode * 59 + this.ProcessParam.GetHashCode();
                if (this.List != null)
                    hashCode = hashCode * 59 + this.List.GetHashCode();
                if (this.ContainerList != null)
                    hashCode = hashCode * 59 + this.ContainerList.GetHashCode();
                if (this.SystemInfo != null)
                    hashCode = hashCode * 59 + this.SystemInfo.GetHashCode();
                if (this.PassBackObject != null)
                    hashCode = hashCode * 59 + this.PassBackObject.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
