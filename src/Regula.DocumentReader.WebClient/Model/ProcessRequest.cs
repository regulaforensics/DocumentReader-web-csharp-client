/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ProcessRequest
    /// </summary>
    [DataContract]
    public partial class ProcessRequest :  IEquatable<ProcessRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessRequest" /> class.
        /// </summary>
        /// <param name="processParam">processParam (required).</param>
        /// <param name="list">list (required).</param>
        /// <param name="systemInfo">systemInfo.</param>
        public ProcessRequest(ProcessParams processParam = default(ProcessParams), List<ProcessRequestImage> list = default(List<ProcessRequestImage>), ProcessSystemInfo systemInfo = default(ProcessSystemInfo))
        {
            // to ensure "processParam" is required (not null)
            if (processParam == null)
            {
                throw new InvalidDataException("processParam is a required property for ProcessRequest and cannot be null");
            }
            else
            {
                this.ProcessParam = processParam;
            }
            
            // to ensure "list" is required (not null)
            if (list == null)
            {
                throw new InvalidDataException("list is a required property for ProcessRequest and cannot be null");
            }
            else
            {
                this.List = list;
            }
            
            this.SystemInfo = systemInfo;
        }
        
        /// <summary>
        /// Gets or Sets ProcessParam
        /// </summary>
        [DataMember(Name="processParam", EmitDefaultValue=true)]
        public ProcessParams ProcessParam { get; set; }

        /// <summary>
        /// Gets or Sets List
        /// </summary>
        [DataMember(Name="List", EmitDefaultValue=true)]
        public List<ProcessRequestImage> List { get; set; }

        /// <summary>
        /// Gets or Sets SystemInfo
        /// </summary>
        [DataMember(Name="systemInfo", EmitDefaultValue=false)]
        public ProcessSystemInfo SystemInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessRequest {\n");
            sb.Append("  ProcessParam: ").Append(ProcessParam).Append("\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  SystemInfo: ").Append(SystemInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessRequest);
        }

        /// <summary>
        /// Returns true if ProcessRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProcessParam == input.ProcessParam ||
                    (this.ProcessParam != null &&
                    this.ProcessParam.Equals(input.ProcessParam))
                ) && 
                (
                    this.List == input.List ||
                    this.List != null &&
                    input.List != null &&
                    this.List.SequenceEqual(input.List)
                ) && 
                (
                    this.SystemInfo == input.SystemInfo ||
                    (this.SystemInfo != null &&
                    this.SystemInfo.Equals(input.SystemInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProcessParam != null)
                    hashCode = hashCode * 59 + this.ProcessParam.GetHashCode();
                if (this.List != null)
                    hashCode = hashCode * 59 + this.List.GetHashCode();
                if (this.SystemInfo != null)
                    hashCode = hashCode * 59 + this.SystemInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
