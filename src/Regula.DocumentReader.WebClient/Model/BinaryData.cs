// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used for storing the results of one bar-code module reading.
    /// </summary>
    public partial class BinaryData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BinaryData" /> class.
        /// </summary>
        /// <param name="rFIDAuthenticationInfo">rFIDAuthenticationInfo</param>
        /// <param name="rFIDMIFAREDataValidity">rFIDMIFAREDataValidity</param>
        /// <param name="rFIDMIFAREData">rFIDMIFAREData</param>
        /// <param name="rFIDEFCOM">rFIDEFCOM</param>
        /// <param name="rFIDDG1">rFIDDG1</param>
        /// <param name="rFIDDG2">rFIDDG2</param>
        /// <param name="rFIDDG3">rFIDDG3</param>
        /// <param name="rFIDDG4">rFIDDG4</param>
        /// <param name="rFIDDG5">rFIDDG5</param>
        /// <param name="rFIDDG6">rFIDDG6</param>
        /// <param name="rFIDDG7">rFIDDG7</param>
        /// <param name="rFIDDG8">rFIDDG8</param>
        /// <param name="rFIDDG9">rFIDDG9</param>
        /// <param name="rFIDDG10">rFIDDG10</param>
        /// <param name="rFIDDG11">rFIDDG11</param>
        /// <param name="rFIDDG12">rFIDDG12</param>
        /// <param name="rFIDDG13">rFIDDG13</param>
        /// <param name="rFIDDG14">rFIDDG14</param>
        /// <param name="rFIDDG15">rFIDDG15</param>
        /// <param name="rFIDDG16">rFIDDG16</param>
        /// <param name="rFIDEFSOD">rFIDEFSOD</param>
        /// <param name="eIDDG1">eIDDG1</param>
        /// <param name="eIDDG2">eIDDG2</param>
        /// <param name="eIDDG3">eIDDG3</param>
        /// <param name="eIDDG4">eIDDG4</param>
        /// <param name="eIDDG5">eIDDG5</param>
        /// <param name="eIDDG6">eIDDG6</param>
        /// <param name="eIDDG7">eIDDG7</param>
        /// <param name="eIDDG8">eIDDG8</param>
        /// <param name="eIDDG9">eIDDG9</param>
        /// <param name="eIDDG10">eIDDG10</param>
        /// <param name="eIDDG11">eIDDG11</param>
        /// <param name="eIDDG12">eIDDG12</param>
        /// <param name="eIDDG13">eIDDG13</param>
        /// <param name="eIDDG14">eIDDG14</param>
        /// <param name="eIDDG15">eIDDG15</param>
        /// <param name="eIDDG16">eIDDG16</param>
        /// <param name="eIDDG17">eIDDG17</param>
        /// <param name="eIDDG18">eIDDG18</param>
        /// <param name="eIDDG19">eIDDG19</param>
        /// <param name="eIDDG20">eIDDG20</param>
        /// <param name="eIDDG21">eIDDG21</param>
        /// <param name="eDLCOM">eDLCOM</param>
        /// <param name="eDLSOD">eDLSOD</param>
        /// <param name="eDLDG1">eDLDG1</param>
        /// <param name="eDLDG2">eDLDG2</param>
        /// <param name="eDLDG3">eDLDG3</param>
        /// <param name="eDLDG4">eDLDG4</param>
        /// <param name="eDLDG5">eDLDG5</param>
        /// <param name="eDLDG6">eDLDG6</param>
        /// <param name="eDLDG7">eDLDG7</param>
        /// <param name="eDLDG8">eDLDG8</param>
        /// <param name="eDLDG9">eDLDG9</param>
        /// <param name="eDLDG10">eDLDG10</param>
        /// <param name="eDLDG11">eDLDG11</param>
        /// <param name="eDLDG12">eDLDG12</param>
        /// <param name="eDLDG13">eDLDG13</param>
        /// <param name="eDLDG14">eDLDG14</param>
        /// <param name="visibleDigitalSeal">visibleDigitalSeal</param>
        /// <param name="visibleDigitalSealNC">visibleDigitalSealNC</param>
        /// <param name="digitalSignature">digitalSignature</param>
        /// <param name="rFIDSessionData">rFIDSessionData</param>
        /// <param name="rFIDSessionDataStatus">rFIDSessionDataStatus</param>
        /// <param name="rFIDEPasspDirectory">Indexes of groups that aren&#39;t read</param>
        [JsonConstructor]
        public BinaryData(Option<Dictionary<string, Object>?> rFIDAuthenticationInfo = default, Option<Dictionary<string, Object>?> rFIDMIFAREDataValidity = default, Option<Dictionary<string, Object>?> rFIDMIFAREData = default, Option<Dictionary<string, Object>?> rFIDEFCOM = default, Option<RfidDG1?> rFIDDG1 = default, Option<Dictionary<string, Object>?> rFIDDG2 = default, Option<Dictionary<string, Object>?> rFIDDG3 = default, Option<Dictionary<string, Object>?> rFIDDG4 = default, Option<Dictionary<string, Object>?> rFIDDG5 = default, Option<Dictionary<string, Object>?> rFIDDG6 = default, Option<Dictionary<string, Object>?> rFIDDG7 = default, Option<Dictionary<string, Object>?> rFIDDG8 = default, Option<Dictionary<string, Object>?> rFIDDG9 = default, Option<Dictionary<string, Object>?> rFIDDG10 = default, Option<Dictionary<string, Object>?> rFIDDG11 = default, Option<Dictionary<string, Object>?> rFIDDG12 = default, Option<Dictionary<string, Object>?> rFIDDG13 = default, Option<Dictionary<string, Object>?> rFIDDG14 = default, Option<Dictionary<string, Object>?> rFIDDG15 = default, Option<Dictionary<string, Object>?> rFIDDG16 = default, Option<Dictionary<string, Object>?> rFIDEFSOD = default, Option<Dictionary<string, Object>?> eIDDG1 = default, Option<Dictionary<string, Object>?> eIDDG2 = default, Option<Dictionary<string, Object>?> eIDDG3 = default, Option<Dictionary<string, Object>?> eIDDG4 = default, Option<Dictionary<string, Object>?> eIDDG5 = default, Option<Dictionary<string, Object>?> eIDDG6 = default, Option<Dictionary<string, Object>?> eIDDG7 = default, Option<Dictionary<string, Object>?> eIDDG8 = default, Option<Dictionary<string, Object>?> eIDDG9 = default, Option<Dictionary<string, Object>?> eIDDG10 = default, Option<Dictionary<string, Object>?> eIDDG11 = default, Option<Dictionary<string, Object>?> eIDDG12 = default, Option<Dictionary<string, Object>?> eIDDG13 = default, Option<Dictionary<string, Object>?> eIDDG14 = default, Option<Dictionary<string, Object>?> eIDDG15 = default, Option<Dictionary<string, Object>?> eIDDG16 = default, Option<Dictionary<string, Object>?> eIDDG17 = default, Option<Dictionary<string, Object>?> eIDDG18 = default, Option<Dictionary<string, Object>?> eIDDG19 = default, Option<Dictionary<string, Object>?> eIDDG20 = default, Option<Dictionary<string, Object>?> eIDDG21 = default, Option<Dictionary<string, Object>?> eDLCOM = default, Option<Dictionary<string, Object>?> eDLSOD = default, Option<Dictionary<string, Object>?> eDLDG1 = default, Option<Dictionary<string, Object>?> eDLDG2 = default, Option<Dictionary<string, Object>?> eDLDG3 = default, Option<Dictionary<string, Object>?> eDLDG4 = default, Option<Dictionary<string, Object>?> eDLDG5 = default, Option<Dictionary<string, Object>?> eDLDG6 = default, Option<Dictionary<string, Object>?> eDLDG7 = default, Option<Dictionary<string, Object>?> eDLDG8 = default, Option<Dictionary<string, Object>?> eDLDG9 = default, Option<Dictionary<string, Object>?> eDLDG10 = default, Option<Dictionary<string, Object>?> eDLDG11 = default, Option<Dictionary<string, Object>?> eDLDG12 = default, Option<Dictionary<string, Object>?> eDLDG13 = default, Option<Dictionary<string, Object>?> eDLDG14 = default, Option<Dictionary<string, Object>?> visibleDigitalSeal = default, Option<Dictionary<string, Object>?> visibleDigitalSealNC = default, Option<Dictionary<string, Object>?> digitalSignature = default, Option<RfidSessionData?> rFIDSessionData = default, Option<DetailsRFID?> rFIDSessionDataStatus = default, Option<List<RfidDataFileType>?> rFIDEPasspDirectory = default)
        {
            RFIDAuthenticationInfoOption = rFIDAuthenticationInfo;
            RFIDMIFAREDataValidityOption = rFIDMIFAREDataValidity;
            RFIDMIFAREDataOption = rFIDMIFAREData;
            RFID_EF_COMOption = rFIDEFCOM;
            RFIDDG1Option = rFIDDG1;
            RFIDDG2Option = rFIDDG2;
            RFIDDG3Option = rFIDDG3;
            RFIDDG4Option = rFIDDG4;
            RFIDDG5Option = rFIDDG5;
            RFIDDG6Option = rFIDDG6;
            RFIDDG7Option = rFIDDG7;
            RFIDDG8Option = rFIDDG8;
            RFIDDG9Option = rFIDDG9;
            RFIDDG10Option = rFIDDG10;
            RFIDDG11Option = rFIDDG11;
            RFIDDG12Option = rFIDDG12;
            RFIDDG13Option = rFIDDG13;
            RFIDDG14Option = rFIDDG14;
            RFIDDG15Option = rFIDDG15;
            RFIDDG16Option = rFIDDG16;
            RFID_EF_SODOption = rFIDEFSOD;
            EIDDG1Option = eIDDG1;
            EIDDG2Option = eIDDG2;
            EIDDG3Option = eIDDG3;
            EIDDG4Option = eIDDG4;
            EIDDG5Option = eIDDG5;
            EIDDG6Option = eIDDG6;
            EIDDG7Option = eIDDG7;
            EIDDG8Option = eIDDG8;
            EIDDG9Option = eIDDG9;
            EIDDG10Option = eIDDG10;
            EIDDG11Option = eIDDG11;
            EIDDG12Option = eIDDG12;
            EIDDG13Option = eIDDG13;
            EIDDG14Option = eIDDG14;
            EIDDG15Option = eIDDG15;
            EIDDG16Option = eIDDG16;
            EIDDG17Option = eIDDG17;
            EIDDG18Option = eIDDG18;
            EIDDG19Option = eIDDG19;
            EIDDG20Option = eIDDG20;
            EIDDG21Option = eIDDG21;
            EDLCOMOption = eDLCOM;
            EDLSODOption = eDLSOD;
            EDLDG1Option = eDLDG1;
            EDLDG2Option = eDLDG2;
            EDLDG3Option = eDLDG3;
            EDLDG4Option = eDLDG4;
            EDLDG5Option = eDLDG5;
            EDLDG6Option = eDLDG6;
            EDLDG7Option = eDLDG7;
            EDLDG8Option = eDLDG8;
            EDLDG9Option = eDLDG9;
            EDLDG10Option = eDLDG10;
            EDLDG11Option = eDLDG11;
            EDLDG12Option = eDLDG12;
            EDLDG13Option = eDLDG13;
            EDLDG14Option = eDLDG14;
            VisibleDigitalSealOption = visibleDigitalSeal;
            VisibleDigitalSealNCOption = visibleDigitalSealNC;
            DigitalSignatureOption = digitalSignature;
            RFIDSessionDataOption = rFIDSessionData;
            RFIDSessionDataStatusOption = rFIDSessionDataStatus;
            RFIDEPasspDirectoryOption = rFIDEPasspDirectory;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of RFIDAuthenticationInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDAuthenticationInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDAuthenticationInfo
        /// </summary>
        [JsonPropertyName("RFID_Authentication_Info")]
        public Dictionary<string, Object>? RFIDAuthenticationInfo { get { return this.RFIDAuthenticationInfoOption; } set { this.RFIDAuthenticationInfoOption = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDMIFAREDataValidity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDMIFAREDataValidityOption { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDMIFAREDataValidity
        /// </summary>
        [JsonPropertyName("RFID_MIFARE_Data_Validity")]
        public Dictionary<string, Object>? RFIDMIFAREDataValidity { get { return this.RFIDMIFAREDataValidityOption; } set { this.RFIDMIFAREDataValidityOption = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDMIFAREData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDMIFAREDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDMIFAREData
        /// </summary>
        [JsonPropertyName("RFID_MIFARE_Data")]
        public Dictionary<string, Object>? RFIDMIFAREData { get { return this.RFIDMIFAREDataOption; } set { this.RFIDMIFAREDataOption = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFID_EF_COM
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFID_EF_COMOption { get; private set; }

        /// <summary>
        /// Gets or Sets RFID_EF_COM
        /// </summary>
        [JsonPropertyName("RFID_EF_COM")]
        public Dictionary<string, Object>? RFID_EF_COM { get { return this.RFID_EF_COMOption; } set { this.RFID_EF_COMOption = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RfidDG1?> RFIDDG1Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG1
        /// </summary>
        [JsonPropertyName("RFID_DG1")]
        public RfidDG1? RFIDDG1 { get { return this.RFIDDG1Option; } set { this.RFIDDG1Option = new Option<RfidDG1?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG2Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG2
        /// </summary>
        [JsonPropertyName("RFID_DG2")]
        public Dictionary<string, Object>? RFIDDG2 { get { return this.RFIDDG2Option; } set { this.RFIDDG2Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG3Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG3
        /// </summary>
        [JsonPropertyName("RFID_DG3")]
        public Dictionary<string, Object>? RFIDDG3 { get { return this.RFIDDG3Option; } set { this.RFIDDG3Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG4
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG4Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG4
        /// </summary>
        [JsonPropertyName("RFID_DG4")]
        public Dictionary<string, Object>? RFIDDG4 { get { return this.RFIDDG4Option; } set { this.RFIDDG4Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG5
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG5Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG5
        /// </summary>
        [JsonPropertyName("RFID_DG5")]
        public Dictionary<string, Object>? RFIDDG5 { get { return this.RFIDDG5Option; } set { this.RFIDDG5Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG6
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG6Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG6
        /// </summary>
        [JsonPropertyName("RFID_DG6")]
        public Dictionary<string, Object>? RFIDDG6 { get { return this.RFIDDG6Option; } set { this.RFIDDG6Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG7
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG7Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG7
        /// </summary>
        [JsonPropertyName("RFID_DG7")]
        public Dictionary<string, Object>? RFIDDG7 { get { return this.RFIDDG7Option; } set { this.RFIDDG7Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG8
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG8Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG8
        /// </summary>
        [JsonPropertyName("RFID_DG8")]
        public Dictionary<string, Object>? RFIDDG8 { get { return this.RFIDDG8Option; } set { this.RFIDDG8Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG9
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG9Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG9
        /// </summary>
        [JsonPropertyName("RFID_DG9")]
        public Dictionary<string, Object>? RFIDDG9 { get { return this.RFIDDG9Option; } set { this.RFIDDG9Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG10
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG10Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG10
        /// </summary>
        [JsonPropertyName("RFID_DG10")]
        public Dictionary<string, Object>? RFIDDG10 { get { return this.RFIDDG10Option; } set { this.RFIDDG10Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG11
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG11Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG11
        /// </summary>
        [JsonPropertyName("RFID_DG11")]
        public Dictionary<string, Object>? RFIDDG11 { get { return this.RFIDDG11Option; } set { this.RFIDDG11Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG12
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG12Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG12
        /// </summary>
        [JsonPropertyName("RFID_DG12")]
        public Dictionary<string, Object>? RFIDDG12 { get { return this.RFIDDG12Option; } set { this.RFIDDG12Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG13
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG13Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG13
        /// </summary>
        [JsonPropertyName("RFID_DG13")]
        public Dictionary<string, Object>? RFIDDG13 { get { return this.RFIDDG13Option; } set { this.RFIDDG13Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG14
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG14Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG14
        /// </summary>
        [JsonPropertyName("RFID_DG14")]
        public Dictionary<string, Object>? RFIDDG14 { get { return this.RFIDDG14Option; } set { this.RFIDDG14Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG15
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG15Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG15
        /// </summary>
        [JsonPropertyName("RFID_DG15")]
        public Dictionary<string, Object>? RFIDDG15 { get { return this.RFIDDG15Option; } set { this.RFIDDG15Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDDG16
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFIDDG16Option { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDDG16
        /// </summary>
        [JsonPropertyName("RFID_DG16")]
        public Dictionary<string, Object>? RFIDDG16 { get { return this.RFIDDG16Option; } set { this.RFIDDG16Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFID_EF_SOD
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RFID_EF_SODOption { get; private set; }

        /// <summary>
        /// Gets or Sets RFID_EF_SOD
        /// </summary>
        [JsonPropertyName("RFID_EF_SOD")]
        public Dictionary<string, Object>? RFID_EF_SOD { get { return this.RFID_EF_SODOption; } set { this.RFID_EF_SODOption = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG1Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG1
        /// </summary>
        [JsonPropertyName("eID_DG1")]
        public Dictionary<string, Object>? EIDDG1 { get { return this.EIDDG1Option; } set { this.EIDDG1Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG2Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG2
        /// </summary>
        [JsonPropertyName("eID_DG2")]
        public Dictionary<string, Object>? EIDDG2 { get { return this.EIDDG2Option; } set { this.EIDDG2Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG3Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG3
        /// </summary>
        [JsonPropertyName("eID_DG3")]
        public Dictionary<string, Object>? EIDDG3 { get { return this.EIDDG3Option; } set { this.EIDDG3Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG4
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG4Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG4
        /// </summary>
        [JsonPropertyName("eID_DG4")]
        public Dictionary<string, Object>? EIDDG4 { get { return this.EIDDG4Option; } set { this.EIDDG4Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG5
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG5Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG5
        /// </summary>
        [JsonPropertyName("eID_DG5")]
        public Dictionary<string, Object>? EIDDG5 { get { return this.EIDDG5Option; } set { this.EIDDG5Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG6
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG6Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG6
        /// </summary>
        [JsonPropertyName("eID_DG6")]
        public Dictionary<string, Object>? EIDDG6 { get { return this.EIDDG6Option; } set { this.EIDDG6Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG7
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG7Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG7
        /// </summary>
        [JsonPropertyName("eID_DG7")]
        public Dictionary<string, Object>? EIDDG7 { get { return this.EIDDG7Option; } set { this.EIDDG7Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG8
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG8Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG8
        /// </summary>
        [JsonPropertyName("eID_DG8")]
        public Dictionary<string, Object>? EIDDG8 { get { return this.EIDDG8Option; } set { this.EIDDG8Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG9
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG9Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG9
        /// </summary>
        [JsonPropertyName("eID_DG9")]
        public Dictionary<string, Object>? EIDDG9 { get { return this.EIDDG9Option; } set { this.EIDDG9Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG10
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG10Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG10
        /// </summary>
        [JsonPropertyName("eID_DG10")]
        public Dictionary<string, Object>? EIDDG10 { get { return this.EIDDG10Option; } set { this.EIDDG10Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG11
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG11Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG11
        /// </summary>
        [JsonPropertyName("eID_DG11")]
        public Dictionary<string, Object>? EIDDG11 { get { return this.EIDDG11Option; } set { this.EIDDG11Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG12
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG12Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG12
        /// </summary>
        [JsonPropertyName("eID_DG12")]
        public Dictionary<string, Object>? EIDDG12 { get { return this.EIDDG12Option; } set { this.EIDDG12Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG13
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG13Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG13
        /// </summary>
        [JsonPropertyName("eID_DG13")]
        public Dictionary<string, Object>? EIDDG13 { get { return this.EIDDG13Option; } set { this.EIDDG13Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG14
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG14Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG14
        /// </summary>
        [JsonPropertyName("eID_DG14")]
        public Dictionary<string, Object>? EIDDG14 { get { return this.EIDDG14Option; } set { this.EIDDG14Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG15
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG15Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG15
        /// </summary>
        [JsonPropertyName("eID_DG15")]
        public Dictionary<string, Object>? EIDDG15 { get { return this.EIDDG15Option; } set { this.EIDDG15Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG16
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG16Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG16
        /// </summary>
        [JsonPropertyName("eID_DG16")]
        public Dictionary<string, Object>? EIDDG16 { get { return this.EIDDG16Option; } set { this.EIDDG16Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG17
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG17Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG17
        /// </summary>
        [JsonPropertyName("eID_DG17")]
        public Dictionary<string, Object>? EIDDG17 { get { return this.EIDDG17Option; } set { this.EIDDG17Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG18
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG18Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG18
        /// </summary>
        [JsonPropertyName("eID_DG18")]
        public Dictionary<string, Object>? EIDDG18 { get { return this.EIDDG18Option; } set { this.EIDDG18Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG19
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG19Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG19
        /// </summary>
        [JsonPropertyName("eID_DG19")]
        public Dictionary<string, Object>? EIDDG19 { get { return this.EIDDG19Option; } set { this.EIDDG19Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG20
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG20Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG20
        /// </summary>
        [JsonPropertyName("eID_DG20")]
        public Dictionary<string, Object>? EIDDG20 { get { return this.EIDDG20Option; } set { this.EIDDG20Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EIDDG21
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EIDDG21Option { get; private set; }

        /// <summary>
        /// Gets or Sets EIDDG21
        /// </summary>
        [JsonPropertyName("eID_DG21")]
        public Dictionary<string, Object>? EIDDG21 { get { return this.EIDDG21Option; } set { this.EIDDG21Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLCOM
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLCOMOption { get; private set; }

        /// <summary>
        /// Gets or Sets EDLCOM
        /// </summary>
        [JsonPropertyName("eDL_COM")]
        public Dictionary<string, Object>? EDLCOM { get { return this.EDLCOMOption; } set { this.EDLCOMOption = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLSOD
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLSODOption { get; private set; }

        /// <summary>
        /// Gets or Sets EDLSOD
        /// </summary>
        [JsonPropertyName("eDL_SOD")]
        public Dictionary<string, Object>? EDLSOD { get { return this.EDLSODOption; } set { this.EDLSODOption = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG1Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG1
        /// </summary>
        [JsonPropertyName("eDL_DG1")]
        public Dictionary<string, Object>? EDLDG1 { get { return this.EDLDG1Option; } set { this.EDLDG1Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG2Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG2
        /// </summary>
        [JsonPropertyName("eDL_DG2")]
        public Dictionary<string, Object>? EDLDG2 { get { return this.EDLDG2Option; } set { this.EDLDG2Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG3Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG3
        /// </summary>
        [JsonPropertyName("eDL_DG3")]
        public Dictionary<string, Object>? EDLDG3 { get { return this.EDLDG3Option; } set { this.EDLDG3Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG4
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG4Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG4
        /// </summary>
        [JsonPropertyName("eDL_DG4")]
        public Dictionary<string, Object>? EDLDG4 { get { return this.EDLDG4Option; } set { this.EDLDG4Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG5
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG5Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG5
        /// </summary>
        [JsonPropertyName("eDL_DG5")]
        public Dictionary<string, Object>? EDLDG5 { get { return this.EDLDG5Option; } set { this.EDLDG5Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG6
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG6Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG6
        /// </summary>
        [JsonPropertyName("eDL_DG6")]
        public Dictionary<string, Object>? EDLDG6 { get { return this.EDLDG6Option; } set { this.EDLDG6Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG7
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG7Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG7
        /// </summary>
        [JsonPropertyName("eDL_DG7")]
        public Dictionary<string, Object>? EDLDG7 { get { return this.EDLDG7Option; } set { this.EDLDG7Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG8
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG8Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG8
        /// </summary>
        [JsonPropertyName("eDL_DG8")]
        public Dictionary<string, Object>? EDLDG8 { get { return this.EDLDG8Option; } set { this.EDLDG8Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG9
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG9Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG9
        /// </summary>
        [JsonPropertyName("eDL_DG9")]
        public Dictionary<string, Object>? EDLDG9 { get { return this.EDLDG9Option; } set { this.EDLDG9Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG10
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG10Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG10
        /// </summary>
        [JsonPropertyName("eDL_DG10")]
        public Dictionary<string, Object>? EDLDG10 { get { return this.EDLDG10Option; } set { this.EDLDG10Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG11
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG11Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG11
        /// </summary>
        [JsonPropertyName("eDL_DG11")]
        public Dictionary<string, Object>? EDLDG11 { get { return this.EDLDG11Option; } set { this.EDLDG11Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG12
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG12Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG12
        /// </summary>
        [JsonPropertyName("eDL_DG12")]
        public Dictionary<string, Object>? EDLDG12 { get { return this.EDLDG12Option; } set { this.EDLDG12Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG13
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG13Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG13
        /// </summary>
        [JsonPropertyName("eDL_DG13")]
        public Dictionary<string, Object>? EDLDG13 { get { return this.EDLDG13Option; } set { this.EDLDG13Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of EDLDG14
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EDLDG14Option { get; private set; }

        /// <summary>
        /// Gets or Sets EDLDG14
        /// </summary>
        [JsonPropertyName("eDL_DG14")]
        public Dictionary<string, Object>? EDLDG14 { get { return this.EDLDG14Option; } set { this.EDLDG14Option = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of VisibleDigitalSeal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> VisibleDigitalSealOption { get; private set; }

        /// <summary>
        /// Gets or Sets VisibleDigitalSeal
        /// </summary>
        [JsonPropertyName("Visible_Digital_Seal")]
        public Dictionary<string, Object>? VisibleDigitalSeal { get { return this.VisibleDigitalSealOption; } set { this.VisibleDigitalSealOption = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of VisibleDigitalSealNC
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> VisibleDigitalSealNCOption { get; private set; }

        /// <summary>
        /// Gets or Sets VisibleDigitalSealNC
        /// </summary>
        [JsonPropertyName("Visible_Digital_Seal_NC")]
        public Dictionary<string, Object>? VisibleDigitalSealNC { get { return this.VisibleDigitalSealNCOption; } set { this.VisibleDigitalSealNCOption = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of DigitalSignature
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> DigitalSignatureOption { get; private set; }

        /// <summary>
        /// Gets or Sets DigitalSignature
        /// </summary>
        [JsonPropertyName("Digital_Signature")]
        public Dictionary<string, Object>? DigitalSignature { get { return this.DigitalSignatureOption; } set { this.DigitalSignatureOption = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDSessionData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RfidSessionData?> RFIDSessionDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDSessionData
        /// </summary>
        [JsonPropertyName("RFID_Session_Data")]
        public RfidSessionData? RFIDSessionData { get { return this.RFIDSessionDataOption; } set { this.RFIDSessionDataOption = new Option<RfidSessionData?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDSessionDataStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DetailsRFID?> RFIDSessionDataStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets RFIDSessionDataStatus
        /// </summary>
        [JsonPropertyName("RFID_Session_Data_Status")]
        public DetailsRFID? RFIDSessionDataStatus { get { return this.RFIDSessionDataStatusOption; } set { this.RFIDSessionDataStatusOption = new Option<DetailsRFID?>(value); } }

        /// <summary>
        /// Used to track the state of RFIDEPasspDirectory
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RfidDataFileType>?> RFIDEPasspDirectoryOption { get; private set; }

        /// <summary>
        /// Indexes of groups that aren&#39;t read
        /// </summary>
        /// <value>Indexes of groups that aren&#39;t read</value>
        [JsonPropertyName("RFID_ePassp_Directory")]
        public List<RfidDataFileType>? RFIDEPasspDirectory { get { return this.RFIDEPasspDirectoryOption; } set { this.RFIDEPasspDirectoryOption = new Option<List<RfidDataFileType>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BinaryData {\n");
            sb.Append("  RFIDAuthenticationInfo: ").Append(RFIDAuthenticationInfo).Append("\n");
            sb.Append("  RFIDMIFAREDataValidity: ").Append(RFIDMIFAREDataValidity).Append("\n");
            sb.Append("  RFIDMIFAREData: ").Append(RFIDMIFAREData).Append("\n");
            sb.Append("  RFID_EF_COM: ").Append(RFID_EF_COM).Append("\n");
            sb.Append("  RFIDDG1: ").Append(RFIDDG1).Append("\n");
            sb.Append("  RFIDDG2: ").Append(RFIDDG2).Append("\n");
            sb.Append("  RFIDDG3: ").Append(RFIDDG3).Append("\n");
            sb.Append("  RFIDDG4: ").Append(RFIDDG4).Append("\n");
            sb.Append("  RFIDDG5: ").Append(RFIDDG5).Append("\n");
            sb.Append("  RFIDDG6: ").Append(RFIDDG6).Append("\n");
            sb.Append("  RFIDDG7: ").Append(RFIDDG7).Append("\n");
            sb.Append("  RFIDDG8: ").Append(RFIDDG8).Append("\n");
            sb.Append("  RFIDDG9: ").Append(RFIDDG9).Append("\n");
            sb.Append("  RFIDDG10: ").Append(RFIDDG10).Append("\n");
            sb.Append("  RFIDDG11: ").Append(RFIDDG11).Append("\n");
            sb.Append("  RFIDDG12: ").Append(RFIDDG12).Append("\n");
            sb.Append("  RFIDDG13: ").Append(RFIDDG13).Append("\n");
            sb.Append("  RFIDDG14: ").Append(RFIDDG14).Append("\n");
            sb.Append("  RFIDDG15: ").Append(RFIDDG15).Append("\n");
            sb.Append("  RFIDDG16: ").Append(RFIDDG16).Append("\n");
            sb.Append("  RFID_EF_SOD: ").Append(RFID_EF_SOD).Append("\n");
            sb.Append("  EIDDG1: ").Append(EIDDG1).Append("\n");
            sb.Append("  EIDDG2: ").Append(EIDDG2).Append("\n");
            sb.Append("  EIDDG3: ").Append(EIDDG3).Append("\n");
            sb.Append("  EIDDG4: ").Append(EIDDG4).Append("\n");
            sb.Append("  EIDDG5: ").Append(EIDDG5).Append("\n");
            sb.Append("  EIDDG6: ").Append(EIDDG6).Append("\n");
            sb.Append("  EIDDG7: ").Append(EIDDG7).Append("\n");
            sb.Append("  EIDDG8: ").Append(EIDDG8).Append("\n");
            sb.Append("  EIDDG9: ").Append(EIDDG9).Append("\n");
            sb.Append("  EIDDG10: ").Append(EIDDG10).Append("\n");
            sb.Append("  EIDDG11: ").Append(EIDDG11).Append("\n");
            sb.Append("  EIDDG12: ").Append(EIDDG12).Append("\n");
            sb.Append("  EIDDG13: ").Append(EIDDG13).Append("\n");
            sb.Append("  EIDDG14: ").Append(EIDDG14).Append("\n");
            sb.Append("  EIDDG15: ").Append(EIDDG15).Append("\n");
            sb.Append("  EIDDG16: ").Append(EIDDG16).Append("\n");
            sb.Append("  EIDDG17: ").Append(EIDDG17).Append("\n");
            sb.Append("  EIDDG18: ").Append(EIDDG18).Append("\n");
            sb.Append("  EIDDG19: ").Append(EIDDG19).Append("\n");
            sb.Append("  EIDDG20: ").Append(EIDDG20).Append("\n");
            sb.Append("  EIDDG21: ").Append(EIDDG21).Append("\n");
            sb.Append("  EDLCOM: ").Append(EDLCOM).Append("\n");
            sb.Append("  EDLSOD: ").Append(EDLSOD).Append("\n");
            sb.Append("  EDLDG1: ").Append(EDLDG1).Append("\n");
            sb.Append("  EDLDG2: ").Append(EDLDG2).Append("\n");
            sb.Append("  EDLDG3: ").Append(EDLDG3).Append("\n");
            sb.Append("  EDLDG4: ").Append(EDLDG4).Append("\n");
            sb.Append("  EDLDG5: ").Append(EDLDG5).Append("\n");
            sb.Append("  EDLDG6: ").Append(EDLDG6).Append("\n");
            sb.Append("  EDLDG7: ").Append(EDLDG7).Append("\n");
            sb.Append("  EDLDG8: ").Append(EDLDG8).Append("\n");
            sb.Append("  EDLDG9: ").Append(EDLDG9).Append("\n");
            sb.Append("  EDLDG10: ").Append(EDLDG10).Append("\n");
            sb.Append("  EDLDG11: ").Append(EDLDG11).Append("\n");
            sb.Append("  EDLDG12: ").Append(EDLDG12).Append("\n");
            sb.Append("  EDLDG13: ").Append(EDLDG13).Append("\n");
            sb.Append("  EDLDG14: ").Append(EDLDG14).Append("\n");
            sb.Append("  VisibleDigitalSeal: ").Append(VisibleDigitalSeal).Append("\n");
            sb.Append("  VisibleDigitalSealNC: ").Append(VisibleDigitalSealNC).Append("\n");
            sb.Append("  DigitalSignature: ").Append(DigitalSignature).Append("\n");
            sb.Append("  RFIDSessionData: ").Append(RFIDSessionData).Append("\n");
            sb.Append("  RFIDSessionDataStatus: ").Append(RFIDSessionDataStatus).Append("\n");
            sb.Append("  RFIDEPasspDirectory: ").Append(RFIDEPasspDirectory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BinaryData" />
    /// </summary>
    public class BinaryDataJsonConverter : JsonConverter<BinaryData>
    {
        /// <summary>
        /// Deserializes json to <see cref="BinaryData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BinaryData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, Object>?> rFIDAuthenticationInfo = default;
            Option<Dictionary<string, Object>?> rFIDMIFAREDataValidity = default;
            Option<Dictionary<string, Object>?> rFIDMIFAREData = default;
            Option<Dictionary<string, Object>?> rFIDEFCOM = default;
            Option<RfidDG1?> rFIDDG1 = default;
            Option<Dictionary<string, Object>?> rFIDDG2 = default;
            Option<Dictionary<string, Object>?> rFIDDG3 = default;
            Option<Dictionary<string, Object>?> rFIDDG4 = default;
            Option<Dictionary<string, Object>?> rFIDDG5 = default;
            Option<Dictionary<string, Object>?> rFIDDG6 = default;
            Option<Dictionary<string, Object>?> rFIDDG7 = default;
            Option<Dictionary<string, Object>?> rFIDDG8 = default;
            Option<Dictionary<string, Object>?> rFIDDG9 = default;
            Option<Dictionary<string, Object>?> rFIDDG10 = default;
            Option<Dictionary<string, Object>?> rFIDDG11 = default;
            Option<Dictionary<string, Object>?> rFIDDG12 = default;
            Option<Dictionary<string, Object>?> rFIDDG13 = default;
            Option<Dictionary<string, Object>?> rFIDDG14 = default;
            Option<Dictionary<string, Object>?> rFIDDG15 = default;
            Option<Dictionary<string, Object>?> rFIDDG16 = default;
            Option<Dictionary<string, Object>?> rFIDEFSOD = default;
            Option<Dictionary<string, Object>?> eIDDG1 = default;
            Option<Dictionary<string, Object>?> eIDDG2 = default;
            Option<Dictionary<string, Object>?> eIDDG3 = default;
            Option<Dictionary<string, Object>?> eIDDG4 = default;
            Option<Dictionary<string, Object>?> eIDDG5 = default;
            Option<Dictionary<string, Object>?> eIDDG6 = default;
            Option<Dictionary<string, Object>?> eIDDG7 = default;
            Option<Dictionary<string, Object>?> eIDDG8 = default;
            Option<Dictionary<string, Object>?> eIDDG9 = default;
            Option<Dictionary<string, Object>?> eIDDG10 = default;
            Option<Dictionary<string, Object>?> eIDDG11 = default;
            Option<Dictionary<string, Object>?> eIDDG12 = default;
            Option<Dictionary<string, Object>?> eIDDG13 = default;
            Option<Dictionary<string, Object>?> eIDDG14 = default;
            Option<Dictionary<string, Object>?> eIDDG15 = default;
            Option<Dictionary<string, Object>?> eIDDG16 = default;
            Option<Dictionary<string, Object>?> eIDDG17 = default;
            Option<Dictionary<string, Object>?> eIDDG18 = default;
            Option<Dictionary<string, Object>?> eIDDG19 = default;
            Option<Dictionary<string, Object>?> eIDDG20 = default;
            Option<Dictionary<string, Object>?> eIDDG21 = default;
            Option<Dictionary<string, Object>?> eDLCOM = default;
            Option<Dictionary<string, Object>?> eDLSOD = default;
            Option<Dictionary<string, Object>?> eDLDG1 = default;
            Option<Dictionary<string, Object>?> eDLDG2 = default;
            Option<Dictionary<string, Object>?> eDLDG3 = default;
            Option<Dictionary<string, Object>?> eDLDG4 = default;
            Option<Dictionary<string, Object>?> eDLDG5 = default;
            Option<Dictionary<string, Object>?> eDLDG6 = default;
            Option<Dictionary<string, Object>?> eDLDG7 = default;
            Option<Dictionary<string, Object>?> eDLDG8 = default;
            Option<Dictionary<string, Object>?> eDLDG9 = default;
            Option<Dictionary<string, Object>?> eDLDG10 = default;
            Option<Dictionary<string, Object>?> eDLDG11 = default;
            Option<Dictionary<string, Object>?> eDLDG12 = default;
            Option<Dictionary<string, Object>?> eDLDG13 = default;
            Option<Dictionary<string, Object>?> eDLDG14 = default;
            Option<Dictionary<string, Object>?> visibleDigitalSeal = default;
            Option<Dictionary<string, Object>?> visibleDigitalSealNC = default;
            Option<Dictionary<string, Object>?> digitalSignature = default;
            Option<RfidSessionData?> rFIDSessionData = default;
            Option<DetailsRFID?> rFIDSessionDataStatus = default;
            Option<List<RfidDataFileType>?> rFIDEPasspDirectory = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "RFID_Authentication_Info":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDAuthenticationInfo = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_MIFARE_Data_Validity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDMIFAREDataValidity = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_MIFARE_Data":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDMIFAREData = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_EF_COM":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDEFCOM = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG1 = new Option<RfidDG1?>(JsonSerializer.Deserialize<RfidDG1>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG2 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG3":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG3 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG4":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG4 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG5":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG5 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG6":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG6 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG7":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG7 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG8":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG8 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG9":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG9 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG10":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG10 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG11":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG11 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG12":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG12 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG13":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG13 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG14":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG14 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG15":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG15 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_DG16":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDDG16 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_EF_SOD":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDEFSOD = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG1 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG2 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG3":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG3 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG4":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG4 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG5":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG5 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG6":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG6 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG7":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG7 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG8":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG8 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG9":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG9 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG10":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG10 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG11":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG11 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG12":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG12 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG13":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG13 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG14":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG14 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG15":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG15 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG16":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG16 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG17":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG17 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG18":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG18 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG19":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG19 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG20":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG20 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eID_DG21":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eIDDG21 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_COM":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLCOM = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_SOD":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLSOD = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG1 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG2 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG3":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG3 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG4":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG4 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG5":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG5 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG6":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG6 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG7":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG7 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG8":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG8 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG9":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG9 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG10":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG10 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG11":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG11 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG12":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG12 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG13":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG13 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eDL_DG14":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eDLDG14 = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Visible_Digital_Seal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                visibleDigitalSeal = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Visible_Digital_Seal_NC":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                visibleDigitalSealNC = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Digital_Signature":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                digitalSignature = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_Session_Data":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDSessionData = new Option<RfidSessionData?>(JsonSerializer.Deserialize<RfidSessionData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_Session_Data_Status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDSessionDataStatus = new Option<DetailsRFID?>(JsonSerializer.Deserialize<DetailsRFID>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_ePassp_Directory":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDEPasspDirectory = new Option<List<RfidDataFileType>?>(JsonSerializer.Deserialize<List<RfidDataFileType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (rFIDAuthenticationInfo.IsSet && rFIDAuthenticationInfo.Value == null)
                throw new ArgumentNullException(nameof(rFIDAuthenticationInfo), "Property is not nullable for class BinaryData.");

            if (rFIDMIFAREDataValidity.IsSet && rFIDMIFAREDataValidity.Value == null)
                throw new ArgumentNullException(nameof(rFIDMIFAREDataValidity), "Property is not nullable for class BinaryData.");

            if (rFIDMIFAREData.IsSet && rFIDMIFAREData.Value == null)
                throw new ArgumentNullException(nameof(rFIDMIFAREData), "Property is not nullable for class BinaryData.");

            if (rFIDEFCOM.IsSet && rFIDEFCOM.Value == null)
                throw new ArgumentNullException(nameof(rFIDEFCOM), "Property is not nullable for class BinaryData.");

            if (rFIDDG1.IsSet && rFIDDG1.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG1), "Property is not nullable for class BinaryData.");

            if (rFIDDG2.IsSet && rFIDDG2.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG2), "Property is not nullable for class BinaryData.");

            if (rFIDDG3.IsSet && rFIDDG3.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG3), "Property is not nullable for class BinaryData.");

            if (rFIDDG4.IsSet && rFIDDG4.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG4), "Property is not nullable for class BinaryData.");

            if (rFIDDG5.IsSet && rFIDDG5.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG5), "Property is not nullable for class BinaryData.");

            if (rFIDDG6.IsSet && rFIDDG6.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG6), "Property is not nullable for class BinaryData.");

            if (rFIDDG7.IsSet && rFIDDG7.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG7), "Property is not nullable for class BinaryData.");

            if (rFIDDG8.IsSet && rFIDDG8.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG8), "Property is not nullable for class BinaryData.");

            if (rFIDDG9.IsSet && rFIDDG9.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG9), "Property is not nullable for class BinaryData.");

            if (rFIDDG10.IsSet && rFIDDG10.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG10), "Property is not nullable for class BinaryData.");

            if (rFIDDG11.IsSet && rFIDDG11.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG11), "Property is not nullable for class BinaryData.");

            if (rFIDDG12.IsSet && rFIDDG12.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG12), "Property is not nullable for class BinaryData.");

            if (rFIDDG13.IsSet && rFIDDG13.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG13), "Property is not nullable for class BinaryData.");

            if (rFIDDG14.IsSet && rFIDDG14.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG14), "Property is not nullable for class BinaryData.");

            if (rFIDDG15.IsSet && rFIDDG15.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG15), "Property is not nullable for class BinaryData.");

            if (rFIDDG16.IsSet && rFIDDG16.Value == null)
                throw new ArgumentNullException(nameof(rFIDDG16), "Property is not nullable for class BinaryData.");

            if (rFIDEFSOD.IsSet && rFIDEFSOD.Value == null)
                throw new ArgumentNullException(nameof(rFIDEFSOD), "Property is not nullable for class BinaryData.");

            if (eIDDG1.IsSet && eIDDG1.Value == null)
                throw new ArgumentNullException(nameof(eIDDG1), "Property is not nullable for class BinaryData.");

            if (eIDDG2.IsSet && eIDDG2.Value == null)
                throw new ArgumentNullException(nameof(eIDDG2), "Property is not nullable for class BinaryData.");

            if (eIDDG3.IsSet && eIDDG3.Value == null)
                throw new ArgumentNullException(nameof(eIDDG3), "Property is not nullable for class BinaryData.");

            if (eIDDG4.IsSet && eIDDG4.Value == null)
                throw new ArgumentNullException(nameof(eIDDG4), "Property is not nullable for class BinaryData.");

            if (eIDDG5.IsSet && eIDDG5.Value == null)
                throw new ArgumentNullException(nameof(eIDDG5), "Property is not nullable for class BinaryData.");

            if (eIDDG6.IsSet && eIDDG6.Value == null)
                throw new ArgumentNullException(nameof(eIDDG6), "Property is not nullable for class BinaryData.");

            if (eIDDG7.IsSet && eIDDG7.Value == null)
                throw new ArgumentNullException(nameof(eIDDG7), "Property is not nullable for class BinaryData.");

            if (eIDDG8.IsSet && eIDDG8.Value == null)
                throw new ArgumentNullException(nameof(eIDDG8), "Property is not nullable for class BinaryData.");

            if (eIDDG9.IsSet && eIDDG9.Value == null)
                throw new ArgumentNullException(nameof(eIDDG9), "Property is not nullable for class BinaryData.");

            if (eIDDG10.IsSet && eIDDG10.Value == null)
                throw new ArgumentNullException(nameof(eIDDG10), "Property is not nullable for class BinaryData.");

            if (eIDDG11.IsSet && eIDDG11.Value == null)
                throw new ArgumentNullException(nameof(eIDDG11), "Property is not nullable for class BinaryData.");

            if (eIDDG12.IsSet && eIDDG12.Value == null)
                throw new ArgumentNullException(nameof(eIDDG12), "Property is not nullable for class BinaryData.");

            if (eIDDG13.IsSet && eIDDG13.Value == null)
                throw new ArgumentNullException(nameof(eIDDG13), "Property is not nullable for class BinaryData.");

            if (eIDDG14.IsSet && eIDDG14.Value == null)
                throw new ArgumentNullException(nameof(eIDDG14), "Property is not nullable for class BinaryData.");

            if (eIDDG15.IsSet && eIDDG15.Value == null)
                throw new ArgumentNullException(nameof(eIDDG15), "Property is not nullable for class BinaryData.");

            if (eIDDG16.IsSet && eIDDG16.Value == null)
                throw new ArgumentNullException(nameof(eIDDG16), "Property is not nullable for class BinaryData.");

            if (eIDDG17.IsSet && eIDDG17.Value == null)
                throw new ArgumentNullException(nameof(eIDDG17), "Property is not nullable for class BinaryData.");

            if (eIDDG18.IsSet && eIDDG18.Value == null)
                throw new ArgumentNullException(nameof(eIDDG18), "Property is not nullable for class BinaryData.");

            if (eIDDG19.IsSet && eIDDG19.Value == null)
                throw new ArgumentNullException(nameof(eIDDG19), "Property is not nullable for class BinaryData.");

            if (eIDDG20.IsSet && eIDDG20.Value == null)
                throw new ArgumentNullException(nameof(eIDDG20), "Property is not nullable for class BinaryData.");

            if (eIDDG21.IsSet && eIDDG21.Value == null)
                throw new ArgumentNullException(nameof(eIDDG21), "Property is not nullable for class BinaryData.");

            if (eDLCOM.IsSet && eDLCOM.Value == null)
                throw new ArgumentNullException(nameof(eDLCOM), "Property is not nullable for class BinaryData.");

            if (eDLSOD.IsSet && eDLSOD.Value == null)
                throw new ArgumentNullException(nameof(eDLSOD), "Property is not nullable for class BinaryData.");

            if (eDLDG1.IsSet && eDLDG1.Value == null)
                throw new ArgumentNullException(nameof(eDLDG1), "Property is not nullable for class BinaryData.");

            if (eDLDG2.IsSet && eDLDG2.Value == null)
                throw new ArgumentNullException(nameof(eDLDG2), "Property is not nullable for class BinaryData.");

            if (eDLDG3.IsSet && eDLDG3.Value == null)
                throw new ArgumentNullException(nameof(eDLDG3), "Property is not nullable for class BinaryData.");

            if (eDLDG4.IsSet && eDLDG4.Value == null)
                throw new ArgumentNullException(nameof(eDLDG4), "Property is not nullable for class BinaryData.");

            if (eDLDG5.IsSet && eDLDG5.Value == null)
                throw new ArgumentNullException(nameof(eDLDG5), "Property is not nullable for class BinaryData.");

            if (eDLDG6.IsSet && eDLDG6.Value == null)
                throw new ArgumentNullException(nameof(eDLDG6), "Property is not nullable for class BinaryData.");

            if (eDLDG7.IsSet && eDLDG7.Value == null)
                throw new ArgumentNullException(nameof(eDLDG7), "Property is not nullable for class BinaryData.");

            if (eDLDG8.IsSet && eDLDG8.Value == null)
                throw new ArgumentNullException(nameof(eDLDG8), "Property is not nullable for class BinaryData.");

            if (eDLDG9.IsSet && eDLDG9.Value == null)
                throw new ArgumentNullException(nameof(eDLDG9), "Property is not nullable for class BinaryData.");

            if (eDLDG10.IsSet && eDLDG10.Value == null)
                throw new ArgumentNullException(nameof(eDLDG10), "Property is not nullable for class BinaryData.");

            if (eDLDG11.IsSet && eDLDG11.Value == null)
                throw new ArgumentNullException(nameof(eDLDG11), "Property is not nullable for class BinaryData.");

            if (eDLDG12.IsSet && eDLDG12.Value == null)
                throw new ArgumentNullException(nameof(eDLDG12), "Property is not nullable for class BinaryData.");

            if (eDLDG13.IsSet && eDLDG13.Value == null)
                throw new ArgumentNullException(nameof(eDLDG13), "Property is not nullable for class BinaryData.");

            if (eDLDG14.IsSet && eDLDG14.Value == null)
                throw new ArgumentNullException(nameof(eDLDG14), "Property is not nullable for class BinaryData.");

            if (visibleDigitalSeal.IsSet && visibleDigitalSeal.Value == null)
                throw new ArgumentNullException(nameof(visibleDigitalSeal), "Property is not nullable for class BinaryData.");

            if (visibleDigitalSealNC.IsSet && visibleDigitalSealNC.Value == null)
                throw new ArgumentNullException(nameof(visibleDigitalSealNC), "Property is not nullable for class BinaryData.");

            if (digitalSignature.IsSet && digitalSignature.Value == null)
                throw new ArgumentNullException(nameof(digitalSignature), "Property is not nullable for class BinaryData.");

            if (rFIDSessionData.IsSet && rFIDSessionData.Value == null)
                throw new ArgumentNullException(nameof(rFIDSessionData), "Property is not nullable for class BinaryData.");

            if (rFIDSessionDataStatus.IsSet && rFIDSessionDataStatus.Value == null)
                throw new ArgumentNullException(nameof(rFIDSessionDataStatus), "Property is not nullable for class BinaryData.");

            if (rFIDEPasspDirectory.IsSet && rFIDEPasspDirectory.Value == null)
                throw new ArgumentNullException(nameof(rFIDEPasspDirectory), "Property is not nullable for class BinaryData.");

            return new BinaryData(rFIDAuthenticationInfo, rFIDMIFAREDataValidity, rFIDMIFAREData, rFIDEFCOM, rFIDDG1, rFIDDG2, rFIDDG3, rFIDDG4, rFIDDG5, rFIDDG6, rFIDDG7, rFIDDG8, rFIDDG9, rFIDDG10, rFIDDG11, rFIDDG12, rFIDDG13, rFIDDG14, rFIDDG15, rFIDDG16, rFIDEFSOD, eIDDG1, eIDDG2, eIDDG3, eIDDG4, eIDDG5, eIDDG6, eIDDG7, eIDDG8, eIDDG9, eIDDG10, eIDDG11, eIDDG12, eIDDG13, eIDDG14, eIDDG15, eIDDG16, eIDDG17, eIDDG18, eIDDG19, eIDDG20, eIDDG21, eDLCOM, eDLSOD, eDLDG1, eDLDG2, eDLDG3, eDLDG4, eDLDG5, eDLDG6, eDLDG7, eDLDG8, eDLDG9, eDLDG10, eDLDG11, eDLDG12, eDLDG13, eDLDG14, visibleDigitalSeal, visibleDigitalSealNC, digitalSignature, rFIDSessionData, rFIDSessionDataStatus, rFIDEPasspDirectory);
        }

        /// <summary>
        /// Serializes a <see cref="BinaryData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="binaryData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BinaryData binaryData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, binaryData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BinaryData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="binaryData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BinaryData binaryData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (binaryData.RFIDAuthenticationInfoOption.IsSet && binaryData.RFIDAuthenticationInfo == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDAuthenticationInfo), "Property is required for class BinaryData.");

            if (binaryData.RFIDMIFAREDataValidityOption.IsSet && binaryData.RFIDMIFAREDataValidity == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDMIFAREDataValidity), "Property is required for class BinaryData.");

            if (binaryData.RFIDMIFAREDataOption.IsSet && binaryData.RFIDMIFAREData == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDMIFAREData), "Property is required for class BinaryData.");

            if (binaryData.RFID_EF_COMOption.IsSet && binaryData.RFID_EF_COM == null)
                throw new ArgumentNullException(nameof(binaryData.RFID_EF_COM), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG1Option.IsSet && binaryData.RFIDDG1 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG1), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG2Option.IsSet && binaryData.RFIDDG2 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG2), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG3Option.IsSet && binaryData.RFIDDG3 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG3), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG4Option.IsSet && binaryData.RFIDDG4 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG4), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG5Option.IsSet && binaryData.RFIDDG5 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG5), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG6Option.IsSet && binaryData.RFIDDG6 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG6), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG7Option.IsSet && binaryData.RFIDDG7 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG7), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG8Option.IsSet && binaryData.RFIDDG8 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG8), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG9Option.IsSet && binaryData.RFIDDG9 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG9), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG10Option.IsSet && binaryData.RFIDDG10 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG10), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG11Option.IsSet && binaryData.RFIDDG11 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG11), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG12Option.IsSet && binaryData.RFIDDG12 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG12), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG13Option.IsSet && binaryData.RFIDDG13 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG13), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG14Option.IsSet && binaryData.RFIDDG14 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG14), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG15Option.IsSet && binaryData.RFIDDG15 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG15), "Property is required for class BinaryData.");

            if (binaryData.RFIDDG16Option.IsSet && binaryData.RFIDDG16 == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDDG16), "Property is required for class BinaryData.");

            if (binaryData.RFID_EF_SODOption.IsSet && binaryData.RFID_EF_SOD == null)
                throw new ArgumentNullException(nameof(binaryData.RFID_EF_SOD), "Property is required for class BinaryData.");

            if (binaryData.EIDDG1Option.IsSet && binaryData.EIDDG1 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG1), "Property is required for class BinaryData.");

            if (binaryData.EIDDG2Option.IsSet && binaryData.EIDDG2 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG2), "Property is required for class BinaryData.");

            if (binaryData.EIDDG3Option.IsSet && binaryData.EIDDG3 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG3), "Property is required for class BinaryData.");

            if (binaryData.EIDDG4Option.IsSet && binaryData.EIDDG4 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG4), "Property is required for class BinaryData.");

            if (binaryData.EIDDG5Option.IsSet && binaryData.EIDDG5 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG5), "Property is required for class BinaryData.");

            if (binaryData.EIDDG6Option.IsSet && binaryData.EIDDG6 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG6), "Property is required for class BinaryData.");

            if (binaryData.EIDDG7Option.IsSet && binaryData.EIDDG7 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG7), "Property is required for class BinaryData.");

            if (binaryData.EIDDG8Option.IsSet && binaryData.EIDDG8 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG8), "Property is required for class BinaryData.");

            if (binaryData.EIDDG9Option.IsSet && binaryData.EIDDG9 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG9), "Property is required for class BinaryData.");

            if (binaryData.EIDDG10Option.IsSet && binaryData.EIDDG10 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG10), "Property is required for class BinaryData.");

            if (binaryData.EIDDG11Option.IsSet && binaryData.EIDDG11 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG11), "Property is required for class BinaryData.");

            if (binaryData.EIDDG12Option.IsSet && binaryData.EIDDG12 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG12), "Property is required for class BinaryData.");

            if (binaryData.EIDDG13Option.IsSet && binaryData.EIDDG13 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG13), "Property is required for class BinaryData.");

            if (binaryData.EIDDG14Option.IsSet && binaryData.EIDDG14 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG14), "Property is required for class BinaryData.");

            if (binaryData.EIDDG15Option.IsSet && binaryData.EIDDG15 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG15), "Property is required for class BinaryData.");

            if (binaryData.EIDDG16Option.IsSet && binaryData.EIDDG16 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG16), "Property is required for class BinaryData.");

            if (binaryData.EIDDG17Option.IsSet && binaryData.EIDDG17 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG17), "Property is required for class BinaryData.");

            if (binaryData.EIDDG18Option.IsSet && binaryData.EIDDG18 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG18), "Property is required for class BinaryData.");

            if (binaryData.EIDDG19Option.IsSet && binaryData.EIDDG19 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG19), "Property is required for class BinaryData.");

            if (binaryData.EIDDG20Option.IsSet && binaryData.EIDDG20 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG20), "Property is required for class BinaryData.");

            if (binaryData.EIDDG21Option.IsSet && binaryData.EIDDG21 == null)
                throw new ArgumentNullException(nameof(binaryData.EIDDG21), "Property is required for class BinaryData.");

            if (binaryData.EDLCOMOption.IsSet && binaryData.EDLCOM == null)
                throw new ArgumentNullException(nameof(binaryData.EDLCOM), "Property is required for class BinaryData.");

            if (binaryData.EDLSODOption.IsSet && binaryData.EDLSOD == null)
                throw new ArgumentNullException(nameof(binaryData.EDLSOD), "Property is required for class BinaryData.");

            if (binaryData.EDLDG1Option.IsSet && binaryData.EDLDG1 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG1), "Property is required for class BinaryData.");

            if (binaryData.EDLDG2Option.IsSet && binaryData.EDLDG2 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG2), "Property is required for class BinaryData.");

            if (binaryData.EDLDG3Option.IsSet && binaryData.EDLDG3 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG3), "Property is required for class BinaryData.");

            if (binaryData.EDLDG4Option.IsSet && binaryData.EDLDG4 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG4), "Property is required for class BinaryData.");

            if (binaryData.EDLDG5Option.IsSet && binaryData.EDLDG5 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG5), "Property is required for class BinaryData.");

            if (binaryData.EDLDG6Option.IsSet && binaryData.EDLDG6 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG6), "Property is required for class BinaryData.");

            if (binaryData.EDLDG7Option.IsSet && binaryData.EDLDG7 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG7), "Property is required for class BinaryData.");

            if (binaryData.EDLDG8Option.IsSet && binaryData.EDLDG8 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG8), "Property is required for class BinaryData.");

            if (binaryData.EDLDG9Option.IsSet && binaryData.EDLDG9 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG9), "Property is required for class BinaryData.");

            if (binaryData.EDLDG10Option.IsSet && binaryData.EDLDG10 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG10), "Property is required for class BinaryData.");

            if (binaryData.EDLDG11Option.IsSet && binaryData.EDLDG11 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG11), "Property is required for class BinaryData.");

            if (binaryData.EDLDG12Option.IsSet && binaryData.EDLDG12 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG12), "Property is required for class BinaryData.");

            if (binaryData.EDLDG13Option.IsSet && binaryData.EDLDG13 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG13), "Property is required for class BinaryData.");

            if (binaryData.EDLDG14Option.IsSet && binaryData.EDLDG14 == null)
                throw new ArgumentNullException(nameof(binaryData.EDLDG14), "Property is required for class BinaryData.");

            if (binaryData.VisibleDigitalSealOption.IsSet && binaryData.VisibleDigitalSeal == null)
                throw new ArgumentNullException(nameof(binaryData.VisibleDigitalSeal), "Property is required for class BinaryData.");

            if (binaryData.VisibleDigitalSealNCOption.IsSet && binaryData.VisibleDigitalSealNC == null)
                throw new ArgumentNullException(nameof(binaryData.VisibleDigitalSealNC), "Property is required for class BinaryData.");

            if (binaryData.DigitalSignatureOption.IsSet && binaryData.DigitalSignature == null)
                throw new ArgumentNullException(nameof(binaryData.DigitalSignature), "Property is required for class BinaryData.");

            if (binaryData.RFIDSessionDataOption.IsSet && binaryData.RFIDSessionData == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDSessionData), "Property is required for class BinaryData.");

            if (binaryData.RFIDSessionDataStatusOption.IsSet && binaryData.RFIDSessionDataStatus == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDSessionDataStatus), "Property is required for class BinaryData.");

            if (binaryData.RFIDEPasspDirectoryOption.IsSet && binaryData.RFIDEPasspDirectory == null)
                throw new ArgumentNullException(nameof(binaryData.RFIDEPasspDirectory), "Property is required for class BinaryData.");

            if (binaryData.RFIDAuthenticationInfoOption.IsSet)
            {
                writer.WritePropertyName("RFID_Authentication_Info");
                JsonSerializer.Serialize(writer, binaryData.RFIDAuthenticationInfo, jsonSerializerOptions);
            }
            if (binaryData.RFIDMIFAREDataValidityOption.IsSet)
            {
                writer.WritePropertyName("RFID_MIFARE_Data_Validity");
                JsonSerializer.Serialize(writer, binaryData.RFIDMIFAREDataValidity, jsonSerializerOptions);
            }
            if (binaryData.RFIDMIFAREDataOption.IsSet)
            {
                writer.WritePropertyName("RFID_MIFARE_Data");
                JsonSerializer.Serialize(writer, binaryData.RFIDMIFAREData, jsonSerializerOptions);
            }
            if (binaryData.RFID_EF_COMOption.IsSet)
            {
                writer.WritePropertyName("RFID_EF_COM");
                JsonSerializer.Serialize(writer, binaryData.RFID_EF_COM, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG1Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG1");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG1, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG2Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG2");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG2, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG3Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG3");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG3, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG4Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG4");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG4, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG5Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG5");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG5, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG6Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG6");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG6, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG7Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG7");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG7, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG8Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG8");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG8, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG9Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG9");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG9, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG10Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG10");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG10, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG11Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG11");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG11, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG12Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG12");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG12, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG13Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG13");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG13, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG14Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG14");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG14, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG15Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG15");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG15, jsonSerializerOptions);
            }
            if (binaryData.RFIDDG16Option.IsSet)
            {
                writer.WritePropertyName("RFID_DG16");
                JsonSerializer.Serialize(writer, binaryData.RFIDDG16, jsonSerializerOptions);
            }
            if (binaryData.RFID_EF_SODOption.IsSet)
            {
                writer.WritePropertyName("RFID_EF_SOD");
                JsonSerializer.Serialize(writer, binaryData.RFID_EF_SOD, jsonSerializerOptions);
            }
            if (binaryData.EIDDG1Option.IsSet)
            {
                writer.WritePropertyName("eID_DG1");
                JsonSerializer.Serialize(writer, binaryData.EIDDG1, jsonSerializerOptions);
            }
            if (binaryData.EIDDG2Option.IsSet)
            {
                writer.WritePropertyName("eID_DG2");
                JsonSerializer.Serialize(writer, binaryData.EIDDG2, jsonSerializerOptions);
            }
            if (binaryData.EIDDG3Option.IsSet)
            {
                writer.WritePropertyName("eID_DG3");
                JsonSerializer.Serialize(writer, binaryData.EIDDG3, jsonSerializerOptions);
            }
            if (binaryData.EIDDG4Option.IsSet)
            {
                writer.WritePropertyName("eID_DG4");
                JsonSerializer.Serialize(writer, binaryData.EIDDG4, jsonSerializerOptions);
            }
            if (binaryData.EIDDG5Option.IsSet)
            {
                writer.WritePropertyName("eID_DG5");
                JsonSerializer.Serialize(writer, binaryData.EIDDG5, jsonSerializerOptions);
            }
            if (binaryData.EIDDG6Option.IsSet)
            {
                writer.WritePropertyName("eID_DG6");
                JsonSerializer.Serialize(writer, binaryData.EIDDG6, jsonSerializerOptions);
            }
            if (binaryData.EIDDG7Option.IsSet)
            {
                writer.WritePropertyName("eID_DG7");
                JsonSerializer.Serialize(writer, binaryData.EIDDG7, jsonSerializerOptions);
            }
            if (binaryData.EIDDG8Option.IsSet)
            {
                writer.WritePropertyName("eID_DG8");
                JsonSerializer.Serialize(writer, binaryData.EIDDG8, jsonSerializerOptions);
            }
            if (binaryData.EIDDG9Option.IsSet)
            {
                writer.WritePropertyName("eID_DG9");
                JsonSerializer.Serialize(writer, binaryData.EIDDG9, jsonSerializerOptions);
            }
            if (binaryData.EIDDG10Option.IsSet)
            {
                writer.WritePropertyName("eID_DG10");
                JsonSerializer.Serialize(writer, binaryData.EIDDG10, jsonSerializerOptions);
            }
            if (binaryData.EIDDG11Option.IsSet)
            {
                writer.WritePropertyName("eID_DG11");
                JsonSerializer.Serialize(writer, binaryData.EIDDG11, jsonSerializerOptions);
            }
            if (binaryData.EIDDG12Option.IsSet)
            {
                writer.WritePropertyName("eID_DG12");
                JsonSerializer.Serialize(writer, binaryData.EIDDG12, jsonSerializerOptions);
            }
            if (binaryData.EIDDG13Option.IsSet)
            {
                writer.WritePropertyName("eID_DG13");
                JsonSerializer.Serialize(writer, binaryData.EIDDG13, jsonSerializerOptions);
            }
            if (binaryData.EIDDG14Option.IsSet)
            {
                writer.WritePropertyName("eID_DG14");
                JsonSerializer.Serialize(writer, binaryData.EIDDG14, jsonSerializerOptions);
            }
            if (binaryData.EIDDG15Option.IsSet)
            {
                writer.WritePropertyName("eID_DG15");
                JsonSerializer.Serialize(writer, binaryData.EIDDG15, jsonSerializerOptions);
            }
            if (binaryData.EIDDG16Option.IsSet)
            {
                writer.WritePropertyName("eID_DG16");
                JsonSerializer.Serialize(writer, binaryData.EIDDG16, jsonSerializerOptions);
            }
            if (binaryData.EIDDG17Option.IsSet)
            {
                writer.WritePropertyName("eID_DG17");
                JsonSerializer.Serialize(writer, binaryData.EIDDG17, jsonSerializerOptions);
            }
            if (binaryData.EIDDG18Option.IsSet)
            {
                writer.WritePropertyName("eID_DG18");
                JsonSerializer.Serialize(writer, binaryData.EIDDG18, jsonSerializerOptions);
            }
            if (binaryData.EIDDG19Option.IsSet)
            {
                writer.WritePropertyName("eID_DG19");
                JsonSerializer.Serialize(writer, binaryData.EIDDG19, jsonSerializerOptions);
            }
            if (binaryData.EIDDG20Option.IsSet)
            {
                writer.WritePropertyName("eID_DG20");
                JsonSerializer.Serialize(writer, binaryData.EIDDG20, jsonSerializerOptions);
            }
            if (binaryData.EIDDG21Option.IsSet)
            {
                writer.WritePropertyName("eID_DG21");
                JsonSerializer.Serialize(writer, binaryData.EIDDG21, jsonSerializerOptions);
            }
            if (binaryData.EDLCOMOption.IsSet)
            {
                writer.WritePropertyName("eDL_COM");
                JsonSerializer.Serialize(writer, binaryData.EDLCOM, jsonSerializerOptions);
            }
            if (binaryData.EDLSODOption.IsSet)
            {
                writer.WritePropertyName("eDL_SOD");
                JsonSerializer.Serialize(writer, binaryData.EDLSOD, jsonSerializerOptions);
            }
            if (binaryData.EDLDG1Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG1");
                JsonSerializer.Serialize(writer, binaryData.EDLDG1, jsonSerializerOptions);
            }
            if (binaryData.EDLDG2Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG2");
                JsonSerializer.Serialize(writer, binaryData.EDLDG2, jsonSerializerOptions);
            }
            if (binaryData.EDLDG3Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG3");
                JsonSerializer.Serialize(writer, binaryData.EDLDG3, jsonSerializerOptions);
            }
            if (binaryData.EDLDG4Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG4");
                JsonSerializer.Serialize(writer, binaryData.EDLDG4, jsonSerializerOptions);
            }
            if (binaryData.EDLDG5Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG5");
                JsonSerializer.Serialize(writer, binaryData.EDLDG5, jsonSerializerOptions);
            }
            if (binaryData.EDLDG6Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG6");
                JsonSerializer.Serialize(writer, binaryData.EDLDG6, jsonSerializerOptions);
            }
            if (binaryData.EDLDG7Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG7");
                JsonSerializer.Serialize(writer, binaryData.EDLDG7, jsonSerializerOptions);
            }
            if (binaryData.EDLDG8Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG8");
                JsonSerializer.Serialize(writer, binaryData.EDLDG8, jsonSerializerOptions);
            }
            if (binaryData.EDLDG9Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG9");
                JsonSerializer.Serialize(writer, binaryData.EDLDG9, jsonSerializerOptions);
            }
            if (binaryData.EDLDG10Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG10");
                JsonSerializer.Serialize(writer, binaryData.EDLDG10, jsonSerializerOptions);
            }
            if (binaryData.EDLDG11Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG11");
                JsonSerializer.Serialize(writer, binaryData.EDLDG11, jsonSerializerOptions);
            }
            if (binaryData.EDLDG12Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG12");
                JsonSerializer.Serialize(writer, binaryData.EDLDG12, jsonSerializerOptions);
            }
            if (binaryData.EDLDG13Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG13");
                JsonSerializer.Serialize(writer, binaryData.EDLDG13, jsonSerializerOptions);
            }
            if (binaryData.EDLDG14Option.IsSet)
            {
                writer.WritePropertyName("eDL_DG14");
                JsonSerializer.Serialize(writer, binaryData.EDLDG14, jsonSerializerOptions);
            }
            if (binaryData.VisibleDigitalSealOption.IsSet)
            {
                writer.WritePropertyName("Visible_Digital_Seal");
                JsonSerializer.Serialize(writer, binaryData.VisibleDigitalSeal, jsonSerializerOptions);
            }
            if (binaryData.VisibleDigitalSealNCOption.IsSet)
            {
                writer.WritePropertyName("Visible_Digital_Seal_NC");
                JsonSerializer.Serialize(writer, binaryData.VisibleDigitalSealNC, jsonSerializerOptions);
            }
            if (binaryData.DigitalSignatureOption.IsSet)
            {
                writer.WritePropertyName("Digital_Signature");
                JsonSerializer.Serialize(writer, binaryData.DigitalSignature, jsonSerializerOptions);
            }
            if (binaryData.RFIDSessionDataOption.IsSet)
            {
                writer.WritePropertyName("RFID_Session_Data");
                JsonSerializer.Serialize(writer, binaryData.RFIDSessionData, jsonSerializerOptions);
            }
            if (binaryData.RFIDSessionDataStatusOption.IsSet)
            {
                writer.WritePropertyName("RFID_Session_Data_Status");
                JsonSerializer.Serialize(writer, binaryData.RFIDSessionDataStatus, jsonSerializerOptions);
            }
            if (binaryData.RFIDEPasspDirectoryOption.IsSet)
            {
                writer.WritePropertyName("RFID_ePassp_Directory");
                JsonSerializer.Serialize(writer, binaryData.RFIDEPasspDirectory, jsonSerializerOptions);
            }
        }
    }
}
