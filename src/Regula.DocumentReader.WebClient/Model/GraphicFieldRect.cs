/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Information about one graphic field, which is a rectangle
    /// </summary>
    [DataContract]
    public partial class GraphicFieldRect :  IEquatable<GraphicFieldRect>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphicFieldRect" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GraphicFieldRect() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphicFieldRect" /> class.
        /// </summary>
        /// <param name="fieldRect">fieldRect (required).</param>
        /// <param name="fieldType">fieldType (required).</param>
        /// <param name="fieldName">Graphic field symbolic name (required).</param>
        /// <param name="image">image (required).</param>
        public GraphicFieldRect(RectangleCoordinates fieldRect = default(RectangleCoordinates), int fieldType = default(int), string fieldName = default(string), ImageData image = default(ImageData))
        {
            // to ensure "fieldRect" is required (not null)
            if (fieldRect == null)
            {
                throw new InvalidDataException("fieldRect is a required property for GraphicFieldRect and cannot be null");
            }
            else
            {
                this.FieldRect = fieldRect;
            }
            
            // to ensure "fieldType" is required (not null)
            if (fieldType == null)
            {
                throw new InvalidDataException("fieldType is a required property for GraphicFieldRect and cannot be null");
            }
            else
            {
                this.FieldType = fieldType;
            }
            
            // to ensure "fieldName" is required (not null)
            if (fieldName == null)
            {
                throw new InvalidDataException("fieldName is a required property for GraphicFieldRect and cannot be null");
            }
            else
            {
                this.FieldName = fieldName;
            }
            
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new InvalidDataException("image is a required property for GraphicFieldRect and cannot be null");
            }
            else
            {
                this.Image = image;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [DataMember(Name="FieldRect", EmitDefaultValue=true)]
        public RectangleCoordinates FieldRect { get; set; }

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name="FieldType", EmitDefaultValue=true)]
        public int FieldType { get; set; }

        /// <summary>
        /// Graphic field symbolic name
        /// </summary>
        /// <value>Graphic field symbolic name</value>
        [DataMember(Name="FieldName", EmitDefaultValue=true)]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=true)]
        public ImageData Image { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GraphicFieldRect {\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GraphicFieldRect);
        }

        /// <summary>
        /// Returns true if GraphicFieldRect instances are equal
        /// </summary>
        /// <param name="input">Instance of GraphicFieldRect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GraphicFieldRect input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldRect == input.FieldRect ||
                    (this.FieldRect != null &&
                    this.FieldRect.Equals(input.FieldRect))
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldRect != null)
                    hashCode = hashCode * 59 + this.FieldRect.GetHashCode();
                if (this.FieldType != null)
                    hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
