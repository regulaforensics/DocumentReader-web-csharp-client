/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ResultMRZDetector
    /// </summary>
    [DataContract(Name = "ResultMRZDetector")]
    public partial class ResultMRZDetector : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultMRZDetector" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResultMRZDetector() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultMRZDetector" /> class.
        /// </summary>
        /// <param name="mRZFormat">mRZFormat (required).</param>
        /// <param name="mRZRows">mRZRows (required).</param>
        /// <param name="mRZRowsNum">mRZRowsNum (required).</param>
        /// <param name="boundingQuadrangle">boundingQuadrangle (required).</param>
        public ResultMRZDetector(int mRZFormat = default(int), List<MRZRowsItem> mRZRows = default(List<MRZRowsItem>), int mRZRowsNum = default(int), List<decimal> boundingQuadrangle = default(List<decimal>))
        {
            this.MRZFormat = mRZFormat;
            // to ensure "mRZRows" is required (not null)
            if (mRZRows == null)
            {
                throw new ArgumentNullException("mRZRows is a required property for ResultMRZDetector and cannot be null");
            }
            this.MRZRows = mRZRows;
            this.MRZRowsNum = mRZRowsNum;
            // to ensure "boundingQuadrangle" is required (not null)
            if (boundingQuadrangle == null)
            {
                throw new ArgumentNullException("boundingQuadrangle is a required property for ResultMRZDetector and cannot be null");
            }
            this.BoundingQuadrangle = boundingQuadrangle;
        }

        /// <summary>
        /// Gets or Sets MRZFormat
        /// </summary>
        [DataMember(Name = "MRZFormat", IsRequired = true, EmitDefaultValue = true)]
        public int MRZFormat { get; set; }

        /// <summary>
        /// Gets or Sets MRZRows
        /// </summary>
        [DataMember(Name = "MRZRows", IsRequired = true, EmitDefaultValue = true)]
        public List<MRZRowsItem> MRZRows { get; set; }

        /// <summary>
        /// Gets or Sets MRZRowsNum
        /// </summary>
        [DataMember(Name = "MRZRowsNum", IsRequired = true, EmitDefaultValue = true)]
        public int MRZRowsNum { get; set; }

        /// <summary>
        /// Gets or Sets BoundingQuadrangle
        /// </summary>
        [DataMember(Name = "boundingQuadrangle", IsRequired = true, EmitDefaultValue = true)]
        public List<decimal> BoundingQuadrangle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultMRZDetector {\n");
            sb.Append("  MRZFormat: ").Append(MRZFormat).Append("\n");
            sb.Append("  MRZRows: ").Append(MRZRows).Append("\n");
            sb.Append("  MRZRowsNum: ").Append(MRZRowsNum).Append("\n");
            sb.Append("  BoundingQuadrangle: ").Append(BoundingQuadrangle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
