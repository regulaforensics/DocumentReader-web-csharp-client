// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ResultMRZDetector
    /// </summary>
    public partial class ResultMRZDetector : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultMRZDetector" /> class.
        /// </summary>
        /// <param name="mRZFormat">mRZFormat</param>
        /// <param name="mRZRows">mRZRows</param>
        /// <param name="mRZRowsNum">mRZRowsNum</param>
        /// <param name="boundingQuadrangle">boundingQuadrangle</param>
        [JsonConstructor]
        public ResultMRZDetector(int mRZFormat, List<MRZRowsItem> mRZRows, int mRZRowsNum, List<decimal> boundingQuadrangle)
        {
            MRZFormat = mRZFormat;
            MRZRows = mRZRows;
            MRZRowsNum = mRZRowsNum;
            BoundingQuadrangle = boundingQuadrangle;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets MRZFormat
        /// </summary>
        [JsonPropertyName("MRZFormat")]
        public int MRZFormat { get; set; }

        /// <summary>
        /// Gets or Sets MRZRows
        /// </summary>
        [JsonPropertyName("MRZRows")]
        public List<MRZRowsItem> MRZRows { get; set; }

        /// <summary>
        /// Gets or Sets MRZRowsNum
        /// </summary>
        [JsonPropertyName("MRZRowsNum")]
        public int MRZRowsNum { get; set; }

        /// <summary>
        /// Gets or Sets BoundingQuadrangle
        /// </summary>
        [JsonPropertyName("boundingQuadrangle")]
        public List<decimal> BoundingQuadrangle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultMRZDetector {\n");
            sb.Append("  MRZFormat: ").Append(MRZFormat).Append("\n");
            sb.Append("  MRZRows: ").Append(MRZRows).Append("\n");
            sb.Append("  MRZRowsNum: ").Append(MRZRowsNum).Append("\n");
            sb.Append("  BoundingQuadrangle: ").Append(BoundingQuadrangle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultMRZDetector" />
    /// </summary>
    public class ResultMRZDetectorJsonConverter : JsonConverter<ResultMRZDetector>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResultMRZDetector" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResultMRZDetector Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> mRZFormat = default;
            Option<List<MRZRowsItem>?> mRZRows = default;
            Option<int?> mRZRowsNum = default;
            Option<List<decimal>?> boundingQuadrangle = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "MRZFormat":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mRZFormat = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "MRZRows":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mRZRows = new Option<List<MRZRowsItem>?>(JsonSerializer.Deserialize<List<MRZRowsItem>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "MRZRowsNum":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mRZRowsNum = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "boundingQuadrangle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                boundingQuadrangle = new Option<List<decimal>?>(JsonSerializer.Deserialize<List<decimal>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!mRZFormat.IsSet)
                throw new ArgumentException("Property is required for class ResultMRZDetector.", nameof(mRZFormat));

            if (!mRZRows.IsSet)
                throw new ArgumentException("Property is required for class ResultMRZDetector.", nameof(mRZRows));

            if (!mRZRowsNum.IsSet)
                throw new ArgumentException("Property is required for class ResultMRZDetector.", nameof(mRZRowsNum));

            if (!boundingQuadrangle.IsSet)
                throw new ArgumentException("Property is required for class ResultMRZDetector.", nameof(boundingQuadrangle));

            if (mRZFormat.IsSet && mRZFormat.Value == null)
                throw new ArgumentNullException(nameof(mRZFormat), "Property is not nullable for class ResultMRZDetector.");

            if (mRZRows.IsSet && mRZRows.Value == null)
                throw new ArgumentNullException(nameof(mRZRows), "Property is not nullable for class ResultMRZDetector.");

            if (mRZRowsNum.IsSet && mRZRowsNum.Value == null)
                throw new ArgumentNullException(nameof(mRZRowsNum), "Property is not nullable for class ResultMRZDetector.");

            if (boundingQuadrangle.IsSet && boundingQuadrangle.Value == null)
                throw new ArgumentNullException(nameof(boundingQuadrangle), "Property is not nullable for class ResultMRZDetector.");

            return new ResultMRZDetector(mRZFormat.Value!.Value!, mRZRows.Value!, mRZRowsNum.Value!.Value!, boundingQuadrangle.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ResultMRZDetector" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultMRZDetector"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResultMRZDetector resultMRZDetector, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resultMRZDetector, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResultMRZDetector" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultMRZDetector"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResultMRZDetector resultMRZDetector, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resultMRZDetector.MRZRows == null)
                throw new ArgumentNullException(nameof(resultMRZDetector.MRZRows), "Property is required for class ResultMRZDetector.");

            if (resultMRZDetector.BoundingQuadrangle == null)
                throw new ArgumentNullException(nameof(resultMRZDetector.BoundingQuadrangle), "Property is required for class ResultMRZDetector.");

            writer.WriteNumber("MRZFormat", resultMRZDetector.MRZFormat);

            writer.WritePropertyName("MRZRows");
            JsonSerializer.Serialize(writer, resultMRZDetector.MRZRows, jsonSerializerOptions);
            writer.WriteNumber("MRZRowsNum", resultMRZDetector.MRZRowsNum);

            writer.WritePropertyName("boundingQuadrangle");
            JsonSerializer.Serialize(writer, resultMRZDetector.BoundingQuadrangle, jsonSerializerOptions);
        }
    }
}
