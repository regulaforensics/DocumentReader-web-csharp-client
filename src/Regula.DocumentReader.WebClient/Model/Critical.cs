// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Enumeration contains identifiers determining the criticality of the security element
    /// </summary>
    /// <value>Enumeration contains identifiers determining the criticality of the security element</value>
    public enum Critical
    {
        /// <summary>
        /// Enum NOT_CRITICAL for value: 0
        /// </summary>
        NOT_CRITICAL = 0,

        /// <summary>
        /// Enum CRITICAL for value: 1
        /// </summary>
        CRITICAL = 1
    }

    /// <summary>
    /// Converts <see cref="Critical"/> to and from the JSON value
    /// </summary>
    public static class CriticalValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Critical"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Critical FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return Critical.NOT_CRITICAL;

            if (value.Equals((1).ToString()))
                return Critical.CRITICAL;

            throw new NotImplementedException($"Could not convert value to type Critical: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Critical"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Critical? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return Critical.NOT_CRITICAL;

            if (value.Equals((1).ToString()))
                return Critical.CRITICAL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Critical"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(Critical value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Critical"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CriticalJsonConverter : JsonConverter<Critical>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Critical Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Critical? result = rawValue == null
                ? null
                : CriticalValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Critical to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="critical"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Critical critical, JsonSerializerOptions options)
        {
            writer.WriteStringValue(critical.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Critical"/>
    /// </summary>
    public class CriticalNullableJsonConverter : JsonConverter<Critical?>
    {
        /// <summary>
        /// Returns a Critical from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Critical? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Critical? result = rawValue == null
                ? null
                : CriticalValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="critical"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Critical? critical, JsonSerializerOptions options)
        {
            writer.WriteStringValue(critical?.ToString() ?? "null");
        }
    }
}
