// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// A search filter that can be applied if the \&quot;match+search\&quot; mode is enabled. May include limit, threshold, group_ids. If the group_ids are specified, the search is performed only in these groups. Find more information in the &lt;a href&#x3D;\&quot;https://dev.regulaforensics.com/FaceSDK-web-openapi/#tag/search/operation/search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;OpenAPI documentation&lt;/a&gt;.
    /// </summary>
    public partial class FaceApiSearch : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceApiSearch" /> class.
        /// </summary>
        /// <param name="limit">The maximum number of results to be returned.</param>
        /// <param name="threshold">The similarity threshold.</param>
        /// <param name="groupIds"> The groups where to conduct the search.</param>
        [JsonConstructor]
        public FaceApiSearch(Option<int?> limit = default, Option<float?> threshold = default, Option<List<int>?> groupIds = default)
        {
            LimitOption = limit;
            ThresholdOption = threshold;
            GroupIdsOption = groupIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Limit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LimitOption { get; private set; }

        /// <summary>
        /// The maximum number of results to be returned.
        /// </summary>
        /// <value>The maximum number of results to be returned.</value>
        [JsonPropertyName("limit")]
        public int? Limit { get { return this.LimitOption; } set { this.LimitOption = new(value); } }

        /// <summary>
        /// Used to track the state of Threshold
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> ThresholdOption { get; private set; }

        /// <summary>
        /// The similarity threshold.
        /// </summary>
        /// <value>The similarity threshold.</value>
        [JsonPropertyName("threshold")]
        public float? Threshold { get { return this.ThresholdOption; } set { this.ThresholdOption = new(value); } }

        /// <summary>
        /// Used to track the state of GroupIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> GroupIdsOption { get; private set; }

        /// <summary>
        ///  The groups where to conduct the search.
        /// </summary>
        /// <value> The groups where to conduct the search.</value>
        [JsonPropertyName("group_ids")]
        public List<int>? GroupIds { get { return this.GroupIdsOption; } set { this.GroupIdsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaceApiSearch {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  GroupIds: ").Append(GroupIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FaceApiSearch" />
    /// </summary>
    public class FaceApiSearchJsonConverter : JsonConverter<FaceApiSearch>
    {
        /// <summary>
        /// Deserializes json to <see cref="FaceApiSearch" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FaceApiSearch Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> limit = default;
            Option<float?> threshold = default;
            Option<List<int>?> groupIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "limit":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                limit = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "threshold":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threshold = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "group_ids":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                groupIds = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit), "Property is not nullable for class FaceApiSearch.");

            if (threshold.IsSet && threshold.Value == null)
                throw new ArgumentNullException(nameof(threshold), "Property is not nullable for class FaceApiSearch.");

            if (groupIds.IsSet && groupIds.Value == null)
                throw new ArgumentNullException(nameof(groupIds), "Property is not nullable for class FaceApiSearch.");

            return new FaceApiSearch(limit, threshold, groupIds);
        }

        /// <summary>
        /// Serializes a <see cref="FaceApiSearch" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="faceApiSearch"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FaceApiSearch faceApiSearch, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, faceApiSearch, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FaceApiSearch" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="faceApiSearch"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FaceApiSearch faceApiSearch, JsonSerializerOptions jsonSerializerOptions)
        {
            if (faceApiSearch.GroupIdsOption.IsSet && faceApiSearch.GroupIds == null)
                throw new ArgumentNullException(nameof(faceApiSearch.GroupIds), "Property is required for class FaceApiSearch.");

            if (faceApiSearch.LimitOption.IsSet)
                writer.WriteNumber("limit", faceApiSearch.LimitOption.Value!.Value);

            if (faceApiSearch.ThresholdOption.IsSet)
                writer.WriteNumber("threshold", faceApiSearch.ThresholdOption.Value!.Value);

            if (faceApiSearch.GroupIdsOption.IsSet)
            {
                writer.WritePropertyName("group_ids");
                JsonSerializer.Serialize(writer, faceApiSearch.GroupIds, jsonSerializerOptions);
            }
        }
    }
}
