// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to store information about the numeric field (4 bytes) that is a part of one of the informational data groups.
    /// </summary>
    public partial class TrfFtString : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrfFtString" /> class.
        /// </summary>
        /// <param name="data">Numeric value.</param>
        /// <param name="type">type</param>
        /// <param name="status">Result of logical analysis of compliance of the contents of the field with the requirements of the specification</param>
        /// <param name="format">Mask of format of text information (for example, «YYMMDD» for date of birth)</param>
        [JsonConstructor]
        public TrfFtString(string data, Option<int?> type = default, Option<int?> status = default, Option<string?> format = default)
        {
            Data = data;
            TypeOption = type;
            StatusOption = status;
            FormatOption = format;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Numeric value.
        /// </summary>
        /// <value>Numeric value.</value>
        [JsonPropertyName("Data")]
        public string Data { get; set; }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("Type")]
        public int? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StatusOption { get; private set; }

        /// <summary>
        /// Result of logical analysis of compliance of the contents of the field with the requirements of the specification
        /// </summary>
        /// <value>Result of logical analysis of compliance of the contents of the field with the requirements of the specification</value>
        [JsonPropertyName("Status")]
        public int? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Format
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormatOption { get; private set; }

        /// <summary>
        /// Mask of format of text information (for example, «YYMMDD» for date of birth)
        /// </summary>
        /// <value>Mask of format of text information (for example, «YYMMDD» for date of birth)</value>
        [JsonPropertyName("Format")]
        public string? Format { get { return this.FormatOption; } set { this.FormatOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrfFtString {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrfFtString" />
    /// </summary>
    public class TrfFtStringJsonConverter : JsonConverter<TrfFtString>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrfFtString" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrfFtString Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> data = default;
            Option<int?> type = default;
            Option<int?> status = default;
            Option<string?> format = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Data":
                            data = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Type":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                type = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Format":
                            format = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class TrfFtString.", nameof(data));

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class TrfFtString.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class TrfFtString.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class TrfFtString.");

            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format), "Property is not nullable for class TrfFtString.");

            return new TrfFtString(data.Value!, type, status, format);
        }

        /// <summary>
        /// Serializes a <see cref="TrfFtString" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trfFtString"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrfFtString trfFtString, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trfFtString, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrfFtString" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trfFtString"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrfFtString trfFtString, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trfFtString.Data == null)
                throw new ArgumentNullException(nameof(trfFtString.Data), "Property is required for class TrfFtString.");

            if (trfFtString.FormatOption.IsSet && trfFtString.Format == null)
                throw new ArgumentNullException(nameof(trfFtString.Format), "Property is required for class TrfFtString.");

            writer.WriteString("Data", trfFtString.Data);

            if (trfFtString.TypeOption.IsSet)
                writer.WriteNumber("Type", trfFtString.TypeOption.Value!.Value);

            if (trfFtString.StatusOption.IsSet)
                writer.WriteNumber("Status", trfFtString.StatusOption.Value!.Value);

            if (trfFtString.FormatOption.IsSet)
                writer.WriteString("Format", trfFtString.Format);
        }
    }
}
