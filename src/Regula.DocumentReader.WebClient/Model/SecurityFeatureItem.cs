// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// SecurityFeatureItem
    /// </summary>
    public partial class SecurityFeatureItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityFeatureItem" /> class.
        /// </summary>
        /// <param name="elementType">elementType</param>
        /// <param name="elementRect">elementRect</param>
        /// <param name="visibility">visibility</param>
        /// <param name="criticalFlag">criticalFlag</param>
        /// <param name="areaList">areaList</param>
        /// <param name="reserved2">reserved2</param>
        [JsonConstructor]
        public SecurityFeatureItem(SecurityFeatureType elementType, RectangleCoordinates elementRect, Visibility visibility, Critical criticalFlag, Option<AreaContainer?> areaList = default, Option<int?> reserved2 = default)
        {
            ElementType = elementType;
            ElementRect = elementRect;
            Visibility = visibility;
            CriticalFlag = criticalFlag;
            AreaListOption = areaList;
            Reserved2Option = reserved2;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ElementType
        /// </summary>
        [JsonPropertyName("ElementType")]
        public SecurityFeatureType ElementType { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [JsonPropertyName("Visibility")]
        public Visibility Visibility { get; set; }

        /// <summary>
        /// Gets or Sets CriticalFlag
        /// </summary>
        [JsonPropertyName("CriticalFlag")]
        public Critical CriticalFlag { get; set; }

        /// <summary>
        /// Gets or Sets ElementRect
        /// </summary>
        [JsonPropertyName("ElementRect")]
        public RectangleCoordinates ElementRect { get; set; }

        /// <summary>
        /// Used to track the state of AreaList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AreaContainer?> AreaListOption { get; private set; }

        /// <summary>
        /// Gets or Sets AreaList
        /// </summary>
        [JsonPropertyName("AreaList")]
        public AreaContainer? AreaList { get { return this.AreaListOption; } set { this.AreaListOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reserved2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> Reserved2Option { get; private set; }

        /// <summary>
        /// Gets or Sets Reserved2
        /// </summary>
        [JsonPropertyName("Reserved2")]
        public int? Reserved2 { get { return this.Reserved2Option; } set { this.Reserved2Option = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityFeatureItem {\n");
            sb.Append("  ElementType: ").Append(ElementType).Append("\n");
            sb.Append("  ElementRect: ").Append(ElementRect).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  CriticalFlag: ").Append(CriticalFlag).Append("\n");
            sb.Append("  AreaList: ").Append(AreaList).Append("\n");
            sb.Append("  Reserved2: ").Append(Reserved2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SecurityFeatureItem" />
    /// </summary>
    public class SecurityFeatureItemJsonConverter : JsonConverter<SecurityFeatureItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="SecurityFeatureItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SecurityFeatureItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<SecurityFeatureType?> elementType = default;
            Option<RectangleCoordinates?> elementRect = default;
            Option<Visibility?> visibility = default;
            Option<Critical?> criticalFlag = default;
            Option<AreaContainer?> areaList = default;
            Option<int?> reserved2 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ElementType":
                            string? elementTypeRawValue = utf8JsonReader.GetString();
                            if (elementTypeRawValue != null)
                                elementType = new Option<SecurityFeatureType?>(SecurityFeatureTypeValueConverter.FromStringOrDefault(elementTypeRawValue));
                            break;
                        case "ElementRect":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                elementRect = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Visibility":
                            string? visibilityRawValue = utf8JsonReader.GetString();
                            if (visibilityRawValue != null)
                                visibility = new Option<Visibility?>(VisibilityValueConverter.FromStringOrDefault(visibilityRawValue));
                            break;
                        case "CriticalFlag":
                            string? criticalFlagRawValue = utf8JsonReader.GetString();
                            if (criticalFlagRawValue != null)
                                criticalFlag = new Option<Critical?>(CriticalValueConverter.FromStringOrDefault(criticalFlagRawValue));
                            break;
                        case "AreaList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                areaList = new Option<AreaContainer?>(JsonSerializer.Deserialize<AreaContainer>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Reserved2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved2 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!elementType.IsSet)
                throw new ArgumentException("Property is required for class SecurityFeatureItem.", nameof(elementType));

            if (!elementRect.IsSet)
                throw new ArgumentException("Property is required for class SecurityFeatureItem.", nameof(elementRect));

            if (!visibility.IsSet)
                throw new ArgumentException("Property is required for class SecurityFeatureItem.", nameof(visibility));

            if (!criticalFlag.IsSet)
                throw new ArgumentException("Property is required for class SecurityFeatureItem.", nameof(criticalFlag));

            if (elementType.IsSet && elementType.Value == null)
                throw new ArgumentNullException(nameof(elementType), "Property is not nullable for class SecurityFeatureItem.");

            if (elementRect.IsSet && elementRect.Value == null)
                throw new ArgumentNullException(nameof(elementRect), "Property is not nullable for class SecurityFeatureItem.");

            if (visibility.IsSet && visibility.Value == null)
                throw new ArgumentNullException(nameof(visibility), "Property is not nullable for class SecurityFeatureItem.");

            if (criticalFlag.IsSet && criticalFlag.Value == null)
                throw new ArgumentNullException(nameof(criticalFlag), "Property is not nullable for class SecurityFeatureItem.");

            if (areaList.IsSet && areaList.Value == null)
                throw new ArgumentNullException(nameof(areaList), "Property is not nullable for class SecurityFeatureItem.");

            if (reserved2.IsSet && reserved2.Value == null)
                throw new ArgumentNullException(nameof(reserved2), "Property is not nullable for class SecurityFeatureItem.");

            return new SecurityFeatureItem(elementType.Value!.Value!, elementRect.Value!, visibility.Value!.Value!, criticalFlag.Value!.Value!, areaList, reserved2);
        }

        /// <summary>
        /// Serializes a <see cref="SecurityFeatureItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="securityFeatureItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SecurityFeatureItem securityFeatureItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, securityFeatureItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SecurityFeatureItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="securityFeatureItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SecurityFeatureItem securityFeatureItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (securityFeatureItem.ElementRect == null)
                throw new ArgumentNullException(nameof(securityFeatureItem.ElementRect), "Property is required for class SecurityFeatureItem.");

            if (securityFeatureItem.AreaListOption.IsSet && securityFeatureItem.AreaList == null)
                throw new ArgumentNullException(nameof(securityFeatureItem.AreaList), "Property is required for class SecurityFeatureItem.");

            var elementTypeRawValue = SecurityFeatureTypeValueConverter.ToJsonValue(securityFeatureItem.ElementType);
            writer.WriteNumber("ElementType", elementTypeRawValue);

            writer.WritePropertyName("ElementRect");
            JsonSerializer.Serialize(writer, securityFeatureItem.ElementRect, jsonSerializerOptions);
            var visibilityRawValue = VisibilityValueConverter.ToJsonValue(securityFeatureItem.Visibility);
            writer.WriteNumber("Visibility", visibilityRawValue);

            var criticalFlagRawValue = CriticalValueConverter.ToJsonValue(securityFeatureItem.CriticalFlag);
            writer.WriteNumber("CriticalFlag", criticalFlagRawValue);

            if (securityFeatureItem.AreaListOption.IsSet)
            {
                writer.WritePropertyName("AreaList");
                JsonSerializer.Serialize(writer, securityFeatureItem.AreaList, jsonSerializerOptions);
            }
            if (securityFeatureItem.Reserved2Option.IsSet)
                writer.WriteNumber("Reserved2", securityFeatureItem.Reserved2Option.Value!.Value);
        }
    }
}
