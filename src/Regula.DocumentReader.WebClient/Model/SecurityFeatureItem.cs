/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// SecurityFeatureItem
    /// </summary>
    [DataContract(Name = "SecurityFeatureItem")]
    public partial class SecurityFeatureItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ElementType
        /// </summary>
        [DataMember(Name = "ElementType", IsRequired = true, EmitDefaultValue = true)]
        public SecurityFeatureType ElementType { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name = "Visibility", IsRequired = true, EmitDefaultValue = true)]
        public Visibility Visibility { get; set; }

        /// <summary>
        /// Gets or Sets CriticalFlag
        /// </summary>
        [DataMember(Name = "CriticalFlag", IsRequired = true, EmitDefaultValue = true)]
        public Critical CriticalFlag { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityFeatureItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecurityFeatureItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityFeatureItem" /> class.
        /// </summary>
        /// <param name="elementType">elementType (required).</param>
        /// <param name="elementRect">elementRect (required).</param>
        /// <param name="visibility">visibility (required).</param>
        /// <param name="criticalFlag">criticalFlag (required).</param>
        /// <param name="areaList">areaList.</param>
        /// <param name="reserved2">reserved2.</param>
        public SecurityFeatureItem(SecurityFeatureType elementType = default(SecurityFeatureType), RectangleCoordinates elementRect = default(RectangleCoordinates), Visibility visibility = default(Visibility), Critical criticalFlag = default(Critical), AreaContainer areaList = default(AreaContainer), int reserved2 = default(int))
        {
            this.ElementType = elementType;
            // to ensure "elementRect" is required (not null)
            if (elementRect == null)
            {
                throw new ArgumentNullException("elementRect is a required property for SecurityFeatureItem and cannot be null");
            }
            this.ElementRect = elementRect;
            this.Visibility = visibility;
            this.CriticalFlag = criticalFlag;
            this.AreaList = areaList;
            this.Reserved2 = reserved2;
        }

        /// <summary>
        /// Gets or Sets ElementRect
        /// </summary>
        [DataMember(Name = "ElementRect", IsRequired = true, EmitDefaultValue = true)]
        public RectangleCoordinates ElementRect { get; set; }

        /// <summary>
        /// Gets or Sets AreaList
        /// </summary>
        [DataMember(Name = "AreaList", EmitDefaultValue = false)]
        public AreaContainer? AreaList { get; set; }

        /// <summary>
        /// Gets or Sets Reserved2
        /// </summary>
        [DataMember(Name = "Reserved2", EmitDefaultValue = false)]
        public int? Reserved2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityFeatureItem {\n");
            sb.Append("  ElementType: ").Append(ElementType).Append("\n");
            sb.Append("  ElementRect: ").Append(ElementRect).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  CriticalFlag: ").Append(CriticalFlag).Append("\n");
            sb.Append("  AreaList: ").Append(AreaList).Append("\n");
            sb.Append("  Reserved2: ").Append(Reserved2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
