// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ImagesFieldValue
    /// </summary>
    public partial class ImagesFieldValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesFieldValue" /> class.
        /// </summary>
        /// <param name="source">source</param>
        /// <param name="pageIndex">Page index of the image from input list</param>
        /// <param name="lightIndex">lightIndex</param>
        /// <param name="value">Base64 encoded image</param>
        /// <param name="originalValue">Base64 encoded image</param>
        /// <param name="originalPageIndex">Original page index</param>
        /// <param name="containerType">Same as Result type, but used for safe parsing of not-described values. See Result type. (default to 0)</param>
        /// <param name="fieldRect">fieldRect</param>
        /// <param name="rfidOrigin">rfidOrigin</param>
        [JsonConstructor]
        public ImagesFieldValue(Source source, int pageIndex, Light lightIndex, Option<string?> value = default, Option<string?> originalValue = default, Option<int?> originalPageIndex = default, int containerType = 0, Option<RectangleCoordinates?> fieldRect = default, Option<RfidOrigin?> rfidOrigin = default)
        {
            Source = source;
            PageIndex = pageIndex;
            LightIndex = lightIndex;
            ValueOption = value;
            OriginalValueOption = originalValue;
            OriginalPageIndexOption = originalPageIndex;
            ContainerType = containerType;
            FieldRectOption = fieldRect;
            RfidOriginOption = rfidOrigin;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [JsonPropertyName("source")]
        public Source Source { get; set; }

        /// <summary>
        /// Gets or Sets LightIndex
        /// </summary>
        [JsonPropertyName("lightIndex")]
        public Light LightIndex { get; set; }

        /// <summary>
        /// Page index of the image from input list
        /// </summary>
        /// <value>Page index of the image from input list</value>
        [JsonPropertyName("pageIndex")]
        public int PageIndex { get; set; }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// Base64 encoded image
        /// </summary>
        /// <value>Base64 encoded image</value>
        /* <example>Base64 encoded image</example> */
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of OriginalValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OriginalValueOption { get; private set; }

        /// <summary>
        /// Base64 encoded image
        /// </summary>
        /// <value>Base64 encoded image</value>
        /* <example>Base64 encoded image</example> */
        [JsonPropertyName("originalValue")]
        public string? OriginalValue { get { return this.OriginalValueOption; } set { this.OriginalValueOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of OriginalPageIndex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OriginalPageIndexOption { get; private set; }

        /// <summary>
        /// Original page index
        /// </summary>
        /// <value>Original page index</value>
        [JsonPropertyName("originalPageIndex")]
        public int? OriginalPageIndex { get { return this.OriginalPageIndexOption; } set { this.OriginalPageIndexOption = new Option<int?>(value); } }

        /// <summary>
        /// Same as Result type, but used for safe parsing of not-described values. See Result type.
        /// </summary>
        /// <value>Same as Result type, but used for safe parsing of not-described values. See Result type.</value>
        [JsonPropertyName("containerType")]
        public int ContainerType { get; set; }

        /// <summary>
        /// Used to track the state of FieldRect
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RectangleCoordinates?> FieldRectOption { get; private set; }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [JsonPropertyName("fieldRect")]
        public RectangleCoordinates? FieldRect { get { return this.FieldRectOption; } set { this.FieldRectOption = new Option<RectangleCoordinates?>(value); } }

        /// <summary>
        /// Used to track the state of RfidOrigin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RfidOrigin?> RfidOriginOption { get; private set; }

        /// <summary>
        /// Gets or Sets RfidOrigin
        /// </summary>
        [JsonPropertyName("rfidOrigin")]
        public RfidOrigin? RfidOrigin { get { return this.RfidOriginOption; } set { this.RfidOriginOption = new Option<RfidOrigin?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImagesFieldValue {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  LightIndex: ").Append(LightIndex).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  OriginalPageIndex: ").Append(OriginalPageIndex).Append("\n");
            sb.Append("  ContainerType: ").Append(ContainerType).Append("\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  RfidOrigin: ").Append(RfidOrigin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImagesFieldValue" />
    /// </summary>
    public class ImagesFieldValueJsonConverter : JsonConverter<ImagesFieldValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImagesFieldValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImagesFieldValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Source?> source = default;
            Option<int?> pageIndex = default;
            Option<Light?> lightIndex = default;
            Option<string?> value = default;
            Option<string?> originalValue = default;
            Option<int?> originalPageIndex = default;
            Option<int?> containerType = default;
            Option<RectangleCoordinates?> fieldRect = default;
            Option<RfidOrigin?> rfidOrigin = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "source":
                            string? sourceRawValue = utf8JsonReader.GetString();
                            if (sourceRawValue != null)
                                source = new Option<Source?>(SourceValueConverter.FromStringOrDefault(sourceRawValue));
                            break;
                        case "pageIndex":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pageIndex = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "lightIndex":
                            string? lightIndexRawValue = utf8JsonReader.GetString();
                            if (lightIndexRawValue != null)
                                lightIndex = new Option<Light?>(LightValueConverter.FromStringOrDefault(lightIndexRawValue));
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "originalValue":
                            originalValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "originalPageIndex":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originalPageIndex = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "containerType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                containerType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "fieldRect":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldRect = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "rfidOrigin":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rfidOrigin = new Option<RfidOrigin?>(JsonSerializer.Deserialize<RfidOrigin>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!source.IsSet)
                throw new ArgumentException("Property is required for class ImagesFieldValue.", nameof(source));

            if (!pageIndex.IsSet)
                throw new ArgumentException("Property is required for class ImagesFieldValue.", nameof(pageIndex));

            if (!lightIndex.IsSet)
                throw new ArgumentException("Property is required for class ImagesFieldValue.", nameof(lightIndex));

            if (!containerType.IsSet)
                throw new ArgumentException("Property is required for class ImagesFieldValue.", nameof(containerType));

            if (source.IsSet && source.Value == null)
                throw new ArgumentNullException(nameof(source), "Property is not nullable for class ImagesFieldValue.");

            if (pageIndex.IsSet && pageIndex.Value == null)
                throw new ArgumentNullException(nameof(pageIndex), "Property is not nullable for class ImagesFieldValue.");

            if (lightIndex.IsSet && lightIndex.Value == null)
                throw new ArgumentNullException(nameof(lightIndex), "Property is not nullable for class ImagesFieldValue.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class ImagesFieldValue.");

            if (originalValue.IsSet && originalValue.Value == null)
                throw new ArgumentNullException(nameof(originalValue), "Property is not nullable for class ImagesFieldValue.");

            if (originalPageIndex.IsSet && originalPageIndex.Value == null)
                throw new ArgumentNullException(nameof(originalPageIndex), "Property is not nullable for class ImagesFieldValue.");

            if (containerType.IsSet && containerType.Value == null)
                throw new ArgumentNullException(nameof(containerType), "Property is not nullable for class ImagesFieldValue.");

            if (fieldRect.IsSet && fieldRect.Value == null)
                throw new ArgumentNullException(nameof(fieldRect), "Property is not nullable for class ImagesFieldValue.");

            if (rfidOrigin.IsSet && rfidOrigin.Value == null)
                throw new ArgumentNullException(nameof(rfidOrigin), "Property is not nullable for class ImagesFieldValue.");

            return new ImagesFieldValue(source.Value!.Value!, pageIndex.Value!.Value!, lightIndex.Value!.Value!, value, originalValue, originalPageIndex, containerType.Value!.Value!, fieldRect, rfidOrigin);
        }

        /// <summary>
        /// Serializes a <see cref="ImagesFieldValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imagesFieldValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImagesFieldValue imagesFieldValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, imagesFieldValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImagesFieldValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imagesFieldValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImagesFieldValue imagesFieldValue, JsonSerializerOptions jsonSerializerOptions)
        {
            if (imagesFieldValue.ValueOption.IsSet && imagesFieldValue.Value == null)
                throw new ArgumentNullException(nameof(imagesFieldValue.Value), "Property is required for class ImagesFieldValue.");

            if (imagesFieldValue.OriginalValueOption.IsSet && imagesFieldValue.OriginalValue == null)
                throw new ArgumentNullException(nameof(imagesFieldValue.OriginalValue), "Property is required for class ImagesFieldValue.");

            if (imagesFieldValue.FieldRectOption.IsSet && imagesFieldValue.FieldRect == null)
                throw new ArgumentNullException(nameof(imagesFieldValue.FieldRect), "Property is required for class ImagesFieldValue.");

            if (imagesFieldValue.RfidOriginOption.IsSet && imagesFieldValue.RfidOrigin == null)
                throw new ArgumentNullException(nameof(imagesFieldValue.RfidOrigin), "Property is required for class ImagesFieldValue.");

            var sourceRawValue = SourceValueConverter.ToJsonValue(imagesFieldValue.Source);
            writer.WriteString("source", sourceRawValue);

            writer.WriteNumber("pageIndex", imagesFieldValue.PageIndex);

            var lightIndexRawValue = LightValueConverter.ToJsonValue(imagesFieldValue.LightIndex);
            writer.WriteNumber("lightIndex", lightIndexRawValue);

            if (imagesFieldValue.ValueOption.IsSet)
                writer.WriteString("value", imagesFieldValue.Value);

            if (imagesFieldValue.OriginalValueOption.IsSet)
                writer.WriteString("originalValue", imagesFieldValue.OriginalValue);

            if (imagesFieldValue.OriginalPageIndexOption.IsSet)
                writer.WriteNumber("originalPageIndex", imagesFieldValue.OriginalPageIndexOption.Value!.Value);

            writer.WriteNumber("containerType", imagesFieldValue.ContainerType);

            if (imagesFieldValue.FieldRectOption.IsSet)
            {
                writer.WritePropertyName("fieldRect");
                JsonSerializer.Serialize(writer, imagesFieldValue.FieldRect, jsonSerializerOptions);
            }
            if (imagesFieldValue.RfidOriginOption.IsSet)
            {
                writer.WritePropertyName("rfidOrigin");
                JsonSerializer.Serialize(writer, imagesFieldValue.RfidOrigin, jsonSerializerOptions);
            }
        }
    }
}
