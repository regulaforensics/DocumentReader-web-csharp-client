/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ImagesFieldValue
    /// </summary>
    [DataContract(Name = "ImagesFieldValue")]
    public partial class ImagesFieldValue : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public Source Source { get; set; }

        /// <summary>
        /// Gets or Sets LightIndex
        /// </summary>
        [DataMember(Name = "lightIndex", IsRequired = true, EmitDefaultValue = true)]
        public Light LightIndex { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesFieldValue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImagesFieldValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesFieldValue" /> class.
        /// </summary>
        /// <param name="source">source (required).</param>
        /// <param name="value">Base64 encoded image.</param>
        /// <param name="originalValue">Base64 encoded image.</param>
        /// <param name="originalPageIndex">Original page index.</param>
        /// <param name="pageIndex">Page index of the image from input list (required).</param>
        /// <param name="lightIndex">lightIndex (required).</param>
        /// <param name="containerType">Same as Result type, but used for safe parsing of not-described values. See Result type. (required) (default to 0).</param>
        /// <param name="fieldRect">fieldRect.</param>
        /// <param name="rfidOrigin">rfidOrigin.</param>
        public ImagesFieldValue(Source source = default(Source), string value = default(string), string originalValue = default(string), int originalPageIndex = default(int), int pageIndex = default(int), Light lightIndex = default(Light), int containerType = 0, RectangleCoordinates fieldRect = default(RectangleCoordinates), RfidOrigin rfidOrigin = default(RfidOrigin))
        {
            this.Source = source;
            this.PageIndex = pageIndex;
            this.LightIndex = lightIndex;
            this.ContainerType = containerType;
            this.Value = value;
            this.OriginalValue = originalValue;
            this.OriginalPageIndex = originalPageIndex;
            this.FieldRect = fieldRect;
            this.RfidOrigin = rfidOrigin;
        }

        /// <summary>
        /// Base64 encoded image
        /// </summary>
        /// <value>Base64 encoded image</value>
        /*
        <example>Base64 encoded image</example>
        */
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string? Value { get; set; }

        /// <summary>
        /// Base64 encoded image
        /// </summary>
        /// <value>Base64 encoded image</value>
        /*
        <example>Base64 encoded image</example>
        */
        [DataMember(Name = "originalValue", EmitDefaultValue = false)]
        public string? OriginalValue { get; set; }

        /// <summary>
        /// Original page index
        /// </summary>
        /// <value>Original page index</value>
        [DataMember(Name = "originalPageIndex", EmitDefaultValue = false)]
        public int? OriginalPageIndex { get; set; }

        /// <summary>
        /// Page index of the image from input list
        /// </summary>
        /// <value>Page index of the image from input list</value>
        [DataMember(Name = "pageIndex", IsRequired = true, EmitDefaultValue = true)]
        public int PageIndex { get; set; }

        /// <summary>
        /// Same as Result type, but used for safe parsing of not-described values. See Result type.
        /// </summary>
        /// <value>Same as Result type, but used for safe parsing of not-described values. See Result type.</value>
        [DataMember(Name = "containerType", IsRequired = true, EmitDefaultValue = true)]
        public int ContainerType { get; set; }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [DataMember(Name = "fieldRect", EmitDefaultValue = false)]
        public RectangleCoordinates? FieldRect { get; set; }

        /// <summary>
        /// Gets or Sets RfidOrigin
        /// </summary>
        [DataMember(Name = "rfidOrigin", EmitDefaultValue = false)]
        public RfidOrigin? RfidOrigin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImagesFieldValue {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  OriginalPageIndex: ").Append(OriginalPageIndex).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  LightIndex: ").Append(LightIndex).Append("\n");
            sb.Append("  ContainerType: ").Append(ContainerType).Append("\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  RfidOrigin: ").Append(RfidOrigin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
