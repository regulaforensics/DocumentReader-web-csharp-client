/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// GlaresCheckParams
    /// </summary>
    [DataContract]
    public partial class GlaresCheckParams :  IEquatable<GlaresCheckParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlaresCheckParams" /> class.
        /// </summary>
        /// <param name="imgMarginPart">Margin from the edges of the image. 0.35 &#x3D; 35%.</param>
        /// <param name="maxGlaringPart">The maximum allowable part of the area occupied by the glare. The same: 0.06 &#x3D; 6%.</param>
        public GlaresCheckParams(float imgMarginPart = default(float), float maxGlaringPart = default(float))
        {
            this.ImgMarginPart = imgMarginPart;
            this.MaxGlaringPart = maxGlaringPart;
        }
        
        /// <summary>
        /// Margin from the edges of the image. 0.35 &#x3D; 35%
        /// </summary>
        /// <value>Margin from the edges of the image. 0.35 &#x3D; 35%</value>
        [DataMember(Name="imgMarginPart", EmitDefaultValue=false)]
        public float ImgMarginPart { get; set; }

        /// <summary>
        /// The maximum allowable part of the area occupied by the glare. The same: 0.06 &#x3D; 6%
        /// </summary>
        /// <value>The maximum allowable part of the area occupied by the glare. The same: 0.06 &#x3D; 6%</value>
        [DataMember(Name="maxGlaringPart", EmitDefaultValue=false)]
        public float MaxGlaringPart { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlaresCheckParams {\n");
            sb.Append("  ImgMarginPart: ").Append(ImgMarginPart).Append("\n");
            sb.Append("  MaxGlaringPart: ").Append(MaxGlaringPart).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlaresCheckParams);
        }

        /// <summary>
        /// Returns true if GlaresCheckParams instances are equal
        /// </summary>
        /// <param name="input">Instance of GlaresCheckParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlaresCheckParams input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ImgMarginPart == input.ImgMarginPart ||
                    (this.ImgMarginPart != null &&
                    this.ImgMarginPart.Equals(input.ImgMarginPart))
                ) && 
                (
                    this.MaxGlaringPart == input.MaxGlaringPart ||
                    (this.MaxGlaringPart != null &&
                    this.MaxGlaringPart.Equals(input.MaxGlaringPart))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImgMarginPart != null)
                    hashCode = hashCode * 59 + this.ImgMarginPart.GetHashCode();
                if (this.MaxGlaringPart != null)
                    hashCode = hashCode * 59 + this.MaxGlaringPart.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
