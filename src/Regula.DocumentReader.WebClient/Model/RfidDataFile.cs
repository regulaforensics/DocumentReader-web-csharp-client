// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the contents of a single file of the LDS of electronic document and the analysis of its contents within the context of the communication session with electronic document
    /// </summary>
    public partial class RfidDataFile : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidDataFile" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="readingStatus">readingStatus</param>
        /// <param name="fileID">File identifier. Each byte of FileID represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 01 1E)</param>
        /// <param name="fileData">fileData</param>
        /// <param name="readingTime">Time of reading, milliseconds</param>
        /// <param name="pAStatus">pAStatus</param>
        /// <param name="notifications">List of remarks arisen when reading data from the memory of the chip and analysing their ASN.1-structure.</param>
        /// <param name="docFieldsText">List of document text fields formed on the basis of the file contents</param>
        /// <param name="docFieldsGraphics">List of document graphic fields formed on the basis of the file contents</param>
        /// <param name="docFieldsOriginals">List of the original binary representation of graphic document fields formed on the basis of the file contents</param>
        /// <param name="parsedData">parsedData</param>
        /// <param name="securityObjectCertificates">securityObjectCertificates</param>
        [JsonConstructor]
        public RfidDataFile(RfidDataFileType type, RFIDErrorCodes readingStatus, Option<string?> fileID = default, Option<TrfFtBytes?> fileData = default, Option<decimal?> readingTime = default, Option<RFIDErrorCodes?> pAStatus = default, Option<List<ParsingNotificationCodes>?> notifications = default, Option<List<TextFieldType>?> docFieldsText = default, Option<List<GraphicFieldType>?> docFieldsGraphics = default, Option<List<GraphicFieldType>?> docFieldsOriginals = default, Option<ParsedData?> parsedData = default, Option<SecurityObjectCertificates?> securityObjectCertificates = default)
        {
            Type = type;
            ReadingStatus = readingStatus;
            FileIDOption = fileID;
            FileDataOption = fileData;
            ReadingTimeOption = readingTime;
            PAStatusOption = pAStatus;
            NotificationsOption = notifications;
            DocFieldsTextOption = docFieldsText;
            DocFieldsGraphicsOption = docFieldsGraphics;
            DocFieldsOriginalsOption = docFieldsOriginals;
            ParsedDataOption = parsedData;
            SecurityObjectCertificatesOption = securityObjectCertificates;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("Type")]
        public RfidDataFileType Type { get; set; }

        /// <summary>
        /// Gets or Sets ReadingStatus
        /// </summary>
        [JsonPropertyName("ReadingStatus")]
        public RFIDErrorCodes ReadingStatus { get; set; }

        /// <summary>
        /// Used to track the state of PAStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RFIDErrorCodes?> PAStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets PAStatus
        /// </summary>
        [JsonPropertyName("PA_Status")]
        public RFIDErrorCodes? PAStatus { get { return this.PAStatusOption; } set { this.PAStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileIDOption { get; private set; }

        /// <summary>
        /// File identifier. Each byte of FileID represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 01 1E)
        /// </summary>
        /// <value>File identifier. Each byte of FileID represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 01 1E)</value>
        [JsonPropertyName("FileID")]
        public string? FileID { get { return this.FileIDOption; } set { this.FileIDOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TrfFtBytes?> FileDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileData
        /// </summary>
        [JsonPropertyName("FileData")]
        public TrfFtBytes? FileData { get { return this.FileDataOption; } set { this.FileDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReadingTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ReadingTimeOption { get; private set; }

        /// <summary>
        /// Time of reading, milliseconds
        /// </summary>
        /// <value>Time of reading, milliseconds</value>
        [JsonPropertyName("ReadingTime")]
        public decimal? ReadingTime { get { return this.ReadingTimeOption; } set { this.ReadingTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notifications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ParsingNotificationCodes>?> NotificationsOption { get; private set; }

        /// <summary>
        /// List of remarks arisen when reading data from the memory of the chip and analysing their ASN.1-structure.
        /// </summary>
        /// <value>List of remarks arisen when reading data from the memory of the chip and analysing their ASN.1-structure.</value>
        [JsonPropertyName("Notifications")]
        public List<ParsingNotificationCodes>? Notifications { get { return this.NotificationsOption; } set { this.NotificationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of DocFieldsText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<TextFieldType>?> DocFieldsTextOption { get; private set; }

        /// <summary>
        /// List of document text fields formed on the basis of the file contents
        /// </summary>
        /// <value>List of document text fields formed on the basis of the file contents</value>
        [JsonPropertyName("DocFields_Text")]
        public List<TextFieldType>? DocFieldsText { get { return this.DocFieldsTextOption; } set { this.DocFieldsTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of DocFieldsGraphics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GraphicFieldType>?> DocFieldsGraphicsOption { get; private set; }

        /// <summary>
        /// List of document graphic fields formed on the basis of the file contents
        /// </summary>
        /// <value>List of document graphic fields formed on the basis of the file contents</value>
        [JsonPropertyName("DocFields_Graphics")]
        public List<GraphicFieldType>? DocFieldsGraphics { get { return this.DocFieldsGraphicsOption; } set { this.DocFieldsGraphicsOption = new(value); } }

        /// <summary>
        /// Used to track the state of DocFieldsOriginals
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GraphicFieldType>?> DocFieldsOriginalsOption { get; private set; }

        /// <summary>
        /// List of the original binary representation of graphic document fields formed on the basis of the file contents
        /// </summary>
        /// <value>List of the original binary representation of graphic document fields formed on the basis of the file contents</value>
        [JsonPropertyName("DocFields_Originals")]
        public List<GraphicFieldType>? DocFieldsOriginals { get { return this.DocFieldsOriginalsOption; } set { this.DocFieldsOriginalsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParsedData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ParsedData?> ParsedDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParsedData
        /// </summary>
        [JsonPropertyName("ParsedData")]
        public ParsedData? ParsedData { get { return this.ParsedDataOption; } set { this.ParsedDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of SecurityObjectCertificates
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SecurityObjectCertificates?> SecurityObjectCertificatesOption { get; private set; }

        /// <summary>
        /// Gets or Sets SecurityObjectCertificates
        /// </summary>
        [JsonPropertyName("SecurityObject_Certificates")]
        public SecurityObjectCertificates? SecurityObjectCertificates { get { return this.SecurityObjectCertificatesOption; } set { this.SecurityObjectCertificatesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidDataFile {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ReadingStatus: ").Append(ReadingStatus).Append("\n");
            sb.Append("  FileID: ").Append(FileID).Append("\n");
            sb.Append("  FileData: ").Append(FileData).Append("\n");
            sb.Append("  ReadingTime: ").Append(ReadingTime).Append("\n");
            sb.Append("  PAStatus: ").Append(PAStatus).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  DocFieldsText: ").Append(DocFieldsText).Append("\n");
            sb.Append("  DocFieldsGraphics: ").Append(DocFieldsGraphics).Append("\n");
            sb.Append("  DocFieldsOriginals: ").Append(DocFieldsOriginals).Append("\n");
            sb.Append("  ParsedData: ").Append(ParsedData).Append("\n");
            sb.Append("  SecurityObjectCertificates: ").Append(SecurityObjectCertificates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidDataFile" />
    /// </summary>
    public class RfidDataFileJsonConverter : JsonConverter<RfidDataFile>
    {
        /// <summary>
        /// Deserializes json to <see cref="RfidDataFile" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RfidDataFile Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RfidDataFileType?> type = default;
            Option<RFIDErrorCodes?> readingStatus = default;
            Option<string?> fileID = default;
            Option<TrfFtBytes?> fileData = default;
            Option<decimal?> readingTime = default;
            Option<RFIDErrorCodes?> pAStatus = default;
            Option<List<ParsingNotificationCodes>?> notifications = default;
            Option<List<TextFieldType>?> docFieldsText = default;
            Option<List<GraphicFieldType>?> docFieldsGraphics = default;
            Option<List<GraphicFieldType>?> docFieldsOriginals = default;
            Option<ParsedData?> parsedData = default;
            Option<SecurityObjectCertificates?> securityObjectCertificates = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<RfidDataFileType?>(RfidDataFileTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "ReadingStatus":
                            string? readingStatusRawValue = utf8JsonReader.GetString();
                            if (readingStatusRawValue != null)
                                readingStatus = new Option<RFIDErrorCodes?>(RFIDErrorCodesValueConverter.FromStringOrDefault(readingStatusRawValue));
                            break;
                        case "FileID":
                            fileID = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "FileData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fileData = new Option<TrfFtBytes?>(JsonSerializer.Deserialize<TrfFtBytes>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ReadingTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                readingTime = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "PA_Status":
                            string? pAStatusRawValue = utf8JsonReader.GetString();
                            if (pAStatusRawValue != null)
                                pAStatus = new Option<RFIDErrorCodes?>(RFIDErrorCodesValueConverter.FromStringOrDefault(pAStatusRawValue));
                            break;
                        case "Notifications":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                notifications = new Option<List<ParsingNotificationCodes>?>(JsonSerializer.Deserialize<List<ParsingNotificationCodes>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "DocFields_Text":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                docFieldsText = new Option<List<TextFieldType>?>(JsonSerializer.Deserialize<List<TextFieldType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "DocFields_Graphics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                docFieldsGraphics = new Option<List<GraphicFieldType>?>(JsonSerializer.Deserialize<List<GraphicFieldType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "DocFields_Originals":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                docFieldsOriginals = new Option<List<GraphicFieldType>?>(JsonSerializer.Deserialize<List<GraphicFieldType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ParsedData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                parsedData = new Option<ParsedData?>(JsonSerializer.Deserialize<ParsedData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "SecurityObject_Certificates":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                securityObjectCertificates = new Option<SecurityObjectCertificates?>(JsonSerializer.Deserialize<SecurityObjectCertificates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class RfidDataFile.", nameof(type));

            if (!readingStatus.IsSet)
                throw new ArgumentException("Property is required for class RfidDataFile.", nameof(readingStatus));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class RfidDataFile.");

            if (readingStatus.IsSet && readingStatus.Value == null)
                throw new ArgumentNullException(nameof(readingStatus), "Property is not nullable for class RfidDataFile.");

            if (fileID.IsSet && fileID.Value == null)
                throw new ArgumentNullException(nameof(fileID), "Property is not nullable for class RfidDataFile.");

            if (fileData.IsSet && fileData.Value == null)
                throw new ArgumentNullException(nameof(fileData), "Property is not nullable for class RfidDataFile.");

            if (readingTime.IsSet && readingTime.Value == null)
                throw new ArgumentNullException(nameof(readingTime), "Property is not nullable for class RfidDataFile.");

            if (pAStatus.IsSet && pAStatus.Value == null)
                throw new ArgumentNullException(nameof(pAStatus), "Property is not nullable for class RfidDataFile.");

            if (notifications.IsSet && notifications.Value == null)
                throw new ArgumentNullException(nameof(notifications), "Property is not nullable for class RfidDataFile.");

            if (docFieldsText.IsSet && docFieldsText.Value == null)
                throw new ArgumentNullException(nameof(docFieldsText), "Property is not nullable for class RfidDataFile.");

            if (docFieldsGraphics.IsSet && docFieldsGraphics.Value == null)
                throw new ArgumentNullException(nameof(docFieldsGraphics), "Property is not nullable for class RfidDataFile.");

            if (docFieldsOriginals.IsSet && docFieldsOriginals.Value == null)
                throw new ArgumentNullException(nameof(docFieldsOriginals), "Property is not nullable for class RfidDataFile.");

            if (parsedData.IsSet && parsedData.Value == null)
                throw new ArgumentNullException(nameof(parsedData), "Property is not nullable for class RfidDataFile.");

            if (securityObjectCertificates.IsSet && securityObjectCertificates.Value == null)
                throw new ArgumentNullException(nameof(securityObjectCertificates), "Property is not nullable for class RfidDataFile.");

            return new RfidDataFile(type.Value!.Value!, readingStatus.Value!.Value!, fileID, fileData, readingTime, pAStatus, notifications, docFieldsText, docFieldsGraphics, docFieldsOriginals, parsedData, securityObjectCertificates);
        }

        /// <summary>
        /// Serializes a <see cref="RfidDataFile" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidDataFile"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RfidDataFile rfidDataFile, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rfidDataFile, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RfidDataFile" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidDataFile"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RfidDataFile rfidDataFile, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rfidDataFile.FileIDOption.IsSet && rfidDataFile.FileID == null)
                throw new ArgumentNullException(nameof(rfidDataFile.FileID), "Property is required for class RfidDataFile.");

            if (rfidDataFile.FileDataOption.IsSet && rfidDataFile.FileData == null)
                throw new ArgumentNullException(nameof(rfidDataFile.FileData), "Property is required for class RfidDataFile.");

            if (rfidDataFile.NotificationsOption.IsSet && rfidDataFile.Notifications == null)
                throw new ArgumentNullException(nameof(rfidDataFile.Notifications), "Property is required for class RfidDataFile.");

            if (rfidDataFile.DocFieldsTextOption.IsSet && rfidDataFile.DocFieldsText == null)
                throw new ArgumentNullException(nameof(rfidDataFile.DocFieldsText), "Property is required for class RfidDataFile.");

            if (rfidDataFile.DocFieldsGraphicsOption.IsSet && rfidDataFile.DocFieldsGraphics == null)
                throw new ArgumentNullException(nameof(rfidDataFile.DocFieldsGraphics), "Property is required for class RfidDataFile.");

            if (rfidDataFile.DocFieldsOriginalsOption.IsSet && rfidDataFile.DocFieldsOriginals == null)
                throw new ArgumentNullException(nameof(rfidDataFile.DocFieldsOriginals), "Property is required for class RfidDataFile.");

            if (rfidDataFile.ParsedDataOption.IsSet && rfidDataFile.ParsedData == null)
                throw new ArgumentNullException(nameof(rfidDataFile.ParsedData), "Property is required for class RfidDataFile.");

            if (rfidDataFile.SecurityObjectCertificatesOption.IsSet && rfidDataFile.SecurityObjectCertificates == null)
                throw new ArgumentNullException(nameof(rfidDataFile.SecurityObjectCertificates), "Property is required for class RfidDataFile.");

            var typeRawValue = RfidDataFileTypeValueConverter.ToJsonValue(rfidDataFile.Type);
            writer.WriteNumber("Type", typeRawValue);

            var readingStatusRawValue = RFIDErrorCodesValueConverter.ToJsonValue(rfidDataFile.ReadingStatus);
            writer.WriteNumber("ReadingStatus", readingStatusRawValue);

            if (rfidDataFile.FileIDOption.IsSet)
                writer.WriteString("FileID", rfidDataFile.FileID);

            if (rfidDataFile.FileDataOption.IsSet)
            {
                writer.WritePropertyName("FileData");
                JsonSerializer.Serialize(writer, rfidDataFile.FileData, jsonSerializerOptions);
            }
            if (rfidDataFile.ReadingTimeOption.IsSet)
                writer.WriteNumber("ReadingTime", rfidDataFile.ReadingTimeOption.Value!.Value);

            if (rfidDataFile.PAStatusOption.IsSet)
            {
                var pAStatusRawValue = RFIDErrorCodesValueConverter.ToJsonValue(rfidDataFile.PAStatus!.Value);
                writer.WriteNumber("PA_Status", pAStatusRawValue);
            }
            if (rfidDataFile.NotificationsOption.IsSet)
            {
                writer.WritePropertyName("Notifications");
                JsonSerializer.Serialize(writer, rfidDataFile.Notifications, jsonSerializerOptions);
            }
            if (rfidDataFile.DocFieldsTextOption.IsSet)
            {
                writer.WritePropertyName("DocFields_Text");
                JsonSerializer.Serialize(writer, rfidDataFile.DocFieldsText, jsonSerializerOptions);
            }
            if (rfidDataFile.DocFieldsGraphicsOption.IsSet)
            {
                writer.WritePropertyName("DocFields_Graphics");
                JsonSerializer.Serialize(writer, rfidDataFile.DocFieldsGraphics, jsonSerializerOptions);
            }
            if (rfidDataFile.DocFieldsOriginalsOption.IsSet)
            {
                writer.WritePropertyName("DocFields_Originals");
                JsonSerializer.Serialize(writer, rfidDataFile.DocFieldsOriginals, jsonSerializerOptions);
            }
            if (rfidDataFile.ParsedDataOption.IsSet)
            {
                writer.WritePropertyName("ParsedData");
                JsonSerializer.Serialize(writer, rfidDataFile.ParsedData, jsonSerializerOptions);
            }
            if (rfidDataFile.SecurityObjectCertificatesOption.IsSet)
            {
                writer.WritePropertyName("SecurityObject_Certificates");
                JsonSerializer.Serialize(writer, rfidDataFile.SecurityObjectCertificates, jsonSerializerOptions);
            }
        }
    }
}
