/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the contents of a single file of the LDS of electronic document and the analysis of its contents within the context of the communication session with electronic document
    /// </summary>
    [DataContract]
    public partial class RfidDataFile :  IEquatable<RfidDataFile>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public RfidDataFileType Type { get; set; }
        /// <summary>
        /// Gets or Sets ReadingStatus
        /// </summary>
        [DataMember(Name="ReadingStatus", EmitDefaultValue=true)]
        public RFIDErrorCodes ReadingStatus { get; set; }
        /// <summary>
        /// Gets or Sets PAStatus
        /// </summary>
        [DataMember(Name="PA_Status", EmitDefaultValue=true)]
        public RFIDErrorCodes PAStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidDataFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidDataFile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidDataFile" /> class.
        /// </summary>
        /// <param name="fileID">File identifier. Each byte of FileID represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 01 1E).</param>
        /// <param name="type">type (required).</param>
        /// <param name="fileData">fileData.</param>
        /// <param name="readingStatus">readingStatus (required).</param>
        /// <param name="readingTime">Time of reading, milliseconds (required).</param>
        /// <param name="pAStatus">pAStatus (required).</param>
        /// <param name="notifications">List of remarks arisen when reading data from the memory of the chip and analysing their ASN.1-structure. (required).</param>
        /// <param name="docFieldsText">List of document text fields formed on the basis of the file contents (required).</param>
        /// <param name="docFieldsGraphics">List of document graphic fields formed on the basis of the file contents (required).</param>
        /// <param name="docFieldsOriginals">List of the original binary representation of graphic document fields formed on the basis of the file contents (required).</param>
        public RfidDataFile(string fileID = default(string), RfidDataFileType type = default(RfidDataFileType), TrfFtBytes fileData = default(TrfFtBytes), RFIDErrorCodes readingStatus = default(RFIDErrorCodes), decimal readingTime = default(decimal), RFIDErrorCodes pAStatus = default(RFIDErrorCodes), List<ParsingErrorCodes> notifications = default(List<ParsingErrorCodes>), List<int> docFieldsText = default(List<int>), List<int> docFieldsGraphics = default(List<int>), List<int> docFieldsOriginals = default(List<int>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for RfidDataFile and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            // to ensure "readingStatus" is required (not null)
            if (readingStatus == null)
            {
                throw new InvalidDataException("readingStatus is a required property for RfidDataFile and cannot be null");
            }
            else
            {
                this.ReadingStatus = readingStatus;
            }
            
            // to ensure "readingTime" is required (not null)
            if (readingTime == null)
            {
                throw new InvalidDataException("readingTime is a required property for RfidDataFile and cannot be null");
            }
            else
            {
                this.ReadingTime = readingTime;
            }
            
            // to ensure "pAStatus" is required (not null)
            if (pAStatus == null)
            {
                throw new InvalidDataException("pAStatus is a required property for RfidDataFile and cannot be null");
            }
            else
            {
                this.PAStatus = pAStatus;
            }
            
            // to ensure "notifications" is required (not null)
            if (notifications == null)
            {
                throw new InvalidDataException("notifications is a required property for RfidDataFile and cannot be null");
            }
            else
            {
                this.Notifications = notifications;
            }
            
            // to ensure "docFieldsText" is required (not null)
            if (docFieldsText == null)
            {
                throw new InvalidDataException("docFieldsText is a required property for RfidDataFile and cannot be null");
            }
            else
            {
                this.DocFieldsText = docFieldsText;
            }
            
            // to ensure "docFieldsGraphics" is required (not null)
            if (docFieldsGraphics == null)
            {
                throw new InvalidDataException("docFieldsGraphics is a required property for RfidDataFile and cannot be null");
            }
            else
            {
                this.DocFieldsGraphics = docFieldsGraphics;
            }
            
            // to ensure "docFieldsOriginals" is required (not null)
            if (docFieldsOriginals == null)
            {
                throw new InvalidDataException("docFieldsOriginals is a required property for RfidDataFile and cannot be null");
            }
            else
            {
                this.DocFieldsOriginals = docFieldsOriginals;
            }
            
            this.FileID = fileID;
            this.FileData = fileData;
        }
        
        /// <summary>
        /// File identifier. Each byte of FileID represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 01 1E)
        /// </summary>
        /// <value>File identifier. Each byte of FileID represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 01 1E)</value>
        [DataMember(Name="FileID", EmitDefaultValue=false)]
        public string FileID { get; set; }


        /// <summary>
        /// Gets or Sets FileData
        /// </summary>
        [DataMember(Name="FileData", EmitDefaultValue=false)]
        public TrfFtBytes FileData { get; set; }


        /// <summary>
        /// Time of reading, milliseconds
        /// </summary>
        /// <value>Time of reading, milliseconds</value>
        [DataMember(Name="ReadingTime", EmitDefaultValue=true)]
        public decimal ReadingTime { get; set; }


        /// <summary>
        /// List of remarks arisen when reading data from the memory of the chip and analysing their ASN.1-structure.
        /// </summary>
        /// <value>List of remarks arisen when reading data from the memory of the chip and analysing their ASN.1-structure.</value>
        [DataMember(Name="Notifications", EmitDefaultValue=true)]
        public List<ParsingErrorCodes> Notifications { get; set; }

        /// <summary>
        /// List of document text fields formed on the basis of the file contents
        /// </summary>
        /// <value>List of document text fields formed on the basis of the file contents</value>
        [DataMember(Name="DocFields_Text", EmitDefaultValue=true)]
        public List<int> DocFieldsText { get; set; }

        /// <summary>
        /// List of document graphic fields formed on the basis of the file contents
        /// </summary>
        /// <value>List of document graphic fields formed on the basis of the file contents</value>
        [DataMember(Name="DocFields_Graphics", EmitDefaultValue=true)]
        public List<int> DocFieldsGraphics { get; set; }

        /// <summary>
        /// List of the original binary representation of graphic document fields formed on the basis of the file contents
        /// </summary>
        /// <value>List of the original binary representation of graphic document fields formed on the basis of the file contents</value>
        [DataMember(Name="DocFields_Originals", EmitDefaultValue=true)]
        public List<int> DocFieldsOriginals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RfidDataFile {\n");
            sb.Append("  FileID: ").Append(FileID).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FileData: ").Append(FileData).Append("\n");
            sb.Append("  ReadingStatus: ").Append(ReadingStatus).Append("\n");
            sb.Append("  ReadingTime: ").Append(ReadingTime).Append("\n");
            sb.Append("  PAStatus: ").Append(PAStatus).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  DocFieldsText: ").Append(DocFieldsText).Append("\n");
            sb.Append("  DocFieldsGraphics: ").Append(DocFieldsGraphics).Append("\n");
            sb.Append("  DocFieldsOriginals: ").Append(DocFieldsOriginals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RfidDataFile);
        }

        /// <summary>
        /// Returns true if RfidDataFile instances are equal
        /// </summary>
        /// <param name="input">Instance of RfidDataFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RfidDataFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileID == input.FileID ||
                    (this.FileID != null &&
                    this.FileID.Equals(input.FileID))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FileData == input.FileData ||
                    (this.FileData != null &&
                    this.FileData.Equals(input.FileData))
                ) && 
                (
                    this.ReadingStatus == input.ReadingStatus ||
                    (this.ReadingStatus != null &&
                    this.ReadingStatus.Equals(input.ReadingStatus))
                ) && 
                (
                    this.ReadingTime == input.ReadingTime ||
                    (this.ReadingTime != null &&
                    this.ReadingTime.Equals(input.ReadingTime))
                ) && 
                (
                    this.PAStatus == input.PAStatus ||
                    (this.PAStatus != null &&
                    this.PAStatus.Equals(input.PAStatus))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    input.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                ) && 
                (
                    this.DocFieldsText == input.DocFieldsText ||
                    this.DocFieldsText != null &&
                    input.DocFieldsText != null &&
                    this.DocFieldsText.SequenceEqual(input.DocFieldsText)
                ) && 
                (
                    this.DocFieldsGraphics == input.DocFieldsGraphics ||
                    this.DocFieldsGraphics != null &&
                    input.DocFieldsGraphics != null &&
                    this.DocFieldsGraphics.SequenceEqual(input.DocFieldsGraphics)
                ) && 
                (
                    this.DocFieldsOriginals == input.DocFieldsOriginals ||
                    this.DocFieldsOriginals != null &&
                    input.DocFieldsOriginals != null &&
                    this.DocFieldsOriginals.SequenceEqual(input.DocFieldsOriginals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileID != null)
                    hashCode = hashCode * 59 + this.FileID.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FileData != null)
                    hashCode = hashCode * 59 + this.FileData.GetHashCode();
                if (this.ReadingStatus != null)
                    hashCode = hashCode * 59 + this.ReadingStatus.GetHashCode();
                if (this.ReadingTime != null)
                    hashCode = hashCode * 59 + this.ReadingTime.GetHashCode();
                if (this.PAStatus != null)
                    hashCode = hashCode * 59 + this.PAStatus.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.DocFieldsText != null)
                    hashCode = hashCode * 59 + this.DocFieldsText.GetHashCode();
                if (this.DocFieldsGraphics != null)
                    hashCode = hashCode * 59 + this.DocFieldsGraphics.GetHashCode();
                if (this.DocFieldsOriginals != null)
                    hashCode = hashCode * 59 + this.DocFieldsOriginals.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
