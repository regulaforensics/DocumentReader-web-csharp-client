/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the contents of a single file of the LDS of electronic document and the analysis of its contents within the context of the communication session with electronic document
    /// </summary>
    [DataContract(Name = "RfidDataFile")]
    public partial class RfidDataFile : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", IsRequired = true, EmitDefaultValue = true)]
        public RfidDataFileType Type { get; set; }

        /// <summary>
        /// Gets or Sets ReadingStatus
        /// </summary>
        [DataMember(Name = "ReadingStatus", IsRequired = true, EmitDefaultValue = true)]
        public RFIDErrorCodes ReadingStatus { get; set; }

        /// <summary>
        /// Gets or Sets PAStatus
        /// </summary>
        [DataMember(Name = "PA_Status", EmitDefaultValue = false)]
        public RFIDErrorCodes? PAStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidDataFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidDataFile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidDataFile" /> class.
        /// </summary>
        /// <param name="fileID">File identifier. Each byte of FileID represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 01 1E).</param>
        /// <param name="type">type (required).</param>
        /// <param name="fileData">fileData.</param>
        /// <param name="readingStatus">readingStatus (required).</param>
        /// <param name="readingTime">Time of reading, milliseconds.</param>
        /// <param name="pAStatus">pAStatus.</param>
        /// <param name="notifications">List of remarks arisen when reading data from the memory of the chip and analysing their ASN.1-structure..</param>
        /// <param name="docFieldsText">List of document text fields formed on the basis of the file contents.</param>
        /// <param name="docFieldsGraphics">List of document graphic fields formed on the basis of the file contents.</param>
        /// <param name="docFieldsOriginals">List of the original binary representation of graphic document fields formed on the basis of the file contents.</param>
        /// <param name="parsedData">parsedData.</param>
        /// <param name="securityObjectCertificates">securityObjectCertificates.</param>
        public RfidDataFile(string fileID = default(string), RfidDataFileType type = default(RfidDataFileType), TrfFtBytes fileData = default(TrfFtBytes), RFIDErrorCodes readingStatus = default(RFIDErrorCodes), decimal readingTime = default(decimal), RFIDErrorCodes? pAStatus = default(RFIDErrorCodes?), List<ParsingNotificationCodes> notifications = default(List<ParsingNotificationCodes>), List<TextFieldType> docFieldsText = default(List<TextFieldType>), List<GraphicFieldType> docFieldsGraphics = default(List<GraphicFieldType>), List<GraphicFieldType> docFieldsOriginals = default(List<GraphicFieldType>), ParsedData parsedData = default(ParsedData), SecurityObjectCertificates securityObjectCertificates = default(SecurityObjectCertificates))
        {
            this.Type = type;
            this.ReadingStatus = readingStatus;
            this.FileID = fileID;
            this.FileData = fileData;
            this.ReadingTime = readingTime;
            this.PAStatus = pAStatus;
            this.Notifications = notifications;
            this.DocFieldsText = docFieldsText;
            this.DocFieldsGraphics = docFieldsGraphics;
            this.DocFieldsOriginals = docFieldsOriginals;
            this.ParsedData = parsedData;
            this.SecurityObjectCertificates = securityObjectCertificates;
        }

        /// <summary>
        /// File identifier. Each byte of FileID represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 01 1E)
        /// </summary>
        /// <value>File identifier. Each byte of FileID represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 01 1E)</value>
        [DataMember(Name = "FileID", EmitDefaultValue = false)]
        public string? FileID { get; set; }

        /// <summary>
        /// Gets or Sets FileData
        /// </summary>
        [DataMember(Name = "FileData", EmitDefaultValue = false)]
        public TrfFtBytes? FileData { get; set; }

        /// <summary>
        /// Time of reading, milliseconds
        /// </summary>
        /// <value>Time of reading, milliseconds</value>
        [DataMember(Name = "ReadingTime", EmitDefaultValue = false)]
        public decimal? ReadingTime { get; set; }

        /// <summary>
        /// List of remarks arisen when reading data from the memory of the chip and analysing their ASN.1-structure.
        /// </summary>
        /// <value>List of remarks arisen when reading data from the memory of the chip and analysing their ASN.1-structure.</value>
        [DataMember(Name = "Notifications", EmitDefaultValue = false)]
        public List<ParsingNotificationCodes>? Notifications { get; set; }

        /// <summary>
        /// List of document text fields formed on the basis of the file contents
        /// </summary>
        /// <value>List of document text fields formed on the basis of the file contents</value>
        [DataMember(Name = "DocFields_Text", EmitDefaultValue = false)]
        public List<TextFieldType>? DocFieldsText { get; set; }

        /// <summary>
        /// List of document graphic fields formed on the basis of the file contents
        /// </summary>
        /// <value>List of document graphic fields formed on the basis of the file contents</value>
        [DataMember(Name = "DocFields_Graphics", EmitDefaultValue = false)]
        public List<GraphicFieldType>? DocFieldsGraphics { get; set; }

        /// <summary>
        /// List of the original binary representation of graphic document fields formed on the basis of the file contents
        /// </summary>
        /// <value>List of the original binary representation of graphic document fields formed on the basis of the file contents</value>
        [DataMember(Name = "DocFields_Originals", EmitDefaultValue = false)]
        public List<GraphicFieldType>? DocFieldsOriginals { get; set; }

        /// <summary>
        /// Gets or Sets ParsedData
        /// </summary>
        [DataMember(Name = "ParsedData", EmitDefaultValue = false)]
        public ParsedData? ParsedData { get; set; }

        /// <summary>
        /// Gets or Sets SecurityObjectCertificates
        /// </summary>
        [DataMember(Name = "SecurityObject_Certificates", EmitDefaultValue = false)]
        public SecurityObjectCertificates? SecurityObjectCertificates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidDataFile {\n");
            sb.Append("  FileID: ").Append(FileID).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FileData: ").Append(FileData).Append("\n");
            sb.Append("  ReadingStatus: ").Append(ReadingStatus).Append("\n");
            sb.Append("  ReadingTime: ").Append(ReadingTime).Append("\n");
            sb.Append("  PAStatus: ").Append(PAStatus).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  DocFieldsText: ").Append(DocFieldsText).Append("\n");
            sb.Append("  DocFieldsGraphics: ").Append(DocFieldsGraphics).Append("\n");
            sb.Append("  DocFieldsOriginals: ").Append(DocFieldsOriginals).Append("\n");
            sb.Append("  ParsedData: ").Append(ParsedData).Append("\n");
            sb.Append("  SecurityObjectCertificates: ").Append(SecurityObjectCertificates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
