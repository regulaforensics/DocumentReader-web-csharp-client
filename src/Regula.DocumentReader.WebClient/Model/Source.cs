// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Document data sources
    /// </summary>
    /// <value>Document data sources</value>
    public enum Source
    {
        /// <summary>
        /// Enum MRZ for value: MRZ
        /// </summary>
        MRZ = 1,

        /// <summary>
        /// Enum VISUAL for value: VISUAL
        /// </summary>
        VISUAL = 2,

        /// <summary>
        /// Enum BARCODE for value: BARCODE
        /// </summary>
        BARCODE = 3,

        /// <summary>
        /// Enum RFID for value: RFID
        /// </summary>
        RFID = 4,

        /// <summary>
        /// Enum MAGNETIC for value: MAGNETIC
        /// </summary>
        MAGNETIC = 5,

        /// <summary>
        /// Enum EXTERNAL for value: EXTERNAL
        /// </summary>
        EXTERNAL = 6
    }

    /// <summary>
    /// Converts <see cref="Source"/> to and from the JSON value
    /// </summary>
    public static class SourceValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Source"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Source FromString(string value)
        {
            if (value.Equals("MRZ"))
                return Source.MRZ;

            if (value.Equals("VISUAL"))
                return Source.VISUAL;

            if (value.Equals("BARCODE"))
                return Source.BARCODE;

            if (value.Equals("RFID"))
                return Source.RFID;

            if (value.Equals("MAGNETIC"))
                return Source.MAGNETIC;

            if (value.Equals("EXTERNAL"))
                return Source.EXTERNAL;

            throw new NotImplementedException($"Could not convert value to type Source: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Source"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Source? FromStringOrDefault(string value)
        {
            if (value.Equals("MRZ"))
                return Source.MRZ;

            if (value.Equals("VISUAL"))
                return Source.VISUAL;

            if (value.Equals("BARCODE"))
                return Source.BARCODE;

            if (value.Equals("RFID"))
                return Source.RFID;

            if (value.Equals("MAGNETIC"))
                return Source.MAGNETIC;

            if (value.Equals("EXTERNAL"))
                return Source.EXTERNAL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Source"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Source value)
        {
            if (value == Source.MRZ)
                return "MRZ";

            if (value == Source.VISUAL)
                return "VISUAL";

            if (value == Source.BARCODE)
                return "BARCODE";

            if (value == Source.RFID)
                return "RFID";

            if (value == Source.MAGNETIC)
                return "MAGNETIC";

            if (value == Source.EXTERNAL)
                return "EXTERNAL";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Source"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SourceJsonConverter : JsonConverter<Source>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Source Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Source? result = rawValue == null
                ? null
                : SourceValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Source to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="source"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Source source, JsonSerializerOptions options)
        {
            writer.WriteStringValue(source.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Source"/>
    /// </summary>
    public class SourceNullableJsonConverter : JsonConverter<Source?>
    {
        /// <summary>
        /// Returns a Source from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Source? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Source? result = rawValue == null
                ? null
                : SourceValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="source"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Source? source, JsonSerializerOptions options)
        {
            writer.WriteStringValue(source?.ToString() ?? "null");
        }
    }
}
