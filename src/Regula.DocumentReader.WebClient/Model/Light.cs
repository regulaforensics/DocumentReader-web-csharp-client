// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Image light index
    /// </summary>
    /// <value>Image light index</value>
    public enum Light
    {
        /// <summary>
        /// Enum OFF for value: 0
        /// </summary>
        OFF = 0,

        /// <summary>
        /// Enum OVI for value: 1
        /// </summary>
        OVI = 1,

        /// <summary>
        /// Enum WHITE_TOP for value: 2
        /// </summary>
        WHITE_TOP = 2,

        /// <summary>
        /// Enum WHITE_SIDE for value: 4
        /// </summary>
        WHITE_SIDE = 4,

        /// <summary>
        /// Enum WHITE_FRONT for value: 8388608
        /// </summary>
        WHITE_FRONT = 8388608,

        /// <summary>
        /// Enum WHITE for value: 6
        /// </summary>
        WHITE = 6,

        /// <summary>
        /// Enum IR_TOP for value: 8
        /// </summary>
        IR_TOP = 8,

        /// <summary>
        /// Enum IR_SIDE for value: 16
        /// </summary>
        IR_SIDE = 16,

        /// <summary>
        /// Enum IR_FRONT for value: 16777216
        /// </summary>
        IR_FRONT = 16777216,

        /// <summary>
        /// Enum IR for value: 24
        /// </summary>
        IR = 24,

        /// <summary>
        /// Enum WHITE_GRAY for value: 33554432
        /// </summary>
        WHITE_GRAY = 33554432,

        /// <summary>
        /// Enum UV for value: 128
        /// </summary>
        UV = 128,

        /// <summary>
        /// Enum OVD for value: 67108864
        /// </summary>
        OVD = 67108864,

        /// <summary>
        /// Enum VIDEODETECTION for value: 134217728
        /// </summary>
        VIDEODETECTION = 134217728,

        /// <summary>
        /// Enum IR_870_OBL for value: 268435456
        /// </summary>
        IR_870_OBL = 268435456,

        /// <summary>
        /// Enum IR_LUMINESCENCE for value: 256
        /// </summary>
        IR_LUMINESCENCE = 256,

        /// <summary>
        /// Enum AXIAL_WHITE_LEFT for value: 1024
        /// </summary>
        AXIAL_WHITE_LEFT = 1024,

        /// <summary>
        /// Enum AXIAL_WHITE_RIGHT for value: 2048
        /// </summary>
        AXIAL_WHITE_RIGHT = 2048,

        /// <summary>
        /// Enum AXIAL_WHITE_FRONT for value: 512
        /// </summary>
        AXIAL_WHITE_FRONT = 512,

        /// <summary>
        /// Enum IR_720 for value: 4096
        /// </summary>
        IR_720 = 4096,

        /// <summary>
        /// Enum IR_940 for value: 8192
        /// </summary>
        IR_940 = 8192,

        /// <summary>
        /// Enum AXIAL_WHITE_FULL for value: 3072
        /// </summary>
        AXIAL_WHITE_FULL = 3072,

        /// <summary>
        /// Enum RAW_DATA for value: 2147483648
        /// </summary>
        RAW_DATA = 2147483648,

        /// <summary>
        /// Enum RAW_DATA_GRBG for value: 2415919104
        /// </summary>
        RAW_DATA_GRBG = 2415919104,

        /// <summary>
        /// Enum RAW_DATA_GBGR for value: 2684354560
        /// </summary>
        RAW_DATA_GBGR = 2684354560,

        /// <summary>
        /// Enum RAW_DATA_RGGB for value: 2952790016
        /// </summary>
        RAW_DATA_RGGB = 2952790016,

        /// <summary>
        /// Enum RAW_DATA_BGGR for value: 3221225472
        /// </summary>
        RAW_DATA_BGGR = 3221225472,

        /// <summary>
        /// Enum TRANSMITTED for value: 32
        /// </summary>
        TRANSMITTED = 32,

        /// <summary>
        /// Enum TRANSMITTED_IR for value: 64
        /// </summary>
        TRANSMITTED_IR = 64,

        /// <summary>
        /// Enum ANTI_STOKES for value: 65536
        /// </summary>
        ANTI_STOKES = 65536,

        /// <summary>
        /// Enum TRANSMITTED_IR940 for value: 16384
        /// </summary>
        TRANSMITTED_IR940 = 16384,

        /// <summary>
        /// Enum OVD_RIGHT for value: 262144
        /// </summary>
        OVD_RIGHT = 262144,

        /// <summary>
        /// Enum OVD_LEFT for value: 131072
        /// </summary>
        OVD_LEFT = 131072,

        /// <summary>
        /// Enum IR_700 for value: 32768
        /// </summary>
        IR_700 = 32768,

        /// <summary>
        /// Enum IR_870 for value: 16777216
        /// </summary>
        IR_870 = 16777216,

        /// <summary>
        /// Enum HOLO for value: 67108864
        /// </summary>
        HOLO = 67108864,

        /// <summary>
        /// Enum IR_BOTTOM for value: 64
        /// </summary>
        IR_BOTTOM = 64,

        /// <summary>
        /// Enum WHITE_BOTTOM for value: 32
        /// </summary>
        WHITE_BOTTOM = 32,

        /// <summary>
        /// Enum UVC for value: 524288
        /// </summary>
        UVC = 524288,

        /// <summary>
        /// Enum UVB for value: 1048576
        /// </summary>
        UVB = 1048576,

        /// <summary>
        /// Enum WHITE_OBL for value: 2097152
        /// </summary>
        WHITE_OBL = 2097152,

        /// <summary>
        /// Enum WHITE_SPECIAL for value: 4194304
        /// </summary>
        WHITE_SPECIAL = 4194304
    }

    /// <summary>
    /// Converts <see cref="Light"/> to and from the JSON value
    /// </summary>
    public static class LightValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Light"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Light FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return Light.OFF;

            if (value.Equals((1).ToString()))
                return Light.OVI;

            if (value.Equals((2).ToString()))
                return Light.WHITE_TOP;

            if (value.Equals((4).ToString()))
                return Light.WHITE_SIDE;

            if (value.Equals((8388608).ToString()))
                return Light.WHITE_FRONT;

            if (value.Equals((6).ToString()))
                return Light.WHITE;

            if (value.Equals((8).ToString()))
                return Light.IR_TOP;

            if (value.Equals((16).ToString()))
                return Light.IR_SIDE;

            if (value.Equals((16777216).ToString()))
                return Light.IR_FRONT;

            if (value.Equals((24).ToString()))
                return Light.IR;

            if (value.Equals((33554432).ToString()))
                return Light.WHITE_GRAY;

            if (value.Equals((128).ToString()))
                return Light.UV;

            if (value.Equals((67108864).ToString()))
                return Light.OVD;

            if (value.Equals((134217728).ToString()))
                return Light.VIDEODETECTION;

            if (value.Equals((268435456).ToString()))
                return Light.IR_870_OBL;

            if (value.Equals((256).ToString()))
                return Light.IR_LUMINESCENCE;

            if (value.Equals((1024).ToString()))
                return Light.AXIAL_WHITE_LEFT;

            if (value.Equals((2048).ToString()))
                return Light.AXIAL_WHITE_RIGHT;

            if (value.Equals((512).ToString()))
                return Light.AXIAL_WHITE_FRONT;

            if (value.Equals((4096).ToString()))
                return Light.IR_720;

            if (value.Equals((8192).ToString()))
                return Light.IR_940;

            if (value.Equals((3072).ToString()))
                return Light.AXIAL_WHITE_FULL;

            if (value.Equals((2147483648).ToString()))
                return Light.RAW_DATA;

            if (value.Equals((2415919104).ToString()))
                return Light.RAW_DATA_GRBG;

            if (value.Equals((2684354560).ToString()))
                return Light.RAW_DATA_GBGR;

            if (value.Equals((2952790016).ToString()))
                return Light.RAW_DATA_RGGB;

            if (value.Equals((3221225472).ToString()))
                return Light.RAW_DATA_BGGR;

            if (value.Equals((32).ToString()))
                return Light.TRANSMITTED;

            if (value.Equals((64).ToString()))
                return Light.TRANSMITTED_IR;

            if (value.Equals((65536).ToString()))
                return Light.ANTI_STOKES;

            if (value.Equals((16384).ToString()))
                return Light.TRANSMITTED_IR940;

            if (value.Equals((262144).ToString()))
                return Light.OVD_RIGHT;

            if (value.Equals((131072).ToString()))
                return Light.OVD_LEFT;

            if (value.Equals((32768).ToString()))
                return Light.IR_700;

            if (value.Equals((16777216).ToString()))
                return Light.IR_870;

            if (value.Equals((67108864).ToString()))
                return Light.HOLO;

            if (value.Equals((64).ToString()))
                return Light.IR_BOTTOM;

            if (value.Equals((32).ToString()))
                return Light.WHITE_BOTTOM;

            if (value.Equals((524288).ToString()))
                return Light.UVC;

            if (value.Equals((1048576).ToString()))
                return Light.UVB;

            if (value.Equals((2097152).ToString()))
                return Light.WHITE_OBL;

            if (value.Equals((4194304).ToString()))
                return Light.WHITE_SPECIAL;

            throw new NotImplementedException($"Could not convert value to type Light: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Light"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Light? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return Light.OFF;

            if (value.Equals((1).ToString()))
                return Light.OVI;

            if (value.Equals((2).ToString()))
                return Light.WHITE_TOP;

            if (value.Equals((4).ToString()))
                return Light.WHITE_SIDE;

            if (value.Equals((8388608).ToString()))
                return Light.WHITE_FRONT;

            if (value.Equals((6).ToString()))
                return Light.WHITE;

            if (value.Equals((8).ToString()))
                return Light.IR_TOP;

            if (value.Equals((16).ToString()))
                return Light.IR_SIDE;

            if (value.Equals((16777216).ToString()))
                return Light.IR_FRONT;

            if (value.Equals((24).ToString()))
                return Light.IR;

            if (value.Equals((33554432).ToString()))
                return Light.WHITE_GRAY;

            if (value.Equals((128).ToString()))
                return Light.UV;

            if (value.Equals((67108864).ToString()))
                return Light.OVD;

            if (value.Equals((134217728).ToString()))
                return Light.VIDEODETECTION;

            if (value.Equals((268435456).ToString()))
                return Light.IR_870_OBL;

            if (value.Equals((256).ToString()))
                return Light.IR_LUMINESCENCE;

            if (value.Equals((1024).ToString()))
                return Light.AXIAL_WHITE_LEFT;

            if (value.Equals((2048).ToString()))
                return Light.AXIAL_WHITE_RIGHT;

            if (value.Equals((512).ToString()))
                return Light.AXIAL_WHITE_FRONT;

            if (value.Equals((4096).ToString()))
                return Light.IR_720;

            if (value.Equals((8192).ToString()))
                return Light.IR_940;

            if (value.Equals((3072).ToString()))
                return Light.AXIAL_WHITE_FULL;

            if (value.Equals((2147483648).ToString()))
                return Light.RAW_DATA;

            if (value.Equals((2415919104).ToString()))
                return Light.RAW_DATA_GRBG;

            if (value.Equals((2684354560).ToString()))
                return Light.RAW_DATA_GBGR;

            if (value.Equals((2952790016).ToString()))
                return Light.RAW_DATA_RGGB;

            if (value.Equals((3221225472).ToString()))
                return Light.RAW_DATA_BGGR;

            if (value.Equals((32).ToString()))
                return Light.TRANSMITTED;

            if (value.Equals((64).ToString()))
                return Light.TRANSMITTED_IR;

            if (value.Equals((65536).ToString()))
                return Light.ANTI_STOKES;

            if (value.Equals((16384).ToString()))
                return Light.TRANSMITTED_IR940;

            if (value.Equals((262144).ToString()))
                return Light.OVD_RIGHT;

            if (value.Equals((131072).ToString()))
                return Light.OVD_LEFT;

            if (value.Equals((32768).ToString()))
                return Light.IR_700;

            if (value.Equals((16777216).ToString()))
                return Light.IR_870;

            if (value.Equals((67108864).ToString()))
                return Light.HOLO;

            if (value.Equals((64).ToString()))
                return Light.IR_BOTTOM;

            if (value.Equals((32).ToString()))
                return Light.WHITE_BOTTOM;

            if (value.Equals((524288).ToString()))
                return Light.UVC;

            if (value.Equals((1048576).ToString()))
                return Light.UVB;

            if (value.Equals((2097152).ToString()))
                return Light.WHITE_OBL;

            if (value.Equals((4194304).ToString()))
                return Light.WHITE_SPECIAL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Light"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static long ToJsonValue(Light value)
        {
            return (long) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Light"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class LightJsonConverter : JsonConverter<Light>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Light Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Light? result = rawValue == null
                ? null
                : LightValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Light to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="light"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Light light, JsonSerializerOptions options)
        {
            writer.WriteStringValue(light.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Light"/>
    /// </summary>
    public class LightNullableJsonConverter : JsonConverter<Light?>
    {
        /// <summary>
        /// Returns a Light from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Light? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Light? result = rawValue == null
                ? null
                : LightValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="light"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Light? light, JsonSerializerOptions options)
        {
            writer.WriteStringValue(light?.ToString() ?? "null");
        }
    }
}
