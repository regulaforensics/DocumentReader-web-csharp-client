/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ProcessParams
    /// </summary>
    [DataContract(Name = "ProcessParams")]
    public partial class ProcessParams : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Scenario
        /// </summary>
        [DataMember(Name = "scenario", IsRequired = true, EmitDefaultValue = true)]
        public Scenario Scenario { get; set; }

        /// <summary>
        /// Gets or Sets MeasureSystem
        /// </summary>
        [DataMember(Name = "measureSystem", EmitDefaultValue = false)]
        public MeasureSystem? MeasureSystem { get; set; }

        /// <summary>
        /// Gets or Sets LogLevel
        /// </summary>
        [DataMember(Name = "logLevel", EmitDefaultValue = false)]
        public LogLevel? LogLevel { get; set; }

        /// <summary>
        /// Gets or Sets ForceDocFormat
        /// </summary>
        [DataMember(Name = "forceDocFormat", EmitDefaultValue = false)]
        public DocumentFormat? ForceDocFormat { get; set; }

        /// <summary>
        /// Gets or Sets ConvertCase
        /// </summary>
        [DataMember(Name = "convertCase", EmitDefaultValue = false)]
        public TextPostProcessing? ConvertCase { get; set; }

        /// <summary>
        /// Gets or Sets MrzDetectMode
        /// </summary>
        [DataMember(Name = "mrzDetectMode", EmitDefaultValue = false)]
        public MrzDetectModeEnum? MrzDetectMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessParams" /> class.
        /// </summary>
        /// <param name="generateDTCVC">This parameter is used to generate separate DTC-VC data container from RFID session data..</param>
        /// <param name="lcidFilter">The list of LCID types to recognize. If empty, values with all LCID types will be extracted. Empty by default..</param>
        /// <param name="checkLiveness">This parameter is used to enable document liveness check..</param>
        /// <param name="lcidIgnoreFilter">The list of LCID types to ignore during the recognition. If empty, values with all LCID types will be extracted. Narrowing down the list can reduce processing time. Empty by default..</param>
        /// <param name="oneShotIdentification">This parameter allows processing an image that contains a person and a document and compare the portrait photo from the document with the person&#39;s face.</param>
        /// <param name="useFaceApi">This parameter allows comparing faces on Regula Face Web Service.</param>
        /// <param name="faceApi">faceApi.</param>
        /// <param name="doDetectCan">This parameter allows enabling the CAN (Card Access Number) detection and recognition when using scenarios with document location and MRZ reading, such as the MrzAndLocate scenario..</param>
        /// <param name="imageOutputMaxHeight">This parameter allows setting maximum height in pixels of output images and thus reducing image size to desired. Does not change the aspect ratio. Changes disabled if equals to 0. Default 0..</param>
        /// <param name="imageOutputMaxWidth">This parameter allows setting maximum width in pixels of output images and thus reducing image size to desired. Does not change the aspect ratio. Changes disabled if equals to 0. Default 0..</param>
        /// <param name="scenario">scenario (required).</param>
        /// <param name="resultTypeOutput">Types of results to return in response. See &#39;Result&#39; enum for available options.</param>
        /// <param name="doublePageSpread">Enable this option if the image you provide contains double page spread of the passport and you want to process both pages in one go. It makes sense to use it for documents that have meaningful information on both pages, like Russian domestic passport, or some others. Disabled by default..</param>
        /// <param name="generateDoublePageSpreadImage">When enabled together with \&quot;doublePageSpread\&quot; and there is a passport with two pages spread in the image, pages will be cropped, straightened and aligned together, as if the document was captured on a flatbed scanner. Disabled by default..</param>
        /// <param name="fieldTypesFilter">List of text field types to extract. If empty, all text fields from template will be extracted. Narrowing the list can shorten processing time. Empty by default..</param>
        /// <param name="dateFormat">This option allows you to set dates format so that solution will return dates in this format. For example, if you supply &#39;MM/dd/yyyy&#39;, and document have printed date &#39;09 JUL 2020&#39; for the date os issue, you will get &#39;07/09/2020&#39; as a result. By default it is set to system locale default (where the service is running)..</param>
        /// <param name="measureSystem">measureSystem.</param>
        /// <param name="imageDpiOutMax">This parameter controls maximum resolution in dpi of output images. Resolution will remain original in case 0 is supplied. By default is set to return images in response with resolution not greater than 300 dpi for all scenarios except FullAuth. In FullAuth scenario this limit is 1000 dpi by default..</param>
        /// <param name="alreadyCropped">This option can be enabled if you know for sure that the image you provide contains already cropped document by its edges. This was designed to process on the server side images captured and cropped on mobile. Disabled by default..</param>
        /// <param name="customParams">This option allows passing custom processing parameters that can be implemented in future without changing API..</param>
        /// <param name="config">This option allows setting additional custom configuration per document type. If recognized document has ID specified in config, processing adjusts according to designated configuration..</param>
        /// <param name="log">When enabled, results will contain transaction processing log. Disabled by default.</param>
        /// <param name="logLevel">logLevel.</param>
        /// <param name="forceDocID">Force use of specific template ID and skip document type identification step..</param>
        /// <param name="matchTextFieldMask">When disabled, text field OCR will be done as is and then the recognized value will be matched to the field mask for validity. If enabled, we are trying to read a field value with maximum efforts to match the mask and provide a correctly formatted value, making assumptions based on the provided field mask in the template. Enabled by default..</param>
        /// <param name="fastDocDetect">When enabled, shorten the list of candidates to process during document detection in a single image process mode. Reduces processing time for specific backgrounds. Enabled by default..</param>
        /// <param name="updateOCRValidityByGlare">When enabled, fail OCR field validity, if there is a glare over the text field on the image. Disabled by default..</param>
        /// <param name="checkRequiredTextFields">When enabled, each field in template will be checked for value presence and if the field is marked as required, but has no value, it will have &#39;error&#39; in validity status. Disabled by default..</param>
        /// <param name="returnCroppedBarcode">When enabled, returns cropped barcode images for unknown documents. Disabled by default..</param>
        /// <param name="imageQa">imageQa.</param>
        /// <param name="strictImageQuality">When enabled, the image quality check status affects the document optical and overall status. Disabled by default..</param>
        /// <param name="respectImageQuality">Deprecated. Please use strictImageQuality instead. When enabled, image quality checks status affects document optical and overall status. Disabled by default..</param>
        /// <param name="forceDocFormat">forceDocFormat.</param>
        /// <param name="noGraphics">When enabled, no graphic fields will be cropped from document image. Disabled by default..</param>
        /// <param name="depersonalizeLog">When enabled, all personal data will be forcibly removed from the logs. Disabled by default..</param>
        /// <param name="multiDocOnImage">This option allows locating and cropping multiple documents from one image if enabled. Disabled by default..</param>
        /// <param name="shiftExpiryDate">This option allows shifting the date of expiry into the future or past for number of months specified. This is useful, for example, in some cases when document might be still valid for some period after original expiration date to prevent negative validity status for such documents. Or by shifting the date to the past will set negative validity for the documents that is about to expire in a specified number of months. 0 by default.</param>
        /// <param name="minimalHolderAge">This options allows specifying the minimal age in years of the document holder for the document to be considered valid..</param>
        /// <param name="returnUncroppedImage">When enabled, returns input images in output. Disabled by default..</param>
        /// <param name="mrzFormatsFilter">This option allows limiting MRZ formats to be recognized by specifying them in array..</param>
        /// <param name="forceReadMrzBeforeLocate">When enabled, make sure that in series processing MRZ is located fully inside the result document image, if present on the document. Enabling this option may add extra processing time, by disabling optimizations, but allows more stability in output image quality. Disabled by default..</param>
        /// <param name="parseBarcodes">This option can be disabled to stop parsing after barcode is read. Enabled by default..</param>
        /// <param name="convertCase">convertCase.</param>
        /// <param name="splitNames">When enabled, the Surname and GivenNames fields from MRZ will be divided into ft_First_Name, ft_Second_Name, ft_Third_Name, ft_Fourth_Name, ft_Last_Name fields. Disabled by default..</param>
        /// <param name="disablePerforationOCR">When enabled, OCR of perforated fields in the document template will not be performed. Disabled by default..</param>
        /// <param name="documentGroupFilter">List of specific eligible document types from DocumentType enum to recognize from. You may, for example, specify only passports to be recognized by setting this property. Empty by default..</param>
        /// <param name="processAuth">Authenticity checks that should be performed regardless of the document type. The available checks are listed in the eRPRM_Authenticity enum. Note that only supported by your license checks can be added..</param>
        /// <param name="deviceId">This parameter is used to specify the document reader device type from which input images were captured. Default 0..</param>
        /// <param name="deviceType">This parameter is used to specify the document reader device type from which input images were captured. Default 0..</param>
        /// <param name="deviceTypeHex">This parameter is used to specify the document reader device type from which input images were captured.</param>
        /// <param name="ignoreDeviceIdFromImage">This parameter is used to tell the processing engine to ignore any parameters saved in the image when scanned from the document reader device. Default false.</param>
        /// <param name="documentIdList">List of the document ID&#39;s to process. All documents will be processed, if empty..</param>
        /// <param name="rfid">rfid.</param>
        /// <param name="checkAuth">This parameter is used to enable authenticity checks.</param>
        /// <param name="authParams">authParams.</param>
        /// <param name="mrzDetectMode">mrzDetectMode.</param>
        /// <param name="generateNumericCodes">This parameter is used to generate numeric representation for issuing state and nationality codes.</param>
        /// <param name="strictBarcodeDigitalSignatureCheck">This parameter if enabled will require all necessary certificates to verify digital signature in barcode data to be present in order for the Barcode format check to succeed..</param>
        /// <param name="selectLongestNames">Select the longest value from the different value sources and write it to the value field if comparison is done successfully. The parameter applies this logic to the personal names, such as given name, surname, surname and given name, middle name and etc..</param>
        /// <param name="doBarcodes">Set the types of barcodes to process..</param>
        /// <param name="strictDLCategoryExpiry">Set to force DL categories expiry date to affect the overall status or not. As documents usually have their own date of expiry, which might be less or greater than category expiry date, this might be handy for specific cases..</param>
        /// <param name="generateAlpha2Codes">Set to generate Alpha-2 codes for nationality and issuing state fields..</param>
        /// <param name="pdfPagesLimit">Limits the number of pages to be processed from a PDF file..</param>
        /// <param name="disableAuthResolutionFilter">This parameter if enabled will ignore the minimum barcode resolution needed to start processing..</param>
        /// <param name="strictSecurityChecks">When enabled, this parameter marks security checks that don’t meet minimum requirements as &#39;Failed&#39; (instead of &#39;WasNotDone&#39;), which causes the overall security status to be &#39;Failed&#39;..</param>
        /// <param name="returnTransliteratedFields">Allows transliteration to be turned on or off; by default, it is enabled..</param>
        public ProcessParams(bool generateDTCVC = default(bool), List<LCID> lcidFilter = default(List<LCID>), bool checkLiveness = default(bool), List<LCID> lcidIgnoreFilter = default(List<LCID>), bool oneShotIdentification = default(bool), bool useFaceApi = default(bool), FaceApi faceApi = default(FaceApi), bool doDetectCan = default(bool), int imageOutputMaxHeight = default(int), int imageOutputMaxWidth = default(int), Scenario scenario = default(Scenario), List<Result> resultTypeOutput = default(List<Result>), bool doublePageSpread = default(bool), bool generateDoublePageSpreadImage = default(bool), List<TextFieldType> fieldTypesFilter = default(List<TextFieldType>), string dateFormat = default(string), MeasureSystem? measureSystem = default(MeasureSystem?), int imageDpiOutMax = default(int), bool alreadyCropped = default(bool), Dictionary<string, Object> customParams = default(Dictionary<string, Object>), List<PerDocumentConfig> config = default(List<PerDocumentConfig>), bool log = default(bool), LogLevel? logLevel = default(LogLevel?), int forceDocID = default(int), bool matchTextFieldMask = default(bool), bool fastDocDetect = default(bool), bool updateOCRValidityByGlare = default(bool), bool checkRequiredTextFields = default(bool), bool returnCroppedBarcode = default(bool), ImageQA imageQa = default(ImageQA), bool strictImageQuality = default(bool), bool respectImageQuality = default(bool), DocumentFormat? forceDocFormat = default(DocumentFormat?), bool noGraphics = default(bool), bool depersonalizeLog = default(bool), bool multiDocOnImage = default(bool), int shiftExpiryDate = default(int), int minimalHolderAge = default(int), bool returnUncroppedImage = default(bool), List<MRZFormat> mrzFormatsFilter = default(List<MRZFormat>), bool forceReadMrzBeforeLocate = default(bool), bool parseBarcodes = default(bool), TextPostProcessing? convertCase = default(TextPostProcessing?), bool splitNames = default(bool), bool disablePerforationOCR = default(bool), List<DocumentType> documentGroupFilter = default(List<DocumentType>), long processAuth = default(long), int deviceId = default(int), int deviceType = default(int), string deviceTypeHex = default(string), bool ignoreDeviceIdFromImage = default(bool), List<int> documentIdList = default(List<int>), ProcessParamsRfid rfid = default(ProcessParamsRfid), bool checkAuth = default(bool), AuthParams authParams = default(AuthParams), MrzDetectModeEnum? mrzDetectMode = default(MrzDetectModeEnum?), bool generateNumericCodes = default(bool), bool strictBarcodeDigitalSignatureCheck = default(bool), bool selectLongestNames = default(bool), List<InputBarcodeType> doBarcodes = default(List<InputBarcodeType>), bool strictDLCategoryExpiry = default(bool), bool generateAlpha2Codes = default(bool), int pdfPagesLimit = default(int), bool disableAuthResolutionFilter = default(bool), bool strictSecurityChecks = default(bool), bool returnTransliteratedFields = default(bool))
        {
            this.Scenario = scenario;
            this.GenerateDTCVC = generateDTCVC;
            this.LcidFilter = lcidFilter;
            this.CheckLiveness = checkLiveness;
            this.LcidIgnoreFilter = lcidIgnoreFilter;
            this.OneShotIdentification = oneShotIdentification;
            this.UseFaceApi = useFaceApi;
            this.FaceApi = faceApi;
            this.DoDetectCan = doDetectCan;
            this.ImageOutputMaxHeight = imageOutputMaxHeight;
            this.ImageOutputMaxWidth = imageOutputMaxWidth;
            this.ResultTypeOutput = resultTypeOutput;
            this.DoublePageSpread = doublePageSpread;
            this.GenerateDoublePageSpreadImage = generateDoublePageSpreadImage;
            this.FieldTypesFilter = fieldTypesFilter;
            this.DateFormat = dateFormat;
            this.MeasureSystem = measureSystem;
            this.ImageDpiOutMax = imageDpiOutMax;
            this.AlreadyCropped = alreadyCropped;
            this.CustomParams = customParams;
            this.Config = config;
            this.Log = log;
            this.LogLevel = logLevel;
            this.ForceDocID = forceDocID;
            this.MatchTextFieldMask = matchTextFieldMask;
            this.FastDocDetect = fastDocDetect;
            this.UpdateOCRValidityByGlare = updateOCRValidityByGlare;
            this.CheckRequiredTextFields = checkRequiredTextFields;
            this.ReturnCroppedBarcode = returnCroppedBarcode;
            this.ImageQa = imageQa;
            this.StrictImageQuality = strictImageQuality;
            this.RespectImageQuality = respectImageQuality;
            this.ForceDocFormat = forceDocFormat;
            this.NoGraphics = noGraphics;
            this.DepersonalizeLog = depersonalizeLog;
            this.MultiDocOnImage = multiDocOnImage;
            this.ShiftExpiryDate = shiftExpiryDate;
            this.MinimalHolderAge = minimalHolderAge;
            this.ReturnUncroppedImage = returnUncroppedImage;
            this.MrzFormatsFilter = mrzFormatsFilter;
            this.ForceReadMrzBeforeLocate = forceReadMrzBeforeLocate;
            this.ParseBarcodes = parseBarcodes;
            this.ConvertCase = convertCase;
            this.SplitNames = splitNames;
            this.DisablePerforationOCR = disablePerforationOCR;
            this.DocumentGroupFilter = documentGroupFilter;
            this.ProcessAuth = processAuth;
            this.DeviceId = deviceId;
            this.DeviceType = deviceType;
            this.DeviceTypeHex = deviceTypeHex;
            this.IgnoreDeviceIdFromImage = ignoreDeviceIdFromImage;
            this.DocumentIdList = documentIdList;
            this.Rfid = rfid;
            this.CheckAuth = checkAuth;
            this.AuthParams = authParams;
            this.MrzDetectMode = mrzDetectMode;
            this.GenerateNumericCodes = generateNumericCodes;
            this.StrictBarcodeDigitalSignatureCheck = strictBarcodeDigitalSignatureCheck;
            this.SelectLongestNames = selectLongestNames;
            this.DoBarcodes = doBarcodes;
            this.StrictDLCategoryExpiry = strictDLCategoryExpiry;
            this.GenerateAlpha2Codes = generateAlpha2Codes;
            this.PdfPagesLimit = pdfPagesLimit;
            this.DisableAuthResolutionFilter = disableAuthResolutionFilter;
            this.StrictSecurityChecks = strictSecurityChecks;
            this.ReturnTransliteratedFields = returnTransliteratedFields;
        }

        /// <summary>
        /// This parameter is used to generate separate DTC-VC data container from RFID session data.
        /// </summary>
        /// <value>This parameter is used to generate separate DTC-VC data container from RFID session data.</value>
        [DataMember(Name = "generateDTCVC", EmitDefaultValue = false)]
        public bool? GenerateDTCVC { get; set; }

        /// <summary>
        /// The list of LCID types to recognize. If empty, values with all LCID types will be extracted. Empty by default.
        /// </summary>
        /// <value>The list of LCID types to recognize. If empty, values with all LCID types will be extracted. Empty by default.</value>
        [DataMember(Name = "lcidFilter", EmitDefaultValue = false)]
        public List<LCID>? LcidFilter { get; set; }

        /// <summary>
        /// This parameter is used to enable document liveness check.
        /// </summary>
        /// <value>This parameter is used to enable document liveness check.</value>
        [DataMember(Name = "checkLiveness", EmitDefaultValue = false)]
        public bool? CheckLiveness { get; set; }

        /// <summary>
        /// The list of LCID types to ignore during the recognition. If empty, values with all LCID types will be extracted. Narrowing down the list can reduce processing time. Empty by default.
        /// </summary>
        /// <value>The list of LCID types to ignore during the recognition. If empty, values with all LCID types will be extracted. Narrowing down the list can reduce processing time. Empty by default.</value>
        [DataMember(Name = "lcidIgnoreFilter", EmitDefaultValue = false)]
        public List<LCID>? LcidIgnoreFilter { get; set; }

        /// <summary>
        /// This parameter allows processing an image that contains a person and a document and compare the portrait photo from the document with the person&#39;s face
        /// </summary>
        /// <value>This parameter allows processing an image that contains a person and a document and compare the portrait photo from the document with the person&#39;s face</value>
        [DataMember(Name = "oneShotIdentification", EmitDefaultValue = false)]
        public bool? OneShotIdentification { get; set; }

        /// <summary>
        /// This parameter allows comparing faces on Regula Face Web Service
        /// </summary>
        /// <value>This parameter allows comparing faces on Regula Face Web Service</value>
        [DataMember(Name = "useFaceApi", EmitDefaultValue = false)]
        public bool? UseFaceApi { get; set; }

        /// <summary>
        /// Gets or Sets FaceApi
        /// </summary>
        [DataMember(Name = "faceApi", EmitDefaultValue = false)]
        public FaceApi? FaceApi { get; set; }

        /// <summary>
        /// This parameter allows enabling the CAN (Card Access Number) detection and recognition when using scenarios with document location and MRZ reading, such as the MrzAndLocate scenario.
        /// </summary>
        /// <value>This parameter allows enabling the CAN (Card Access Number) detection and recognition when using scenarios with document location and MRZ reading, such as the MrzAndLocate scenario.</value>
        [DataMember(Name = "doDetectCan", EmitDefaultValue = false)]
        public bool? DoDetectCan { get; set; }

        /// <summary>
        /// This parameter allows setting maximum height in pixels of output images and thus reducing image size to desired. Does not change the aspect ratio. Changes disabled if equals to 0. Default 0.
        /// </summary>
        /// <value>This parameter allows setting maximum height in pixels of output images and thus reducing image size to desired. Does not change the aspect ratio. Changes disabled if equals to 0. Default 0.</value>
        [DataMember(Name = "imageOutputMaxHeight", EmitDefaultValue = false)]
        public int? ImageOutputMaxHeight { get; set; }

        /// <summary>
        /// This parameter allows setting maximum width in pixels of output images and thus reducing image size to desired. Does not change the aspect ratio. Changes disabled if equals to 0. Default 0.
        /// </summary>
        /// <value>This parameter allows setting maximum width in pixels of output images and thus reducing image size to desired. Does not change the aspect ratio. Changes disabled if equals to 0. Default 0.</value>
        [DataMember(Name = "imageOutputMaxWidth", EmitDefaultValue = false)]
        public int? ImageOutputMaxWidth { get; set; }

        /// <summary>
        /// Types of results to return in response. See &#39;Result&#39; enum for available options
        /// </summary>
        /// <value>Types of results to return in response. See &#39;Result&#39; enum for available options</value>
        [DataMember(Name = "resultTypeOutput", EmitDefaultValue = false)]
        public List<Result>? ResultTypeOutput { get; set; }

        /// <summary>
        /// Enable this option if the image you provide contains double page spread of the passport and you want to process both pages in one go. It makes sense to use it for documents that have meaningful information on both pages, like Russian domestic passport, or some others. Disabled by default.
        /// </summary>
        /// <value>Enable this option if the image you provide contains double page spread of the passport and you want to process both pages in one go. It makes sense to use it for documents that have meaningful information on both pages, like Russian domestic passport, or some others. Disabled by default.</value>
        [DataMember(Name = "doublePageSpread", EmitDefaultValue = false)]
        [Obsolete]
        public bool? DoublePageSpread { get; set; }

        /// <summary>
        /// When enabled together with \&quot;doublePageSpread\&quot; and there is a passport with two pages spread in the image, pages will be cropped, straightened and aligned together, as if the document was captured on a flatbed scanner. Disabled by default.
        /// </summary>
        /// <value>When enabled together with \&quot;doublePageSpread\&quot; and there is a passport with two pages spread in the image, pages will be cropped, straightened and aligned together, as if the document was captured on a flatbed scanner. Disabled by default.</value>
        [DataMember(Name = "generateDoublePageSpreadImage", EmitDefaultValue = false)]
        public bool? GenerateDoublePageSpreadImage { get; set; }

        /// <summary>
        /// List of text field types to extract. If empty, all text fields from template will be extracted. Narrowing the list can shorten processing time. Empty by default.
        /// </summary>
        /// <value>List of text field types to extract. If empty, all text fields from template will be extracted. Narrowing the list can shorten processing time. Empty by default.</value>
        [DataMember(Name = "fieldTypesFilter", EmitDefaultValue = false)]
        public List<TextFieldType>? FieldTypesFilter { get; set; }

        /// <summary>
        /// This option allows you to set dates format so that solution will return dates in this format. For example, if you supply &#39;MM/dd/yyyy&#39;, and document have printed date &#39;09 JUL 2020&#39; for the date os issue, you will get &#39;07/09/2020&#39; as a result. By default it is set to system locale default (where the service is running).
        /// </summary>
        /// <value>This option allows you to set dates format so that solution will return dates in this format. For example, if you supply &#39;MM/dd/yyyy&#39;, and document have printed date &#39;09 JUL 2020&#39; for the date os issue, you will get &#39;07/09/2020&#39; as a result. By default it is set to system locale default (where the service is running).</value>
        /*
        <example>MM/dd/yyyy</example>
        */
        [DataMember(Name = "dateFormat", EmitDefaultValue = false)]
        public string? DateFormat { get; set; }

        /// <summary>
        /// This parameter controls maximum resolution in dpi of output images. Resolution will remain original in case 0 is supplied. By default is set to return images in response with resolution not greater than 300 dpi for all scenarios except FullAuth. In FullAuth scenario this limit is 1000 dpi by default.
        /// </summary>
        /// <value>This parameter controls maximum resolution in dpi of output images. Resolution will remain original in case 0 is supplied. By default is set to return images in response with resolution not greater than 300 dpi for all scenarios except FullAuth. In FullAuth scenario this limit is 1000 dpi by default.</value>
        [DataMember(Name = "imageDpiOutMax", EmitDefaultValue = false)]
        public int? ImageDpiOutMax { get; set; }

        /// <summary>
        /// This option can be enabled if you know for sure that the image you provide contains already cropped document by its edges. This was designed to process on the server side images captured and cropped on mobile. Disabled by default.
        /// </summary>
        /// <value>This option can be enabled if you know for sure that the image you provide contains already cropped document by its edges. This was designed to process on the server side images captured and cropped on mobile. Disabled by default.</value>
        [DataMember(Name = "alreadyCropped", EmitDefaultValue = false)]
        public bool? AlreadyCropped { get; set; }

        /// <summary>
        /// This option allows passing custom processing parameters that can be implemented in future without changing API.
        /// </summary>
        /// <value>This option allows passing custom processing parameters that can be implemented in future without changing API.</value>
        [DataMember(Name = "customParams", EmitDefaultValue = false)]
        public Dictionary<string, Object>? CustomParams { get; set; }

        /// <summary>
        /// This option allows setting additional custom configuration per document type. If recognized document has ID specified in config, processing adjusts according to designated configuration.
        /// </summary>
        /// <value>This option allows setting additional custom configuration per document type. If recognized document has ID specified in config, processing adjusts according to designated configuration.</value>
        [DataMember(Name = "config", EmitDefaultValue = false)]
        public List<PerDocumentConfig>? Config { get; set; }

        /// <summary>
        /// When enabled, results will contain transaction processing log. Disabled by default
        /// </summary>
        /// <value>When enabled, results will contain transaction processing log. Disabled by default</value>
        [DataMember(Name = "log", EmitDefaultValue = false)]
        public bool? Log { get; set; }

        /// <summary>
        /// Force use of specific template ID and skip document type identification step.
        /// </summary>
        /// <value>Force use of specific template ID and skip document type identification step.</value>
        [DataMember(Name = "forceDocID", EmitDefaultValue = false)]
        public int? ForceDocID { get; set; }

        /// <summary>
        /// When disabled, text field OCR will be done as is and then the recognized value will be matched to the field mask for validity. If enabled, we are trying to read a field value with maximum efforts to match the mask and provide a correctly formatted value, making assumptions based on the provided field mask in the template. Enabled by default.
        /// </summary>
        /// <value>When disabled, text field OCR will be done as is and then the recognized value will be matched to the field mask for validity. If enabled, we are trying to read a field value with maximum efforts to match the mask and provide a correctly formatted value, making assumptions based on the provided field mask in the template. Enabled by default.</value>
        [DataMember(Name = "matchTextFieldMask", EmitDefaultValue = false)]
        public bool? MatchTextFieldMask { get; set; }

        /// <summary>
        /// When enabled, shorten the list of candidates to process during document detection in a single image process mode. Reduces processing time for specific backgrounds. Enabled by default.
        /// </summary>
        /// <value>When enabled, shorten the list of candidates to process during document detection in a single image process mode. Reduces processing time for specific backgrounds. Enabled by default.</value>
        [DataMember(Name = "fastDocDetect", EmitDefaultValue = false)]
        [Obsolete]
        public bool? FastDocDetect { get; set; }

        /// <summary>
        /// When enabled, fail OCR field validity, if there is a glare over the text field on the image. Disabled by default.
        /// </summary>
        /// <value>When enabled, fail OCR field validity, if there is a glare over the text field on the image. Disabled by default.</value>
        [DataMember(Name = "updateOCRValidityByGlare", EmitDefaultValue = false)]
        public bool? UpdateOCRValidityByGlare { get; set; }

        /// <summary>
        /// When enabled, each field in template will be checked for value presence and if the field is marked as required, but has no value, it will have &#39;error&#39; in validity status. Disabled by default.
        /// </summary>
        /// <value>When enabled, each field in template will be checked for value presence and if the field is marked as required, but has no value, it will have &#39;error&#39; in validity status. Disabled by default.</value>
        [DataMember(Name = "checkRequiredTextFields", EmitDefaultValue = false)]
        public bool? CheckRequiredTextFields { get; set; }

        /// <summary>
        /// When enabled, returns cropped barcode images for unknown documents. Disabled by default.
        /// </summary>
        /// <value>When enabled, returns cropped barcode images for unknown documents. Disabled by default.</value>
        [DataMember(Name = "returnCroppedBarcode", EmitDefaultValue = false)]
        public bool? ReturnCroppedBarcode { get; set; }

        /// <summary>
        /// Gets or Sets ImageQa
        /// </summary>
        [DataMember(Name = "imageQa", EmitDefaultValue = false)]
        public ImageQA? ImageQa { get; set; }

        /// <summary>
        /// When enabled, the image quality check status affects the document optical and overall status. Disabled by default.
        /// </summary>
        /// <value>When enabled, the image quality check status affects the document optical and overall status. Disabled by default.</value>
        [DataMember(Name = "strictImageQuality", EmitDefaultValue = false)]
        public bool? StrictImageQuality { get; set; }

        /// <summary>
        /// Deprecated. Please use strictImageQuality instead. When enabled, image quality checks status affects document optical and overall status. Disabled by default.
        /// </summary>
        /// <value>Deprecated. Please use strictImageQuality instead. When enabled, image quality checks status affects document optical and overall status. Disabled by default.</value>
        [DataMember(Name = "respectImageQuality", EmitDefaultValue = false)]
        [Obsolete]
        public bool? RespectImageQuality { get; set; }

        /// <summary>
        /// When enabled, no graphic fields will be cropped from document image. Disabled by default.
        /// </summary>
        /// <value>When enabled, no graphic fields will be cropped from document image. Disabled by default.</value>
        [DataMember(Name = "noGraphics", EmitDefaultValue = false)]
        public bool? NoGraphics { get; set; }

        /// <summary>
        /// When enabled, all personal data will be forcibly removed from the logs. Disabled by default.
        /// </summary>
        /// <value>When enabled, all personal data will be forcibly removed from the logs. Disabled by default.</value>
        [DataMember(Name = "depersonalizeLog", EmitDefaultValue = false)]
        public bool? DepersonalizeLog { get; set; }

        /// <summary>
        /// This option allows locating and cropping multiple documents from one image if enabled. Disabled by default.
        /// </summary>
        /// <value>This option allows locating and cropping multiple documents from one image if enabled. Disabled by default.</value>
        [DataMember(Name = "multiDocOnImage", EmitDefaultValue = false)]
        public bool? MultiDocOnImage { get; set; }

        /// <summary>
        /// This option allows shifting the date of expiry into the future or past for number of months specified. This is useful, for example, in some cases when document might be still valid for some period after original expiration date to prevent negative validity status for such documents. Or by shifting the date to the past will set negative validity for the documents that is about to expire in a specified number of months. 0 by default
        /// </summary>
        /// <value>This option allows shifting the date of expiry into the future or past for number of months specified. This is useful, for example, in some cases when document might be still valid for some period after original expiration date to prevent negative validity status for such documents. Or by shifting the date to the past will set negative validity for the documents that is about to expire in a specified number of months. 0 by default</value>
        [DataMember(Name = "shiftExpiryDate", EmitDefaultValue = false)]
        public int? ShiftExpiryDate { get; set; }

        /// <summary>
        /// This options allows specifying the minimal age in years of the document holder for the document to be considered valid.
        /// </summary>
        /// <value>This options allows specifying the minimal age in years of the document holder for the document to be considered valid.</value>
        [DataMember(Name = "minimalHolderAge", EmitDefaultValue = false)]
        public int? MinimalHolderAge { get; set; }

        /// <summary>
        /// When enabled, returns input images in output. Disabled by default.
        /// </summary>
        /// <value>When enabled, returns input images in output. Disabled by default.</value>
        [DataMember(Name = "returnUncroppedImage", EmitDefaultValue = false)]
        public bool? ReturnUncroppedImage { get; set; }

        /// <summary>
        /// This option allows limiting MRZ formats to be recognized by specifying them in array.
        /// </summary>
        /// <value>This option allows limiting MRZ formats to be recognized by specifying them in array.</value>
        [DataMember(Name = "mrzFormatsFilter", EmitDefaultValue = false)]
        public List<MRZFormat>? MrzFormatsFilter { get; set; }

        /// <summary>
        /// When enabled, make sure that in series processing MRZ is located fully inside the result document image, if present on the document. Enabling this option may add extra processing time, by disabling optimizations, but allows more stability in output image quality. Disabled by default.
        /// </summary>
        /// <value>When enabled, make sure that in series processing MRZ is located fully inside the result document image, if present on the document. Enabling this option may add extra processing time, by disabling optimizations, but allows more stability in output image quality. Disabled by default.</value>
        [DataMember(Name = "forceReadMrzBeforeLocate", EmitDefaultValue = false)]
        public bool? ForceReadMrzBeforeLocate { get; set; }

        /// <summary>
        /// This option can be disabled to stop parsing after barcode is read. Enabled by default.
        /// </summary>
        /// <value>This option can be disabled to stop parsing after barcode is read. Enabled by default.</value>
        [DataMember(Name = "parseBarcodes", EmitDefaultValue = false)]
        public bool? ParseBarcodes { get; set; }

        /// <summary>
        /// When enabled, the Surname and GivenNames fields from MRZ will be divided into ft_First_Name, ft_Second_Name, ft_Third_Name, ft_Fourth_Name, ft_Last_Name fields. Disabled by default.
        /// </summary>
        /// <value>When enabled, the Surname and GivenNames fields from MRZ will be divided into ft_First_Name, ft_Second_Name, ft_Third_Name, ft_Fourth_Name, ft_Last_Name fields. Disabled by default.</value>
        [DataMember(Name = "splitNames", EmitDefaultValue = false)]
        public bool? SplitNames { get; set; }

        /// <summary>
        /// When enabled, OCR of perforated fields in the document template will not be performed. Disabled by default.
        /// </summary>
        /// <value>When enabled, OCR of perforated fields in the document template will not be performed. Disabled by default.</value>
        [DataMember(Name = "disablePerforationOCR", EmitDefaultValue = false)]
        public bool? DisablePerforationOCR { get; set; }

        /// <summary>
        /// List of specific eligible document types from DocumentType enum to recognize from. You may, for example, specify only passports to be recognized by setting this property. Empty by default.
        /// </summary>
        /// <value>List of specific eligible document types from DocumentType enum to recognize from. You may, for example, specify only passports to be recognized by setting this property. Empty by default.</value>
        [DataMember(Name = "documentGroupFilter", EmitDefaultValue = false)]
        public List<DocumentType>? DocumentGroupFilter { get; set; }

        /// <summary>
        /// Authenticity checks that should be performed regardless of the document type. The available checks are listed in the eRPRM_Authenticity enum. Note that only supported by your license checks can be added.
        /// </summary>
        /// <value>Authenticity checks that should be performed regardless of the document type. The available checks are listed in the eRPRM_Authenticity enum. Note that only supported by your license checks can be added.</value>
        [DataMember(Name = "processAuth", EmitDefaultValue = false)]
        public long? ProcessAuth { get; set; }

        /// <summary>
        /// This parameter is used to specify the document reader device type from which input images were captured. Default 0.
        /// </summary>
        /// <value>This parameter is used to specify the document reader device type from which input images were captured. Default 0.</value>
        [DataMember(Name = "deviceId", EmitDefaultValue = false)]
        public int? DeviceId { get; set; }

        /// <summary>
        /// This parameter is used to specify the document reader device type from which input images were captured. Default 0.
        /// </summary>
        /// <value>This parameter is used to specify the document reader device type from which input images were captured. Default 0.</value>
        [DataMember(Name = "deviceType", EmitDefaultValue = false)]
        public int? DeviceType { get; set; }

        /// <summary>
        /// This parameter is used to specify the document reader device type from which input images were captured
        /// </summary>
        /// <value>This parameter is used to specify the document reader device type from which input images were captured</value>
        [DataMember(Name = "deviceTypeHex", EmitDefaultValue = false)]
        public string? DeviceTypeHex { get; set; }

        /// <summary>
        /// This parameter is used to tell the processing engine to ignore any parameters saved in the image when scanned from the document reader device. Default false
        /// </summary>
        /// <value>This parameter is used to tell the processing engine to ignore any parameters saved in the image when scanned from the document reader device. Default false</value>
        [DataMember(Name = "ignoreDeviceIdFromImage", EmitDefaultValue = false)]
        public bool? IgnoreDeviceIdFromImage { get; set; }

        /// <summary>
        /// List of the document ID&#39;s to process. All documents will be processed, if empty.
        /// </summary>
        /// <value>List of the document ID&#39;s to process. All documents will be processed, if empty.</value>
        [DataMember(Name = "documentIdList", EmitDefaultValue = false)]
        public List<int>? DocumentIdList { get; set; }

        /// <summary>
        /// Gets or Sets Rfid
        /// </summary>
        [DataMember(Name = "rfid", EmitDefaultValue = false)]
        public ProcessParamsRfid? Rfid { get; set; }

        /// <summary>
        /// This parameter is used to enable authenticity checks
        /// </summary>
        /// <value>This parameter is used to enable authenticity checks</value>
        [DataMember(Name = "checkAuth", EmitDefaultValue = false)]
        public bool? CheckAuth { get; set; }

        /// <summary>
        /// Gets or Sets AuthParams
        /// </summary>
        [DataMember(Name = "authParams", EmitDefaultValue = false)]
        public AuthParams? AuthParams { get; set; }

        /// <summary>
        /// This parameter is used to generate numeric representation for issuing state and nationality codes
        /// </summary>
        /// <value>This parameter is used to generate numeric representation for issuing state and nationality codes</value>
        [DataMember(Name = "generateNumericCodes", EmitDefaultValue = false)]
        public bool? GenerateNumericCodes { get; set; }

        /// <summary>
        /// This parameter if enabled will require all necessary certificates to verify digital signature in barcode data to be present in order for the Barcode format check to succeed.
        /// </summary>
        /// <value>This parameter if enabled will require all necessary certificates to verify digital signature in barcode data to be present in order for the Barcode format check to succeed.</value>
        [DataMember(Name = "strictBarcodeDigitalSignatureCheck", EmitDefaultValue = false)]
        public bool? StrictBarcodeDigitalSignatureCheck { get; set; }

        /// <summary>
        /// Select the longest value from the different value sources and write it to the value field if comparison is done successfully. The parameter applies this logic to the personal names, such as given name, surname, surname and given name, middle name and etc.
        /// </summary>
        /// <value>Select the longest value from the different value sources and write it to the value field if comparison is done successfully. The parameter applies this logic to the personal names, such as given name, surname, surname and given name, middle name and etc.</value>
        [DataMember(Name = "selectLongestNames", EmitDefaultValue = false)]
        public bool? SelectLongestNames { get; set; }

        /// <summary>
        /// Set the types of barcodes to process.
        /// </summary>
        /// <value>Set the types of barcodes to process.</value>
        [DataMember(Name = "doBarcodes", EmitDefaultValue = false)]
        public List<InputBarcodeType>? DoBarcodes { get; set; }

        /// <summary>
        /// Set to force DL categories expiry date to affect the overall status or not. As documents usually have their own date of expiry, which might be less or greater than category expiry date, this might be handy for specific cases.
        /// </summary>
        /// <value>Set to force DL categories expiry date to affect the overall status or not. As documents usually have their own date of expiry, which might be less or greater than category expiry date, this might be handy for specific cases.</value>
        [DataMember(Name = "strictDLCategoryExpiry", EmitDefaultValue = false)]
        public bool? StrictDLCategoryExpiry { get; set; }

        /// <summary>
        /// Set to generate Alpha-2 codes for nationality and issuing state fields.
        /// </summary>
        /// <value>Set to generate Alpha-2 codes for nationality and issuing state fields.</value>
        [DataMember(Name = "generateAlpha2Codes", EmitDefaultValue = false)]
        public bool? GenerateAlpha2Codes { get; set; }

        /// <summary>
        /// Limits the number of pages to be processed from a PDF file.
        /// </summary>
        /// <value>Limits the number of pages to be processed from a PDF file.</value>
        [DataMember(Name = "pdfPagesLimit", EmitDefaultValue = false)]
        public int? PdfPagesLimit { get; set; }

        /// <summary>
        /// This parameter if enabled will ignore the minimum barcode resolution needed to start processing.
        /// </summary>
        /// <value>This parameter if enabled will ignore the minimum barcode resolution needed to start processing.</value>
        [DataMember(Name = "disableAuthResolutionFilter", EmitDefaultValue = false)]
        public bool? DisableAuthResolutionFilter { get; set; }

        /// <summary>
        /// When enabled, this parameter marks security checks that don’t meet minimum requirements as &#39;Failed&#39; (instead of &#39;WasNotDone&#39;), which causes the overall security status to be &#39;Failed&#39;.
        /// </summary>
        /// <value>When enabled, this parameter marks security checks that don’t meet minimum requirements as &#39;Failed&#39; (instead of &#39;WasNotDone&#39;), which causes the overall security status to be &#39;Failed&#39;.</value>
        [DataMember(Name = "strictSecurityChecks", EmitDefaultValue = false)]
        public bool? StrictSecurityChecks { get; set; }

        /// <summary>
        /// Allows transliteration to be turned on or off; by default, it is enabled.
        /// </summary>
        /// <value>Allows transliteration to be turned on or off; by default, it is enabled.</value>
        [DataMember(Name = "returnTransliteratedFields", EmitDefaultValue = false)]
        public bool? ReturnTransliteratedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessParams {\n");
            sb.Append("  GenerateDTCVC: ").Append(GenerateDTCVC).Append("\n");
            sb.Append("  LcidFilter: ").Append(LcidFilter).Append("\n");
            sb.Append("  CheckLiveness: ").Append(CheckLiveness).Append("\n");
            sb.Append("  LcidIgnoreFilter: ").Append(LcidIgnoreFilter).Append("\n");
            sb.Append("  OneShotIdentification: ").Append(OneShotIdentification).Append("\n");
            sb.Append("  UseFaceApi: ").Append(UseFaceApi).Append("\n");
            sb.Append("  FaceApi: ").Append(FaceApi).Append("\n");
            sb.Append("  DoDetectCan: ").Append(DoDetectCan).Append("\n");
            sb.Append("  ImageOutputMaxHeight: ").Append(ImageOutputMaxHeight).Append("\n");
            sb.Append("  ImageOutputMaxWidth: ").Append(ImageOutputMaxWidth).Append("\n");
            sb.Append("  Scenario: ").Append(Scenario).Append("\n");
            sb.Append("  ResultTypeOutput: ").Append(ResultTypeOutput).Append("\n");
            sb.Append("  DoublePageSpread: ").Append(DoublePageSpread).Append("\n");
            sb.Append("  GenerateDoublePageSpreadImage: ").Append(GenerateDoublePageSpreadImage).Append("\n");
            sb.Append("  FieldTypesFilter: ").Append(FieldTypesFilter).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  MeasureSystem: ").Append(MeasureSystem).Append("\n");
            sb.Append("  ImageDpiOutMax: ").Append(ImageDpiOutMax).Append("\n");
            sb.Append("  AlreadyCropped: ").Append(AlreadyCropped).Append("\n");
            sb.Append("  CustomParams: ").Append(CustomParams).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  LogLevel: ").Append(LogLevel).Append("\n");
            sb.Append("  ForceDocID: ").Append(ForceDocID).Append("\n");
            sb.Append("  MatchTextFieldMask: ").Append(MatchTextFieldMask).Append("\n");
            sb.Append("  FastDocDetect: ").Append(FastDocDetect).Append("\n");
            sb.Append("  UpdateOCRValidityByGlare: ").Append(UpdateOCRValidityByGlare).Append("\n");
            sb.Append("  CheckRequiredTextFields: ").Append(CheckRequiredTextFields).Append("\n");
            sb.Append("  ReturnCroppedBarcode: ").Append(ReturnCroppedBarcode).Append("\n");
            sb.Append("  ImageQa: ").Append(ImageQa).Append("\n");
            sb.Append("  StrictImageQuality: ").Append(StrictImageQuality).Append("\n");
            sb.Append("  RespectImageQuality: ").Append(RespectImageQuality).Append("\n");
            sb.Append("  ForceDocFormat: ").Append(ForceDocFormat).Append("\n");
            sb.Append("  NoGraphics: ").Append(NoGraphics).Append("\n");
            sb.Append("  DepersonalizeLog: ").Append(DepersonalizeLog).Append("\n");
            sb.Append("  MultiDocOnImage: ").Append(MultiDocOnImage).Append("\n");
            sb.Append("  ShiftExpiryDate: ").Append(ShiftExpiryDate).Append("\n");
            sb.Append("  MinimalHolderAge: ").Append(MinimalHolderAge).Append("\n");
            sb.Append("  ReturnUncroppedImage: ").Append(ReturnUncroppedImage).Append("\n");
            sb.Append("  MrzFormatsFilter: ").Append(MrzFormatsFilter).Append("\n");
            sb.Append("  ForceReadMrzBeforeLocate: ").Append(ForceReadMrzBeforeLocate).Append("\n");
            sb.Append("  ParseBarcodes: ").Append(ParseBarcodes).Append("\n");
            sb.Append("  ConvertCase: ").Append(ConvertCase).Append("\n");
            sb.Append("  SplitNames: ").Append(SplitNames).Append("\n");
            sb.Append("  DisablePerforationOCR: ").Append(DisablePerforationOCR).Append("\n");
            sb.Append("  DocumentGroupFilter: ").Append(DocumentGroupFilter).Append("\n");
            sb.Append("  ProcessAuth: ").Append(ProcessAuth).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  DeviceTypeHex: ").Append(DeviceTypeHex).Append("\n");
            sb.Append("  IgnoreDeviceIdFromImage: ").Append(IgnoreDeviceIdFromImage).Append("\n");
            sb.Append("  DocumentIdList: ").Append(DocumentIdList).Append("\n");
            sb.Append("  Rfid: ").Append(Rfid).Append("\n");
            sb.Append("  CheckAuth: ").Append(CheckAuth).Append("\n");
            sb.Append("  AuthParams: ").Append(AuthParams).Append("\n");
            sb.Append("  MrzDetectMode: ").Append(MrzDetectMode).Append("\n");
            sb.Append("  GenerateNumericCodes: ").Append(GenerateNumericCodes).Append("\n");
            sb.Append("  StrictBarcodeDigitalSignatureCheck: ").Append(StrictBarcodeDigitalSignatureCheck).Append("\n");
            sb.Append("  SelectLongestNames: ").Append(SelectLongestNames).Append("\n");
            sb.Append("  DoBarcodes: ").Append(DoBarcodes).Append("\n");
            sb.Append("  StrictDLCategoryExpiry: ").Append(StrictDLCategoryExpiry).Append("\n");
            sb.Append("  GenerateAlpha2Codes: ").Append(GenerateAlpha2Codes).Append("\n");
            sb.Append("  PdfPagesLimit: ").Append(PdfPagesLimit).Append("\n");
            sb.Append("  DisableAuthResolutionFilter: ").Append(DisableAuthResolutionFilter).Append("\n");
            sb.Append("  StrictSecurityChecks: ").Append(StrictSecurityChecks).Append("\n");
            sb.Append("  ReturnTransliteratedFields: ").Append(ReturnTransliteratedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
