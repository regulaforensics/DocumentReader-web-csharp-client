// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// CrossSourceValueComparison
    /// </summary>
    public partial class CrossSourceValueComparison : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossSourceValueComparison" /> class.
        /// </summary>
        /// <param name="sourceLeft">sourceLeft</param>
        /// <param name="sourceRight">sourceRight</param>
        /// <param name="status">status</param>
        [JsonConstructor]
        public CrossSourceValueComparison(Source sourceLeft, Source sourceRight, CheckResult status)
        {
            SourceLeft = sourceLeft;
            SourceRight = sourceRight;
            Status = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SourceLeft
        /// </summary>
        [JsonPropertyName("sourceLeft")]
        public Source SourceLeft { get; set; }

        /// <summary>
        /// Gets or Sets SourceRight
        /// </summary>
        [JsonPropertyName("sourceRight")]
        public Source SourceRight { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public CheckResult Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CrossSourceValueComparison {\n");
            sb.Append("  SourceLeft: ").Append(SourceLeft).Append("\n");
            sb.Append("  SourceRight: ").Append(SourceRight).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CrossSourceValueComparison" />
    /// </summary>
    public class CrossSourceValueComparisonJsonConverter : JsonConverter<CrossSourceValueComparison>
    {
        /// <summary>
        /// Deserializes json to <see cref="CrossSourceValueComparison" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CrossSourceValueComparison Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Source?> sourceLeft = default;
            Option<Source?> sourceRight = default;
            Option<CheckResult?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sourceLeft":
                            string? sourceLeftRawValue = utf8JsonReader.GetString();
                            if (sourceLeftRawValue != null)
                                sourceLeft = new Option<Source?>(SourceValueConverter.FromStringOrDefault(sourceLeftRawValue));
                            break;
                        case "sourceRight":
                            string? sourceRightRawValue = utf8JsonReader.GetString();
                            if (sourceRightRawValue != null)
                                sourceRight = new Option<Source?>(SourceValueConverter.FromStringOrDefault(sourceRightRawValue));
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!sourceLeft.IsSet)
                throw new ArgumentException("Property is required for class CrossSourceValueComparison.", nameof(sourceLeft));

            if (!sourceRight.IsSet)
                throw new ArgumentException("Property is required for class CrossSourceValueComparison.", nameof(sourceRight));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class CrossSourceValueComparison.", nameof(status));

            if (sourceLeft.IsSet && sourceLeft.Value == null)
                throw new ArgumentNullException(nameof(sourceLeft), "Property is not nullable for class CrossSourceValueComparison.");

            if (sourceRight.IsSet && sourceRight.Value == null)
                throw new ArgumentNullException(nameof(sourceRight), "Property is not nullable for class CrossSourceValueComparison.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class CrossSourceValueComparison.");

            return new CrossSourceValueComparison(sourceLeft.Value!.Value!, sourceRight.Value!.Value!, status.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CrossSourceValueComparison" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="crossSourceValueComparison"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CrossSourceValueComparison crossSourceValueComparison, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, crossSourceValueComparison, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CrossSourceValueComparison" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="crossSourceValueComparison"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CrossSourceValueComparison crossSourceValueComparison, JsonSerializerOptions jsonSerializerOptions)
        {
            var sourceLeftRawValue = SourceValueConverter.ToJsonValue(crossSourceValueComparison.SourceLeft);
            writer.WriteString("sourceLeft", sourceLeftRawValue);

            var sourceRightRawValue = SourceValueConverter.ToJsonValue(crossSourceValueComparison.SourceRight);
            writer.WriteString("sourceRight", sourceRightRawValue);

            var statusRawValue = CheckResultValueConverter.ToJsonValue(crossSourceValueComparison.Status);
            writer.WriteNumber("status", statusRawValue);
        }
    }
}
