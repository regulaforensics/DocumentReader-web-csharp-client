// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Document processing scenario
    /// </summary>
    /// <value>Document processing scenario</value>
    public enum Scenario
    {
        /// <summary>
        /// Enum MRZ for value: Mrz
        /// </summary>
        MRZ = 1,

        /// <summary>
        /// Enum BARCODE for value: Barcode
        /// </summary>
        BARCODE = 2,

        /// <summary>
        /// Enum LOCATE for value: Locate
        /// </summary>
        LOCATE = 3,

        /// <summary>
        /// Enum OCR for value: Ocr
        /// </summary>
        OCR = 4,

        /// <summary>
        /// Enum DOCTYPE for value: DocType
        /// </summary>
        DOCTYPE = 5,

        /// <summary>
        /// Enum MRZ_OR_BARCODE for value: MrzOrBarcode
        /// </summary>
        MRZ_OR_BARCODE = 6,

        /// <summary>
        /// Enum MRZ_OR_LOCATE for value: MrzOrLocate
        /// </summary>
        MRZ_OR_LOCATE = 7,

        /// <summary>
        /// Enum MRZ_AND_LOCATE for value: MrzAndLocate
        /// </summary>
        MRZ_AND_LOCATE = 8,

        /// <summary>
        /// Enum BARCODE_AND_LOCATE for value: BarcodeAndLocate
        /// </summary>
        BARCODE_AND_LOCATE = 9,

        /// <summary>
        /// Enum MRZ_OR_OCR for value: MrzOrOcr
        /// </summary>
        MRZ_OR_OCR = 10,

        /// <summary>
        /// Enum MRZ_OR_BARCODE_OR_OCR for value: MrzOrBarcodeOrOcr
        /// </summary>
        MRZ_OR_BARCODE_OR_OCR = 11,

        /// <summary>
        /// Enum LOCATE_VISUAL_AND_MRZ_OR_OCR for value: LocateVisual_And_MrzOrOcr
        /// </summary>
        LOCATE_VISUAL_AND_MRZ_OR_OCR = 12,

        /// <summary>
        /// Enum FULL_PROCESS for value: FullProcess
        /// </summary>
        FULL_PROCESS = 13,

        /// <summary>
        /// Enum FULL_AUTH for value: FullAuth
        /// </summary>
        FULL_AUTH = 14,

        /// <summary>
        /// Enum RUS_STAMP for value: RusStamp
        /// </summary>
        RUS_STAMP = 15,

        /// <summary>
        /// Enum OCR_FREE for value: OcrFree
        /// </summary>
        OCR_FREE = 16,

        /// <summary>
        /// Enum CREDIT_CARD for value: CreditCard
        /// </summary>
        CREDIT_CARD = 17,

        /// <summary>
        /// Enum CAPTURE for value: Capture
        /// </summary>
        CAPTURE = 18,

        /// <summary>
        /// Enum DTC for value: DTC
        /// </summary>
        DTC = 19
    }

    /// <summary>
    /// Converts <see cref="Scenario"/> to and from the JSON value
    /// </summary>
    public static class ScenarioValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Scenario"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Scenario FromString(string value)
        {
            if (value.Equals("Mrz"))
                return Scenario.MRZ;

            if (value.Equals("Barcode"))
                return Scenario.BARCODE;

            if (value.Equals("Locate"))
                return Scenario.LOCATE;

            if (value.Equals("Ocr"))
                return Scenario.OCR;

            if (value.Equals("DocType"))
                return Scenario.DOCTYPE;

            if (value.Equals("MrzOrBarcode"))
                return Scenario.MRZ_OR_BARCODE;

            if (value.Equals("MrzOrLocate"))
                return Scenario.MRZ_OR_LOCATE;

            if (value.Equals("MrzAndLocate"))
                return Scenario.MRZ_AND_LOCATE;

            if (value.Equals("BarcodeAndLocate"))
                return Scenario.BARCODE_AND_LOCATE;

            if (value.Equals("MrzOrOcr"))
                return Scenario.MRZ_OR_OCR;

            if (value.Equals("MrzOrBarcodeOrOcr"))
                return Scenario.MRZ_OR_BARCODE_OR_OCR;

            if (value.Equals("LocateVisual_And_MrzOrOcr"))
                return Scenario.LOCATE_VISUAL_AND_MRZ_OR_OCR;

            if (value.Equals("FullProcess"))
                return Scenario.FULL_PROCESS;

            if (value.Equals("FullAuth"))
                return Scenario.FULL_AUTH;

            if (value.Equals("RusStamp"))
                return Scenario.RUS_STAMP;

            if (value.Equals("OcrFree"))
                return Scenario.OCR_FREE;

            if (value.Equals("CreditCard"))
                return Scenario.CREDIT_CARD;

            if (value.Equals("Capture"))
                return Scenario.CAPTURE;

            if (value.Equals("DTC"))
                return Scenario.DTC;

            throw new NotImplementedException($"Could not convert value to type Scenario: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Scenario"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Scenario? FromStringOrDefault(string value)
        {
            if (value.Equals("Mrz"))
                return Scenario.MRZ;

            if (value.Equals("Barcode"))
                return Scenario.BARCODE;

            if (value.Equals("Locate"))
                return Scenario.LOCATE;

            if (value.Equals("Ocr"))
                return Scenario.OCR;

            if (value.Equals("DocType"))
                return Scenario.DOCTYPE;

            if (value.Equals("MrzOrBarcode"))
                return Scenario.MRZ_OR_BARCODE;

            if (value.Equals("MrzOrLocate"))
                return Scenario.MRZ_OR_LOCATE;

            if (value.Equals("MrzAndLocate"))
                return Scenario.MRZ_AND_LOCATE;

            if (value.Equals("BarcodeAndLocate"))
                return Scenario.BARCODE_AND_LOCATE;

            if (value.Equals("MrzOrOcr"))
                return Scenario.MRZ_OR_OCR;

            if (value.Equals("MrzOrBarcodeOrOcr"))
                return Scenario.MRZ_OR_BARCODE_OR_OCR;

            if (value.Equals("LocateVisual_And_MrzOrOcr"))
                return Scenario.LOCATE_VISUAL_AND_MRZ_OR_OCR;

            if (value.Equals("FullProcess"))
                return Scenario.FULL_PROCESS;

            if (value.Equals("FullAuth"))
                return Scenario.FULL_AUTH;

            if (value.Equals("RusStamp"))
                return Scenario.RUS_STAMP;

            if (value.Equals("OcrFree"))
                return Scenario.OCR_FREE;

            if (value.Equals("CreditCard"))
                return Scenario.CREDIT_CARD;

            if (value.Equals("Capture"))
                return Scenario.CAPTURE;

            if (value.Equals("DTC"))
                return Scenario.DTC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Scenario"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Scenario value)
        {
            if (value == Scenario.MRZ)
                return "Mrz";

            if (value == Scenario.BARCODE)
                return "Barcode";

            if (value == Scenario.LOCATE)
                return "Locate";

            if (value == Scenario.OCR)
                return "Ocr";

            if (value == Scenario.DOCTYPE)
                return "DocType";

            if (value == Scenario.MRZ_OR_BARCODE)
                return "MrzOrBarcode";

            if (value == Scenario.MRZ_OR_LOCATE)
                return "MrzOrLocate";

            if (value == Scenario.MRZ_AND_LOCATE)
                return "MrzAndLocate";

            if (value == Scenario.BARCODE_AND_LOCATE)
                return "BarcodeAndLocate";

            if (value == Scenario.MRZ_OR_OCR)
                return "MrzOrOcr";

            if (value == Scenario.MRZ_OR_BARCODE_OR_OCR)
                return "MrzOrBarcodeOrOcr";

            if (value == Scenario.LOCATE_VISUAL_AND_MRZ_OR_OCR)
                return "LocateVisual_And_MrzOrOcr";

            if (value == Scenario.FULL_PROCESS)
                return "FullProcess";

            if (value == Scenario.FULL_AUTH)
                return "FullAuth";

            if (value == Scenario.RUS_STAMP)
                return "RusStamp";

            if (value == Scenario.OCR_FREE)
                return "OcrFree";

            if (value == Scenario.CREDIT_CARD)
                return "CreditCard";

            if (value == Scenario.CAPTURE)
                return "Capture";

            if (value == Scenario.DTC)
                return "DTC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Scenario"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ScenarioJsonConverter : JsonConverter<Scenario>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Scenario Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Scenario? result = rawValue == null
                ? null
                : ScenarioValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Scenario to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scenario"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Scenario scenario, JsonSerializerOptions options)
        {
            writer.WriteStringValue(scenario.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Scenario"/>
    /// </summary>
    public class ScenarioNullableJsonConverter : JsonConverter<Scenario?>
    {
        /// <summary>
        /// Returns a Scenario from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Scenario? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Scenario? result = rawValue == null
                ? null
                : ScenarioValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scenario"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Scenario? scenario, JsonSerializerOptions options)
        {
            writer.WriteStringValue(scenario?.ToString() ?? "null");
        }
    }
}
