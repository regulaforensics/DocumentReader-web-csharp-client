// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Enumeration contains a set of constants that define the source of certificate used in the procedure of document security object digital signature verification
    /// </summary>
    /// <value>Enumeration contains a set of constants that define the source of certificate used in the procedure of document security object digital signature verification</value>
    public enum RfidCertificateOrigin
    {
        /// <summary>
        /// Enum UNDEFINED for value: 0
        /// </summary>
        UNDEFINED = 0,

        /// <summary>
        /// Enum PKD for value: 1
        /// </summary>
        PKD = 1,

        /// <summary>
        /// Enum SECURITY_OBJECT for value: 2
        /// </summary>
        SECURITY_OBJECT = 2,

        /// <summary>
        /// Enum USER_DEFINED for value: 3
        /// </summary>
        USER_DEFINED = 3,

        /// <summary>
        /// Enum MASTER_LIST_PKD for value: 4
        /// </summary>
        MASTER_LIST_PKD = 4,

        /// <summary>
        /// Enum MASTER_LIST_SO for value: 5
        /// </summary>
        MASTER_LIST_SO = 5,

        /// <summary>
        /// Enum DEFECT_LIST_SO for value: 6
        /// </summary>
        DEFECT_LIST_SO = 6,

        /// <summary>
        /// Enum DEVIATION_LIST_SO for value: 7
        /// </summary>
        DEVIATION_LIST_SO = 7,

        /// <summary>
        /// Enum BLACK_LIST_SO for value: 8
        /// </summary>
        BLACK_LIST_SO = 8
    }

    /// <summary>
    /// Converts <see cref="RfidCertificateOrigin"/> to and from the JSON value
    /// </summary>
    public static class RfidCertificateOriginValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RfidCertificateOrigin"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RfidCertificateOrigin FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return RfidCertificateOrigin.UNDEFINED;

            if (value.Equals((1).ToString()))
                return RfidCertificateOrigin.PKD;

            if (value.Equals((2).ToString()))
                return RfidCertificateOrigin.SECURITY_OBJECT;

            if (value.Equals((3).ToString()))
                return RfidCertificateOrigin.USER_DEFINED;

            if (value.Equals((4).ToString()))
                return RfidCertificateOrigin.MASTER_LIST_PKD;

            if (value.Equals((5).ToString()))
                return RfidCertificateOrigin.MASTER_LIST_SO;

            if (value.Equals((6).ToString()))
                return RfidCertificateOrigin.DEFECT_LIST_SO;

            if (value.Equals((7).ToString()))
                return RfidCertificateOrigin.DEVIATION_LIST_SO;

            if (value.Equals((8).ToString()))
                return RfidCertificateOrigin.BLACK_LIST_SO;

            throw new NotImplementedException($"Could not convert value to type RfidCertificateOrigin: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RfidCertificateOrigin"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RfidCertificateOrigin? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return RfidCertificateOrigin.UNDEFINED;

            if (value.Equals((1).ToString()))
                return RfidCertificateOrigin.PKD;

            if (value.Equals((2).ToString()))
                return RfidCertificateOrigin.SECURITY_OBJECT;

            if (value.Equals((3).ToString()))
                return RfidCertificateOrigin.USER_DEFINED;

            if (value.Equals((4).ToString()))
                return RfidCertificateOrigin.MASTER_LIST_PKD;

            if (value.Equals((5).ToString()))
                return RfidCertificateOrigin.MASTER_LIST_SO;

            if (value.Equals((6).ToString()))
                return RfidCertificateOrigin.DEFECT_LIST_SO;

            if (value.Equals((7).ToString()))
                return RfidCertificateOrigin.DEVIATION_LIST_SO;

            if (value.Equals((8).ToString()))
                return RfidCertificateOrigin.BLACK_LIST_SO;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RfidCertificateOrigin"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(RfidCertificateOrigin value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidCertificateOrigin"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RfidCertificateOriginJsonConverter : JsonConverter<RfidCertificateOrigin>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RfidCertificateOrigin Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RfidCertificateOrigin? result = rawValue == null
                ? null
                : RfidCertificateOriginValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RfidCertificateOrigin to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidCertificateOrigin"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RfidCertificateOrigin rfidCertificateOrigin, JsonSerializerOptions options)
        {
            writer.WriteStringValue(rfidCertificateOrigin.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidCertificateOrigin"/>
    /// </summary>
    public class RfidCertificateOriginNullableJsonConverter : JsonConverter<RfidCertificateOrigin?>
    {
        /// <summary>
        /// Returns a RfidCertificateOrigin from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RfidCertificateOrigin? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RfidCertificateOrigin? result = rawValue == null
                ? null
                : RfidCertificateOriginValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidCertificateOrigin"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RfidCertificateOrigin? rfidCertificateOrigin, JsonSerializerOptions options)
        {
            writer.WriteStringValue(rfidCertificateOrigin?.ToString() ?? "null");
        }
    }
}
