/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// IdentItem
    /// </summary>
    [DataContract(Name = "IdentItem")]
    public partial class IdentItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ElementType
        /// </summary>
        [DataMember(Name = "ElementType", IsRequired = true, EmitDefaultValue = true)]
        public SecurityFeatureType ElementType { get; set; }

        /// <summary>
        /// Gets or Sets LightIndex
        /// </summary>
        [DataMember(Name = "LightIndex", IsRequired = true, EmitDefaultValue = true)]
        public Light LightIndex { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdentItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentItem" /> class.
        /// </summary>
        /// <param name="elementType">elementType (required).</param>
        /// <param name="lightIndex">lightIndex (required).</param>
        /// <param name="area">area.</param>
        /// <param name="image">image (required).</param>
        /// <param name="etalonImage">etalonImage (required).</param>
        /// <param name="areaList">areaList.</param>
        /// <param name="elementID">elementID.</param>
        /// <param name="result">result.</param>
        public IdentItem(SecurityFeatureType elementType = default(SecurityFeatureType), Light lightIndex = default(Light), RectangleCoordinates area = default(RectangleCoordinates), ImageData image = default(ImageData), ImageData etalonImage = default(ImageData), AreaContainer areaList = default(AreaContainer), int elementID = default(int), int result = default(int))
        {
            this.ElementType = elementType;
            this.LightIndex = lightIndex;
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new ArgumentNullException("image is a required property for IdentItem and cannot be null");
            }
            this.Image = image;
            // to ensure "etalonImage" is required (not null)
            if (etalonImage == null)
            {
                throw new ArgumentNullException("etalonImage is a required property for IdentItem and cannot be null");
            }
            this.EtalonImage = etalonImage;
            this.Area = area;
            this.AreaList = areaList;
            this.ElementID = elementID;
            this.Result = result;
        }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name = "Area", EmitDefaultValue = false)]
        public RectangleCoordinates? Area { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "Image", IsRequired = true, EmitDefaultValue = true)]
        public ImageData Image { get; set; }

        /// <summary>
        /// Gets or Sets EtalonImage
        /// </summary>
        [DataMember(Name = "EtalonImage", IsRequired = true, EmitDefaultValue = true)]
        public ImageData EtalonImage { get; set; }

        /// <summary>
        /// Gets or Sets AreaList
        /// </summary>
        [DataMember(Name = "AreaList", EmitDefaultValue = false)]
        public AreaContainer? AreaList { get; set; }

        /// <summary>
        /// Gets or Sets ElementID
        /// </summary>
        [DataMember(Name = "ElementID", EmitDefaultValue = false)]
        public int? ElementID { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "Result", EmitDefaultValue = false)]
        public int? Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentItem {\n");
            sb.Append("  ElementType: ").Append(ElementType).Append("\n");
            sb.Append("  LightIndex: ").Append(LightIndex).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  EtalonImage: ").Append(EtalonImage).Append("\n");
            sb.Append("  AreaList: ").Append(AreaList).Append("\n");
            sb.Append("  ElementID: ").Append(ElementID).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
