// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// IdentItem
    /// </summary>
    public partial class IdentItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentItem" /> class.
        /// </summary>
        /// <param name="elementType">elementType</param>
        /// <param name="lightIndex">lightIndex</param>
        /// <param name="image">image</param>
        /// <param name="etalonImage">etalonImage</param>
        /// <param name="area">area</param>
        /// <param name="areaList">areaList</param>
        [JsonConstructor]
        public IdentItem(SecurityFeatureType elementType, Light lightIndex, ImageData image, ImageData etalonImage, Option<RectangleCoordinates?> area = default, Option<AreaContainer?> areaList = default)
        {
            ElementType = elementType;
            LightIndex = lightIndex;
            Image = image;
            EtalonImage = etalonImage;
            AreaOption = area;
            AreaListOption = areaList;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ElementType
        /// </summary>
        [JsonPropertyName("ElementType")]
        public SecurityFeatureType ElementType { get; set; }

        /// <summary>
        /// Gets or Sets LightIndex
        /// </summary>
        [JsonPropertyName("LightIndex")]
        public Light LightIndex { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [JsonPropertyName("Image")]
        public ImageData Image { get; set; }

        /// <summary>
        /// Gets or Sets EtalonImage
        /// </summary>
        [JsonPropertyName("EtalonImage")]
        public ImageData EtalonImage { get; set; }

        /// <summary>
        /// Used to track the state of Area
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RectangleCoordinates?> AreaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [JsonPropertyName("Area")]
        public RectangleCoordinates? Area { get { return this.AreaOption; } set { this.AreaOption = new(value); } }

        /// <summary>
        /// Used to track the state of AreaList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AreaContainer?> AreaListOption { get; private set; }

        /// <summary>
        /// Gets or Sets AreaList
        /// </summary>
        [JsonPropertyName("AreaList")]
        public AreaContainer? AreaList { get { return this.AreaListOption; } set { this.AreaListOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentItem {\n");
            sb.Append("  ElementType: ").Append(ElementType).Append("\n");
            sb.Append("  LightIndex: ").Append(LightIndex).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  EtalonImage: ").Append(EtalonImage).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  AreaList: ").Append(AreaList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IdentItem" />
    /// </summary>
    public class IdentItemJsonConverter : JsonConverter<IdentItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="IdentItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IdentItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<SecurityFeatureType?> elementType = default;
            Option<Light?> lightIndex = default;
            Option<ImageData?> image = default;
            Option<ImageData?> etalonImage = default;
            Option<RectangleCoordinates?> area = default;
            Option<AreaContainer?> areaList = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ElementType":
                            string? elementTypeRawValue = utf8JsonReader.GetString();
                            if (elementTypeRawValue != null)
                                elementType = new Option<SecurityFeatureType?>(SecurityFeatureTypeValueConverter.FromStringOrDefault(elementTypeRawValue));
                            break;
                        case "LightIndex":
                            string? lightIndexRawValue = utf8JsonReader.GetString();
                            if (lightIndexRawValue != null)
                                lightIndex = new Option<Light?>(LightValueConverter.FromStringOrDefault(lightIndexRawValue));
                            break;
                        case "Image":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                image = new Option<ImageData?>(JsonSerializer.Deserialize<ImageData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "EtalonImage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                etalonImage = new Option<ImageData?>(JsonSerializer.Deserialize<ImageData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Area":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                area = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "AreaList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                areaList = new Option<AreaContainer?>(JsonSerializer.Deserialize<AreaContainer>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!elementType.IsSet)
                throw new ArgumentException("Property is required for class IdentItem.", nameof(elementType));

            if (!lightIndex.IsSet)
                throw new ArgumentException("Property is required for class IdentItem.", nameof(lightIndex));

            if (!image.IsSet)
                throw new ArgumentException("Property is required for class IdentItem.", nameof(image));

            if (!etalonImage.IsSet)
                throw new ArgumentException("Property is required for class IdentItem.", nameof(etalonImage));

            if (elementType.IsSet && elementType.Value == null)
                throw new ArgumentNullException(nameof(elementType), "Property is not nullable for class IdentItem.");

            if (lightIndex.IsSet && lightIndex.Value == null)
                throw new ArgumentNullException(nameof(lightIndex), "Property is not nullable for class IdentItem.");

            if (image.IsSet && image.Value == null)
                throw new ArgumentNullException(nameof(image), "Property is not nullable for class IdentItem.");

            if (etalonImage.IsSet && etalonImage.Value == null)
                throw new ArgumentNullException(nameof(etalonImage), "Property is not nullable for class IdentItem.");

            if (area.IsSet && area.Value == null)
                throw new ArgumentNullException(nameof(area), "Property is not nullable for class IdentItem.");

            if (areaList.IsSet && areaList.Value == null)
                throw new ArgumentNullException(nameof(areaList), "Property is not nullable for class IdentItem.");

            return new IdentItem(elementType.Value!.Value!, lightIndex.Value!.Value!, image.Value!, etalonImage.Value!, area, areaList);
        }

        /// <summary>
        /// Serializes a <see cref="IdentItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="identItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IdentItem identItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, identItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IdentItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="identItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IdentItem identItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (identItem.Image == null)
                throw new ArgumentNullException(nameof(identItem.Image), "Property is required for class IdentItem.");

            if (identItem.EtalonImage == null)
                throw new ArgumentNullException(nameof(identItem.EtalonImage), "Property is required for class IdentItem.");

            if (identItem.AreaOption.IsSet && identItem.Area == null)
                throw new ArgumentNullException(nameof(identItem.Area), "Property is required for class IdentItem.");

            if (identItem.AreaListOption.IsSet && identItem.AreaList == null)
                throw new ArgumentNullException(nameof(identItem.AreaList), "Property is required for class IdentItem.");

            var elementTypeRawValue = SecurityFeatureTypeValueConverter.ToJsonValue(identItem.ElementType);
            writer.WriteNumber("ElementType", elementTypeRawValue);

            var lightIndexRawValue = LightValueConverter.ToJsonValue(identItem.LightIndex);
            writer.WriteNumber("LightIndex", lightIndexRawValue);

            writer.WritePropertyName("Image");
            JsonSerializer.Serialize(writer, identItem.Image, jsonSerializerOptions);
            writer.WritePropertyName("EtalonImage");
            JsonSerializer.Serialize(writer, identItem.EtalonImage, jsonSerializerOptions);
            if (identItem.AreaOption.IsSet)
            {
                writer.WritePropertyName("Area");
                JsonSerializer.Serialize(writer, identItem.Area, jsonSerializerOptions);
            }
            if (identItem.AreaListOption.IsSet)
            {
                writer.WritePropertyName("AreaList");
                JsonSerializer.Serialize(writer, identItem.AreaList, jsonSerializerOptions);
            }
        }
    }
}
