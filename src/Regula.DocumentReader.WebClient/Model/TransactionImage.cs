// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TransactionImage
    /// </summary>
    public partial class TransactionImage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionImage" /> class.
        /// </summary>
        /// <param name="image">image</param>
        [JsonConstructor]
        public TransactionImage(Option<ImagesFieldValue?> image = default)
        {
            ImageOption = image;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Image
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ImagesFieldValue?> ImageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [JsonPropertyName("image")]
        public ImagesFieldValue? Image { get { return this.ImageOption; } set { this.ImageOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionImage {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionImage" />
    /// </summary>
    public class TransactionImageJsonConverter : JsonConverter<TransactionImage>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransactionImage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionImage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ImagesFieldValue?> image = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "image":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                image = new Option<ImagesFieldValue?>(JsonSerializer.Deserialize<ImagesFieldValue>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (image.IsSet && image.Value == null)
                throw new ArgumentNullException(nameof(image), "Property is not nullable for class TransactionImage.");

            return new TransactionImage(image);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionImage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionImage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionImage transactionImage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, transactionImage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionImage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionImage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TransactionImage transactionImage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionImage.ImageOption.IsSet && transactionImage.Image == null)
                throw new ArgumentNullException(nameof(transactionImage.Image), "Property is required for class TransactionImage.");

            if (transactionImage.ImageOption.IsSet)
            {
                writer.WritePropertyName("image");
                JsonSerializer.Serialize(writer, transactionImage.Image, jsonSerializerOptions);
            }
        }
    }
}
