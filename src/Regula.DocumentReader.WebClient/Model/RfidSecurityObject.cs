// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the contents of a single document security object (SO) and the results of its check within the context of the communication session with electronic document
    /// </summary>
    public partial class RfidSecurityObject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidSecurityObject" /> class.
        /// </summary>
        /// <param name="varVersion">Security object version</param>
        /// <param name="objectType">Identifier of the security object</param>
        /// <param name="fileReference">Reference to the source file of the security object data</param>
        /// <param name="notifications">List of remarks arisen during the analysis of SO data structure.</param>
        /// <param name="signerInfos">List of containers to store information about digital signature objects contained in the SO</param>
        [JsonConstructor]
        public RfidSecurityObject(decimal varVersion, string objectType, decimal fileReference, List<ParsingNotificationCodes> notifications, List<RfidSignerInfoEx> signerInfos)
        {
            VarVersion = varVersion;
            ObjectType = objectType;
            FileReference = fileReference;
            Notifications = notifications;
            SignerInfos = signerInfos;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Security object version
        /// </summary>
        /// <value>Security object version</value>
        [JsonPropertyName("Version")]
        public decimal VarVersion { get; set; }

        /// <summary>
        /// Identifier of the security object
        /// </summary>
        /// <value>Identifier of the security object</value>
        [JsonPropertyName("ObjectType")]
        public string ObjectType { get; set; }

        /// <summary>
        /// Reference to the source file of the security object data
        /// </summary>
        /// <value>Reference to the source file of the security object data</value>
        [JsonPropertyName("FileReference")]
        public decimal FileReference { get; set; }

        /// <summary>
        /// List of remarks arisen during the analysis of SO data structure.
        /// </summary>
        /// <value>List of remarks arisen during the analysis of SO data structure.</value>
        [JsonPropertyName("Notifications")]
        public List<ParsingNotificationCodes> Notifications { get; set; }

        /// <summary>
        /// List of containers to store information about digital signature objects contained in the SO
        /// </summary>
        /// <value>List of containers to store information about digital signature objects contained in the SO</value>
        [JsonPropertyName("SignerInfos")]
        public List<RfidSignerInfoEx> SignerInfos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidSecurityObject {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  FileReference: ").Append(FileReference).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  SignerInfos: ").Append(SignerInfos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidSecurityObject" />
    /// </summary>
    public class RfidSecurityObjectJsonConverter : JsonConverter<RfidSecurityObject>
    {
        /// <summary>
        /// Deserializes json to <see cref="RfidSecurityObject" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RfidSecurityObject Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> varVersion = default;
            Option<string?> objectType = default;
            Option<decimal?> fileReference = default;
            Option<List<ParsingNotificationCodes>?> notifications = default;
            Option<List<RfidSignerInfoEx>?> signerInfos = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Version":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varVersion = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "ObjectType":
                            objectType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "FileReference":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fileReference = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Notifications":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                notifications = new Option<List<ParsingNotificationCodes>?>(JsonSerializer.Deserialize<List<ParsingNotificationCodes>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "SignerInfos":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                signerInfos = new Option<List<RfidSignerInfoEx>?>(JsonSerializer.Deserialize<List<RfidSignerInfoEx>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class RfidSecurityObject.", nameof(varVersion));

            if (!objectType.IsSet)
                throw new ArgumentException("Property is required for class RfidSecurityObject.", nameof(objectType));

            if (!fileReference.IsSet)
                throw new ArgumentException("Property is required for class RfidSecurityObject.", nameof(fileReference));

            if (!notifications.IsSet)
                throw new ArgumentException("Property is required for class RfidSecurityObject.", nameof(notifications));

            if (!signerInfos.IsSet)
                throw new ArgumentException("Property is required for class RfidSecurityObject.", nameof(signerInfos));

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class RfidSecurityObject.");

            if (objectType.IsSet && objectType.Value == null)
                throw new ArgumentNullException(nameof(objectType), "Property is not nullable for class RfidSecurityObject.");

            if (fileReference.IsSet && fileReference.Value == null)
                throw new ArgumentNullException(nameof(fileReference), "Property is not nullable for class RfidSecurityObject.");

            if (notifications.IsSet && notifications.Value == null)
                throw new ArgumentNullException(nameof(notifications), "Property is not nullable for class RfidSecurityObject.");

            if (signerInfos.IsSet && signerInfos.Value == null)
                throw new ArgumentNullException(nameof(signerInfos), "Property is not nullable for class RfidSecurityObject.");

            return new RfidSecurityObject(varVersion.Value!.Value!, objectType.Value!, fileReference.Value!.Value!, notifications.Value!, signerInfos.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RfidSecurityObject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidSecurityObject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RfidSecurityObject rfidSecurityObject, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rfidSecurityObject, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RfidSecurityObject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidSecurityObject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RfidSecurityObject rfidSecurityObject, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rfidSecurityObject.ObjectType == null)
                throw new ArgumentNullException(nameof(rfidSecurityObject.ObjectType), "Property is required for class RfidSecurityObject.");

            if (rfidSecurityObject.Notifications == null)
                throw new ArgumentNullException(nameof(rfidSecurityObject.Notifications), "Property is required for class RfidSecurityObject.");

            if (rfidSecurityObject.SignerInfos == null)
                throw new ArgumentNullException(nameof(rfidSecurityObject.SignerInfos), "Property is required for class RfidSecurityObject.");

            writer.WriteNumber("Version", rfidSecurityObject.VarVersion);

            writer.WriteString("ObjectType", rfidSecurityObject.ObjectType);

            writer.WriteNumber("FileReference", rfidSecurityObject.FileReference);

            writer.WritePropertyName("Notifications");
            JsonSerializer.Serialize(writer, rfidSecurityObject.Notifications, jsonSerializerOptions);
            writer.WritePropertyName("SignerInfos");
            JsonSerializer.Serialize(writer, rfidSecurityObject.SignerInfos, jsonSerializerOptions);
        }
    }
}
