/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the contents of a single document security object (SO) and the results of its check within the context of the communication session with electronic document
    /// </summary>
    [DataContract(Name = "RfidSecurityObject")]
    public partial class RfidSecurityObject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidSecurityObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidSecurityObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidSecurityObject" /> class.
        /// </summary>
        /// <param name="varVersion">Security object version (required).</param>
        /// <param name="objectType">Identifier of the security object (required).</param>
        /// <param name="fileReference">Reference to the source file of the security object data (required).</param>
        /// <param name="notifications">List of remarks arisen during the analysis of SO data structure. Can be ParsingErrorCodes or ParsingNotificationCodes enum. (required).</param>
        /// <param name="signerInfos">List of containers to store information about digital signature objects contained in the SO (required).</param>
        public RfidSecurityObject(decimal varVersion = default(decimal), string objectType = default(string), decimal fileReference = default(decimal), List<int> notifications = default(List<int>), List<RfidSignerInfoEx> signerInfos = default(List<RfidSignerInfoEx>))
        {
            this.VarVersion = varVersion;
            // to ensure "objectType" is required (not null)
            if (objectType == null)
            {
                throw new ArgumentNullException("objectType is a required property for RfidSecurityObject and cannot be null");
            }
            this.ObjectType = objectType;
            this.FileReference = fileReference;
            // to ensure "notifications" is required (not null)
            if (notifications == null)
            {
                throw new ArgumentNullException("notifications is a required property for RfidSecurityObject and cannot be null");
            }
            this.Notifications = notifications;
            // to ensure "signerInfos" is required (not null)
            if (signerInfos == null)
            {
                throw new ArgumentNullException("signerInfos is a required property for RfidSecurityObject and cannot be null");
            }
            this.SignerInfos = signerInfos;
        }

        /// <summary>
        /// Security object version
        /// </summary>
        /// <value>Security object version</value>
        [DataMember(Name = "Version", IsRequired = true, EmitDefaultValue = true)]
        public decimal VarVersion { get; set; }

        /// <summary>
        /// Identifier of the security object
        /// </summary>
        /// <value>Identifier of the security object</value>
        [DataMember(Name = "ObjectType", IsRequired = true, EmitDefaultValue = true)]
        public string ObjectType { get; set; }

        /// <summary>
        /// Reference to the source file of the security object data
        /// </summary>
        /// <value>Reference to the source file of the security object data</value>
        [DataMember(Name = "FileReference", IsRequired = true, EmitDefaultValue = true)]
        public decimal FileReference { get; set; }

        /// <summary>
        /// List of remarks arisen during the analysis of SO data structure. Can be ParsingErrorCodes or ParsingNotificationCodes enum.
        /// </summary>
        /// <value>List of remarks arisen during the analysis of SO data structure. Can be ParsingErrorCodes or ParsingNotificationCodes enum.</value>
        [DataMember(Name = "Notifications", IsRequired = true, EmitDefaultValue = true)]
        public List<int> Notifications { get; set; }

        /// <summary>
        /// List of containers to store information about digital signature objects contained in the SO
        /// </summary>
        /// <value>List of containers to store information about digital signature objects contained in the SO</value>
        [DataMember(Name = "SignerInfos", IsRequired = true, EmitDefaultValue = true)]
        public List<RfidSignerInfoEx> SignerInfos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidSecurityObject {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  FileReference: ").Append(FileReference).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  SignerInfos: ").Append(SignerInfos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
