// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ImagesField
    /// </summary>
    public partial class ImagesField : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesField" /> class.
        /// </summary>
        /// <param name="fieldName">Human readable field name. Do not bind to this name - use GraphicFieldType instead.</param>
        /// <param name="fieldType">fieldType</param>
        /// <param name="valueList">valueList</param>
        /// <param name="valueCount">Field value count</param>
        [JsonConstructor]
        public ImagesField(string fieldName, GraphicFieldType fieldType, List<ImagesFieldValue> valueList, Option<decimal?> valueCount = default)
        {
            FieldName = fieldName;
            FieldType = fieldType;
            ValueList = valueList;
            ValueCountOption = valueCount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [JsonPropertyName("fieldType")]
        public GraphicFieldType FieldType { get; set; }

        /// <summary>
        /// Human readable field name. Do not bind to this name - use GraphicFieldType instead.
        /// </summary>
        /// <value>Human readable field name. Do not bind to this name - use GraphicFieldType instead.</value>
        [JsonPropertyName("fieldName")]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or Sets ValueList
        /// </summary>
        [JsonPropertyName("valueList")]
        public List<ImagesFieldValue> ValueList { get; set; }

        /// <summary>
        /// Used to track the state of ValueCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ValueCountOption { get; private set; }

        /// <summary>
        /// Field value count
        /// </summary>
        /// <value>Field value count</value>
        [JsonPropertyName("valueCount")]
        public decimal? ValueCount { get { return this.ValueCountOption; } set { this.ValueCountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImagesField {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  ValueList: ").Append(ValueList).Append("\n");
            sb.Append("  ValueCount: ").Append(ValueCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImagesField" />
    /// </summary>
    public class ImagesFieldJsonConverter : JsonConverter<ImagesField>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImagesField" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImagesField Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> fieldName = default;
            Option<GraphicFieldType?> fieldType = default;
            Option<List<ImagesFieldValue>?> valueList = default;
            Option<decimal?> valueCount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fieldName":
                            fieldName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fieldType":
                            string? fieldTypeRawValue = utf8JsonReader.GetString();
                            if (fieldTypeRawValue != null)
                                fieldType = new Option<GraphicFieldType?>(GraphicFieldTypeValueConverter.FromStringOrDefault(fieldTypeRawValue));
                            break;
                        case "valueList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                valueList = new Option<List<ImagesFieldValue>?>(JsonSerializer.Deserialize<List<ImagesFieldValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "valueCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                valueCount = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fieldName.IsSet)
                throw new ArgumentException("Property is required for class ImagesField.", nameof(fieldName));

            if (!fieldType.IsSet)
                throw new ArgumentException("Property is required for class ImagesField.", nameof(fieldType));

            if (!valueList.IsSet)
                throw new ArgumentException("Property is required for class ImagesField.", nameof(valueList));

            if (fieldName.IsSet && fieldName.Value == null)
                throw new ArgumentNullException(nameof(fieldName), "Property is not nullable for class ImagesField.");

            if (fieldType.IsSet && fieldType.Value == null)
                throw new ArgumentNullException(nameof(fieldType), "Property is not nullable for class ImagesField.");

            if (valueList.IsSet && valueList.Value == null)
                throw new ArgumentNullException(nameof(valueList), "Property is not nullable for class ImagesField.");

            if (valueCount.IsSet && valueCount.Value == null)
                throw new ArgumentNullException(nameof(valueCount), "Property is not nullable for class ImagesField.");

            return new ImagesField(fieldName.Value!, fieldType.Value!.Value!, valueList.Value!, valueCount);
        }

        /// <summary>
        /// Serializes a <see cref="ImagesField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imagesField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImagesField imagesField, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, imagesField, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImagesField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imagesField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImagesField imagesField, JsonSerializerOptions jsonSerializerOptions)
        {
            if (imagesField.FieldName == null)
                throw new ArgumentNullException(nameof(imagesField.FieldName), "Property is required for class ImagesField.");

            if (imagesField.ValueList == null)
                throw new ArgumentNullException(nameof(imagesField.ValueList), "Property is required for class ImagesField.");

            writer.WriteString("fieldName", imagesField.FieldName);

            var fieldTypeRawValue = GraphicFieldTypeValueConverter.ToJsonValue(imagesField.FieldType);
            writer.WriteNumber("fieldType", fieldTypeRawValue);

            writer.WritePropertyName("valueList");
            JsonSerializer.Serialize(writer, imagesField.ValueList, jsonSerializerOptions);
            if (imagesField.ValueCountOption.IsSet)
                writer.WriteNumber("valueCount", imagesField.ValueCountOption.Value!.Value);
        }
    }
}
