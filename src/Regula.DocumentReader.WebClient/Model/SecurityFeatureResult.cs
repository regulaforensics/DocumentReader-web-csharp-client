/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// SecurityFeatureResult
    /// </summary>
    [DataContract]
    public partial class SecurityFeatureResult :  IEquatable<SecurityFeatureResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityFeatureResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecurityFeatureResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityFeatureResult" /> class.
        /// </summary>
        /// <param name="type">Same as authenticity result type, but used for safe parsing of not-described values: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/authenticity-result-type/ (required) (default to 0).</param>
        /// <param name="elementResult">elementResult.</param>
        /// <param name="elementDiagnose">elementDiagnose.</param>
        /// <param name="percentValue">percentValue.</param>
        /// <param name="elementType">elementType (required).</param>
        /// <param name="elementRect">elementRect (required).</param>
        /// <param name="visibility">visibility (required).</param>
        /// <param name="criticalFlag">criticalFlag (required).</param>
        /// <param name="areaList">areaList.</param>
        /// <param name="reserved2">reserved2.</param>
        public SecurityFeatureResult(int type = 0, Integer elementResult = default(Integer), Integer elementDiagnose = default(Integer), int percentValue = default(int), Integer elementType = default(Integer), RectangleCoordinates elementRect = default(RectangleCoordinates), Integer visibility = default(Integer), Integer criticalFlag = default(Integer), AreaContainer areaList = default(AreaContainer), int reserved2 = default(int))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SecurityFeatureResult and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            // to ensure "elementType" is required (not null)
            if (elementType == null)
            {
                throw new InvalidDataException("elementType is a required property for SecurityFeatureResult and cannot be null");
            }
            else
            {
                this.ElementType = elementType;
            }
            
            // to ensure "elementRect" is required (not null)
            if (elementRect == null)
            {
                throw new InvalidDataException("elementRect is a required property for SecurityFeatureResult and cannot be null");
            }
            else
            {
                this.ElementRect = elementRect;
            }
            
            // to ensure "visibility" is required (not null)
            if (visibility == null)
            {
                throw new InvalidDataException("visibility is a required property for SecurityFeatureResult and cannot be null");
            }
            else
            {
                this.Visibility = visibility;
            }
            
            // to ensure "criticalFlag" is required (not null)
            if (criticalFlag == null)
            {
                throw new InvalidDataException("criticalFlag is a required property for SecurityFeatureResult and cannot be null");
            }
            else
            {
                this.CriticalFlag = criticalFlag;
            }
            
            this.ElementResult = elementResult;
            this.ElementDiagnose = elementDiagnose;
            this.PercentValue = percentValue;
            this.AreaList = areaList;
            this.Reserved2 = reserved2;
        }
        
        /// <summary>
        /// Same as authenticity result type, but used for safe parsing of not-described values: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/authenticity-result-type/
        /// </summary>
        /// <value>Same as authenticity result type, but used for safe parsing of not-described values: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/authenticity-result-type/</value>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public int Type { get; set; }

        /// <summary>
        /// Gets or Sets ElementResult
        /// </summary>
        [DataMember(Name="ElementResult", EmitDefaultValue=false)]
        public Integer ElementResult { get; set; }

        /// <summary>
        /// Gets or Sets ElementDiagnose
        /// </summary>
        [DataMember(Name="ElementDiagnose", EmitDefaultValue=false)]
        public Integer ElementDiagnose { get; set; }

        /// <summary>
        /// Gets or Sets PercentValue
        /// </summary>
        [DataMember(Name="PercentValue", EmitDefaultValue=false)]
        public int PercentValue { get; set; }

        /// <summary>
        /// Gets or Sets ElementType
        /// </summary>
        [DataMember(Name="ElementType", EmitDefaultValue=true)]
        public Integer ElementType { get; set; }

        /// <summary>
        /// Gets or Sets ElementRect
        /// </summary>
        [DataMember(Name="ElementRect", EmitDefaultValue=true)]
        public RectangleCoordinates ElementRect { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name="Visibility", EmitDefaultValue=true)]
        public Integer Visibility { get; set; }

        /// <summary>
        /// Gets or Sets CriticalFlag
        /// </summary>
        [DataMember(Name="CriticalFlag", EmitDefaultValue=true)]
        public Integer CriticalFlag { get; set; }

        /// <summary>
        /// Gets or Sets AreaList
        /// </summary>
        [DataMember(Name="AreaList", EmitDefaultValue=false)]
        public AreaContainer AreaList { get; set; }

        /// <summary>
        /// Gets or Sets Reserved2
        /// </summary>
        [DataMember(Name="Reserved2", EmitDefaultValue=false)]
        public int Reserved2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecurityFeatureResult {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ElementResult: ").Append(ElementResult).Append("\n");
            sb.Append("  ElementDiagnose: ").Append(ElementDiagnose).Append("\n");
            sb.Append("  PercentValue: ").Append(PercentValue).Append("\n");
            sb.Append("  ElementType: ").Append(ElementType).Append("\n");
            sb.Append("  ElementRect: ").Append(ElementRect).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  CriticalFlag: ").Append(CriticalFlag).Append("\n");
            sb.Append("  AreaList: ").Append(AreaList).Append("\n");
            sb.Append("  Reserved2: ").Append(Reserved2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityFeatureResult);
        }

        /// <summary>
        /// Returns true if SecurityFeatureResult instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityFeatureResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityFeatureResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ElementResult == input.ElementResult ||
                    (this.ElementResult != null &&
                    this.ElementResult.Equals(input.ElementResult))
                ) && 
                (
                    this.ElementDiagnose == input.ElementDiagnose ||
                    (this.ElementDiagnose != null &&
                    this.ElementDiagnose.Equals(input.ElementDiagnose))
                ) && 
                (
                    this.PercentValue == input.PercentValue ||
                    (this.PercentValue != null &&
                    this.PercentValue.Equals(input.PercentValue))
                ) && 
                (
                    this.ElementType == input.ElementType ||
                    (this.ElementType != null &&
                    this.ElementType.Equals(input.ElementType))
                ) && 
                (
                    this.ElementRect == input.ElementRect ||
                    (this.ElementRect != null &&
                    this.ElementRect.Equals(input.ElementRect))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    (this.Visibility != null &&
                    this.Visibility.Equals(input.Visibility))
                ) && 
                (
                    this.CriticalFlag == input.CriticalFlag ||
                    (this.CriticalFlag != null &&
                    this.CriticalFlag.Equals(input.CriticalFlag))
                ) && 
                (
                    this.AreaList == input.AreaList ||
                    (this.AreaList != null &&
                    this.AreaList.Equals(input.AreaList))
                ) && 
                (
                    this.Reserved2 == input.Reserved2 ||
                    (this.Reserved2 != null &&
                    this.Reserved2.Equals(input.Reserved2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ElementResult != null)
                    hashCode = hashCode * 59 + this.ElementResult.GetHashCode();
                if (this.ElementDiagnose != null)
                    hashCode = hashCode * 59 + this.ElementDiagnose.GetHashCode();
                if (this.PercentValue != null)
                    hashCode = hashCode * 59 + this.PercentValue.GetHashCode();
                if (this.ElementType != null)
                    hashCode = hashCode * 59 + this.ElementType.GetHashCode();
                if (this.ElementRect != null)
                    hashCode = hashCode * 59 + this.ElementRect.GetHashCode();
                if (this.Visibility != null)
                    hashCode = hashCode * 59 + this.Visibility.GetHashCode();
                if (this.CriticalFlag != null)
                    hashCode = hashCode * 59 + this.CriticalFlag.GetHashCode();
                if (this.AreaList != null)
                    hashCode = hashCode * 59 + this.AreaList.GetHashCode();
                if (this.Reserved2 != null)
                    hashCode = hashCode * 59 + this.Reserved2.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
