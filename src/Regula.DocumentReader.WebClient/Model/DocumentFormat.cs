// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Defining the geometric format of documents in accordance with ISO / IEC 7810
    /// </summary>
    /// <value>Defining the geometric format of documents in accordance with ISO / IEC 7810</value>
    public enum DocumentFormat
    {
        /// <summary>
        /// Enum UNKNOWN for value: -1
        /// </summary>
        UNKNOWN = -1,

        /// <summary>
        /// Enum ID1 for value: 0
        /// </summary>
        ID1 = 0,

        /// <summary>
        /// Enum ID2 for value: 1
        /// </summary>
        ID2 = 1,

        /// <summary>
        /// Enum ID3 for value: 2
        /// </summary>
        ID3 = 2,

        /// <summary>
        /// Enum NON for value: 3
        /// </summary>
        NON = 3,

        /// <summary>
        /// Enum A4 for value: 4
        /// </summary>
        A4 = 4,

        /// <summary>
        /// Enum ID3_X2 for value: 5
        /// </summary>
        ID3_X2 = 5,

        /// <summary>
        /// Enum ID1_90 for value: 10
        /// </summary>
        ID1_90 = 10,

        /// <summary>
        /// Enum ID1_180 for value: 11
        /// </summary>
        ID1_180 = 11,

        /// <summary>
        /// Enum ID1_270 for value: 12
        /// </summary>
        ID1_270 = 12,

        /// <summary>
        /// Enum ID2_180 for value: 13
        /// </summary>
        ID2_180 = 13,

        /// <summary>
        /// Enum ID3_180 for value: 14
        /// </summary>
        ID3_180 = 14,

        /// <summary>
        /// Enum CUSTOM for value: 1000
        /// </summary>
        CUSTOM = 1000,

        /// <summary>
        /// Enum FLEXIBLE for value: 1002
        /// </summary>
        FLEXIBLE = 1002
    }

    /// <summary>
    /// Converts <see cref="DocumentFormat"/> to and from the JSON value
    /// </summary>
    public static class DocumentFormatValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DocumentFormat"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DocumentFormat FromString(string value)
        {
            if (value.Equals((-1).ToString()))
                return DocumentFormat.UNKNOWN;

            if (value.Equals((0).ToString()))
                return DocumentFormat.ID1;

            if (value.Equals((1).ToString()))
                return DocumentFormat.ID2;

            if (value.Equals((2).ToString()))
                return DocumentFormat.ID3;

            if (value.Equals((3).ToString()))
                return DocumentFormat.NON;

            if (value.Equals((4).ToString()))
                return DocumentFormat.A4;

            if (value.Equals((5).ToString()))
                return DocumentFormat.ID3_X2;

            if (value.Equals((10).ToString()))
                return DocumentFormat.ID1_90;

            if (value.Equals((11).ToString()))
                return DocumentFormat.ID1_180;

            if (value.Equals((12).ToString()))
                return DocumentFormat.ID1_270;

            if (value.Equals((13).ToString()))
                return DocumentFormat.ID2_180;

            if (value.Equals((14).ToString()))
                return DocumentFormat.ID3_180;

            if (value.Equals((1000).ToString()))
                return DocumentFormat.CUSTOM;

            if (value.Equals((1002).ToString()))
                return DocumentFormat.FLEXIBLE;

            throw new NotImplementedException($"Could not convert value to type DocumentFormat: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DocumentFormat"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DocumentFormat? FromStringOrDefault(string value)
        {
            if (value.Equals((-1).ToString()))
                return DocumentFormat.UNKNOWN;

            if (value.Equals((0).ToString()))
                return DocumentFormat.ID1;

            if (value.Equals((1).ToString()))
                return DocumentFormat.ID2;

            if (value.Equals((2).ToString()))
                return DocumentFormat.ID3;

            if (value.Equals((3).ToString()))
                return DocumentFormat.NON;

            if (value.Equals((4).ToString()))
                return DocumentFormat.A4;

            if (value.Equals((5).ToString()))
                return DocumentFormat.ID3_X2;

            if (value.Equals((10).ToString()))
                return DocumentFormat.ID1_90;

            if (value.Equals((11).ToString()))
                return DocumentFormat.ID1_180;

            if (value.Equals((12).ToString()))
                return DocumentFormat.ID1_270;

            if (value.Equals((13).ToString()))
                return DocumentFormat.ID2_180;

            if (value.Equals((14).ToString()))
                return DocumentFormat.ID3_180;

            if (value.Equals((1000).ToString()))
                return DocumentFormat.CUSTOM;

            if (value.Equals((1002).ToString()))
                return DocumentFormat.FLEXIBLE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DocumentFormat"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(DocumentFormat value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentFormat"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DocumentFormatJsonConverter : JsonConverter<DocumentFormat>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DocumentFormat Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DocumentFormat? result = rawValue == null
                ? null
                : DocumentFormatValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DocumentFormat to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentFormat"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DocumentFormat documentFormat, JsonSerializerOptions options)
        {
            writer.WriteStringValue(documentFormat.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentFormat"/>
    /// </summary>
    public class DocumentFormatNullableJsonConverter : JsonConverter<DocumentFormat?>
    {
        /// <summary>
        /// Returns a DocumentFormat from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DocumentFormat? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DocumentFormat? result = rawValue == null
                ? null
                : DocumentFormatValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentFormat"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DocumentFormat? documentFormat, JsonSerializerOptions options)
        {
            writer.WriteStringValue(documentFormat?.ToString() ?? "null");
        }
    }
}
