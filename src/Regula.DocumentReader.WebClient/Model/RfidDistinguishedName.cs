/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Contents of the identifier in binary form. Base64 encoded.
    /// </summary>
    [DataContract]
    public partial class RfidDistinguishedName :  IEquatable<RfidDistinguishedName>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidDistinguishedName" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidDistinguishedName() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidDistinguishedName" /> class.
        /// </summary>
        /// <param name="data">Contents of the identifier in binary form. Base64 encoded. (required).</param>
        /// <param name="friendlyName">friendlyName (required).</param>
        /// <param name="attributes">List of individual attributes contained in the identifier (required).</param>
        public RfidDistinguishedName(string data = default(string), TrfFtString friendlyName = default(TrfFtString), List<RfidAttributeName> attributes = default(List<RfidAttributeName>))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for RfidDistinguishedName and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            
            // to ensure "friendlyName" is required (not null)
            if (friendlyName == null)
            {
                throw new InvalidDataException("friendlyName is a required property for RfidDistinguishedName and cannot be null");
            }
            else
            {
                this.FriendlyName = friendlyName;
            }
            
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new InvalidDataException("attributes is a required property for RfidDistinguishedName and cannot be null");
            }
            else
            {
                this.Attributes = attributes;
            }
            
        }
        
        /// <summary>
        /// Contents of the identifier in binary form. Base64 encoded.
        /// </summary>
        /// <value>Contents of the identifier in binary form. Base64 encoded.</value>
        [DataMember(Name="Data", EmitDefaultValue=true)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets FriendlyName
        /// </summary>
        [DataMember(Name="FriendlyName", EmitDefaultValue=true)]
        public TrfFtString FriendlyName { get; set; }

        /// <summary>
        /// List of individual attributes contained in the identifier
        /// </summary>
        /// <value>List of individual attributes contained in the identifier</value>
        [DataMember(Name="Attributes", EmitDefaultValue=true)]
        public List<RfidAttributeName> Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RfidDistinguishedName {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  FriendlyName: ").Append(FriendlyName).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RfidDistinguishedName);
        }

        /// <summary>
        /// Returns true if RfidDistinguishedName instances are equal
        /// </summary>
        /// <param name="input">Instance of RfidDistinguishedName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RfidDistinguishedName input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.FriendlyName == input.FriendlyName ||
                    (this.FriendlyName != null &&
                    this.FriendlyName.Equals(input.FriendlyName))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.FriendlyName != null)
                    hashCode = hashCode * 59 + this.FriendlyName.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
