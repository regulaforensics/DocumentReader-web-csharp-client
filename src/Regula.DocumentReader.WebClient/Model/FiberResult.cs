// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// FiberResult
    /// </summary>
    public partial class FiberResult : AuthenticityCheckResultItem, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FiberResult" /> class.
        /// </summary>
        /// <param name="rectCount">For UV_Fibers authenticity result type</param>
        /// <param name="expectedCount">Expected fibers number. For UV_Fibers authentication result type</param>
        /// <param name="rectArray">Coordinates of located areas for defined fibers type</param>
        /// <param name="width">Fibers width value for located areas (in pixels)</param>
        /// <param name="length">Fibers length value for located areas (in pixels)</param>
        /// <param name="area">Fibers value for areas (in pixels)</param>
        /// <param name="colorValues">Fibers color value</param>
        /// <param name="elementResult">elementResult</param>
        /// <param name="elementDiagnose">elementDiagnose</param>
        /// <param name="percentValue">percentValue</param>
        /// <param name="lightValue">lightValue</param>
        /// <param name="lightDisp">For UV_Background authentication result type</param>
        [JsonConstructor]
        public FiberResult(int rectCount, int expectedCount, List<RectangleCoordinates> rectArray, List<int> width, List<int> length, List<int> area, List<int> colorValues, Option<CheckResult?> elementResult = default, Option<CheckDiagnose?> elementDiagnose = default, Option<int?> percentValue = default, Option<Light?> lightValue = default, Option<int?> lightDisp = default) : base(elementResult, elementDiagnose, percentValue)
        {
            RectCount = rectCount;
            ExpectedCount = expectedCount;
            RectArray = rectArray;
            Width = width;
            Length = length;
            Area = area;
            ColorValues = colorValues;
            LightValueOption = lightValue;
            LightDispOption = lightDisp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of LightValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Light?> LightValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets LightValue
        /// </summary>
        [JsonPropertyName("LightValue")]
        public Light? LightValue { get { return this.LightValueOption; } set { this.LightValueOption = new(value); } }

        /// <summary>
        /// For UV_Fibers authenticity result type
        /// </summary>
        /// <value>For UV_Fibers authenticity result type</value>
        [JsonPropertyName("RectCount")]
        public int RectCount { get; set; }

        /// <summary>
        /// Expected fibers number. For UV_Fibers authentication result type
        /// </summary>
        /// <value>Expected fibers number. For UV_Fibers authentication result type</value>
        [JsonPropertyName("ExpectedCount")]
        public int ExpectedCount { get; set; }

        /// <summary>
        /// Coordinates of located areas for defined fibers type
        /// </summary>
        /// <value>Coordinates of located areas for defined fibers type</value>
        [JsonPropertyName("RectArray")]
        public List<RectangleCoordinates> RectArray { get; set; }

        /// <summary>
        /// Fibers width value for located areas (in pixels)
        /// </summary>
        /// <value>Fibers width value for located areas (in pixels)</value>
        [JsonPropertyName("Width")]
        public List<int> Width { get; set; }

        /// <summary>
        /// Fibers length value for located areas (in pixels)
        /// </summary>
        /// <value>Fibers length value for located areas (in pixels)</value>
        [JsonPropertyName("Length")]
        public List<int> Length { get; set; }

        /// <summary>
        /// Fibers value for areas (in pixels)
        /// </summary>
        /// <value>Fibers value for areas (in pixels)</value>
        [JsonPropertyName("Area")]
        public List<int> Area { get; set; }

        /// <summary>
        /// Fibers color value
        /// </summary>
        /// <value>Fibers color value</value>
        /* <example>[BLUE, GREEN, RED]</example> */
        [JsonPropertyName("ColorValues")]
        public List<int> ColorValues { get; set; }

        /// <summary>
        /// Used to track the state of LightDisp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LightDispOption { get; private set; }

        /// <summary>
        /// For UV_Background authentication result type
        /// </summary>
        /// <value>For UV_Background authentication result type</value>
        [JsonPropertyName("LightDisp")]
        public int? LightDisp { get { return this.LightDispOption; } set { this.LightDispOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FiberResult {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  RectCount: ").Append(RectCount).Append("\n");
            sb.Append("  ExpectedCount: ").Append(ExpectedCount).Append("\n");
            sb.Append("  RectArray: ").Append(RectArray).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  ColorValues: ").Append(ColorValues).Append("\n");
            sb.Append("  LightValue: ").Append(LightValue).Append("\n");
            sb.Append("  LightDisp: ").Append(LightDisp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FiberResult" />
    /// </summary>
    public class FiberResultJsonConverter : JsonConverter<FiberResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="FiberResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FiberResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> rectCount = default;
            Option<int?> expectedCount = default;
            Option<List<RectangleCoordinates>?> rectArray = default;
            Option<List<int>?> width = default;
            Option<List<int>?> length = default;
            Option<List<int>?> area = default;
            Option<List<int>?> colorValues = default;
            Option<int?> type = default;
            Option<CheckResult?> elementResult = default;
            Option<CheckDiagnose?> elementDiagnose = default;
            Option<int?> percentValue = default;
            Option<Light?> lightValue = default;
            Option<int?> lightDisp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "RectCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rectCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ExpectedCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expectedCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "RectArray":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rectArray = new Option<List<RectangleCoordinates>?>(JsonSerializer.Deserialize<List<RectangleCoordinates>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Width":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                width = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Length":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                length = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Area":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                area = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ColorValues":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                colorValues = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Type":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                type = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ElementResult":
                            string? elementResultRawValue = utf8JsonReader.GetString();
                            if (elementResultRawValue != null)
                                elementResult = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(elementResultRawValue));
                            break;
                        case "ElementDiagnose":
                            string? elementDiagnoseRawValue = utf8JsonReader.GetString();
                            if (elementDiagnoseRawValue != null)
                                elementDiagnose = new Option<CheckDiagnose?>(CheckDiagnoseValueConverter.FromStringOrDefault(elementDiagnoseRawValue));
                            break;
                        case "PercentValue":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                percentValue = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "LightValue":
                            string? lightValueRawValue = utf8JsonReader.GetString();
                            if (lightValueRawValue != null)
                                lightValue = new Option<Light?>(LightValueConverter.FromStringOrDefault(lightValueRawValue));
                            break;
                        case "LightDisp":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lightDisp = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!rectCount.IsSet)
                throw new ArgumentException("Property is required for class FiberResult.", nameof(rectCount));

            if (!expectedCount.IsSet)
                throw new ArgumentException("Property is required for class FiberResult.", nameof(expectedCount));

            if (!rectArray.IsSet)
                throw new ArgumentException("Property is required for class FiberResult.", nameof(rectArray));

            if (!width.IsSet)
                throw new ArgumentException("Property is required for class FiberResult.", nameof(width));

            if (!length.IsSet)
                throw new ArgumentException("Property is required for class FiberResult.", nameof(length));

            if (!area.IsSet)
                throw new ArgumentException("Property is required for class FiberResult.", nameof(area));

            if (!colorValues.IsSet)
                throw new ArgumentException("Property is required for class FiberResult.", nameof(colorValues));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class FiberResult.", nameof(type));

            if (rectCount.IsSet && rectCount.Value == null)
                throw new ArgumentNullException(nameof(rectCount), "Property is not nullable for class FiberResult.");

            if (expectedCount.IsSet && expectedCount.Value == null)
                throw new ArgumentNullException(nameof(expectedCount), "Property is not nullable for class FiberResult.");

            if (rectArray.IsSet && rectArray.Value == null)
                throw new ArgumentNullException(nameof(rectArray), "Property is not nullable for class FiberResult.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class FiberResult.");

            if (length.IsSet && length.Value == null)
                throw new ArgumentNullException(nameof(length), "Property is not nullable for class FiberResult.");

            if (area.IsSet && area.Value == null)
                throw new ArgumentNullException(nameof(area), "Property is not nullable for class FiberResult.");

            if (colorValues.IsSet && colorValues.Value == null)
                throw new ArgumentNullException(nameof(colorValues), "Property is not nullable for class FiberResult.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class FiberResult.");

            if (elementResult.IsSet && elementResult.Value == null)
                throw new ArgumentNullException(nameof(elementResult), "Property is not nullable for class FiberResult.");

            if (elementDiagnose.IsSet && elementDiagnose.Value == null)
                throw new ArgumentNullException(nameof(elementDiagnose), "Property is not nullable for class FiberResult.");

            if (percentValue.IsSet && percentValue.Value == null)
                throw new ArgumentNullException(nameof(percentValue), "Property is not nullable for class FiberResult.");

            if (lightValue.IsSet && lightValue.Value == null)
                throw new ArgumentNullException(nameof(lightValue), "Property is not nullable for class FiberResult.");

            if (lightDisp.IsSet && lightDisp.Value == null)
                throw new ArgumentNullException(nameof(lightDisp), "Property is not nullable for class FiberResult.");

            return new FiberResult(rectCount.Value!.Value!, expectedCount.Value!.Value!, rectArray.Value!, width.Value!, length.Value!, area.Value!, colorValues.Value!, elementResult, elementDiagnose, percentValue, lightValue, lightDisp);
        }

        /// <summary>
        /// Serializes a <see cref="FiberResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fiberResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FiberResult fiberResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fiberResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FiberResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fiberResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FiberResult fiberResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fiberResult.RectArray == null)
                throw new ArgumentNullException(nameof(fiberResult.RectArray), "Property is required for class FiberResult.");

            if (fiberResult.Width == null)
                throw new ArgumentNullException(nameof(fiberResult.Width), "Property is required for class FiberResult.");

            if (fiberResult.Length == null)
                throw new ArgumentNullException(nameof(fiberResult.Length), "Property is required for class FiberResult.");

            if (fiberResult.Area == null)
                throw new ArgumentNullException(nameof(fiberResult.Area), "Property is required for class FiberResult.");

            if (fiberResult.ColorValues == null)
                throw new ArgumentNullException(nameof(fiberResult.ColorValues), "Property is required for class FiberResult.");

            writer.WriteNumber("RectCount", fiberResult.RectCount);

            writer.WriteNumber("ExpectedCount", fiberResult.ExpectedCount);

            writer.WritePropertyName("RectArray");
            JsonSerializer.Serialize(writer, fiberResult.RectArray, jsonSerializerOptions);
            writer.WritePropertyName("Width");
            JsonSerializer.Serialize(writer, fiberResult.Width, jsonSerializerOptions);
            writer.WritePropertyName("Length");
            JsonSerializer.Serialize(writer, fiberResult.Length, jsonSerializerOptions);
            writer.WritePropertyName("Area");
            JsonSerializer.Serialize(writer, fiberResult.Area, jsonSerializerOptions);
            writer.WritePropertyName("ColorValues");
            JsonSerializer.Serialize(writer, fiberResult.ColorValues, jsonSerializerOptions);
            writer.WriteString("Type", fiberResult.Type);

            if (fiberResult.ElementResultOption.IsSet)
            {
                var elementResultRawValue = CheckResultValueConverter.ToJsonValue(fiberResult.ElementResult!.Value);
                writer.WriteNumber("ElementResult", elementResultRawValue);
            }
            if (fiberResult.ElementDiagnoseOption.IsSet)
            {
                var elementDiagnoseRawValue = CheckDiagnoseValueConverter.ToJsonValue(fiberResult.ElementDiagnose!.Value);
                writer.WriteNumber("ElementDiagnose", elementDiagnoseRawValue);
            }
            if (fiberResult.PercentValueOption.IsSet)
                writer.WriteNumber("PercentValue", fiberResult.PercentValueOption.Value!.Value);

            if (fiberResult.LightValueOption.IsSet)
            {
                var lightValueRawValue = LightValueConverter.ToJsonValue(fiberResult.LightValue!.Value);
                writer.WriteNumber("LightValue", lightValueRawValue);
            }
            if (fiberResult.LightDispOption.IsSet)
                writer.WriteNumber("LightDisp", fiberResult.LightDispOption.Value!.Value);
        }
    }
}
