/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Extended document type info and Regula&#39;s &#39;Information Reference Systems&#39; links
    /// </summary>
    [DataContract]
    public partial class FDSIDList :  IEquatable<FDSIDList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FDSIDList" /> class.
        /// </summary>
        /// <param name="iCAOCode">ICAO code of the issuing country.</param>
        /// <param name="list">Document identifiers in &#39;Information Reference Systems&#39;.</param>
        /// <param name="dType">dType.</param>
        /// <param name="dFormat">dFormat.</param>
        /// <param name="dMRZ">Flag indicating the presence of MRZ on the document.</param>
        /// <param name="dDescription">Document description.</param>
        /// <param name="dYear">Year of publication of the document.</param>
        /// <param name="dCountryName">Issuing country name.</param>
        /// <param name="dStateCode">Issuing state code.</param>
        /// <param name="dStateName">Issuing state name.</param>
        public FDSIDList(string iCAOCode = default(string), List<int> list = default(List<int>), int dType = default(int), int dFormat = default(int), bool dMRZ = default(bool), string dDescription = default(string), string dYear = default(string), string dCountryName = default(string), string dStateCode = default(string), string dStateName = default(string))
        {
            this.ICAOCode = iCAOCode;
            this.List = list;
            this.DType = dType;
            this.DFormat = dFormat;
            this.DMRZ = dMRZ;
            this.DDescription = dDescription;
            this.DYear = dYear;
            this.DCountryName = dCountryName;
            this.DStateCode = dStateCode;
            this.DStateName = dStateName;
        }
        
        /// <summary>
        /// ICAO code of the issuing country
        /// </summary>
        /// <value>ICAO code of the issuing country</value>
        [DataMember(Name="ICAOCode", EmitDefaultValue=false)]
        public string ICAOCode { get; set; }

        /// <summary>
        /// Document identifiers in &#39;Information Reference Systems&#39;
        /// </summary>
        /// <value>Document identifiers in &#39;Information Reference Systems&#39;</value>
        [DataMember(Name="List", EmitDefaultValue=false)]
        public List<int> List { get; set; }

        /// <summary>
        /// Gets or Sets DType
        /// </summary>
        [DataMember(Name="dType", EmitDefaultValue=false)]
        public int DType { get; set; }

        /// <summary>
        /// Gets or Sets DFormat
        /// </summary>
        [DataMember(Name="dFormat", EmitDefaultValue=false)]
        public int DFormat { get; set; }

        /// <summary>
        /// Flag indicating the presence of MRZ on the document
        /// </summary>
        /// <value>Flag indicating the presence of MRZ on the document</value>
        [DataMember(Name="dMRZ", EmitDefaultValue=false)]
        public bool DMRZ { get; set; }

        /// <summary>
        /// Document description
        /// </summary>
        /// <value>Document description</value>
        [DataMember(Name="dDescription", EmitDefaultValue=false)]
        public string DDescription { get; set; }

        /// <summary>
        /// Year of publication of the document
        /// </summary>
        /// <value>Year of publication of the document</value>
        [DataMember(Name="dYear", EmitDefaultValue=false)]
        public string DYear { get; set; }

        /// <summary>
        /// Issuing country name
        /// </summary>
        /// <value>Issuing country name</value>
        [DataMember(Name="dCountryName", EmitDefaultValue=false)]
        public string DCountryName { get; set; }

        /// <summary>
        /// Issuing state code
        /// </summary>
        /// <value>Issuing state code</value>
        [DataMember(Name="dStateCode", EmitDefaultValue=false)]
        public string DStateCode { get; set; }

        /// <summary>
        /// Issuing state name
        /// </summary>
        /// <value>Issuing state name</value>
        [DataMember(Name="dStateName", EmitDefaultValue=false)]
        public string DStateName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FDSIDList {\n");
            sb.Append("  ICAOCode: ").Append(ICAOCode).Append("\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  DType: ").Append(DType).Append("\n");
            sb.Append("  DFormat: ").Append(DFormat).Append("\n");
            sb.Append("  DMRZ: ").Append(DMRZ).Append("\n");
            sb.Append("  DDescription: ").Append(DDescription).Append("\n");
            sb.Append("  DYear: ").Append(DYear).Append("\n");
            sb.Append("  DCountryName: ").Append(DCountryName).Append("\n");
            sb.Append("  DStateCode: ").Append(DStateCode).Append("\n");
            sb.Append("  DStateName: ").Append(DStateName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FDSIDList);
        }

        /// <summary>
        /// Returns true if FDSIDList instances are equal
        /// </summary>
        /// <param name="input">Instance of FDSIDList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FDSIDList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ICAOCode == input.ICAOCode ||
                    (this.ICAOCode != null &&
                    this.ICAOCode.Equals(input.ICAOCode))
                ) && 
                (
                    this.List == input.List ||
                    this.List != null &&
                    input.List != null &&
                    this.List.SequenceEqual(input.List)
                ) && 
                (
                    this.DType == input.DType ||
                    (this.DType != null &&
                    this.DType.Equals(input.DType))
                ) && 
                (
                    this.DFormat == input.DFormat ||
                    (this.DFormat != null &&
                    this.DFormat.Equals(input.DFormat))
                ) && 
                (
                    this.DMRZ == input.DMRZ ||
                    (this.DMRZ != null &&
                    this.DMRZ.Equals(input.DMRZ))
                ) && 
                (
                    this.DDescription == input.DDescription ||
                    (this.DDescription != null &&
                    this.DDescription.Equals(input.DDescription))
                ) && 
                (
                    this.DYear == input.DYear ||
                    (this.DYear != null &&
                    this.DYear.Equals(input.DYear))
                ) && 
                (
                    this.DCountryName == input.DCountryName ||
                    (this.DCountryName != null &&
                    this.DCountryName.Equals(input.DCountryName))
                ) && 
                (
                    this.DStateCode == input.DStateCode ||
                    (this.DStateCode != null &&
                    this.DStateCode.Equals(input.DStateCode))
                ) && 
                (
                    this.DStateName == input.DStateName ||
                    (this.DStateName != null &&
                    this.DStateName.Equals(input.DStateName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ICAOCode != null)
                    hashCode = hashCode * 59 + this.ICAOCode.GetHashCode();
                if (this.List != null)
                    hashCode = hashCode * 59 + this.List.GetHashCode();
                if (this.DType != null)
                    hashCode = hashCode * 59 + this.DType.GetHashCode();
                if (this.DFormat != null)
                    hashCode = hashCode * 59 + this.DFormat.GetHashCode();
                if (this.DMRZ != null)
                    hashCode = hashCode * 59 + this.DMRZ.GetHashCode();
                if (this.DDescription != null)
                    hashCode = hashCode * 59 + this.DDescription.GetHashCode();
                if (this.DYear != null)
                    hashCode = hashCode * 59 + this.DYear.GetHashCode();
                if (this.DCountryName != null)
                    hashCode = hashCode * 59 + this.DCountryName.GetHashCode();
                if (this.DStateCode != null)
                    hashCode = hashCode * 59 + this.DStateCode.GetHashCode();
                if (this.DStateName != null)
                    hashCode = hashCode * 59 + this.DStateName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ICAOCode (string) maxLength
            if(this.ICAOCode != null && this.ICAOCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ICAOCode, length must be less than 3.", new [] { "ICAOCode" });
            }

            // ICAOCode (string) minLength
            if(this.ICAOCode != null && this.ICAOCode.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ICAOCode, length must be greater than 3.", new [] { "ICAOCode" });
            }
            
            yield break;
        }
    }

}
