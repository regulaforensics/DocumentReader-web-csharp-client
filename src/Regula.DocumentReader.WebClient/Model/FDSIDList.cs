// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Extended document type info and Regula&#39;s &#39;Information Reference Systems&#39; links
    /// </summary>
    public partial class FDSIDList : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FDSIDList" /> class.
        /// </summary>
        /// <param name="iCAOCode">ICAO code of the issuing country</param>
        /// <param name="count">Number of elements in the List</param>
        /// <param name="list">Document identifiers in &#39;Information Reference Systems&#39;</param>
        /// <param name="dType">dType</param>
        /// <param name="dFormat">dFormat</param>
        /// <param name="dMRZ">Flag indicating the presence of MRZ on the document</param>
        /// <param name="dYear">Year of publication of the document</param>
        /// <param name="dCountryName">Issuing country name</param>
        /// <param name="isDeprecated">Whether the document is deprecated</param>
        /// <param name="dDescription">Document description</param>
        /// <param name="dStateCode">Issuing state code</param>
        /// <param name="dStateName">Issuing state name</param>
        [JsonConstructor]
        public FDSIDList(string iCAOCode, decimal count, List<int> list, DocumentType dType, DocumentFormat dFormat, bool dMRZ, string dYear, string dCountryName, bool isDeprecated, Option<string?> dDescription = default, Option<string?> dStateCode = default, Option<string?> dStateName = default)
        {
            ICAOCode = iCAOCode;
            Count = count;
            List = list;
            DType = dType;
            DFormat = dFormat;
            DMRZ = dMRZ;
            DYear = dYear;
            DCountryName = dCountryName;
            IsDeprecated = isDeprecated;
            DDescriptionOption = dDescription;
            DStateCodeOption = dStateCode;
            DStateNameOption = dStateName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets DType
        /// </summary>
        [JsonPropertyName("dType")]
        public DocumentType DType { get; set; }

        /// <summary>
        /// Gets or Sets DFormat
        /// </summary>
        [JsonPropertyName("dFormat")]
        public DocumentFormat DFormat { get; set; }

        /// <summary>
        /// ICAO code of the issuing country
        /// </summary>
        /// <value>ICAO code of the issuing country</value>
        [JsonPropertyName("ICAOCode")]
        public string ICAOCode { get; set; }

        /// <summary>
        /// Number of elements in the List
        /// </summary>
        /// <value>Number of elements in the List</value>
        [JsonPropertyName("Count")]
        public decimal Count { get; set; }

        /// <summary>
        /// Document identifiers in &#39;Information Reference Systems&#39;
        /// </summary>
        /// <value>Document identifiers in &#39;Information Reference Systems&#39;</value>
        [JsonPropertyName("List")]
        public List<int> List { get; set; }

        /// <summary>
        /// Flag indicating the presence of MRZ on the document
        /// </summary>
        /// <value>Flag indicating the presence of MRZ on the document</value>
        [JsonPropertyName("dMRZ")]
        public bool DMRZ { get; set; }

        /// <summary>
        /// Year of publication of the document
        /// </summary>
        /// <value>Year of publication of the document</value>
        [JsonPropertyName("dYear")]
        public string DYear { get; set; }

        /// <summary>
        /// Issuing country name
        /// </summary>
        /// <value>Issuing country name</value>
        [JsonPropertyName("dCountryName")]
        public string DCountryName { get; set; }

        /// <summary>
        /// Whether the document is deprecated
        /// </summary>
        /// <value>Whether the document is deprecated</value>
        [JsonPropertyName("isDeprecated")]
        public bool IsDeprecated { get; set; }

        /// <summary>
        /// Used to track the state of DDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DDescriptionOption { get; private set; }

        /// <summary>
        /// Document description
        /// </summary>
        /// <value>Document description</value>
        [JsonPropertyName("dDescription")]
        public string? DDescription { get { return this.DDescriptionOption; } set { this.DDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of DStateCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DStateCodeOption { get; private set; }

        /// <summary>
        /// Issuing state code
        /// </summary>
        /// <value>Issuing state code</value>
        [JsonPropertyName("dStateCode")]
        public string? DStateCode { get { return this.DStateCodeOption; } set { this.DStateCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DStateName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DStateNameOption { get; private set; }

        /// <summary>
        /// Issuing state name
        /// </summary>
        /// <value>Issuing state name</value>
        [JsonPropertyName("dStateName")]
        public string? DStateName { get { return this.DStateNameOption; } set { this.DStateNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FDSIDList {\n");
            sb.Append("  ICAOCode: ").Append(ICAOCode).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  DType: ").Append(DType).Append("\n");
            sb.Append("  DFormat: ").Append(DFormat).Append("\n");
            sb.Append("  DMRZ: ").Append(DMRZ).Append("\n");
            sb.Append("  DYear: ").Append(DYear).Append("\n");
            sb.Append("  DCountryName: ").Append(DCountryName).Append("\n");
            sb.Append("  IsDeprecated: ").Append(IsDeprecated).Append("\n");
            sb.Append("  DDescription: ").Append(DDescription).Append("\n");
            sb.Append("  DStateCode: ").Append(DStateCode).Append("\n");
            sb.Append("  DStateName: ").Append(DStateName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ICAOCode (string) maxLength
            if (this.ICAOCode != null && this.ICAOCode.Length > 3)
            {
                yield return new ValidationResult("Invalid value for ICAOCode, length must be less than 3.", new [] { "ICAOCode" });
            }

            // ICAOCode (string) minLength
            if (this.ICAOCode != null && this.ICAOCode.Length < 3)
            {
                yield return new ValidationResult("Invalid value for ICAOCode, length must be greater than 3.", new [] { "ICAOCode" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FDSIDList" />
    /// </summary>
    public class FDSIDListJsonConverter : JsonConverter<FDSIDList>
    {
        /// <summary>
        /// Deserializes json to <see cref="FDSIDList" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FDSIDList Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> iCAOCode = default;
            Option<decimal?> count = default;
            Option<List<int>?> list = default;
            Option<DocumentType?> dType = default;
            Option<DocumentFormat?> dFormat = default;
            Option<bool?> dMRZ = default;
            Option<string?> dYear = default;
            Option<string?> dCountryName = default;
            Option<bool?> isDeprecated = default;
            Option<string?> dDescription = default;
            Option<string?> dStateCode = default;
            Option<string?> dStateName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ICAOCode":
                            iCAOCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                count = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "List":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                list = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dType":
                            string? dTypeRawValue = utf8JsonReader.GetString();
                            if (dTypeRawValue != null)
                                dType = new Option<DocumentType?>(DocumentTypeValueConverter.FromStringOrDefault(dTypeRawValue));
                            break;
                        case "dFormat":
                            string? dFormatRawValue = utf8JsonReader.GetString();
                            if (dFormatRawValue != null)
                                dFormat = new Option<DocumentFormat?>(DocumentFormatValueConverter.FromStringOrDefault(dFormatRawValue));
                            break;
                        case "dMRZ":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dMRZ = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "dYear":
                            dYear = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dCountryName":
                            dCountryName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isDeprecated":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDeprecated = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "dDescription":
                            dDescription = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dStateCode":
                            dStateCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dStateName":
                            dStateName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!iCAOCode.IsSet)
                throw new ArgumentException("Property is required for class FDSIDList.", nameof(iCAOCode));

            if (!count.IsSet)
                throw new ArgumentException("Property is required for class FDSIDList.", nameof(count));

            if (!list.IsSet)
                throw new ArgumentException("Property is required for class FDSIDList.", nameof(list));

            if (!dType.IsSet)
                throw new ArgumentException("Property is required for class FDSIDList.", nameof(dType));

            if (!dFormat.IsSet)
                throw new ArgumentException("Property is required for class FDSIDList.", nameof(dFormat));

            if (!dMRZ.IsSet)
                throw new ArgumentException("Property is required for class FDSIDList.", nameof(dMRZ));

            if (!dYear.IsSet)
                throw new ArgumentException("Property is required for class FDSIDList.", nameof(dYear));

            if (!dCountryName.IsSet)
                throw new ArgumentException("Property is required for class FDSIDList.", nameof(dCountryName));

            if (!isDeprecated.IsSet)
                throw new ArgumentException("Property is required for class FDSIDList.", nameof(isDeprecated));

            if (iCAOCode.IsSet && iCAOCode.Value == null)
                throw new ArgumentNullException(nameof(iCAOCode), "Property is not nullable for class FDSIDList.");

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class FDSIDList.");

            if (list.IsSet && list.Value == null)
                throw new ArgumentNullException(nameof(list), "Property is not nullable for class FDSIDList.");

            if (dType.IsSet && dType.Value == null)
                throw new ArgumentNullException(nameof(dType), "Property is not nullable for class FDSIDList.");

            if (dFormat.IsSet && dFormat.Value == null)
                throw new ArgumentNullException(nameof(dFormat), "Property is not nullable for class FDSIDList.");

            if (dMRZ.IsSet && dMRZ.Value == null)
                throw new ArgumentNullException(nameof(dMRZ), "Property is not nullable for class FDSIDList.");

            if (dYear.IsSet && dYear.Value == null)
                throw new ArgumentNullException(nameof(dYear), "Property is not nullable for class FDSIDList.");

            if (dCountryName.IsSet && dCountryName.Value == null)
                throw new ArgumentNullException(nameof(dCountryName), "Property is not nullable for class FDSIDList.");

            if (isDeprecated.IsSet && isDeprecated.Value == null)
                throw new ArgumentNullException(nameof(isDeprecated), "Property is not nullable for class FDSIDList.");

            if (dDescription.IsSet && dDescription.Value == null)
                throw new ArgumentNullException(nameof(dDescription), "Property is not nullable for class FDSIDList.");

            if (dStateCode.IsSet && dStateCode.Value == null)
                throw new ArgumentNullException(nameof(dStateCode), "Property is not nullable for class FDSIDList.");

            if (dStateName.IsSet && dStateName.Value == null)
                throw new ArgumentNullException(nameof(dStateName), "Property is not nullable for class FDSIDList.");

            return new FDSIDList(iCAOCode.Value!, count.Value!.Value!, list.Value!, dType.Value!.Value!, dFormat.Value!.Value!, dMRZ.Value!.Value!, dYear.Value!, dCountryName.Value!, isDeprecated.Value!.Value!, dDescription, dStateCode, dStateName);
        }

        /// <summary>
        /// Serializes a <see cref="FDSIDList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fDSIDList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FDSIDList fDSIDList, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fDSIDList, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FDSIDList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fDSIDList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FDSIDList fDSIDList, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fDSIDList.ICAOCode == null)
                throw new ArgumentNullException(nameof(fDSIDList.ICAOCode), "Property is required for class FDSIDList.");

            if (fDSIDList.List == null)
                throw new ArgumentNullException(nameof(fDSIDList.List), "Property is required for class FDSIDList.");

            if (fDSIDList.DYear == null)
                throw new ArgumentNullException(nameof(fDSIDList.DYear), "Property is required for class FDSIDList.");

            if (fDSIDList.DCountryName == null)
                throw new ArgumentNullException(nameof(fDSIDList.DCountryName), "Property is required for class FDSIDList.");

            if (fDSIDList.DDescriptionOption.IsSet && fDSIDList.DDescription == null)
                throw new ArgumentNullException(nameof(fDSIDList.DDescription), "Property is required for class FDSIDList.");

            if (fDSIDList.DStateCodeOption.IsSet && fDSIDList.DStateCode == null)
                throw new ArgumentNullException(nameof(fDSIDList.DStateCode), "Property is required for class FDSIDList.");

            if (fDSIDList.DStateNameOption.IsSet && fDSIDList.DStateName == null)
                throw new ArgumentNullException(nameof(fDSIDList.DStateName), "Property is required for class FDSIDList.");

            writer.WriteString("ICAOCode", fDSIDList.ICAOCode);

            writer.WriteNumber("Count", fDSIDList.Count);

            writer.WritePropertyName("List");
            JsonSerializer.Serialize(writer, fDSIDList.List, jsonSerializerOptions);
            var dTypeRawValue = DocumentTypeValueConverter.ToJsonValue(fDSIDList.DType);
            writer.WriteNumber("dType", dTypeRawValue);

            var dFormatRawValue = DocumentFormatValueConverter.ToJsonValue(fDSIDList.DFormat);
            writer.WriteNumber("dFormat", dFormatRawValue);

            writer.WriteBoolean("dMRZ", fDSIDList.DMRZ);

            writer.WriteString("dYear", fDSIDList.DYear);

            writer.WriteString("dCountryName", fDSIDList.DCountryName);

            writer.WriteBoolean("isDeprecated", fDSIDList.IsDeprecated);

            if (fDSIDList.DDescriptionOption.IsSet)
                writer.WriteString("dDescription", fDSIDList.DDescription);

            if (fDSIDList.DStateCodeOption.IsSet)
                writer.WriteString("dStateCode", fDSIDList.DStateCode);

            if (fDSIDList.DStateNameOption.IsSet)
                writer.WriteString("dStateName", fDSIDList.DStateName);
        }
    }
}
