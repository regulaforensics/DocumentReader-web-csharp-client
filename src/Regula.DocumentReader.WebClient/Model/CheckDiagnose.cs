// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Enumeration contains identifiers which determinate the single document element authenticity check outcome reason: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/check-diagnose/
    /// </summary>
    /// <value>Enumeration contains identifiers which determinate the single document element authenticity check outcome reason: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/check-diagnose/</value>
    public enum CheckDiagnose
    {
        /// <summary>
        /// Enum UNKNOWN for value: 0
        /// </summary>
        UNKNOWN = 0,

        /// <summary>
        /// Enum PASS for value: 1
        /// </summary>
        PASS = 1,

        /// <summary>
        /// Enum INVALID_INPUT_DATA for value: 2
        /// </summary>
        INVALID_INPUT_DATA = 2,

        /// <summary>
        /// Enum INTERNAL_ERROR for value: 3
        /// </summary>
        INTERNAL_ERROR = 3,

        /// <summary>
        /// Enum EXCEPTION_IN_MODULE for value: 4
        /// </summary>
        EXCEPTION_IN_MODULE = 4,

        /// <summary>
        /// Enum UNCERTAIN_VERIFICATION for value: 5
        /// </summary>
        UNCERTAIN_VERIFICATION = 5,

        /// <summary>
        /// Enum NECESSARY_IMAGE_NOT_FOUND for value: 7
        /// </summary>
        NECESSARY_IMAGE_NOT_FOUND = 7,

        /// <summary>
        /// Enum PHOTO_SIDES_NOT_FOUND for value: 8
        /// </summary>
        PHOTO_SIDES_NOT_FOUND = 8,

        /// <summary>
        /// Enum INVALID_CHECKSUM for value: 10
        /// </summary>
        INVALID_CHECKSUM = 10,

        /// <summary>
        /// Enum SYNTAX_ERROR for value: 11
        /// </summary>
        SYNTAX_ERROR = 11,

        /// <summary>
        /// Enum LOGIC_ERROR for value: 12
        /// </summary>
        LOGIC_ERROR = 12,

        /// <summary>
        /// Enum SOURCES_COMPARISON_ERROR for value: 13
        /// </summary>
        SOURCES_COMPARISON_ERROR = 13,

        /// <summary>
        /// Enum FIELDS_COMPARISON_LOGIC_ERROR for value: 14
        /// </summary>
        FIELDS_COMPARISON_LOGIC_ERROR = 14,

        /// <summary>
        /// Enum INVALID_FIELD_FORMAT for value: 15
        /// </summary>
        INVALID_FIELD_FORMAT = 15,

        /// <summary>
        /// Enum TRUE_LUMINESCENCE_ERROR for value: 20
        /// </summary>
        TRUE_LUMINESCENCE_ERROR = 20,

        /// <summary>
        /// Enum FALSE_LUMINESCENCE_ERROR for value: 21
        /// </summary>
        FALSE_LUMINESCENCE_ERROR = 21,

        /// <summary>
        /// Enum FIXED_PATTERN_ERROR for value: 22
        /// </summary>
        FIXED_PATTERN_ERROR = 22,

        /// <summary>
        /// Enum LOW_CONTRAST_IN_IR_LIGHT for value: 23
        /// </summary>
        LOW_CONTRAST_IN_IR_LIGHT = 23,

        /// <summary>
        /// Enum INCORRECT_BACKGROUND_LIGHT for value: 24
        /// </summary>
        INCORRECT_BACKGROUND_LIGHT = 24,

        /// <summary>
        /// Enum BACKGROUND_COMPARISON_ERROR for value: 25
        /// </summary>
        BACKGROUND_COMPARISON_ERROR = 25,

        /// <summary>
        /// Enum INCORRECT_TEXT_COLOR for value: 26
        /// </summary>
        INCORRECT_TEXT_COLOR = 26,

        /// <summary>
        /// Enum PHOTO_FALSE_LUMINESCENCE for value: 27
        /// </summary>
        PHOTO_FALSE_LUMINESCENCE = 27,

        /// <summary>
        /// Enum TOO_MUCH_SHIFT for value: 28
        /// </summary>
        TOO_MUCH_SHIFT = 28,

        /// <summary>
        /// Enum CONTACT_CHIP_TYPE_MISMATCH for value: 29
        /// </summary>
        CONTACT_CHIP_TYPE_MISMATCH = 29,

        /// <summary>
        /// Enum FIBERS_NOT_FOUND for value: 30
        /// </summary>
        FIBERS_NOT_FOUND = 30,

        /// <summary>
        /// Enum TOO_MANY_OBJECTS for value: 31
        /// </summary>
        TOO_MANY_OBJECTS = 31,

        /// <summary>
        /// Enum SPECKS_IN_UV for value: 33
        /// </summary>
        SPECKS_IN_UV = 33,

        /// <summary>
        /// Enum TOO_LOW_RESOLUTION for value: 34
        /// </summary>
        TOO_LOW_RESOLUTION = 34,

        /// <summary>
        /// Enum INVISIBLE_ELEMENT_PRESENT for value: 40
        /// </summary>
        INVISIBLE_ELEMENT_PRESENT = 40,

        /// <summary>
        /// Enum VISIBLE_ELEMENT_ABSENT for value: 41
        /// </summary>
        VISIBLE_ELEMENT_ABSENT = 41,

        /// <summary>
        /// Enum ELEMENT_SHOULD_BE_COLORED for value: 42
        /// </summary>
        ELEMENT_SHOULD_BE_COLORED = 42,

        /// <summary>
        /// Enum ELEMENT_SHOULD_BE_GRAYSCALE for value: 43
        /// </summary>
        ELEMENT_SHOULD_BE_GRAYSCALE = 43,

        /// <summary>
        /// Enum PHOTO_WHITE_IR_DONT_MATCH for value: 44
        /// </summary>
        PHOTO_WHITE_IR_DONT_MATCH = 44,

        /// <summary>
        /// Enum UV_DULL_PAPER_MRZ for value: 50
        /// </summary>
        UV_DULL_PAPER_MRZ = 50,

        /// <summary>
        /// Enum FALSE_LUMINESCENCE_IN_MRZ for value: 51
        /// </summary>
        FALSE_LUMINESCENCE_IN_MRZ = 51,

        /// <summary>
        /// Enum UV_DULL_PAPER_PHOTO for value: 52
        /// </summary>
        UV_DULL_PAPER_PHOTO = 52,

        /// <summary>
        /// Enum UV_DULL_PAPER_BLANK for value: 53
        /// </summary>
        UV_DULL_PAPER_BLANK = 53,

        /// <summary>
        /// Enum UV_DULL_PAPER_ERROR for value: 54
        /// </summary>
        UV_DULL_PAPER_ERROR = 54,

        /// <summary>
        /// Enum FALSE_LUMINESCENCE_IN_BLANK for value: 55
        /// </summary>
        FALSE_LUMINESCENCE_IN_BLANK = 55,

        /// <summary>
        /// Enum BAD_AREA_IN_AXIAL for value: 60
        /// </summary>
        BAD_AREA_IN_AXIAL = 60,

        /// <summary>
        /// Enum FALSE_IPI_PARAMETERS for value: 65
        /// </summary>
        FALSE_IPI_PARAMETERS = 65,

        /// <summary>
        /// Enum ENCRYPTED_IPI_NOT_FOUND for value: 66
        /// </summary>
        ENCRYPTED_IPI_NOT_FOUND = 66,

        /// <summary>
        /// Enum ENCRYPTED_IPI_DATA_DONT_MATCH for value: 67
        /// </summary>
        ENCRYPTED_IPI_DATA_DONT_MATCH = 67,

        /// <summary>
        /// Enum FIELD_POS_CORRECTOR_HIGHLIGHT_IR for value: 80
        /// </summary>
        FIELD_POS_CORRECTOR_HIGHLIGHT_IR = 80,

        /// <summary>
        /// Enum FIELD_POS_CORRECTOR_GLARES_IN_PHOTO_AREA for value: 81
        /// </summary>
        FIELD_POS_CORRECTOR_GLARES_IN_PHOTO_AREA = 81,

        /// <summary>
        /// Enum FIELD_POS_CORRECTOR_PHOTO_REPLACED for value: 82
        /// </summary>
        FIELD_POS_CORRECTOR_PHOTO_REPLACED = 82,

        /// <summary>
        /// Enum FIELD_POS_CORRECTOR_LANDMARKS_CHECK_ERROR for value: 83
        /// </summary>
        FIELD_POS_CORRECTOR_LANDMARKS_CHECK_ERROR = 83,

        /// <summary>
        /// Enum FIELD_POS_CORRECTOR_FACE_PRESENCE_CHECK_ERROR for value: 84
        /// </summary>
        FIELD_POS_CORRECTOR_FACE_PRESENCE_CHECK_ERROR = 84,

        /// <summary>
        /// Enum FIELD_POS_CORRECTOR_FACE_ABSENCE_CHECK_ERROR for value: 85
        /// </summary>
        FIELD_POS_CORRECTOR_FACE_ABSENCE_CHECK_ERROR = 85,

        /// <summary>
        /// Enum FIELD_POS_CORRECTOR_INCORRECT_HEAD_POSITION for value: 86
        /// </summary>
        FIELD_POS_CORRECTOR_INCORRECT_HEAD_POSITION = 86,

        /// <summary>
        /// Enum OVI_IR_INVISIBLE for value: 90
        /// </summary>
        OVI_IR_INVISIBLE = 90,

        /// <summary>
        /// Enum OVI_INSUFFICIENT_AREA for value: 91
        /// </summary>
        OVI_INSUFFICIENT_AREA = 91,

        /// <summary>
        /// Enum OVI_COLOR_INVARIABLE for value: 92
        /// </summary>
        OVI_COLOR_INVARIABLE = 92,

        /// <summary>
        /// Enum OVI_BAD_COLOR_FRONT for value: 93
        /// </summary>
        OVI_BAD_COLOR_FRONT = 93,

        /// <summary>
        /// Enum OVI_BAD_COLOR_SIDE for value: 94
        /// </summary>
        OVI_BAD_COLOR_SIDE = 94,

        /// <summary>
        /// Enum OVI_WIDE_COLOR_SPREAD for value: 95
        /// </summary>
        OVI_WIDE_COLOR_SPREAD = 95,

        /// <summary>
        /// Enum OVI_BAD_COLOR_PERCENT for value: 96
        /// </summary>
        OVI_BAD_COLOR_PERCENT = 96,

        /// <summary>
        /// Enum HOLOGRAM_ELEMENT_ABSENT for value: 100
        /// </summary>
        HOLOGRAM_ELEMENT_ABSENT = 100,

        /// <summary>
        /// Enum HOLOGRAM_SIDE_TOP_IMAGES_ABSENT for value: 101
        /// </summary>
        HOLOGRAM_SIDE_TOP_IMAGES_ABSENT = 101,

        /// <summary>
        /// Enum HOLOGRAM_ELEMENT_PRESENT for value: 102
        /// </summary>
        HOLOGRAM_ELEMENT_PRESENT = 102,

        /// <summary>
        /// Enum HOLOGRAM_FRAMES_IS_ABSENT for value: 103
        /// </summary>
        HOLOGRAM_FRAMES_IS_ABSENT = 103,

        /// <summary>
        /// Enum HOLOGRAM_HOLO_FIELD_IS_ABSENT for value: 104
        /// </summary>
        HOLOGRAM_HOLO_FIELD_IS_ABSENT = 104,

        /// <summary>
        /// Enum PHOTO_PATTERN_INTERRUPTED for value: 110
        /// </summary>
        PHOTO_PATTERN_INTERRUPTED = 110,

        /// <summary>
        /// Enum PHOTO_PATTERN_SHIFTED for value: 111
        /// </summary>
        PHOTO_PATTERN_SHIFTED = 111,

        /// <summary>
        /// Enum PHOTO_PATTERN_DIFFERENT_COLORS for value: 112
        /// </summary>
        PHOTO_PATTERN_DIFFERENT_COLORS = 112,

        /// <summary>
        /// Enum PHOTO_PATTERN_IR_VISIBLE for value: 113
        /// </summary>
        PHOTO_PATTERN_IR_VISIBLE = 113,

        /// <summary>
        /// Enum PHOTO_PATTERN_NOT_INTERSECT for value: 114
        /// </summary>
        PHOTO_PATTERN_NOT_INTERSECT = 114,

        /// <summary>
        /// Enum PHOTO_SIZE_IS_WRONG for value: 115
        /// </summary>
        PHOTO_SIZE_IS_WRONG = 115,

        /// <summary>
        /// Enum PHOTO_PATTERN_INVALID_COLOR for value: 116
        /// </summary>
        PHOTO_PATTERN_INVALID_COLOR = 116,

        /// <summary>
        /// Enum PHOTO_PATTERN_SHIFTED_VERT for value: 117
        /// </summary>
        PHOTO_PATTERN_SHIFTED_VERT = 117,

        /// <summary>
        /// Enum PHOTO_PATTERN_PATTERN_NOT_FOUND for value: 118
        /// </summary>
        PHOTO_PATTERN_PATTERN_NOT_FOUND = 118,

        /// <summary>
        /// Enum PHOTO_PATTERN_DIFFERENT_LINES_THICKNESS for value: 119
        /// </summary>
        PHOTO_PATTERN_DIFFERENT_LINES_THICKNESS = 119,

        /// <summary>
        /// Enum PHOTO_IS_NOT_RECTANGLE for value: 120
        /// </summary>
        PHOTO_IS_NOT_RECTANGLE = 120,

        /// <summary>
        /// Enum PHOTO_CORNERS_IS_WRONG for value: 121
        /// </summary>
        PHOTO_CORNERS_IS_WRONG = 121,

        /// <summary>
        /// Enum DOCUMENT_IS_CANCELLING for value: 122
        /// </summary>
        DOCUMENT_IS_CANCELLING = 122,

        /// <summary>
        /// Enum TEXT_COLOR_SHOULD_BE_BLUE for value: 130
        /// </summary>
        TEXT_COLOR_SHOULD_BE_BLUE = 130,

        /// <summary>
        /// Enum TEXT_COLOR_SHOULD_BE_GREEN for value: 131
        /// </summary>
        TEXT_COLOR_SHOULD_BE_GREEN = 131,

        /// <summary>
        /// Enum TEXT_COLOR_SHOULD_BE_RED for value: 132
        /// </summary>
        TEXT_COLOR_SHOULD_BE_RED = 132,

        /// <summary>
        /// Enum TEXT_SHOULD_BE_BLACK for value: 133
        /// </summary>
        TEXT_SHOULD_BE_BLACK = 133,

        /// <summary>
        /// Enum BARCODE_WAS_READ_WITH_ERRORS for value: 140
        /// </summary>
        BARCODE_WAS_READ_WITH_ERRORS = 140,

        /// <summary>
        /// Enum BARCODE_DATA_FORMAT_ERROR for value: 141
        /// </summary>
        BARCODE_DATA_FORMAT_ERROR = 141,

        /// <summary>
        /// Enum BARCODE_SIZE_PARAMS_ERROR for value: 142
        /// </summary>
        BARCODE_SIZE_PARAMS_ERROR = 142,

        /// <summary>
        /// Enum NOT_ALL_BARCODES_READ for value: 143
        /// </summary>
        NOT_ALL_BARCODES_READ = 143,

        /// <summary>
        /// Enum GLARES_IN_BARCODE_AREA for value: 144
        /// </summary>
        GLARES_IN_BARCODE_AREA = 144,

        /// <summary>
        /// Enum NO_CERTIFICATE_FOR_DIGITAL_SIGNATURE_CHECK for value: 145
        /// </summary>
        NO_CERTIFICATE_FOR_DIGITAL_SIGNATURE_CHECK = 145,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_PORTRAITS_DIFFER for value: 150
        /// </summary>
        PORTRAIT_COMPARISON_PORTRAITS_DIFFER = 150,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_NO_SERVICE_REPLY for value: 151
        /// </summary>
        PORTRAIT_COMPARISON_NO_SERVICE_REPLY = 151,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_SERVICE_ERROR for value: 152
        /// </summary>
        PORTRAIT_COMPARISON_SERVICE_ERROR = 152,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_NOT_ENOUGH_IMAGES for value: 153
        /// </summary>
        PORTRAIT_COMPARISON_NOT_ENOUGH_IMAGES = 153,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_NO_LIVE_PHOTO for value: 154
        /// </summary>
        PORTRAIT_COMPARISON_NO_LIVE_PHOTO = 154,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_NO_SERVICE_LICENSE for value: 155
        /// </summary>
        PORTRAIT_COMPARISON_NO_SERVICE_LICENSE = 155,

        /// <summary>
        /// Enum PORTRAIT_COMPARISON_NO_PORTRAIT_DETECTED for value: 156
        /// </summary>
        PORTRAIT_COMPARISON_NO_PORTRAIT_DETECTED = 156,

        /// <summary>
        /// Enum MOBILE_IMAGES_UNSUITABLE_LIGHT_CONDITIONS for value: 160
        /// </summary>
        MOBILE_IMAGES_UNSUITABLE_LIGHT_CONDITIONS = 160,

        /// <summary>
        /// Enum MOBILE_IMAGES_WHITE_UV_NO_DIFFERENCE for value: 161
        /// </summary>
        MOBILE_IMAGES_WHITE_UV_NO_DIFFERENCE = 161,

        /// <summary>
        /// Enum FINGERPRINTS_COMPARISON_MISMATCH for value: 170
        /// </summary>
        FINGERPRINTS_COMPARISON_MISMATCH = 170,

        /// <summary>
        /// Enum HOLO_PHOTO_FACE_NOT_DETECTED for value: 180
        /// </summary>
        HOLO_PHOTO_FACE_NOT_DETECTED = 180,

        /// <summary>
        /// Enum HOLO_PHOTO_FACE_COMPARISON_FAILED for value: 181
        /// </summary>
        HOLO_PHOTO_FACE_COMPARISON_FAILED = 181,

        /// <summary>
        /// Enum HOLO_PHOTO_GLARE_IN_CENTER_ABSENT for value: 182
        /// </summary>
        HOLO_PHOTO_GLARE_IN_CENTER_ABSENT = 182,

        /// <summary>
        /// Enum HOLO_PHOTO_HOLO_ELEMENT_SHAPE_ERROR for value: 183
        /// </summary>
        HOLO_PHOTO_HOLO_ELEMENT_SHAPE_ERROR = 183,

        /// <summary>
        /// Enum HOLO_PHOTO_ALGORITHMS_STEPS_ERROR for value: 184
        /// </summary>
        HOLO_PHOTO_ALGORITHMS_STEPS_ERROR = 184,

        /// <summary>
        /// Enum HOLO_PHOTO_HOLO_AREAS_NOT_LOADED for value: 185
        /// </summary>
        HOLO_PHOTO_HOLO_AREAS_NOT_LOADED = 185,

        /// <summary>
        /// Enum HOLO_PHOTO_FINISHED_BY_TIMEOUT for value: 186
        /// </summary>
        HOLO_PHOTO_FINISHED_BY_TIMEOUT = 186,

        /// <summary>
        /// Enum HOLO_PHOTO_DOCUMENT_OUTSIDE_FRAME for value: 187
        /// </summary>
        HOLO_PHOTO_DOCUMENT_OUTSIDE_FRAME = 187,

        /// <summary>
        /// Enum LIVENESS_DEPTH_CHECK_FAILED for value: 190
        /// </summary>
        LIVENESS_DEPTH_CHECK_FAILED = 190,

        /// <summary>
        /// Enum MRZ_QUALITY_WRONG_SYMBOL_POSITION for value: 200
        /// </summary>
        MRZ_QUALITY_WRONG_SYMBOL_POSITION = 200,

        /// <summary>
        /// Enum MRZ_QUALITY_WRONG_BACKGROUND for value: 201
        /// </summary>
        MRZ_QUALITY_WRONG_BACKGROUND = 201,

        /// <summary>
        /// Enum MRZ_QUALITY_WRONG_MRZ_WIDTH for value: 202
        /// </summary>
        MRZ_QUALITY_WRONG_MRZ_WIDTH = 202,

        /// <summary>
        /// Enum MRZ_QUALITY_WRONG_MRZ_HEIGHT for value: 203
        /// </summary>
        MRZ_QUALITY_WRONG_MRZ_HEIGHT = 203,

        /// <summary>
        /// Enum MRZ_QUALITY_WRONG_LINE_POSITION for value: 204
        /// </summary>
        MRZ_QUALITY_WRONG_LINE_POSITION = 204,

        /// <summary>
        /// Enum MRZ_QUALITY_WRONG_FONT_TYPE for value: 205
        /// </summary>
        MRZ_QUALITY_WRONG_FONT_TYPE = 205,

        /// <summary>
        /// Enum OCR_QUALITY_TEXT_POSITION for value: 220
        /// </summary>
        OCR_QUALITY_TEXT_POSITION = 220,

        /// <summary>
        /// Enum OCR_QUALITY_INVALID_FONT for value: 221
        /// </summary>
        OCR_QUALITY_INVALID_FONT = 221,

        /// <summary>
        /// Enum OCR_QUALITY_INVALID_BACKGROUND for value: 222
        /// </summary>
        OCR_QUALITY_INVALID_BACKGROUND = 222,

        /// <summary>
        /// Enum LASINK_INVALID_LINES_FREQUENCY for value: 230
        /// </summary>
        LASINK_INVALID_LINES_FREQUENCY = 230,

        /// <summary>
        /// Enum DOC_LIVENESS_DOCUMENT_NOT_LIVE for value: 238
        /// </summary>
        DOC_LIVENESS_DOCUMENT_NOT_LIVE = 238,

        /// <summary>
        /// Enum DOC_LIVENESS_BLACK_AND_WHITE_COPY_DETECTED for value: 239
        /// </summary>
        DOC_LIVENESS_BLACK_AND_WHITE_COPY_DETECTED = 239,

        /// <summary>
        /// Enum DOC_LIVENESS_ELECTRONIC_DEVICE_DETECTED for value: 240
        /// </summary>
        DOC_LIVENESS_ELECTRONIC_DEVICE_DETECTED = 240,

        /// <summary>
        /// Enum DOC_LIVENESS_INVALID_BARCODE_BACKGROUND for value: 241
        /// </summary>
        DOC_LIVENESS_INVALID_BARCODE_BACKGROUND = 241,

        /// <summary>
        /// Enum CHD_ICAO_IDB_BASE32_ERROR for value: 243
        /// </summary>
        CHD_ICAO_IDB_BASE32_ERROR = 243,

        /// <summary>
        /// Enum CHD_ICAO_IDB_ZIPPED_ERROR for value: 244
        /// </summary>
        CHD_ICAO_IDB_ZIPPED_ERROR = 244,

        /// <summary>
        /// Enum CHD_ICAO_IDB_MESSAGE_ZONE_EMPTY for value: 245
        /// </summary>
        CHD_ICAO_IDB_MESSAGE_ZONE_EMPTY = 245,

        /// <summary>
        /// Enum CHD_ICAO_IDB_SIGNATURE_MUST_BE_PRESENT for value: 246
        /// </summary>
        CHD_ICAO_IDB_SIGNATURE_MUST_BE_PRESENT = 246,

        /// <summary>
        /// Enum CHD_ICAO_IDB_SIGNATURE_MUST_NOT_BE_PRESENT for value: 247
        /// </summary>
        CHD_ICAO_IDB_SIGNATURE_MUST_NOT_BE_PRESENT = 247,

        /// <summary>
        /// Enum CHD_ICAO_IDB_CERTIFICATE_MUST_NOT_BE_PRESENT for value: 248
        /// </summary>
        CHD_ICAO_IDB_CERTIFICATE_MUST_NOT_BE_PRESENT = 248,

        /// <summary>
        /// Enum CHD_INCORRECT_OBJECT_COLOR for value: 250
        /// </summary>
        CHD_INCORRECT_OBJECT_COLOR = 250
    }

    /// <summary>
    /// Converts <see cref="CheckDiagnose"/> to and from the JSON value
    /// </summary>
    public static class CheckDiagnoseValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="CheckDiagnose"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CheckDiagnose FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return CheckDiagnose.UNKNOWN;

            if (value.Equals((1).ToString()))
                return CheckDiagnose.PASS;

            if (value.Equals((2).ToString()))
                return CheckDiagnose.INVALID_INPUT_DATA;

            if (value.Equals((3).ToString()))
                return CheckDiagnose.INTERNAL_ERROR;

            if (value.Equals((4).ToString()))
                return CheckDiagnose.EXCEPTION_IN_MODULE;

            if (value.Equals((5).ToString()))
                return CheckDiagnose.UNCERTAIN_VERIFICATION;

            if (value.Equals((7).ToString()))
                return CheckDiagnose.NECESSARY_IMAGE_NOT_FOUND;

            if (value.Equals((8).ToString()))
                return CheckDiagnose.PHOTO_SIDES_NOT_FOUND;

            if (value.Equals((10).ToString()))
                return CheckDiagnose.INVALID_CHECKSUM;

            if (value.Equals((11).ToString()))
                return CheckDiagnose.SYNTAX_ERROR;

            if (value.Equals((12).ToString()))
                return CheckDiagnose.LOGIC_ERROR;

            if (value.Equals((13).ToString()))
                return CheckDiagnose.SOURCES_COMPARISON_ERROR;

            if (value.Equals((14).ToString()))
                return CheckDiagnose.FIELDS_COMPARISON_LOGIC_ERROR;

            if (value.Equals((15).ToString()))
                return CheckDiagnose.INVALID_FIELD_FORMAT;

            if (value.Equals((20).ToString()))
                return CheckDiagnose.TRUE_LUMINESCENCE_ERROR;

            if (value.Equals((21).ToString()))
                return CheckDiagnose.FALSE_LUMINESCENCE_ERROR;

            if (value.Equals((22).ToString()))
                return CheckDiagnose.FIXED_PATTERN_ERROR;

            if (value.Equals((23).ToString()))
                return CheckDiagnose.LOW_CONTRAST_IN_IR_LIGHT;

            if (value.Equals((24).ToString()))
                return CheckDiagnose.INCORRECT_BACKGROUND_LIGHT;

            if (value.Equals((25).ToString()))
                return CheckDiagnose.BACKGROUND_COMPARISON_ERROR;

            if (value.Equals((26).ToString()))
                return CheckDiagnose.INCORRECT_TEXT_COLOR;

            if (value.Equals((27).ToString()))
                return CheckDiagnose.PHOTO_FALSE_LUMINESCENCE;

            if (value.Equals((28).ToString()))
                return CheckDiagnose.TOO_MUCH_SHIFT;

            if (value.Equals((29).ToString()))
                return CheckDiagnose.CONTACT_CHIP_TYPE_MISMATCH;

            if (value.Equals((30).ToString()))
                return CheckDiagnose.FIBERS_NOT_FOUND;

            if (value.Equals((31).ToString()))
                return CheckDiagnose.TOO_MANY_OBJECTS;

            if (value.Equals((33).ToString()))
                return CheckDiagnose.SPECKS_IN_UV;

            if (value.Equals((34).ToString()))
                return CheckDiagnose.TOO_LOW_RESOLUTION;

            if (value.Equals((40).ToString()))
                return CheckDiagnose.INVISIBLE_ELEMENT_PRESENT;

            if (value.Equals((41).ToString()))
                return CheckDiagnose.VISIBLE_ELEMENT_ABSENT;

            if (value.Equals((42).ToString()))
                return CheckDiagnose.ELEMENT_SHOULD_BE_COLORED;

            if (value.Equals((43).ToString()))
                return CheckDiagnose.ELEMENT_SHOULD_BE_GRAYSCALE;

            if (value.Equals((44).ToString()))
                return CheckDiagnose.PHOTO_WHITE_IR_DONT_MATCH;

            if (value.Equals((50).ToString()))
                return CheckDiagnose.UV_DULL_PAPER_MRZ;

            if (value.Equals((51).ToString()))
                return CheckDiagnose.FALSE_LUMINESCENCE_IN_MRZ;

            if (value.Equals((52).ToString()))
                return CheckDiagnose.UV_DULL_PAPER_PHOTO;

            if (value.Equals((53).ToString()))
                return CheckDiagnose.UV_DULL_PAPER_BLANK;

            if (value.Equals((54).ToString()))
                return CheckDiagnose.UV_DULL_PAPER_ERROR;

            if (value.Equals((55).ToString()))
                return CheckDiagnose.FALSE_LUMINESCENCE_IN_BLANK;

            if (value.Equals((60).ToString()))
                return CheckDiagnose.BAD_AREA_IN_AXIAL;

            if (value.Equals((65).ToString()))
                return CheckDiagnose.FALSE_IPI_PARAMETERS;

            if (value.Equals((66).ToString()))
                return CheckDiagnose.ENCRYPTED_IPI_NOT_FOUND;

            if (value.Equals((67).ToString()))
                return CheckDiagnose.ENCRYPTED_IPI_DATA_DONT_MATCH;

            if (value.Equals((80).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_HIGHLIGHT_IR;

            if (value.Equals((81).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_GLARES_IN_PHOTO_AREA;

            if (value.Equals((82).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_PHOTO_REPLACED;

            if (value.Equals((83).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_LANDMARKS_CHECK_ERROR;

            if (value.Equals((84).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_FACE_PRESENCE_CHECK_ERROR;

            if (value.Equals((85).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_FACE_ABSENCE_CHECK_ERROR;

            if (value.Equals((86).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_INCORRECT_HEAD_POSITION;

            if (value.Equals((90).ToString()))
                return CheckDiagnose.OVI_IR_INVISIBLE;

            if (value.Equals((91).ToString()))
                return CheckDiagnose.OVI_INSUFFICIENT_AREA;

            if (value.Equals((92).ToString()))
                return CheckDiagnose.OVI_COLOR_INVARIABLE;

            if (value.Equals((93).ToString()))
                return CheckDiagnose.OVI_BAD_COLOR_FRONT;

            if (value.Equals((94).ToString()))
                return CheckDiagnose.OVI_BAD_COLOR_SIDE;

            if (value.Equals((95).ToString()))
                return CheckDiagnose.OVI_WIDE_COLOR_SPREAD;

            if (value.Equals((96).ToString()))
                return CheckDiagnose.OVI_BAD_COLOR_PERCENT;

            if (value.Equals((100).ToString()))
                return CheckDiagnose.HOLOGRAM_ELEMENT_ABSENT;

            if (value.Equals((101).ToString()))
                return CheckDiagnose.HOLOGRAM_SIDE_TOP_IMAGES_ABSENT;

            if (value.Equals((102).ToString()))
                return CheckDiagnose.HOLOGRAM_ELEMENT_PRESENT;

            if (value.Equals((103).ToString()))
                return CheckDiagnose.HOLOGRAM_FRAMES_IS_ABSENT;

            if (value.Equals((104).ToString()))
                return CheckDiagnose.HOLOGRAM_HOLO_FIELD_IS_ABSENT;

            if (value.Equals((110).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_INTERRUPTED;

            if (value.Equals((111).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_SHIFTED;

            if (value.Equals((112).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_DIFFERENT_COLORS;

            if (value.Equals((113).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_IR_VISIBLE;

            if (value.Equals((114).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_NOT_INTERSECT;

            if (value.Equals((115).ToString()))
                return CheckDiagnose.PHOTO_SIZE_IS_WRONG;

            if (value.Equals((116).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_INVALID_COLOR;

            if (value.Equals((117).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_SHIFTED_VERT;

            if (value.Equals((118).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_PATTERN_NOT_FOUND;

            if (value.Equals((119).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_DIFFERENT_LINES_THICKNESS;

            if (value.Equals((120).ToString()))
                return CheckDiagnose.PHOTO_IS_NOT_RECTANGLE;

            if (value.Equals((121).ToString()))
                return CheckDiagnose.PHOTO_CORNERS_IS_WRONG;

            if (value.Equals((122).ToString()))
                return CheckDiagnose.DOCUMENT_IS_CANCELLING;

            if (value.Equals((130).ToString()))
                return CheckDiagnose.TEXT_COLOR_SHOULD_BE_BLUE;

            if (value.Equals((131).ToString()))
                return CheckDiagnose.TEXT_COLOR_SHOULD_BE_GREEN;

            if (value.Equals((132).ToString()))
                return CheckDiagnose.TEXT_COLOR_SHOULD_BE_RED;

            if (value.Equals((133).ToString()))
                return CheckDiagnose.TEXT_SHOULD_BE_BLACK;

            if (value.Equals((140).ToString()))
                return CheckDiagnose.BARCODE_WAS_READ_WITH_ERRORS;

            if (value.Equals((141).ToString()))
                return CheckDiagnose.BARCODE_DATA_FORMAT_ERROR;

            if (value.Equals((142).ToString()))
                return CheckDiagnose.BARCODE_SIZE_PARAMS_ERROR;

            if (value.Equals((143).ToString()))
                return CheckDiagnose.NOT_ALL_BARCODES_READ;

            if (value.Equals((144).ToString()))
                return CheckDiagnose.GLARES_IN_BARCODE_AREA;

            if (value.Equals((145).ToString()))
                return CheckDiagnose.NO_CERTIFICATE_FOR_DIGITAL_SIGNATURE_CHECK;

            if (value.Equals((150).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_PORTRAITS_DIFFER;

            if (value.Equals((151).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_NO_SERVICE_REPLY;

            if (value.Equals((152).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_SERVICE_ERROR;

            if (value.Equals((153).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_NOT_ENOUGH_IMAGES;

            if (value.Equals((154).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_NO_LIVE_PHOTO;

            if (value.Equals((155).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_NO_SERVICE_LICENSE;

            if (value.Equals((156).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_NO_PORTRAIT_DETECTED;

            if (value.Equals((160).ToString()))
                return CheckDiagnose.MOBILE_IMAGES_UNSUITABLE_LIGHT_CONDITIONS;

            if (value.Equals((161).ToString()))
                return CheckDiagnose.MOBILE_IMAGES_WHITE_UV_NO_DIFFERENCE;

            if (value.Equals((170).ToString()))
                return CheckDiagnose.FINGERPRINTS_COMPARISON_MISMATCH;

            if (value.Equals((180).ToString()))
                return CheckDiagnose.HOLO_PHOTO_FACE_NOT_DETECTED;

            if (value.Equals((181).ToString()))
                return CheckDiagnose.HOLO_PHOTO_FACE_COMPARISON_FAILED;

            if (value.Equals((182).ToString()))
                return CheckDiagnose.HOLO_PHOTO_GLARE_IN_CENTER_ABSENT;

            if (value.Equals((183).ToString()))
                return CheckDiagnose.HOLO_PHOTO_HOLO_ELEMENT_SHAPE_ERROR;

            if (value.Equals((184).ToString()))
                return CheckDiagnose.HOLO_PHOTO_ALGORITHMS_STEPS_ERROR;

            if (value.Equals((185).ToString()))
                return CheckDiagnose.HOLO_PHOTO_HOLO_AREAS_NOT_LOADED;

            if (value.Equals((186).ToString()))
                return CheckDiagnose.HOLO_PHOTO_FINISHED_BY_TIMEOUT;

            if (value.Equals((187).ToString()))
                return CheckDiagnose.HOLO_PHOTO_DOCUMENT_OUTSIDE_FRAME;

            if (value.Equals((190).ToString()))
                return CheckDiagnose.LIVENESS_DEPTH_CHECK_FAILED;

            if (value.Equals((200).ToString()))
                return CheckDiagnose.MRZ_QUALITY_WRONG_SYMBOL_POSITION;

            if (value.Equals((201).ToString()))
                return CheckDiagnose.MRZ_QUALITY_WRONG_BACKGROUND;

            if (value.Equals((202).ToString()))
                return CheckDiagnose.MRZ_QUALITY_WRONG_MRZ_WIDTH;

            if (value.Equals((203).ToString()))
                return CheckDiagnose.MRZ_QUALITY_WRONG_MRZ_HEIGHT;

            if (value.Equals((204).ToString()))
                return CheckDiagnose.MRZ_QUALITY_WRONG_LINE_POSITION;

            if (value.Equals((205).ToString()))
                return CheckDiagnose.MRZ_QUALITY_WRONG_FONT_TYPE;

            if (value.Equals((220).ToString()))
                return CheckDiagnose.OCR_QUALITY_TEXT_POSITION;

            if (value.Equals((221).ToString()))
                return CheckDiagnose.OCR_QUALITY_INVALID_FONT;

            if (value.Equals((222).ToString()))
                return CheckDiagnose.OCR_QUALITY_INVALID_BACKGROUND;

            if (value.Equals((230).ToString()))
                return CheckDiagnose.LASINK_INVALID_LINES_FREQUENCY;

            if (value.Equals((238).ToString()))
                return CheckDiagnose.DOC_LIVENESS_DOCUMENT_NOT_LIVE;

            if (value.Equals((239).ToString()))
                return CheckDiagnose.DOC_LIVENESS_BLACK_AND_WHITE_COPY_DETECTED;

            if (value.Equals((240).ToString()))
                return CheckDiagnose.DOC_LIVENESS_ELECTRONIC_DEVICE_DETECTED;

            if (value.Equals((241).ToString()))
                return CheckDiagnose.DOC_LIVENESS_INVALID_BARCODE_BACKGROUND;

            if (value.Equals((243).ToString()))
                return CheckDiagnose.CHD_ICAO_IDB_BASE32_ERROR;

            if (value.Equals((244).ToString()))
                return CheckDiagnose.CHD_ICAO_IDB_ZIPPED_ERROR;

            if (value.Equals((245).ToString()))
                return CheckDiagnose.CHD_ICAO_IDB_MESSAGE_ZONE_EMPTY;

            if (value.Equals((246).ToString()))
                return CheckDiagnose.CHD_ICAO_IDB_SIGNATURE_MUST_BE_PRESENT;

            if (value.Equals((247).ToString()))
                return CheckDiagnose.CHD_ICAO_IDB_SIGNATURE_MUST_NOT_BE_PRESENT;

            if (value.Equals((248).ToString()))
                return CheckDiagnose.CHD_ICAO_IDB_CERTIFICATE_MUST_NOT_BE_PRESENT;

            if (value.Equals((250).ToString()))
                return CheckDiagnose.CHD_INCORRECT_OBJECT_COLOR;

            throw new NotImplementedException($"Could not convert value to type CheckDiagnose: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="CheckDiagnose"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CheckDiagnose? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return CheckDiagnose.UNKNOWN;

            if (value.Equals((1).ToString()))
                return CheckDiagnose.PASS;

            if (value.Equals((2).ToString()))
                return CheckDiagnose.INVALID_INPUT_DATA;

            if (value.Equals((3).ToString()))
                return CheckDiagnose.INTERNAL_ERROR;

            if (value.Equals((4).ToString()))
                return CheckDiagnose.EXCEPTION_IN_MODULE;

            if (value.Equals((5).ToString()))
                return CheckDiagnose.UNCERTAIN_VERIFICATION;

            if (value.Equals((7).ToString()))
                return CheckDiagnose.NECESSARY_IMAGE_NOT_FOUND;

            if (value.Equals((8).ToString()))
                return CheckDiagnose.PHOTO_SIDES_NOT_FOUND;

            if (value.Equals((10).ToString()))
                return CheckDiagnose.INVALID_CHECKSUM;

            if (value.Equals((11).ToString()))
                return CheckDiagnose.SYNTAX_ERROR;

            if (value.Equals((12).ToString()))
                return CheckDiagnose.LOGIC_ERROR;

            if (value.Equals((13).ToString()))
                return CheckDiagnose.SOURCES_COMPARISON_ERROR;

            if (value.Equals((14).ToString()))
                return CheckDiagnose.FIELDS_COMPARISON_LOGIC_ERROR;

            if (value.Equals((15).ToString()))
                return CheckDiagnose.INVALID_FIELD_FORMAT;

            if (value.Equals((20).ToString()))
                return CheckDiagnose.TRUE_LUMINESCENCE_ERROR;

            if (value.Equals((21).ToString()))
                return CheckDiagnose.FALSE_LUMINESCENCE_ERROR;

            if (value.Equals((22).ToString()))
                return CheckDiagnose.FIXED_PATTERN_ERROR;

            if (value.Equals((23).ToString()))
                return CheckDiagnose.LOW_CONTRAST_IN_IR_LIGHT;

            if (value.Equals((24).ToString()))
                return CheckDiagnose.INCORRECT_BACKGROUND_LIGHT;

            if (value.Equals((25).ToString()))
                return CheckDiagnose.BACKGROUND_COMPARISON_ERROR;

            if (value.Equals((26).ToString()))
                return CheckDiagnose.INCORRECT_TEXT_COLOR;

            if (value.Equals((27).ToString()))
                return CheckDiagnose.PHOTO_FALSE_LUMINESCENCE;

            if (value.Equals((28).ToString()))
                return CheckDiagnose.TOO_MUCH_SHIFT;

            if (value.Equals((29).ToString()))
                return CheckDiagnose.CONTACT_CHIP_TYPE_MISMATCH;

            if (value.Equals((30).ToString()))
                return CheckDiagnose.FIBERS_NOT_FOUND;

            if (value.Equals((31).ToString()))
                return CheckDiagnose.TOO_MANY_OBJECTS;

            if (value.Equals((33).ToString()))
                return CheckDiagnose.SPECKS_IN_UV;

            if (value.Equals((34).ToString()))
                return CheckDiagnose.TOO_LOW_RESOLUTION;

            if (value.Equals((40).ToString()))
                return CheckDiagnose.INVISIBLE_ELEMENT_PRESENT;

            if (value.Equals((41).ToString()))
                return CheckDiagnose.VISIBLE_ELEMENT_ABSENT;

            if (value.Equals((42).ToString()))
                return CheckDiagnose.ELEMENT_SHOULD_BE_COLORED;

            if (value.Equals((43).ToString()))
                return CheckDiagnose.ELEMENT_SHOULD_BE_GRAYSCALE;

            if (value.Equals((44).ToString()))
                return CheckDiagnose.PHOTO_WHITE_IR_DONT_MATCH;

            if (value.Equals((50).ToString()))
                return CheckDiagnose.UV_DULL_PAPER_MRZ;

            if (value.Equals((51).ToString()))
                return CheckDiagnose.FALSE_LUMINESCENCE_IN_MRZ;

            if (value.Equals((52).ToString()))
                return CheckDiagnose.UV_DULL_PAPER_PHOTO;

            if (value.Equals((53).ToString()))
                return CheckDiagnose.UV_DULL_PAPER_BLANK;

            if (value.Equals((54).ToString()))
                return CheckDiagnose.UV_DULL_PAPER_ERROR;

            if (value.Equals((55).ToString()))
                return CheckDiagnose.FALSE_LUMINESCENCE_IN_BLANK;

            if (value.Equals((60).ToString()))
                return CheckDiagnose.BAD_AREA_IN_AXIAL;

            if (value.Equals((65).ToString()))
                return CheckDiagnose.FALSE_IPI_PARAMETERS;

            if (value.Equals((66).ToString()))
                return CheckDiagnose.ENCRYPTED_IPI_NOT_FOUND;

            if (value.Equals((67).ToString()))
                return CheckDiagnose.ENCRYPTED_IPI_DATA_DONT_MATCH;

            if (value.Equals((80).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_HIGHLIGHT_IR;

            if (value.Equals((81).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_GLARES_IN_PHOTO_AREA;

            if (value.Equals((82).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_PHOTO_REPLACED;

            if (value.Equals((83).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_LANDMARKS_CHECK_ERROR;

            if (value.Equals((84).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_FACE_PRESENCE_CHECK_ERROR;

            if (value.Equals((85).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_FACE_ABSENCE_CHECK_ERROR;

            if (value.Equals((86).ToString()))
                return CheckDiagnose.FIELD_POS_CORRECTOR_INCORRECT_HEAD_POSITION;

            if (value.Equals((90).ToString()))
                return CheckDiagnose.OVI_IR_INVISIBLE;

            if (value.Equals((91).ToString()))
                return CheckDiagnose.OVI_INSUFFICIENT_AREA;

            if (value.Equals((92).ToString()))
                return CheckDiagnose.OVI_COLOR_INVARIABLE;

            if (value.Equals((93).ToString()))
                return CheckDiagnose.OVI_BAD_COLOR_FRONT;

            if (value.Equals((94).ToString()))
                return CheckDiagnose.OVI_BAD_COLOR_SIDE;

            if (value.Equals((95).ToString()))
                return CheckDiagnose.OVI_WIDE_COLOR_SPREAD;

            if (value.Equals((96).ToString()))
                return CheckDiagnose.OVI_BAD_COLOR_PERCENT;

            if (value.Equals((100).ToString()))
                return CheckDiagnose.HOLOGRAM_ELEMENT_ABSENT;

            if (value.Equals((101).ToString()))
                return CheckDiagnose.HOLOGRAM_SIDE_TOP_IMAGES_ABSENT;

            if (value.Equals((102).ToString()))
                return CheckDiagnose.HOLOGRAM_ELEMENT_PRESENT;

            if (value.Equals((103).ToString()))
                return CheckDiagnose.HOLOGRAM_FRAMES_IS_ABSENT;

            if (value.Equals((104).ToString()))
                return CheckDiagnose.HOLOGRAM_HOLO_FIELD_IS_ABSENT;

            if (value.Equals((110).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_INTERRUPTED;

            if (value.Equals((111).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_SHIFTED;

            if (value.Equals((112).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_DIFFERENT_COLORS;

            if (value.Equals((113).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_IR_VISIBLE;

            if (value.Equals((114).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_NOT_INTERSECT;

            if (value.Equals((115).ToString()))
                return CheckDiagnose.PHOTO_SIZE_IS_WRONG;

            if (value.Equals((116).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_INVALID_COLOR;

            if (value.Equals((117).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_SHIFTED_VERT;

            if (value.Equals((118).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_PATTERN_NOT_FOUND;

            if (value.Equals((119).ToString()))
                return CheckDiagnose.PHOTO_PATTERN_DIFFERENT_LINES_THICKNESS;

            if (value.Equals((120).ToString()))
                return CheckDiagnose.PHOTO_IS_NOT_RECTANGLE;

            if (value.Equals((121).ToString()))
                return CheckDiagnose.PHOTO_CORNERS_IS_WRONG;

            if (value.Equals((122).ToString()))
                return CheckDiagnose.DOCUMENT_IS_CANCELLING;

            if (value.Equals((130).ToString()))
                return CheckDiagnose.TEXT_COLOR_SHOULD_BE_BLUE;

            if (value.Equals((131).ToString()))
                return CheckDiagnose.TEXT_COLOR_SHOULD_BE_GREEN;

            if (value.Equals((132).ToString()))
                return CheckDiagnose.TEXT_COLOR_SHOULD_BE_RED;

            if (value.Equals((133).ToString()))
                return CheckDiagnose.TEXT_SHOULD_BE_BLACK;

            if (value.Equals((140).ToString()))
                return CheckDiagnose.BARCODE_WAS_READ_WITH_ERRORS;

            if (value.Equals((141).ToString()))
                return CheckDiagnose.BARCODE_DATA_FORMAT_ERROR;

            if (value.Equals((142).ToString()))
                return CheckDiagnose.BARCODE_SIZE_PARAMS_ERROR;

            if (value.Equals((143).ToString()))
                return CheckDiagnose.NOT_ALL_BARCODES_READ;

            if (value.Equals((144).ToString()))
                return CheckDiagnose.GLARES_IN_BARCODE_AREA;

            if (value.Equals((145).ToString()))
                return CheckDiagnose.NO_CERTIFICATE_FOR_DIGITAL_SIGNATURE_CHECK;

            if (value.Equals((150).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_PORTRAITS_DIFFER;

            if (value.Equals((151).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_NO_SERVICE_REPLY;

            if (value.Equals((152).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_SERVICE_ERROR;

            if (value.Equals((153).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_NOT_ENOUGH_IMAGES;

            if (value.Equals((154).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_NO_LIVE_PHOTO;

            if (value.Equals((155).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_NO_SERVICE_LICENSE;

            if (value.Equals((156).ToString()))
                return CheckDiagnose.PORTRAIT_COMPARISON_NO_PORTRAIT_DETECTED;

            if (value.Equals((160).ToString()))
                return CheckDiagnose.MOBILE_IMAGES_UNSUITABLE_LIGHT_CONDITIONS;

            if (value.Equals((161).ToString()))
                return CheckDiagnose.MOBILE_IMAGES_WHITE_UV_NO_DIFFERENCE;

            if (value.Equals((170).ToString()))
                return CheckDiagnose.FINGERPRINTS_COMPARISON_MISMATCH;

            if (value.Equals((180).ToString()))
                return CheckDiagnose.HOLO_PHOTO_FACE_NOT_DETECTED;

            if (value.Equals((181).ToString()))
                return CheckDiagnose.HOLO_PHOTO_FACE_COMPARISON_FAILED;

            if (value.Equals((182).ToString()))
                return CheckDiagnose.HOLO_PHOTO_GLARE_IN_CENTER_ABSENT;

            if (value.Equals((183).ToString()))
                return CheckDiagnose.HOLO_PHOTO_HOLO_ELEMENT_SHAPE_ERROR;

            if (value.Equals((184).ToString()))
                return CheckDiagnose.HOLO_PHOTO_ALGORITHMS_STEPS_ERROR;

            if (value.Equals((185).ToString()))
                return CheckDiagnose.HOLO_PHOTO_HOLO_AREAS_NOT_LOADED;

            if (value.Equals((186).ToString()))
                return CheckDiagnose.HOLO_PHOTO_FINISHED_BY_TIMEOUT;

            if (value.Equals((187).ToString()))
                return CheckDiagnose.HOLO_PHOTO_DOCUMENT_OUTSIDE_FRAME;

            if (value.Equals((190).ToString()))
                return CheckDiagnose.LIVENESS_DEPTH_CHECK_FAILED;

            if (value.Equals((200).ToString()))
                return CheckDiagnose.MRZ_QUALITY_WRONG_SYMBOL_POSITION;

            if (value.Equals((201).ToString()))
                return CheckDiagnose.MRZ_QUALITY_WRONG_BACKGROUND;

            if (value.Equals((202).ToString()))
                return CheckDiagnose.MRZ_QUALITY_WRONG_MRZ_WIDTH;

            if (value.Equals((203).ToString()))
                return CheckDiagnose.MRZ_QUALITY_WRONG_MRZ_HEIGHT;

            if (value.Equals((204).ToString()))
                return CheckDiagnose.MRZ_QUALITY_WRONG_LINE_POSITION;

            if (value.Equals((205).ToString()))
                return CheckDiagnose.MRZ_QUALITY_WRONG_FONT_TYPE;

            if (value.Equals((220).ToString()))
                return CheckDiagnose.OCR_QUALITY_TEXT_POSITION;

            if (value.Equals((221).ToString()))
                return CheckDiagnose.OCR_QUALITY_INVALID_FONT;

            if (value.Equals((222).ToString()))
                return CheckDiagnose.OCR_QUALITY_INVALID_BACKGROUND;

            if (value.Equals((230).ToString()))
                return CheckDiagnose.LASINK_INVALID_LINES_FREQUENCY;

            if (value.Equals((238).ToString()))
                return CheckDiagnose.DOC_LIVENESS_DOCUMENT_NOT_LIVE;

            if (value.Equals((239).ToString()))
                return CheckDiagnose.DOC_LIVENESS_BLACK_AND_WHITE_COPY_DETECTED;

            if (value.Equals((240).ToString()))
                return CheckDiagnose.DOC_LIVENESS_ELECTRONIC_DEVICE_DETECTED;

            if (value.Equals((241).ToString()))
                return CheckDiagnose.DOC_LIVENESS_INVALID_BARCODE_BACKGROUND;

            if (value.Equals((243).ToString()))
                return CheckDiagnose.CHD_ICAO_IDB_BASE32_ERROR;

            if (value.Equals((244).ToString()))
                return CheckDiagnose.CHD_ICAO_IDB_ZIPPED_ERROR;

            if (value.Equals((245).ToString()))
                return CheckDiagnose.CHD_ICAO_IDB_MESSAGE_ZONE_EMPTY;

            if (value.Equals((246).ToString()))
                return CheckDiagnose.CHD_ICAO_IDB_SIGNATURE_MUST_BE_PRESENT;

            if (value.Equals((247).ToString()))
                return CheckDiagnose.CHD_ICAO_IDB_SIGNATURE_MUST_NOT_BE_PRESENT;

            if (value.Equals((248).ToString()))
                return CheckDiagnose.CHD_ICAO_IDB_CERTIFICATE_MUST_NOT_BE_PRESENT;

            if (value.Equals((250).ToString()))
                return CheckDiagnose.CHD_INCORRECT_OBJECT_COLOR;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CheckDiagnose"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(CheckDiagnose value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheckDiagnose"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CheckDiagnoseJsonConverter : JsonConverter<CheckDiagnose>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CheckDiagnose Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CheckDiagnose? result = rawValue == null
                ? null
                : CheckDiagnoseValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CheckDiagnose to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkDiagnose"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CheckDiagnose checkDiagnose, JsonSerializerOptions options)
        {
            writer.WriteStringValue(checkDiagnose.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheckDiagnose"/>
    /// </summary>
    public class CheckDiagnoseNullableJsonConverter : JsonConverter<CheckDiagnose?>
    {
        /// <summary>
        /// Returns a CheckDiagnose from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CheckDiagnose? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CheckDiagnose? result = rawValue == null
                ? null
                : CheckDiagnoseValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkDiagnose"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CheckDiagnose? checkDiagnose, JsonSerializerOptions options)
        {
            writer.WriteStringValue(checkDiagnose?.ToString() ?? "null");
        }
    }
}
