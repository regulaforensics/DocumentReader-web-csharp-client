/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// OutDataTransactionImagesFieldValue
    /// </summary>
    [DataContract(Name = "OutDataTransactionImagesFieldValue")]
    public partial class OutDataTransactionImagesFieldValue : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name = "fieldType", EmitDefaultValue = false)]
        public GraphicFieldType? FieldType { get; set; }

        /// <summary>
        /// Gets or Sets Light
        /// </summary>
        [DataMember(Name = "light", EmitDefaultValue = false)]
        public Light? Light { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutDataTransactionImagesFieldValue" /> class.
        /// </summary>
        /// <param name="fieldType">fieldType.</param>
        /// <param name="light">light.</param>
        /// <param name="listIdx">listIdx.</param>
        /// <param name="pageIdx">Page index of the image from input list.</param>
        /// <param name="url">Image url.</param>
        public OutDataTransactionImagesFieldValue(GraphicFieldType? fieldType = default(GraphicFieldType?), Light? light = default(Light?), int listIdx = default(int), int pageIdx = default(int), string url = default(string))
        {
            this.FieldType = fieldType;
            this.Light = light;
            this.ListIdx = listIdx;
            this.PageIdx = pageIdx;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets ListIdx
        /// </summary>
        [DataMember(Name = "listIdx", EmitDefaultValue = false)]
        public int ListIdx { get; set; }

        /// <summary>
        /// Page index of the image from input list
        /// </summary>
        /// <value>Page index of the image from input list</value>
        [DataMember(Name = "pageIdx", EmitDefaultValue = false)]
        public int PageIdx { get; set; }

        /// <summary>
        /// Image url
        /// </summary>
        /// <value>Image url</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutDataTransactionImagesFieldValue {\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  Light: ").Append(Light).Append("\n");
            sb.Append("  ListIdx: ").Append(ListIdx).Append("\n");
            sb.Append("  PageIdx: ").Append(PageIdx).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
