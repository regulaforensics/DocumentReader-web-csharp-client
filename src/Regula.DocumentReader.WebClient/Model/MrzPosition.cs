// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// MrzPosition
    /// </summary>
    public partial class MrzPosition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MrzPosition" /> class.
        /// </summary>
        /// <param name="docFormat">docFormat</param>
        /// <param name="angle">Document rotation angle</param>
        /// <param name="width">Document width</param>
        /// <param name="height">Document height</param>
        /// <param name="center">center</param>
        /// <param name="leftBottom">leftBottom</param>
        /// <param name="leftTop">leftTop</param>
        /// <param name="rightBottom">rightBottom</param>
        /// <param name="rightTop">rightTop</param>
        /// <param name="dpi">dpi</param>
        /// <param name="inverse">inverse</param>
        /// <param name="objArea">objArea</param>
        /// <param name="objIntAngleDev">objIntAngleDev</param>
        /// <param name="perspectiveTr">perspectiveTr</param>
        /// <param name="resultStatus">resultStatus</param>
        [JsonConstructor]
        public MrzPosition(DocumentFormat docFormat, decimal angle, int width, int height, Point center, Point leftBottom, Point leftTop, Point rightBottom, Point rightTop, int dpi, Option<int?> inverse = default, Option<int?> objArea = default, Option<int?> objIntAngleDev = default, Option<int?> perspectiveTr = default, Option<int?> resultStatus = default)
        {
            DocFormat = docFormat;
            Angle = angle;
            Width = width;
            Height = height;
            Center = center;
            LeftBottom = leftBottom;
            LeftTop = leftTop;
            RightBottom = rightBottom;
            RightTop = rightTop;
            Dpi = dpi;
            InverseOption = inverse;
            ObjAreaOption = objArea;
            ObjIntAngleDevOption = objIntAngleDev;
            PerspectiveTrOption = perspectiveTr;
            ResultStatusOption = resultStatus;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets DocFormat
        /// </summary>
        [JsonPropertyName("docFormat")]
        public DocumentFormat DocFormat { get; set; }

        /// <summary>
        /// Document rotation angle
        /// </summary>
        /// <value>Document rotation angle</value>
        [JsonPropertyName("Angle")]
        public decimal Angle { get; set; }

        /// <summary>
        /// Document width
        /// </summary>
        /// <value>Document width</value>
        [JsonPropertyName("Width")]
        public int Width { get; set; }

        /// <summary>
        /// Document height
        /// </summary>
        /// <value>Document height</value>
        [JsonPropertyName("Height")]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets Center
        /// </summary>
        [JsonPropertyName("Center")]
        public Point Center { get; set; }

        /// <summary>
        /// Gets or Sets LeftBottom
        /// </summary>
        [JsonPropertyName("LeftBottom")]
        public Point LeftBottom { get; set; }

        /// <summary>
        /// Gets or Sets LeftTop
        /// </summary>
        [JsonPropertyName("LeftTop")]
        public Point LeftTop { get; set; }

        /// <summary>
        /// Gets or Sets RightBottom
        /// </summary>
        [JsonPropertyName("RightBottom")]
        public Point RightBottom { get; set; }

        /// <summary>
        /// Gets or Sets RightTop
        /// </summary>
        [JsonPropertyName("RightTop")]
        public Point RightTop { get; set; }

        /// <summary>
        /// Gets or Sets Dpi
        /// </summary>
        [JsonPropertyName("Dpi")]
        public int Dpi { get; set; }

        /// <summary>
        /// Used to track the state of Inverse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InverseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Inverse
        /// </summary>
        [JsonPropertyName("Inverse")]
        public int? Inverse { get { return this.InverseOption; } set { this.InverseOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ObjArea
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ObjAreaOption { get; private set; }

        /// <summary>
        /// Gets or Sets ObjArea
        /// </summary>
        [JsonPropertyName("ObjArea")]
        public int? ObjArea { get { return this.ObjAreaOption; } set { this.ObjAreaOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ObjIntAngleDev
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ObjIntAngleDevOption { get; private set; }

        /// <summary>
        /// Gets or Sets ObjIntAngleDev
        /// </summary>
        [JsonPropertyName("ObjIntAngleDev")]
        public int? ObjIntAngleDev { get { return this.ObjIntAngleDevOption; } set { this.ObjIntAngleDevOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of PerspectiveTr
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PerspectiveTrOption { get; private set; }

        /// <summary>
        /// Gets or Sets PerspectiveTr
        /// </summary>
        [JsonPropertyName("PerspectiveTr")]
        public int? PerspectiveTr { get { return this.PerspectiveTrOption; } set { this.PerspectiveTrOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ResultStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ResultStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResultStatus
        /// </summary>
        [JsonPropertyName("ResultStatus")]
        public int? ResultStatus { get { return this.ResultStatusOption; } set { this.ResultStatusOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MrzPosition {\n");
            sb.Append("  DocFormat: ").Append(DocFormat).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Center: ").Append(Center).Append("\n");
            sb.Append("  LeftBottom: ").Append(LeftBottom).Append("\n");
            sb.Append("  LeftTop: ").Append(LeftTop).Append("\n");
            sb.Append("  RightBottom: ").Append(RightBottom).Append("\n");
            sb.Append("  RightTop: ").Append(RightTop).Append("\n");
            sb.Append("  Dpi: ").Append(Dpi).Append("\n");
            sb.Append("  Inverse: ").Append(Inverse).Append("\n");
            sb.Append("  ObjArea: ").Append(ObjArea).Append("\n");
            sb.Append("  ObjIntAngleDev: ").Append(ObjIntAngleDev).Append("\n");
            sb.Append("  PerspectiveTr: ").Append(PerspectiveTr).Append("\n");
            sb.Append("  ResultStatus: ").Append(ResultStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MrzPosition" />
    /// </summary>
    public class MrzPositionJsonConverter : JsonConverter<MrzPosition>
    {
        /// <summary>
        /// Deserializes json to <see cref="MrzPosition" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MrzPosition Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DocumentFormat?> docFormat = default;
            Option<decimal?> angle = default;
            Option<int?> width = default;
            Option<int?> height = default;
            Option<Point?> center = default;
            Option<Point?> leftBottom = default;
            Option<Point?> leftTop = default;
            Option<Point?> rightBottom = default;
            Option<Point?> rightTop = default;
            Option<int?> dpi = default;
            Option<int?> inverse = default;
            Option<int?> objArea = default;
            Option<int?> objIntAngleDev = default;
            Option<int?> perspectiveTr = default;
            Option<int?> resultStatus = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "docFormat":
                            string? docFormatRawValue = utf8JsonReader.GetString();
                            if (docFormatRawValue != null)
                                docFormat = new Option<DocumentFormat?>(DocumentFormatValueConverter.FromStringOrDefault(docFormatRawValue));
                            break;
                        case "Angle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                angle = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Width":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                width = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Height":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                height = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Center":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                center = new Option<Point?>(JsonSerializer.Deserialize<Point>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "LeftBottom":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                leftBottom = new Option<Point?>(JsonSerializer.Deserialize<Point>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "LeftTop":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                leftTop = new Option<Point?>(JsonSerializer.Deserialize<Point>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RightBottom":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rightBottom = new Option<Point?>(JsonSerializer.Deserialize<Point>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RightTop":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rightTop = new Option<Point?>(JsonSerializer.Deserialize<Point>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Dpi":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dpi = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Inverse":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inverse = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ObjArea":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                objArea = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ObjIntAngleDev":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                objIntAngleDev = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "PerspectiveTr":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                perspectiveTr = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ResultStatus":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resultStatus = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!docFormat.IsSet)
                throw new ArgumentException("Property is required for class MrzPosition.", nameof(docFormat));

            if (!angle.IsSet)
                throw new ArgumentException("Property is required for class MrzPosition.", nameof(angle));

            if (!width.IsSet)
                throw new ArgumentException("Property is required for class MrzPosition.", nameof(width));

            if (!height.IsSet)
                throw new ArgumentException("Property is required for class MrzPosition.", nameof(height));

            if (!center.IsSet)
                throw new ArgumentException("Property is required for class MrzPosition.", nameof(center));

            if (!leftBottom.IsSet)
                throw new ArgumentException("Property is required for class MrzPosition.", nameof(leftBottom));

            if (!leftTop.IsSet)
                throw new ArgumentException("Property is required for class MrzPosition.", nameof(leftTop));

            if (!rightBottom.IsSet)
                throw new ArgumentException("Property is required for class MrzPosition.", nameof(rightBottom));

            if (!rightTop.IsSet)
                throw new ArgumentException("Property is required for class MrzPosition.", nameof(rightTop));

            if (!dpi.IsSet)
                throw new ArgumentException("Property is required for class MrzPosition.", nameof(dpi));

            if (docFormat.IsSet && docFormat.Value == null)
                throw new ArgumentNullException(nameof(docFormat), "Property is not nullable for class MrzPosition.");

            if (angle.IsSet && angle.Value == null)
                throw new ArgumentNullException(nameof(angle), "Property is not nullable for class MrzPosition.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class MrzPosition.");

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class MrzPosition.");

            if (center.IsSet && center.Value == null)
                throw new ArgumentNullException(nameof(center), "Property is not nullable for class MrzPosition.");

            if (leftBottom.IsSet && leftBottom.Value == null)
                throw new ArgumentNullException(nameof(leftBottom), "Property is not nullable for class MrzPosition.");

            if (leftTop.IsSet && leftTop.Value == null)
                throw new ArgumentNullException(nameof(leftTop), "Property is not nullable for class MrzPosition.");

            if (rightBottom.IsSet && rightBottom.Value == null)
                throw new ArgumentNullException(nameof(rightBottom), "Property is not nullable for class MrzPosition.");

            if (rightTop.IsSet && rightTop.Value == null)
                throw new ArgumentNullException(nameof(rightTop), "Property is not nullable for class MrzPosition.");

            if (dpi.IsSet && dpi.Value == null)
                throw new ArgumentNullException(nameof(dpi), "Property is not nullable for class MrzPosition.");

            if (inverse.IsSet && inverse.Value == null)
                throw new ArgumentNullException(nameof(inverse), "Property is not nullable for class MrzPosition.");

            if (objArea.IsSet && objArea.Value == null)
                throw new ArgumentNullException(nameof(objArea), "Property is not nullable for class MrzPosition.");

            if (objIntAngleDev.IsSet && objIntAngleDev.Value == null)
                throw new ArgumentNullException(nameof(objIntAngleDev), "Property is not nullable for class MrzPosition.");

            if (perspectiveTr.IsSet && perspectiveTr.Value == null)
                throw new ArgumentNullException(nameof(perspectiveTr), "Property is not nullable for class MrzPosition.");

            if (resultStatus.IsSet && resultStatus.Value == null)
                throw new ArgumentNullException(nameof(resultStatus), "Property is not nullable for class MrzPosition.");

            return new MrzPosition(docFormat.Value!.Value!, angle.Value!.Value!, width.Value!.Value!, height.Value!.Value!, center.Value!, leftBottom.Value!, leftTop.Value!, rightBottom.Value!, rightTop.Value!, dpi.Value!.Value!, inverse, objArea, objIntAngleDev, perspectiveTr, resultStatus);
        }

        /// <summary>
        /// Serializes a <see cref="MrzPosition" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mrzPosition"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MrzPosition mrzPosition, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, mrzPosition, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MrzPosition" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mrzPosition"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MrzPosition mrzPosition, JsonSerializerOptions jsonSerializerOptions)
        {
            if (mrzPosition.Center == null)
                throw new ArgumentNullException(nameof(mrzPosition.Center), "Property is required for class MrzPosition.");

            if (mrzPosition.LeftBottom == null)
                throw new ArgumentNullException(nameof(mrzPosition.LeftBottom), "Property is required for class MrzPosition.");

            if (mrzPosition.LeftTop == null)
                throw new ArgumentNullException(nameof(mrzPosition.LeftTop), "Property is required for class MrzPosition.");

            if (mrzPosition.RightBottom == null)
                throw new ArgumentNullException(nameof(mrzPosition.RightBottom), "Property is required for class MrzPosition.");

            if (mrzPosition.RightTop == null)
                throw new ArgumentNullException(nameof(mrzPosition.RightTop), "Property is required for class MrzPosition.");

            var docFormatRawValue = DocumentFormatValueConverter.ToJsonValue(mrzPosition.DocFormat);
            writer.WriteNumber("docFormat", docFormatRawValue);

            writer.WriteNumber("Angle", mrzPosition.Angle);

            writer.WriteNumber("Width", mrzPosition.Width);

            writer.WriteNumber("Height", mrzPosition.Height);

            writer.WritePropertyName("Center");
            JsonSerializer.Serialize(writer, mrzPosition.Center, jsonSerializerOptions);
            writer.WritePropertyName("LeftBottom");
            JsonSerializer.Serialize(writer, mrzPosition.LeftBottom, jsonSerializerOptions);
            writer.WritePropertyName("LeftTop");
            JsonSerializer.Serialize(writer, mrzPosition.LeftTop, jsonSerializerOptions);
            writer.WritePropertyName("RightBottom");
            JsonSerializer.Serialize(writer, mrzPosition.RightBottom, jsonSerializerOptions);
            writer.WritePropertyName("RightTop");
            JsonSerializer.Serialize(writer, mrzPosition.RightTop, jsonSerializerOptions);
            writer.WriteNumber("Dpi", mrzPosition.Dpi);

            if (mrzPosition.InverseOption.IsSet)
                writer.WriteNumber("Inverse", mrzPosition.InverseOption.Value!.Value);

            if (mrzPosition.ObjAreaOption.IsSet)
                writer.WriteNumber("ObjArea", mrzPosition.ObjAreaOption.Value!.Value);

            if (mrzPosition.ObjIntAngleDevOption.IsSet)
                writer.WriteNumber("ObjIntAngleDev", mrzPosition.ObjIntAngleDevOption.Value!.Value);

            if (mrzPosition.PerspectiveTrOption.IsSet)
                writer.WriteNumber("PerspectiveTr", mrzPosition.PerspectiveTrOption.Value!.Value);

            if (mrzPosition.ResultStatusOption.IsSet)
                writer.WriteNumber("ResultStatus", mrzPosition.ResultStatusOption.Value!.Value);
        }
    }
}
