/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// MrzPosition
    /// </summary>
    [DataContract(Name = "MrzPosition")]
    public partial class MrzPosition : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DocFormat
        /// </summary>
        [DataMember(Name = "docFormat", IsRequired = true, EmitDefaultValue = true)]
        public DocumentFormat DocFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MrzPosition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MrzPosition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MrzPosition" /> class.
        /// </summary>
        /// <param name="docFormat">docFormat (required).</param>
        /// <param name="angle">Document rotation angle (required).</param>
        /// <param name="width">Document width (required).</param>
        /// <param name="height">Document height (required).</param>
        /// <param name="center">center (required).</param>
        /// <param name="leftBottom">leftBottom (required).</param>
        /// <param name="leftTop">leftTop (required).</param>
        /// <param name="rightBottom">rightBottom (required).</param>
        /// <param name="rightTop">rightTop (required).</param>
        /// <param name="dpi">dpi (required).</param>
        /// <param name="inverse">inverse.</param>
        /// <param name="objArea">objArea.</param>
        /// <param name="objIntAngleDev">objIntAngleDev.</param>
        /// <param name="perspectiveTr">perspectiveTr.</param>
        /// <param name="resultStatus">resultStatus.</param>
        public MrzPosition(DocumentFormat docFormat = default(DocumentFormat), decimal angle = default(decimal), int width = default(int), int height = default(int), Point center = default(Point), Point leftBottom = default(Point), Point leftTop = default(Point), Point rightBottom = default(Point), Point rightTop = default(Point), int dpi = default(int), int inverse = default(int), int objArea = default(int), int objIntAngleDev = default(int), int perspectiveTr = default(int), int resultStatus = default(int))
        {
            this.DocFormat = docFormat;
            this.Angle = angle;
            this.Width = width;
            this.Height = height;
            // to ensure "center" is required (not null)
            if (center == null)
            {
                throw new ArgumentNullException("center is a required property for MrzPosition and cannot be null");
            }
            this.Center = center;
            // to ensure "leftBottom" is required (not null)
            if (leftBottom == null)
            {
                throw new ArgumentNullException("leftBottom is a required property for MrzPosition and cannot be null");
            }
            this.LeftBottom = leftBottom;
            // to ensure "leftTop" is required (not null)
            if (leftTop == null)
            {
                throw new ArgumentNullException("leftTop is a required property for MrzPosition and cannot be null");
            }
            this.LeftTop = leftTop;
            // to ensure "rightBottom" is required (not null)
            if (rightBottom == null)
            {
                throw new ArgumentNullException("rightBottom is a required property for MrzPosition and cannot be null");
            }
            this.RightBottom = rightBottom;
            // to ensure "rightTop" is required (not null)
            if (rightTop == null)
            {
                throw new ArgumentNullException("rightTop is a required property for MrzPosition and cannot be null");
            }
            this.RightTop = rightTop;
            this.Dpi = dpi;
            this.Inverse = inverse;
            this.ObjArea = objArea;
            this.ObjIntAngleDev = objIntAngleDev;
            this.PerspectiveTr = perspectiveTr;
            this.ResultStatus = resultStatus;
        }

        /// <summary>
        /// Document rotation angle
        /// </summary>
        /// <value>Document rotation angle</value>
        [DataMember(Name = "Angle", IsRequired = true, EmitDefaultValue = true)]
        public decimal Angle { get; set; }

        /// <summary>
        /// Document width
        /// </summary>
        /// <value>Document width</value>
        [DataMember(Name = "Width", IsRequired = true, EmitDefaultValue = true)]
        public int Width { get; set; }

        /// <summary>
        /// Document height
        /// </summary>
        /// <value>Document height</value>
        [DataMember(Name = "Height", IsRequired = true, EmitDefaultValue = true)]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets Center
        /// </summary>
        [DataMember(Name = "Center", IsRequired = true, EmitDefaultValue = true)]
        public Point Center { get; set; }

        /// <summary>
        /// Gets or Sets LeftBottom
        /// </summary>
        [DataMember(Name = "LeftBottom", IsRequired = true, EmitDefaultValue = true)]
        public Point LeftBottom { get; set; }

        /// <summary>
        /// Gets or Sets LeftTop
        /// </summary>
        [DataMember(Name = "LeftTop", IsRequired = true, EmitDefaultValue = true)]
        public Point LeftTop { get; set; }

        /// <summary>
        /// Gets or Sets RightBottom
        /// </summary>
        [DataMember(Name = "RightBottom", IsRequired = true, EmitDefaultValue = true)]
        public Point RightBottom { get; set; }

        /// <summary>
        /// Gets or Sets RightTop
        /// </summary>
        [DataMember(Name = "RightTop", IsRequired = true, EmitDefaultValue = true)]
        public Point RightTop { get; set; }

        /// <summary>
        /// Gets or Sets Dpi
        /// </summary>
        [DataMember(Name = "Dpi", IsRequired = true, EmitDefaultValue = true)]
        public int Dpi { get; set; }

        /// <summary>
        /// Gets or Sets Inverse
        /// </summary>
        [DataMember(Name = "Inverse", EmitDefaultValue = false)]
        public int? Inverse { get; set; }

        /// <summary>
        /// Gets or Sets ObjArea
        /// </summary>
        [DataMember(Name = "ObjArea", EmitDefaultValue = false)]
        public int? ObjArea { get; set; }

        /// <summary>
        /// Gets or Sets ObjIntAngleDev
        /// </summary>
        [DataMember(Name = "ObjIntAngleDev", EmitDefaultValue = false)]
        public int? ObjIntAngleDev { get; set; }

        /// <summary>
        /// Gets or Sets PerspectiveTr
        /// </summary>
        [DataMember(Name = "PerspectiveTr", EmitDefaultValue = false)]
        public int? PerspectiveTr { get; set; }

        /// <summary>
        /// Gets or Sets ResultStatus
        /// </summary>
        [DataMember(Name = "ResultStatus", EmitDefaultValue = false)]
        public int? ResultStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MrzPosition {\n");
            sb.Append("  DocFormat: ").Append(DocFormat).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Center: ").Append(Center).Append("\n");
            sb.Append("  LeftBottom: ").Append(LeftBottom).Append("\n");
            sb.Append("  LeftTop: ").Append(LeftTop).Append("\n");
            sb.Append("  RightBottom: ").Append(RightBottom).Append("\n");
            sb.Append("  RightTop: ").Append(RightTop).Append("\n");
            sb.Append("  Dpi: ").Append(Dpi).Append("\n");
            sb.Append("  Inverse: ").Append(Inverse).Append("\n");
            sb.Append("  ObjArea: ").Append(ObjArea).Append("\n");
            sb.Append("  ObjIntAngleDev: ").Append(ObjIntAngleDev).Append("\n");
            sb.Append("  PerspectiveTr: ").Append(PerspectiveTr).Append("\n");
            sb.Append("  ResultStatus: ").Append(ResultStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
