// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TDocBinaryInfo
    /// </summary>
    public partial class TDocBinaryInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TDocBinaryInfo" /> class.
        /// </summary>
        /// <param name="rFIDBINARYDATA">rFIDBINARYDATA</param>
        /// <param name="rFIDRAWDATA">rFIDRAWDATA</param>
        [JsonConstructor]
        public TDocBinaryInfo(Option<BinaryData?> rFIDBINARYDATA = default, Option<List<RfidRawData>?> rFIDRAWDATA = default)
        {
            RFID_BINARY_DATAOption = rFIDBINARYDATA;
            RFID_RAW_DATAOption = rFIDRAWDATA;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of RFID_BINARY_DATA
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BinaryData?> RFID_BINARY_DATAOption { get; private set; }

        /// <summary>
        /// Gets or Sets RFID_BINARY_DATA
        /// </summary>
        [JsonPropertyName("RFID_BINARY_DATA")]
        public BinaryData? RFID_BINARY_DATA { get { return this.RFID_BINARY_DATAOption; } set { this.RFID_BINARY_DATAOption = new Option<BinaryData?>(value); } }

        /// <summary>
        /// Used to track the state of RFID_RAW_DATA
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RfidRawData>?> RFID_RAW_DATAOption { get; private set; }

        /// <summary>
        /// Gets or Sets RFID_RAW_DATA
        /// </summary>
        [JsonPropertyName("RFID_RAW_DATA")]
        public List<RfidRawData>? RFID_RAW_DATA { get { return this.RFID_RAW_DATAOption; } set { this.RFID_RAW_DATAOption = new Option<List<RfidRawData>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TDocBinaryInfo {\n");
            sb.Append("  RFID_BINARY_DATA: ").Append(RFID_BINARY_DATA).Append("\n");
            sb.Append("  RFID_RAW_DATA: ").Append(RFID_RAW_DATA).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TDocBinaryInfo" />
    /// </summary>
    public class TDocBinaryInfoJsonConverter : JsonConverter<TDocBinaryInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="TDocBinaryInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TDocBinaryInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<BinaryData?> rFIDBINARYDATA = default;
            Option<List<RfidRawData>?> rFIDRAWDATA = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "RFID_BINARY_DATA":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDBINARYDATA = new Option<BinaryData?>(JsonSerializer.Deserialize<BinaryData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "RFID_RAW_DATA":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rFIDRAWDATA = new Option<List<RfidRawData>?>(JsonSerializer.Deserialize<List<RfidRawData>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (rFIDBINARYDATA.IsSet && rFIDBINARYDATA.Value == null)
                throw new ArgumentNullException(nameof(rFIDBINARYDATA), "Property is not nullable for class TDocBinaryInfo.");

            if (rFIDRAWDATA.IsSet && rFIDRAWDATA.Value == null)
                throw new ArgumentNullException(nameof(rFIDRAWDATA), "Property is not nullable for class TDocBinaryInfo.");

            return new TDocBinaryInfo(rFIDBINARYDATA, rFIDRAWDATA);
        }

        /// <summary>
        /// Serializes a <see cref="TDocBinaryInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tDocBinaryInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TDocBinaryInfo tDocBinaryInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tDocBinaryInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TDocBinaryInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tDocBinaryInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TDocBinaryInfo tDocBinaryInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tDocBinaryInfo.RFID_BINARY_DATAOption.IsSet && tDocBinaryInfo.RFID_BINARY_DATA == null)
                throw new ArgumentNullException(nameof(tDocBinaryInfo.RFID_BINARY_DATA), "Property is required for class TDocBinaryInfo.");

            if (tDocBinaryInfo.RFID_RAW_DATAOption.IsSet && tDocBinaryInfo.RFID_RAW_DATA == null)
                throw new ArgumentNullException(nameof(tDocBinaryInfo.RFID_RAW_DATA), "Property is required for class TDocBinaryInfo.");

            if (tDocBinaryInfo.RFID_BINARY_DATAOption.IsSet)
            {
                writer.WritePropertyName("RFID_BINARY_DATA");
                JsonSerializer.Serialize(writer, tDocBinaryInfo.RFID_BINARY_DATA, jsonSerializerOptions);
            }
            if (tDocBinaryInfo.RFID_RAW_DATAOption.IsSet)
            {
                writer.WritePropertyName("RFID_RAW_DATA");
                JsonSerializer.Serialize(writer, tDocBinaryInfo.RFID_RAW_DATA, jsonSerializerOptions);
            }
        }
    }
}
