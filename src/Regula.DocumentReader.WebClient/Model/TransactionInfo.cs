/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TransactionInfo
    /// </summary>
    [DataContract(Name = "TransactionInfo")]
    public partial class TransactionInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfo" /> class.
        /// </summary>
        /// <param name="computerName">Computer name.</param>
        /// <param name="dateTime">Date and time.</param>
        /// <param name="documentsDatabase">documentsDatabase.</param>
        /// <param name="systemInfo">System information.</param>
        /// <param name="tag">Transaction tag.</param>
        /// <param name="transactionID">Transaction identifier.</param>
        /// <param name="userName">User name.</param>
        /// <param name="varVersion">SDK version.</param>
        public TransactionInfo(string computerName = default(string), string dateTime = default(string), DocumentsDatabase documentsDatabase = default(DocumentsDatabase), string systemInfo = default(string), string tag = default(string), string transactionID = default(string), string userName = default(string), string varVersion = default(string))
        {
            this.ComputerName = computerName;
            this.DateTime = dateTime;
            this.DocumentsDatabase = documentsDatabase;
            this.SystemInfo = systemInfo;
            this.Tag = tag;
            this.TransactionID = transactionID;
            this.UserName = userName;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Computer name
        /// </summary>
        /// <value>Computer name</value>
        [DataMember(Name = "ComputerName", EmitDefaultValue = false)]
        public string? ComputerName { get; set; }

        /// <summary>
        /// Date and time
        /// </summary>
        /// <value>Date and time</value>
        [DataMember(Name = "DateTime", EmitDefaultValue = false)]
        public string? DateTime { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsDatabase
        /// </summary>
        [DataMember(Name = "DocumentsDatabase", EmitDefaultValue = false)]
        public DocumentsDatabase? DocumentsDatabase { get; set; }

        /// <summary>
        /// System information
        /// </summary>
        /// <value>System information</value>
        [DataMember(Name = "SystemInfo", EmitDefaultValue = false)]
        public string? SystemInfo { get; set; }

        /// <summary>
        /// Transaction tag
        /// </summary>
        /// <value>Transaction tag</value>
        [DataMember(Name = "Tag", EmitDefaultValue = false)]
        public string? Tag { get; set; }

        /// <summary>
        /// Transaction identifier
        /// </summary>
        /// <value>Transaction identifier</value>
        [DataMember(Name = "TransactionID", EmitDefaultValue = false)]
        public string? TransactionID { get; set; }

        /// <summary>
        /// User name
        /// </summary>
        /// <value>User name</value>
        [DataMember(Name = "UserName", EmitDefaultValue = false)]
        public string? UserName { get; set; }

        /// <summary>
        /// SDK version
        /// </summary>
        /// <value>SDK version</value>
        [DataMember(Name = "Version", EmitDefaultValue = false)]
        public string? VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionInfo {\n");
            sb.Append("  ComputerName: ").Append(ComputerName).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  DocumentsDatabase: ").Append(DocumentsDatabase).Append("\n");
            sb.Append("  SystemInfo: ").Append(SystemInfo).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  TransactionID: ").Append(TransactionID).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
