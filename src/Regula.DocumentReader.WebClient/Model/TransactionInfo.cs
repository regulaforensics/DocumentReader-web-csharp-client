// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TransactionInfo
    /// </summary>
    public partial class TransactionInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfo" /> class.
        /// </summary>
        /// <param name="computerName">Computer name</param>
        /// <param name="dateTime">Date and time</param>
        /// <param name="documentsDatabase">documentsDatabase</param>
        /// <param name="systemInfo">System information</param>
        /// <param name="tag">Transaction tag</param>
        /// <param name="transactionID">Transaction identifier</param>
        /// <param name="userName">User name</param>
        /// <param name="varVersion">SDK version</param>
        [JsonConstructor]
        public TransactionInfo(Option<string?> computerName = default, Option<string?> dateTime = default, Option<DocumentsDatabase?> documentsDatabase = default, Option<string?> systemInfo = default, Option<string?> tag = default, Option<string?> transactionID = default, Option<string?> userName = default, Option<string?> varVersion = default)
        {
            ComputerNameOption = computerName;
            DateTimeOption = dateTime;
            DocumentsDatabaseOption = documentsDatabase;
            SystemInfoOption = systemInfo;
            TagOption = tag;
            TransactionIDOption = transactionID;
            UserNameOption = userName;
            VarVersionOption = varVersion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ComputerName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ComputerNameOption { get; private set; }

        /// <summary>
        /// Computer name
        /// </summary>
        /// <value>Computer name</value>
        [JsonPropertyName("ComputerName")]
        public string? ComputerName { get { return this.ComputerNameOption; } set { this.ComputerNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateTimeOption { get; private set; }

        /// <summary>
        /// Date and time
        /// </summary>
        /// <value>Date and time</value>
        [JsonPropertyName("DateTime")]
        public string? DateTime { get { return this.DateTimeOption; } set { this.DateTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DocumentsDatabase
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocumentsDatabase?> DocumentsDatabaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentsDatabase
        /// </summary>
        [JsonPropertyName("DocumentsDatabase")]
        public DocumentsDatabase? DocumentsDatabase { get { return this.DocumentsDatabaseOption; } set { this.DocumentsDatabaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of SystemInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SystemInfoOption { get; private set; }

        /// <summary>
        /// System information
        /// </summary>
        /// <value>System information</value>
        [JsonPropertyName("SystemInfo")]
        public string? SystemInfo { get { return this.SystemInfoOption; } set { this.SystemInfoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagOption { get; private set; }

        /// <summary>
        /// Transaction tag
        /// </summary>
        /// <value>Transaction tag</value>
        [JsonPropertyName("Tag")]
        public string? Tag { get { return this.TagOption; } set { this.TagOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransactionID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TransactionIDOption { get; private set; }

        /// <summary>
        /// Transaction identifier
        /// </summary>
        /// <value>Transaction identifier</value>
        [JsonPropertyName("TransactionID")]
        public string? TransactionID { get { return this.TransactionIDOption; } set { this.TransactionIDOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserNameOption { get; private set; }

        /// <summary>
        /// User name
        /// </summary>
        /// <value>User name</value>
        [JsonPropertyName("UserName")]
        public string? UserName { get { return this.UserNameOption; } set { this.UserNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// SDK version
        /// </summary>
        /// <value>SDK version</value>
        [JsonPropertyName("Version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionInfo {\n");
            sb.Append("  ComputerName: ").Append(ComputerName).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  DocumentsDatabase: ").Append(DocumentsDatabase).Append("\n");
            sb.Append("  SystemInfo: ").Append(SystemInfo).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  TransactionID: ").Append(TransactionID).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionInfo" />
    /// </summary>
    public class TransactionInfoJsonConverter : JsonConverter<TransactionInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransactionInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> computerName = default;
            Option<string?> dateTime = default;
            Option<DocumentsDatabase?> documentsDatabase = default;
            Option<string?> systemInfo = default;
            Option<string?> tag = default;
            Option<string?> transactionID = default;
            Option<string?> userName = default;
            Option<string?> varVersion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ComputerName":
                            computerName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "DateTime":
                            dateTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "DocumentsDatabase":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                documentsDatabase = new Option<DocumentsDatabase?>(JsonSerializer.Deserialize<DocumentsDatabase>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "SystemInfo":
                            systemInfo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "TransactionID":
                            transactionID = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "UserName":
                            userName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (computerName.IsSet && computerName.Value == null)
                throw new ArgumentNullException(nameof(computerName), "Property is not nullable for class TransactionInfo.");

            if (dateTime.IsSet && dateTime.Value == null)
                throw new ArgumentNullException(nameof(dateTime), "Property is not nullable for class TransactionInfo.");

            if (documentsDatabase.IsSet && documentsDatabase.Value == null)
                throw new ArgumentNullException(nameof(documentsDatabase), "Property is not nullable for class TransactionInfo.");

            if (systemInfo.IsSet && systemInfo.Value == null)
                throw new ArgumentNullException(nameof(systemInfo), "Property is not nullable for class TransactionInfo.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class TransactionInfo.");

            if (transactionID.IsSet && transactionID.Value == null)
                throw new ArgumentNullException(nameof(transactionID), "Property is not nullable for class TransactionInfo.");

            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class TransactionInfo.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class TransactionInfo.");

            return new TransactionInfo(computerName, dateTime, documentsDatabase, systemInfo, tag, transactionID, userName, varVersion);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionInfo transactionInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, transactionInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TransactionInfo transactionInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionInfo.ComputerNameOption.IsSet && transactionInfo.ComputerName == null)
                throw new ArgumentNullException(nameof(transactionInfo.ComputerName), "Property is required for class TransactionInfo.");

            if (transactionInfo.DateTimeOption.IsSet && transactionInfo.DateTime == null)
                throw new ArgumentNullException(nameof(transactionInfo.DateTime), "Property is required for class TransactionInfo.");

            if (transactionInfo.DocumentsDatabaseOption.IsSet && transactionInfo.DocumentsDatabase == null)
                throw new ArgumentNullException(nameof(transactionInfo.DocumentsDatabase), "Property is required for class TransactionInfo.");

            if (transactionInfo.SystemInfoOption.IsSet && transactionInfo.SystemInfo == null)
                throw new ArgumentNullException(nameof(transactionInfo.SystemInfo), "Property is required for class TransactionInfo.");

            if (transactionInfo.TagOption.IsSet && transactionInfo.Tag == null)
                throw new ArgumentNullException(nameof(transactionInfo.Tag), "Property is required for class TransactionInfo.");

            if (transactionInfo.TransactionIDOption.IsSet && transactionInfo.TransactionID == null)
                throw new ArgumentNullException(nameof(transactionInfo.TransactionID), "Property is required for class TransactionInfo.");

            if (transactionInfo.UserNameOption.IsSet && transactionInfo.UserName == null)
                throw new ArgumentNullException(nameof(transactionInfo.UserName), "Property is required for class TransactionInfo.");

            if (transactionInfo.VarVersionOption.IsSet && transactionInfo.VarVersion == null)
                throw new ArgumentNullException(nameof(transactionInfo.VarVersion), "Property is required for class TransactionInfo.");

            if (transactionInfo.ComputerNameOption.IsSet)
                writer.WriteString("ComputerName", transactionInfo.ComputerName);

            if (transactionInfo.DateTimeOption.IsSet)
                writer.WriteString("DateTime", transactionInfo.DateTime);

            if (transactionInfo.DocumentsDatabaseOption.IsSet)
            {
                writer.WritePropertyName("DocumentsDatabase");
                JsonSerializer.Serialize(writer, transactionInfo.DocumentsDatabase, jsonSerializerOptions);
            }
            if (transactionInfo.SystemInfoOption.IsSet)
                writer.WriteString("SystemInfo", transactionInfo.SystemInfo);

            if (transactionInfo.TagOption.IsSet)
                writer.WriteString("Tag", transactionInfo.Tag);

            if (transactionInfo.TransactionIDOption.IsSet)
                writer.WriteString("TransactionID", transactionInfo.TransactionID);

            if (transactionInfo.UserNameOption.IsSet)
                writer.WriteString("UserName", transactionInfo.UserName);

            if (transactionInfo.VarVersionOption.IsSet)
                writer.WriteString("Version", transactionInfo.VarVersion);
        }
    }
}
