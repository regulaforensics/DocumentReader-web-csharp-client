/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the contents of a single LDS application and their analysis within the context of the communication session with electronic document
    /// </summary>
    [DataContract(Name = "RfidApplication")]
    public partial class RfidApplication : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", IsRequired = true, EmitDefaultValue = true)]
        public RfidApplicationType Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", IsRequired = true, EmitDefaultValue = true)]
        public RFIDErrorCodes Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidApplication" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidApplication() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidApplication" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="applicationID">Application identifier (required).</param>
        /// <param name="varVersion">Version of the application (required).</param>
        /// <param name="unicodeVersion">Unicode version for application (required).</param>
        /// <param name="dataHashAlgorithm">Algorithm for calculating hash values for files for the procedure of PA (required).</param>
        /// <param name="files">List of containers to store information about the read files of the application (required).</param>
        public RfidApplication(RfidApplicationType type = default(RfidApplicationType), RFIDErrorCodes status = default(RFIDErrorCodes), string applicationID = default(string), string varVersion = default(string), string unicodeVersion = default(string), string dataHashAlgorithm = default(string), List<RfidDataFile> files = default(List<RfidDataFile>))
        {
            this.Type = type;
            this.Status = status;
            // to ensure "applicationID" is required (not null)
            if (applicationID == null)
            {
                throw new ArgumentNullException("applicationID is a required property for RfidApplication and cannot be null");
            }
            this.ApplicationID = applicationID;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for RfidApplication and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "unicodeVersion" is required (not null)
            if (unicodeVersion == null)
            {
                throw new ArgumentNullException("unicodeVersion is a required property for RfidApplication and cannot be null");
            }
            this.UnicodeVersion = unicodeVersion;
            // to ensure "dataHashAlgorithm" is required (not null)
            if (dataHashAlgorithm == null)
            {
                throw new ArgumentNullException("dataHashAlgorithm is a required property for RfidApplication and cannot be null");
            }
            this.DataHashAlgorithm = dataHashAlgorithm;
            // to ensure "files" is required (not null)
            if (files == null)
            {
                throw new ArgumentNullException("files is a required property for RfidApplication and cannot be null");
            }
            this.Files = files;
        }

        /// <summary>
        /// Application identifier
        /// </summary>
        /// <value>Application identifier</value>
        [DataMember(Name = "ApplicationID", IsRequired = true, EmitDefaultValue = true)]
        public string ApplicationID { get; set; }

        /// <summary>
        /// Version of the application
        /// </summary>
        /// <value>Version of the application</value>
        [DataMember(Name = "Version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Unicode version for application
        /// </summary>
        /// <value>Unicode version for application</value>
        [DataMember(Name = "UnicodeVersion", IsRequired = true, EmitDefaultValue = true)]
        public string UnicodeVersion { get; set; }

        /// <summary>
        /// Algorithm for calculating hash values for files for the procedure of PA
        /// </summary>
        /// <value>Algorithm for calculating hash values for files for the procedure of PA</value>
        [DataMember(Name = "DataHashAlgorithm", IsRequired = true, EmitDefaultValue = true)]
        public string DataHashAlgorithm { get; set; }

        /// <summary>
        /// List of containers to store information about the read files of the application
        /// </summary>
        /// <value>List of containers to store information about the read files of the application</value>
        [DataMember(Name = "Files", IsRequired = true, EmitDefaultValue = true)]
        public List<RfidDataFile> Files { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidApplication {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ApplicationID: ").Append(ApplicationID).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  UnicodeVersion: ").Append(UnicodeVersion).Append("\n");
            sb.Append("  DataHashAlgorithm: ").Append(DataHashAlgorithm).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
