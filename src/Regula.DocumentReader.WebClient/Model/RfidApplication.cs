// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the contents of a single LDS application and their analysis within the context of the communication session with electronic document
    /// </summary>
    public partial class RfidApplication : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidApplication" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="status">status</param>
        /// <param name="applicationID">Application identifier</param>
        /// <param name="varVersion">Version of the application</param>
        /// <param name="unicodeVersion">Unicode version for application</param>
        /// <param name="dataHashAlgorithm">Algorithm for calculating hash values for files for the procedure of PA</param>
        /// <param name="files">List of containers to store information about the read files of the application</param>
        [JsonConstructor]
        public RfidApplication(RfidApplicationType type, RFIDErrorCodes status, string applicationID, string varVersion, string unicodeVersion, string dataHashAlgorithm, List<RfidDataFile> files)
        {
            Type = type;
            Status = status;
            ApplicationID = applicationID;
            VarVersion = varVersion;
            UnicodeVersion = unicodeVersion;
            DataHashAlgorithm = dataHashAlgorithm;
            Files = files;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("Type")]
        public RfidApplicationType Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("Status")]
        public RFIDErrorCodes Status { get; set; }

        /// <summary>
        /// Application identifier
        /// </summary>
        /// <value>Application identifier</value>
        [JsonPropertyName("ApplicationID")]
        public string ApplicationID { get; set; }

        /// <summary>
        /// Version of the application
        /// </summary>
        /// <value>Version of the application</value>
        [JsonPropertyName("Version")]
        public string VarVersion { get; set; }

        /// <summary>
        /// Unicode version for application
        /// </summary>
        /// <value>Unicode version for application</value>
        [JsonPropertyName("UnicodeVersion")]
        public string UnicodeVersion { get; set; }

        /// <summary>
        /// Algorithm for calculating hash values for files for the procedure of PA
        /// </summary>
        /// <value>Algorithm for calculating hash values for files for the procedure of PA</value>
        [JsonPropertyName("DataHashAlgorithm")]
        public string DataHashAlgorithm { get; set; }

        /// <summary>
        /// List of containers to store information about the read files of the application
        /// </summary>
        /// <value>List of containers to store information about the read files of the application</value>
        [JsonPropertyName("Files")]
        public List<RfidDataFile> Files { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidApplication {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ApplicationID: ").Append(ApplicationID).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  UnicodeVersion: ").Append(UnicodeVersion).Append("\n");
            sb.Append("  DataHashAlgorithm: ").Append(DataHashAlgorithm).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidApplication" />
    /// </summary>
    public class RfidApplicationJsonConverter : JsonConverter<RfidApplication>
    {
        /// <summary>
        /// Deserializes json to <see cref="RfidApplication" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RfidApplication Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RfidApplicationType?> type = default;
            Option<RFIDErrorCodes?> status = default;
            Option<string?> applicationID = default;
            Option<string?> varVersion = default;
            Option<string?> unicodeVersion = default;
            Option<string?> dataHashAlgorithm = default;
            Option<List<RfidDataFile>?> files = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<RfidApplicationType?>(RfidApplicationTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "Status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<RFIDErrorCodes?>(RFIDErrorCodesValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "ApplicationID":
                            applicationID = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "UnicodeVersion":
                            unicodeVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "DataHashAlgorithm":
                            dataHashAlgorithm = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Files":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                files = new Option<List<RfidDataFile>?>(JsonSerializer.Deserialize<List<RfidDataFile>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class RfidApplication.", nameof(type));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class RfidApplication.", nameof(status));

            if (!applicationID.IsSet)
                throw new ArgumentException("Property is required for class RfidApplication.", nameof(applicationID));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class RfidApplication.", nameof(varVersion));

            if (!unicodeVersion.IsSet)
                throw new ArgumentException("Property is required for class RfidApplication.", nameof(unicodeVersion));

            if (!dataHashAlgorithm.IsSet)
                throw new ArgumentException("Property is required for class RfidApplication.", nameof(dataHashAlgorithm));

            if (!files.IsSet)
                throw new ArgumentException("Property is required for class RfidApplication.", nameof(files));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class RfidApplication.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class RfidApplication.");

            if (applicationID.IsSet && applicationID.Value == null)
                throw new ArgumentNullException(nameof(applicationID), "Property is not nullable for class RfidApplication.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class RfidApplication.");

            if (unicodeVersion.IsSet && unicodeVersion.Value == null)
                throw new ArgumentNullException(nameof(unicodeVersion), "Property is not nullable for class RfidApplication.");

            if (dataHashAlgorithm.IsSet && dataHashAlgorithm.Value == null)
                throw new ArgumentNullException(nameof(dataHashAlgorithm), "Property is not nullable for class RfidApplication.");

            if (files.IsSet && files.Value == null)
                throw new ArgumentNullException(nameof(files), "Property is not nullable for class RfidApplication.");

            return new RfidApplication(type.Value!.Value!, status.Value!.Value!, applicationID.Value!, varVersion.Value!, unicodeVersion.Value!, dataHashAlgorithm.Value!, files.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RfidApplication" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidApplication"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RfidApplication rfidApplication, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rfidApplication, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RfidApplication" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidApplication"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RfidApplication rfidApplication, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rfidApplication.ApplicationID == null)
                throw new ArgumentNullException(nameof(rfidApplication.ApplicationID), "Property is required for class RfidApplication.");

            if (rfidApplication.VarVersion == null)
                throw new ArgumentNullException(nameof(rfidApplication.VarVersion), "Property is required for class RfidApplication.");

            if (rfidApplication.UnicodeVersion == null)
                throw new ArgumentNullException(nameof(rfidApplication.UnicodeVersion), "Property is required for class RfidApplication.");

            if (rfidApplication.DataHashAlgorithm == null)
                throw new ArgumentNullException(nameof(rfidApplication.DataHashAlgorithm), "Property is required for class RfidApplication.");

            if (rfidApplication.Files == null)
                throw new ArgumentNullException(nameof(rfidApplication.Files), "Property is required for class RfidApplication.");

            var typeRawValue = RfidApplicationTypeValueConverter.ToJsonValue(rfidApplication.Type);
            writer.WriteNumber("Type", typeRawValue);

            var statusRawValue = RFIDErrorCodesValueConverter.ToJsonValue(rfidApplication.Status);
            writer.WriteNumber("Status", statusRawValue);

            writer.WriteString("ApplicationID", rfidApplication.ApplicationID);

            writer.WriteString("Version", rfidApplication.VarVersion);

            writer.WriteString("UnicodeVersion", rfidApplication.UnicodeVersion);

            writer.WriteString("DataHashAlgorithm", rfidApplication.DataHashAlgorithm);

            writer.WritePropertyName("Files");
            JsonSerializer.Serialize(writer, rfidApplication.Files, jsonSerializerOptions);
        }
    }
}
