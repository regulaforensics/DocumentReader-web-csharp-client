// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Input image quality checks for the document processing
    /// </summary>
    /// <value>Input image quality checks for the document processing</value>
    public enum InputImageQualityChecks
    {
        /// <summary>
        /// Enum Glares for value: glaresCheck
        /// </summary>
        Glares = 1,

        /// <summary>
        /// Enum Focus for value: focusCheck
        /// </summary>
        Focus = 2,

        /// <summary>
        /// Enum Resolution for value: dpiThreshold
        /// </summary>
        Resolution = 3,

        /// <summary>
        /// Enum Colorness for value: colornessCheck
        /// </summary>
        Colorness = 4,

        /// <summary>
        /// Enum Perspective for value: perspectiveCheck
        /// </summary>
        Perspective = 5,

        /// <summary>
        /// Enum Bounds for value: documentPosition
        /// </summary>
        Bounds = 6,

        /// <summary>
        /// Enum Portrait for value: portraitCheck
        /// </summary>
        Portrait = 7,

        /// <summary>
        /// Enum Brightness for value: brightnessCheck
        /// </summary>
        Brightness = 8
    }

    /// <summary>
    /// Converts <see cref="InputImageQualityChecks"/> to and from the JSON value
    /// </summary>
    public static class InputImageQualityChecksValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="InputImageQualityChecks"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static InputImageQualityChecks FromString(string value)
        {
            if (value.Equals("glaresCheck"))
                return InputImageQualityChecks.Glares;

            if (value.Equals("focusCheck"))
                return InputImageQualityChecks.Focus;

            if (value.Equals("dpiThreshold"))
                return InputImageQualityChecks.Resolution;

            if (value.Equals("colornessCheck"))
                return InputImageQualityChecks.Colorness;

            if (value.Equals("perspectiveCheck"))
                return InputImageQualityChecks.Perspective;

            if (value.Equals("documentPosition"))
                return InputImageQualityChecks.Bounds;

            if (value.Equals("portraitCheck"))
                return InputImageQualityChecks.Portrait;

            if (value.Equals("brightnessCheck"))
                return InputImageQualityChecks.Brightness;

            throw new NotImplementedException($"Could not convert value to type InputImageQualityChecks: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="InputImageQualityChecks"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static InputImageQualityChecks? FromStringOrDefault(string value)
        {
            if (value.Equals("glaresCheck"))
                return InputImageQualityChecks.Glares;

            if (value.Equals("focusCheck"))
                return InputImageQualityChecks.Focus;

            if (value.Equals("dpiThreshold"))
                return InputImageQualityChecks.Resolution;

            if (value.Equals("colornessCheck"))
                return InputImageQualityChecks.Colorness;

            if (value.Equals("perspectiveCheck"))
                return InputImageQualityChecks.Perspective;

            if (value.Equals("documentPosition"))
                return InputImageQualityChecks.Bounds;

            if (value.Equals("portraitCheck"))
                return InputImageQualityChecks.Portrait;

            if (value.Equals("brightnessCheck"))
                return InputImageQualityChecks.Brightness;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="InputImageQualityChecks"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(InputImageQualityChecks value)
        {
            if (value == InputImageQualityChecks.Glares)
                return "glaresCheck";

            if (value == InputImageQualityChecks.Focus)
                return "focusCheck";

            if (value == InputImageQualityChecks.Resolution)
                return "dpiThreshold";

            if (value == InputImageQualityChecks.Colorness)
                return "colornessCheck";

            if (value == InputImageQualityChecks.Perspective)
                return "perspectiveCheck";

            if (value == InputImageQualityChecks.Bounds)
                return "documentPosition";

            if (value == InputImageQualityChecks.Portrait)
                return "portraitCheck";

            if (value == InputImageQualityChecks.Brightness)
                return "brightnessCheck";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InputImageQualityChecks"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class InputImageQualityChecksJsonConverter : JsonConverter<InputImageQualityChecks>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override InputImageQualityChecks Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            InputImageQualityChecks? result = rawValue == null
                ? null
                : InputImageQualityChecksValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the InputImageQualityChecks to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inputImageQualityChecks"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, InputImageQualityChecks inputImageQualityChecks, JsonSerializerOptions options)
        {
            writer.WriteStringValue(inputImageQualityChecks.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InputImageQualityChecks"/>
    /// </summary>
    public class InputImageQualityChecksNullableJsonConverter : JsonConverter<InputImageQualityChecks?>
    {
        /// <summary>
        /// Returns a InputImageQualityChecks from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override InputImageQualityChecks? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            InputImageQualityChecks? result = rawValue == null
                ? null
                : InputImageQualityChecksValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inputImageQualityChecks"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, InputImageQualityChecks? inputImageQualityChecks, JsonSerializerOptions options)
        {
            writer.WriteStringValue(inputImageQualityChecks?.ToString() ?? "null");
        }
    }
}
