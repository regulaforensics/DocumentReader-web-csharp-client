// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// VerifiedFieldMap
    /// </summary>
    public partial class VerifiedFieldMap : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifiedFieldMap" /> class.
        /// </summary>
        /// <param name="wFieldType">wFieldType</param>
        /// <param name="wLCID">wLCID</param>
        /// <param name="matrix">results comparison matrix. Elements of the matrix with indices 0, 1, 2, 3 take one of the values Disabled(0), Verified(1) or Not_Verified(2), elements with indices 4, 5, 6, 7, 8 are one of the values Disabled(0), Compare_Match(3) or Compare_Not_Match(4). Elements of the Matrix matrix have the following semantic meaning: - element with index 0 –– the result of verification of data from the MRZ; - 1 –– the result of verification of data from the RFID microcircuit; - 2 –– the result of verification of data from text areas of the document; - 3 –– the result of verification data from barcodes; - 4 - the result of comparing MRZ data and RFID microcircuits; - 5 - the result of comparing MRZ data and text areas of document filling; - 6 - the result of comparing MRZ data and bar codes; - 7 - the result of comparing the data of text areas of the document and the RFID chip; - 8 - the result of comparing the data of the text areas of the document and barcodes; - 9 - the result of comparing the data of the RFID chip and barcodes.</param>
        /// <param name="fieldMRZ">Field data extracted from mrz(machine readable zone)</param>
        /// <param name="fieldVisual">Field data extracted from visual zone</param>
        /// <param name="fieldBarcode">Field data extracted from barcode</param>
        /// <param name="fieldRFID">Field data extracted from rfid chip</param>
        /// <param name="fieldType">fieldType</param>
        [JsonConstructor]
        public VerifiedFieldMap(TextFieldType wFieldType, LCID wLCID, List<VerificationResult> matrix, Option<string?> fieldMRZ = default, Option<string?> fieldVisual = default, Option<string?> fieldBarcode = default, Option<string?> fieldRFID = default, Option<int?> fieldType = default)
        {
            WFieldType = wFieldType;
            WLCID = wLCID;
            Matrix = matrix;
            FieldMRZOption = fieldMRZ;
            FieldVisualOption = fieldVisual;
            FieldBarcodeOption = fieldBarcode;
            FieldRFIDOption = fieldRFID;
            FieldTypeOption = fieldType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets WFieldType
        /// </summary>
        [JsonPropertyName("wFieldType")]
        public TextFieldType WFieldType { get; set; }

        /// <summary>
        /// Gets or Sets WLCID
        /// </summary>
        [JsonPropertyName("wLCID")]
        public LCID WLCID { get; set; }

        /// <summary>
        /// results comparison matrix. Elements of the matrix with indices 0, 1, 2, 3 take one of the values Disabled(0), Verified(1) or Not_Verified(2), elements with indices 4, 5, 6, 7, 8 are one of the values Disabled(0), Compare_Match(3) or Compare_Not_Match(4). Elements of the Matrix matrix have the following semantic meaning: - element with index 0 –– the result of verification of data from the MRZ; - 1 –– the result of verification of data from the RFID microcircuit; - 2 –– the result of verification of data from text areas of the document; - 3 –– the result of verification data from barcodes; - 4 - the result of comparing MRZ data and RFID microcircuits; - 5 - the result of comparing MRZ data and text areas of document filling; - 6 - the result of comparing MRZ data and bar codes; - 7 - the result of comparing the data of text areas of the document and the RFID chip; - 8 - the result of comparing the data of the text areas of the document and barcodes; - 9 - the result of comparing the data of the RFID chip and barcodes.
        /// </summary>
        /// <value>results comparison matrix. Elements of the matrix with indices 0, 1, 2, 3 take one of the values Disabled(0), Verified(1) or Not_Verified(2), elements with indices 4, 5, 6, 7, 8 are one of the values Disabled(0), Compare_Match(3) or Compare_Not_Match(4). Elements of the Matrix matrix have the following semantic meaning: - element with index 0 –– the result of verification of data from the MRZ; - 1 –– the result of verification of data from the RFID microcircuit; - 2 –– the result of verification of data from text areas of the document; - 3 –– the result of verification data from barcodes; - 4 - the result of comparing MRZ data and RFID microcircuits; - 5 - the result of comparing MRZ data and text areas of document filling; - 6 - the result of comparing MRZ data and bar codes; - 7 - the result of comparing the data of text areas of the document and the RFID chip; - 8 - the result of comparing the data of the text areas of the document and barcodes; - 9 - the result of comparing the data of the RFID chip and barcodes.</value>
        /* <example>[1,0,0,0,0,3,0,0,0,0]</example> */
        [JsonPropertyName("Matrix")]
        public List<VerificationResult> Matrix { get; set; }

        /// <summary>
        /// Used to track the state of FieldMRZ
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FieldMRZOption { get; private set; }

        /// <summary>
        /// Field data extracted from mrz(machine readable zone)
        /// </summary>
        /// <value>Field data extracted from mrz(machine readable zone)</value>
        [JsonPropertyName("Field_MRZ")]
        public string? FieldMRZ { get { return this.FieldMRZOption; } set { this.FieldMRZOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FieldVisual
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FieldVisualOption { get; private set; }

        /// <summary>
        /// Field data extracted from visual zone
        /// </summary>
        /// <value>Field data extracted from visual zone</value>
        [JsonPropertyName("Field_Visual")]
        public string? FieldVisual { get { return this.FieldVisualOption; } set { this.FieldVisualOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FieldBarcode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FieldBarcodeOption { get; private set; }

        /// <summary>
        /// Field data extracted from barcode
        /// </summary>
        /// <value>Field data extracted from barcode</value>
        [JsonPropertyName("Field_Barcode")]
        public string? FieldBarcode { get { return this.FieldBarcodeOption; } set { this.FieldBarcodeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FieldRFID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FieldRFIDOption { get; private set; }

        /// <summary>
        /// Field data extracted from rfid chip
        /// </summary>
        /// <value>Field data extracted from rfid chip</value>
        [JsonPropertyName("Field_RFID")]
        public string? FieldRFID { get { return this.FieldRFIDOption; } set { this.FieldRFIDOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FieldType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FieldTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [JsonPropertyName("FieldType")]
        public int? FieldType { get { return this.FieldTypeOption; } set { this.FieldTypeOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifiedFieldMap {\n");
            sb.Append("  WFieldType: ").Append(WFieldType).Append("\n");
            sb.Append("  WLCID: ").Append(WLCID).Append("\n");
            sb.Append("  Matrix: ").Append(Matrix).Append("\n");
            sb.Append("  FieldMRZ: ").Append(FieldMRZ).Append("\n");
            sb.Append("  FieldVisual: ").Append(FieldVisual).Append("\n");
            sb.Append("  FieldBarcode: ").Append(FieldBarcode).Append("\n");
            sb.Append("  FieldRFID: ").Append(FieldRFID).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VerifiedFieldMap" />
    /// </summary>
    public class VerifiedFieldMapJsonConverter : JsonConverter<VerifiedFieldMap>
    {
        /// <summary>
        /// Deserializes json to <see cref="VerifiedFieldMap" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VerifiedFieldMap Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TextFieldType?> wFieldType = default;
            Option<LCID?> wLCID = default;
            Option<List<VerificationResult>?> matrix = default;
            Option<string?> fieldMRZ = default;
            Option<string?> fieldVisual = default;
            Option<string?> fieldBarcode = default;
            Option<string?> fieldRFID = default;
            Option<int?> fieldType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "wFieldType":
                            string? wFieldTypeRawValue = utf8JsonReader.GetString();
                            if (wFieldTypeRawValue != null)
                                wFieldType = new Option<TextFieldType?>(TextFieldTypeValueConverter.FromStringOrDefault(wFieldTypeRawValue));
                            break;
                        case "wLCID":
                            string? wLCIDRawValue = utf8JsonReader.GetString();
                            if (wLCIDRawValue != null)
                                wLCID = new Option<LCID?>(LCIDValueConverter.FromStringOrDefault(wLCIDRawValue));
                            break;
                        case "Matrix":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                matrix = new Option<List<VerificationResult>?>(JsonSerializer.Deserialize<List<VerificationResult>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Field_MRZ":
                            fieldMRZ = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Field_Visual":
                            fieldVisual = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Field_Barcode":
                            fieldBarcode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Field_RFID":
                            fieldRFID = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "FieldType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!wFieldType.IsSet)
                throw new ArgumentException("Property is required for class VerifiedFieldMap.", nameof(wFieldType));

            if (!wLCID.IsSet)
                throw new ArgumentException("Property is required for class VerifiedFieldMap.", nameof(wLCID));

            if (!matrix.IsSet)
                throw new ArgumentException("Property is required for class VerifiedFieldMap.", nameof(matrix));

            if (wFieldType.IsSet && wFieldType.Value == null)
                throw new ArgumentNullException(nameof(wFieldType), "Property is not nullable for class VerifiedFieldMap.");

            if (wLCID.IsSet && wLCID.Value == null)
                throw new ArgumentNullException(nameof(wLCID), "Property is not nullable for class VerifiedFieldMap.");

            if (matrix.IsSet && matrix.Value == null)
                throw new ArgumentNullException(nameof(matrix), "Property is not nullable for class VerifiedFieldMap.");

            if (fieldMRZ.IsSet && fieldMRZ.Value == null)
                throw new ArgumentNullException(nameof(fieldMRZ), "Property is not nullable for class VerifiedFieldMap.");

            if (fieldVisual.IsSet && fieldVisual.Value == null)
                throw new ArgumentNullException(nameof(fieldVisual), "Property is not nullable for class VerifiedFieldMap.");

            if (fieldBarcode.IsSet && fieldBarcode.Value == null)
                throw new ArgumentNullException(nameof(fieldBarcode), "Property is not nullable for class VerifiedFieldMap.");

            if (fieldRFID.IsSet && fieldRFID.Value == null)
                throw new ArgumentNullException(nameof(fieldRFID), "Property is not nullable for class VerifiedFieldMap.");

            if (fieldType.IsSet && fieldType.Value == null)
                throw new ArgumentNullException(nameof(fieldType), "Property is not nullable for class VerifiedFieldMap.");

            return new VerifiedFieldMap(wFieldType.Value!.Value!, wLCID.Value!.Value!, matrix.Value!, fieldMRZ, fieldVisual, fieldBarcode, fieldRFID, fieldType);
        }

        /// <summary>
        /// Serializes a <see cref="VerifiedFieldMap" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verifiedFieldMap"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VerifiedFieldMap verifiedFieldMap, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, verifiedFieldMap, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VerifiedFieldMap" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verifiedFieldMap"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VerifiedFieldMap verifiedFieldMap, JsonSerializerOptions jsonSerializerOptions)
        {
            if (verifiedFieldMap.Matrix == null)
                throw new ArgumentNullException(nameof(verifiedFieldMap.Matrix), "Property is required for class VerifiedFieldMap.");

            if (verifiedFieldMap.FieldMRZOption.IsSet && verifiedFieldMap.FieldMRZ == null)
                throw new ArgumentNullException(nameof(verifiedFieldMap.FieldMRZ), "Property is required for class VerifiedFieldMap.");

            if (verifiedFieldMap.FieldVisualOption.IsSet && verifiedFieldMap.FieldVisual == null)
                throw new ArgumentNullException(nameof(verifiedFieldMap.FieldVisual), "Property is required for class VerifiedFieldMap.");

            if (verifiedFieldMap.FieldBarcodeOption.IsSet && verifiedFieldMap.FieldBarcode == null)
                throw new ArgumentNullException(nameof(verifiedFieldMap.FieldBarcode), "Property is required for class VerifiedFieldMap.");

            if (verifiedFieldMap.FieldRFIDOption.IsSet && verifiedFieldMap.FieldRFID == null)
                throw new ArgumentNullException(nameof(verifiedFieldMap.FieldRFID), "Property is required for class VerifiedFieldMap.");

            var wFieldTypeRawValue = TextFieldTypeValueConverter.ToJsonValue(verifiedFieldMap.WFieldType);
            writer.WriteNumber("wFieldType", wFieldTypeRawValue);

            var wLCIDRawValue = LCIDValueConverter.ToJsonValue(verifiedFieldMap.WLCID);
            writer.WriteNumber("wLCID", wLCIDRawValue);

            writer.WritePropertyName("Matrix");
            JsonSerializer.Serialize(writer, verifiedFieldMap.Matrix, jsonSerializerOptions);
            if (verifiedFieldMap.FieldMRZOption.IsSet)
                writer.WriteString("Field_MRZ", verifiedFieldMap.FieldMRZ);

            if (verifiedFieldMap.FieldVisualOption.IsSet)
                writer.WriteString("Field_Visual", verifiedFieldMap.FieldVisual);

            if (verifiedFieldMap.FieldBarcodeOption.IsSet)
                writer.WriteString("Field_Barcode", verifiedFieldMap.FieldBarcode);

            if (verifiedFieldMap.FieldRFIDOption.IsSet)
                writer.WriteString("Field_RFID", verifiedFieldMap.FieldRFID);

            if (verifiedFieldMap.FieldTypeOption.IsSet)
                writer.WriteNumber("FieldType", verifiedFieldMap.FieldTypeOption.Value!.Value);
        }
    }
}
