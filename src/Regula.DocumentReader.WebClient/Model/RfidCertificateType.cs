// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Enumeration contains a set of constants that define the type of certificate used in the procedure of document security object digital signature verification
    /// </summary>
    /// <value>Enumeration contains a set of constants that define the type of certificate used in the procedure of document security object digital signature verification</value>
    public enum RfidCertificateType
    {
        /// <summary>
        /// Enum UNDEFINED for value: 0
        /// </summary>
        UNDEFINED = 0,

        /// <summary>
        /// Enum CSCA for value: 1
        /// </summary>
        CSCA = 1,

        /// <summary>
        /// Enum CSCA_LINK for value: 2
        /// </summary>
        CSCA_LINK = 2,

        /// <summary>
        /// Enum DS for value: 3
        /// </summary>
        DS = 3,

        /// <summary>
        /// Enum MLS for value: 4
        /// </summary>
        MLS = 4,

        /// <summary>
        /// Enum DEV_LS for value: 5
        /// </summary>
        DEV_LS = 5,

        /// <summary>
        /// Enum DEF_LS for value: 6
        /// </summary>
        DEF_LS = 6,

        /// <summary>
        /// Enum BLS for value: 7
        /// </summary>
        BLS = 7
    }

    /// <summary>
    /// Converts <see cref="RfidCertificateType"/> to and from the JSON value
    /// </summary>
    public static class RfidCertificateTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RfidCertificateType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RfidCertificateType FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return RfidCertificateType.UNDEFINED;

            if (value.Equals((1).ToString()))
                return RfidCertificateType.CSCA;

            if (value.Equals((2).ToString()))
                return RfidCertificateType.CSCA_LINK;

            if (value.Equals((3).ToString()))
                return RfidCertificateType.DS;

            if (value.Equals((4).ToString()))
                return RfidCertificateType.MLS;

            if (value.Equals((5).ToString()))
                return RfidCertificateType.DEV_LS;

            if (value.Equals((6).ToString()))
                return RfidCertificateType.DEF_LS;

            if (value.Equals((7).ToString()))
                return RfidCertificateType.BLS;

            throw new NotImplementedException($"Could not convert value to type RfidCertificateType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RfidCertificateType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RfidCertificateType? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return RfidCertificateType.UNDEFINED;

            if (value.Equals((1).ToString()))
                return RfidCertificateType.CSCA;

            if (value.Equals((2).ToString()))
                return RfidCertificateType.CSCA_LINK;

            if (value.Equals((3).ToString()))
                return RfidCertificateType.DS;

            if (value.Equals((4).ToString()))
                return RfidCertificateType.MLS;

            if (value.Equals((5).ToString()))
                return RfidCertificateType.DEV_LS;

            if (value.Equals((6).ToString()))
                return RfidCertificateType.DEF_LS;

            if (value.Equals((7).ToString()))
                return RfidCertificateType.BLS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RfidCertificateType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(RfidCertificateType value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidCertificateType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RfidCertificateTypeJsonConverter : JsonConverter<RfidCertificateType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RfidCertificateType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RfidCertificateType? result = rawValue == null
                ? null
                : RfidCertificateTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RfidCertificateType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidCertificateType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RfidCertificateType rfidCertificateType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(rfidCertificateType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidCertificateType"/>
    /// </summary>
    public class RfidCertificateTypeNullableJsonConverter : JsonConverter<RfidCertificateType?>
    {
        /// <summary>
        /// Returns a RfidCertificateType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RfidCertificateType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RfidCertificateType? result = rawValue == null
                ? null
                : RfidCertificateTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidCertificateType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RfidCertificateType? rfidCertificateType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(rfidCertificateType?.ToString() ?? "null");
        }
    }
}
