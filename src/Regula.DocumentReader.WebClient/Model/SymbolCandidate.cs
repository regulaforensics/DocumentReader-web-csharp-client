// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Describes an individual character recognition candidate
    /// </summary>
    public partial class SymbolCandidate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolCandidate" /> class.
        /// </summary>
        /// <param name="symbolCode">Unicode symbol code</param>
        /// <param name="symbolProbability">character recognition probability (0–100,%)</param>
        /// <param name="class">class</param>
        /// <param name="subClass">subClass</param>
        [JsonConstructor]
        public SymbolCandidate(int symbolCode, int symbolProbability, Option<int?> @class = default, Option<int?> subClass = default)
        {
            SymbolCode = symbolCode;
            SymbolProbability = symbolProbability;
            ClassOption = @class;
            SubClassOption = subClass;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Unicode symbol code
        /// </summary>
        /// <value>Unicode symbol code</value>
        [JsonPropertyName("SymbolCode")]
        public int SymbolCode { get; set; }

        /// <summary>
        /// character recognition probability (0–100,%)
        /// </summary>
        /// <value>character recognition probability (0–100,%)</value>
        [JsonPropertyName("SymbolProbability")]
        public int SymbolProbability { get; set; }

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("Class")]
        public int? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubClass
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SubClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubClass
        /// </summary>
        [JsonPropertyName("SubClass")]
        public int? SubClass { get { return this.SubClassOption; } set { this.SubClassOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SymbolCandidate {\n");
            sb.Append("  SymbolCode: ").Append(SymbolCode).Append("\n");
            sb.Append("  SymbolProbability: ").Append(SymbolProbability).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  SubClass: ").Append(SubClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SymbolProbability (int) maximum
            if (this.SymbolProbability > (int)100)
            {
                yield return new ValidationResult("Invalid value for SymbolProbability, must be a value less than or equal to 100.", new [] { "SymbolProbability" });
            }

            // SymbolProbability (int) minimum
            if (this.SymbolProbability < (int)0)
            {
                yield return new ValidationResult("Invalid value for SymbolProbability, must be a value greater than or equal to 0.", new [] { "SymbolProbability" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SymbolCandidate" />
    /// </summary>
    public class SymbolCandidateJsonConverter : JsonConverter<SymbolCandidate>
    {
        /// <summary>
        /// Deserializes json to <see cref="SymbolCandidate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SymbolCandidate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> symbolCode = default;
            Option<int?> symbolProbability = default;
            Option<int?> varClass = default;
            Option<int?> subClass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "SymbolCode":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                symbolCode = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "SymbolProbability":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                symbolProbability = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Class":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varClass = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "SubClass":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subClass = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!symbolCode.IsSet)
                throw new ArgumentException("Property is required for class SymbolCandidate.", nameof(symbolCode));

            if (!symbolProbability.IsSet)
                throw new ArgumentException("Property is required for class SymbolCandidate.", nameof(symbolProbability));

            if (symbolCode.IsSet && symbolCode.Value == null)
                throw new ArgumentNullException(nameof(symbolCode), "Property is not nullable for class SymbolCandidate.");

            if (symbolProbability.IsSet && symbolProbability.Value == null)
                throw new ArgumentNullException(nameof(symbolProbability), "Property is not nullable for class SymbolCandidate.");

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class SymbolCandidate.");

            if (subClass.IsSet && subClass.Value == null)
                throw new ArgumentNullException(nameof(subClass), "Property is not nullable for class SymbolCandidate.");

            return new SymbolCandidate(symbolCode.Value!.Value!, symbolProbability.Value!.Value!, varClass, subClass);
        }

        /// <summary>
        /// Serializes a <see cref="SymbolCandidate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="symbolCandidate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SymbolCandidate symbolCandidate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, symbolCandidate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SymbolCandidate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="symbolCandidate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SymbolCandidate symbolCandidate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("SymbolCode", symbolCandidate.SymbolCode);

            writer.WriteNumber("SymbolProbability", symbolCandidate.SymbolProbability);

            if (symbolCandidate.ClassOption.IsSet)
                writer.WriteNumber("Class", symbolCandidate.ClassOption.Value!.Value);

            if (symbolCandidate.SubClassOption.IsSet)
                writer.WriteNumber("SubClass", symbolCandidate.SubClassOption.Value!.Value);
        }
    }
}
