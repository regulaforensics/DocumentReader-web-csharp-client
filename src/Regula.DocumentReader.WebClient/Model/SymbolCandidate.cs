/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Describes an individual character recognition candidate
    /// </summary>
    [DataContract]
    public partial class SymbolCandidate :  IEquatable<SymbolCandidate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolCandidate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SymbolCandidate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolCandidate" /> class.
        /// </summary>
        /// <param name="symbolCode">Unicode symbol code (required).</param>
        /// <param name="symbolProbability">character recognition probability (0–100,%) (required).</param>
        public SymbolCandidate(int symbolCode = default(int), int symbolProbability = default(int))
        {
            // to ensure "symbolCode" is required (not null)
            if (symbolCode == null)
            {
                throw new InvalidDataException("symbolCode is a required property for SymbolCandidate and cannot be null");
            }
            else
            {
                this.SymbolCode = symbolCode;
            }
            
            // to ensure "symbolProbability" is required (not null)
            if (symbolProbability == null)
            {
                throw new InvalidDataException("symbolProbability is a required property for SymbolCandidate and cannot be null");
            }
            else
            {
                this.SymbolProbability = symbolProbability;
            }
            
        }
        
        /// <summary>
        /// Unicode symbol code
        /// </summary>
        /// <value>Unicode symbol code</value>
        [DataMember(Name="SymbolCode", EmitDefaultValue=true)]
        public int SymbolCode { get; set; }

        /// <summary>
        /// character recognition probability (0–100,%)
        /// </summary>
        /// <value>character recognition probability (0–100,%)</value>
        [DataMember(Name="SymbolProbability", EmitDefaultValue=true)]
        public int SymbolProbability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SymbolCandidate {\n");
            sb.Append("  SymbolCode: ").Append(SymbolCode).Append("\n");
            sb.Append("  SymbolProbability: ").Append(SymbolProbability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SymbolCandidate);
        }

        /// <summary>
        /// Returns true if SymbolCandidate instances are equal
        /// </summary>
        /// <param name="input">Instance of SymbolCandidate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SymbolCandidate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SymbolCode == input.SymbolCode ||
                    (this.SymbolCode != null &&
                    this.SymbolCode.Equals(input.SymbolCode))
                ) && 
                (
                    this.SymbolProbability == input.SymbolProbability ||
                    (this.SymbolProbability != null &&
                    this.SymbolProbability.Equals(input.SymbolProbability))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SymbolCode != null)
                    hashCode = hashCode * 59 + this.SymbolCode.GetHashCode();
                if (this.SymbolProbability != null)
                    hashCode = hashCode * 59 + this.SymbolProbability.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // SymbolProbability (int) maximum
            if(this.SymbolProbability > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SymbolProbability, must be a value less than or equal to 100.", new [] { "SymbolProbability" });
            }

            // SymbolProbability (int) minimum
            if(this.SymbolProbability < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SymbolProbability, must be a value greater than or equal to 0.", new [] { "SymbolProbability" });
            }

            yield break;
        }
    }

}
