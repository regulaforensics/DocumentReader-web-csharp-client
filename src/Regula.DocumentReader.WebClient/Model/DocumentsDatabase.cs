// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Document database information
    /// </summary>
    public partial class DocumentsDatabase : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsDatabase" /> class.
        /// </summary>
        /// <param name="description">Document database description</param>
        /// <param name="exportDate">Date the document database was created</param>
        /// <param name="iD">Document database identifier</param>
        /// <param name="varVersion">Document database version</param>
        [JsonConstructor]
        public DocumentsDatabase(Option<string?> description = default, Option<string?> exportDate = default, Option<string?> iD = default, Option<string?> varVersion = default)
        {
            DescriptionOption = description;
            ExportDateOption = exportDate;
            IDOption = iD;
            VarVersionOption = varVersion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Document database description
        /// </summary>
        /// <value>Document database description</value>
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExportDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExportDateOption { get; private set; }

        /// <summary>
        /// Date the document database was created
        /// </summary>
        /// <value>Date the document database was created</value>
        [JsonPropertyName("ExportDate")]
        public string? ExportDate { get { return this.ExportDateOption; } set { this.ExportDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IDOption { get; private set; }

        /// <summary>
        /// Document database identifier
        /// </summary>
        /// <value>Document database identifier</value>
        [JsonPropertyName("ID")]
        public string? ID { get { return this.IDOption; } set { this.IDOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// Document database version
        /// </summary>
        /// <value>Document database version</value>
        [JsonPropertyName("Version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentsDatabase {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExportDate: ").Append(ExportDate).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentsDatabase" />
    /// </summary>
    public class DocumentsDatabaseJsonConverter : JsonConverter<DocumentsDatabase>
    {
        /// <summary>
        /// Deserializes json to <see cref="DocumentsDatabase" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DocumentsDatabase Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> description = default;
            Option<string?> exportDate = default;
            Option<string?> iD = default;
            Option<string?> varVersion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ExportDate":
                            exportDate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ID":
                            iD = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DocumentsDatabase.");

            if (exportDate.IsSet && exportDate.Value == null)
                throw new ArgumentNullException(nameof(exportDate), "Property is not nullable for class DocumentsDatabase.");

            if (iD.IsSet && iD.Value == null)
                throw new ArgumentNullException(nameof(iD), "Property is not nullable for class DocumentsDatabase.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class DocumentsDatabase.");

            return new DocumentsDatabase(description, exportDate, iD, varVersion);
        }

        /// <summary>
        /// Serializes a <see cref="DocumentsDatabase" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentsDatabase"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DocumentsDatabase documentsDatabase, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, documentsDatabase, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DocumentsDatabase" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentsDatabase"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DocumentsDatabase documentsDatabase, JsonSerializerOptions jsonSerializerOptions)
        {
            if (documentsDatabase.DescriptionOption.IsSet && documentsDatabase.Description == null)
                throw new ArgumentNullException(nameof(documentsDatabase.Description), "Property is required for class DocumentsDatabase.");

            if (documentsDatabase.ExportDateOption.IsSet && documentsDatabase.ExportDate == null)
                throw new ArgumentNullException(nameof(documentsDatabase.ExportDate), "Property is required for class DocumentsDatabase.");

            if (documentsDatabase.IDOption.IsSet && documentsDatabase.ID == null)
                throw new ArgumentNullException(nameof(documentsDatabase.ID), "Property is required for class DocumentsDatabase.");

            if (documentsDatabase.VarVersionOption.IsSet && documentsDatabase.VarVersion == null)
                throw new ArgumentNullException(nameof(documentsDatabase.VarVersion), "Property is required for class DocumentsDatabase.");

            if (documentsDatabase.DescriptionOption.IsSet)
                writer.WriteString("Description", documentsDatabase.Description);

            if (documentsDatabase.ExportDateOption.IsSet)
                writer.WriteString("ExportDate", documentsDatabase.ExportDate);

            if (documentsDatabase.IDOption.IsSet)
                writer.WriteString("ID", documentsDatabase.ID);

            if (documentsDatabase.VarVersionOption.IsSet)
                writer.WriteString("Version", documentsDatabase.VarVersion);
        }
    }
}
