/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TransactionProcessRequest
    /// </summary>
    [DataContract(Name = "TransactionProcessRequest")]
    public partial class TransactionProcessRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionProcessRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionProcessRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionProcessRequest" /> class.
        /// </summary>
        /// <param name="processParam">processParam (required).</param>
        /// <param name="list">list.</param>
        /// <param name="tag">Session ID.</param>
        /// <param name="tenant">Customer name.</param>
        /// <param name="env">Environment type.</param>
        /// <param name="livePortrait">Live portrait photo.</param>
        /// <param name="extPortrait">Portrait photo from an external source.</param>
        /// <param name="containerList">containerList.</param>
        /// <param name="systemInfo">systemInfo.</param>
        /// <param name="passBackObject">Free-form object to be included in response. Must be object, not list or simple value. Do not affect document processing. Use it freely to pass your app params. Stored in process logs..</param>
        /// <param name="dtc">Digital Travel Credential (DTC-VC) data in base64 format for processing.</param>
        public TransactionProcessRequest(ProcessParams processParam = default(ProcessParams), List<ProcessRequestImage> list = default(List<ProcessRequestImage>), string tag = default(string), string tenant = default(string), string env = default(string), string livePortrait = default(string), string extPortrait = default(string), ContainerList containerList = default(ContainerList), ProcessSystemInfo systemInfo = default(ProcessSystemInfo), Dictionary<string, Object> passBackObject = default(Dictionary<string, Object>), string dtc = default(string))
        {
            // to ensure "processParam" is required (not null)
            if (processParam == null)
            {
                throw new ArgumentNullException("processParam is a required property for TransactionProcessRequest and cannot be null");
            }
            this.ProcessParam = processParam;
            this.List = list;
            this.Tag = tag;
            this.Tenant = tenant;
            this.Env = env;
            this.LivePortrait = livePortrait;
            this.ExtPortrait = extPortrait;
            this.ContainerList = containerList;
            this.SystemInfo = systemInfo;
            this.PassBackObject = passBackObject;
            this.Dtc = dtc;
        }

        /// <summary>
        /// Gets or Sets ProcessParam
        /// </summary>
        [DataMember(Name = "processParam", IsRequired = true, EmitDefaultValue = true)]
        public ProcessParams ProcessParam { get; set; }

        /// <summary>
        /// Gets or Sets List
        /// </summary>
        [DataMember(Name = "List", EmitDefaultValue = false)]
        public List<ProcessRequestImage>? List { get; set; }

        /// <summary>
        /// Session ID
        /// </summary>
        /// <value>Session ID</value>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public string? Tag { get; set; }

        /// <summary>
        /// Customer name
        /// </summary>
        /// <value>Customer name</value>
        [DataMember(Name = "tenant", EmitDefaultValue = false)]
        public string? Tenant { get; set; }

        /// <summary>
        /// Environment type
        /// </summary>
        /// <value>Environment type</value>
        [DataMember(Name = "env", EmitDefaultValue = false)]
        public string? Env { get; set; }

        /// <summary>
        /// Live portrait photo
        /// </summary>
        /// <value>Live portrait photo</value>
        /*
        <example>Base64 encoded data</example>
        */
        [DataMember(Name = "livePortrait", EmitDefaultValue = false)]
        public string? LivePortrait { get; set; }

        /// <summary>
        /// Portrait photo from an external source
        /// </summary>
        /// <value>Portrait photo from an external source</value>
        /*
        <example>Base64 encoded data</example>
        */
        [DataMember(Name = "extPortrait", EmitDefaultValue = false)]
        public string? ExtPortrait { get; set; }

        /// <summary>
        /// Gets or Sets ContainerList
        /// </summary>
        [DataMember(Name = "ContainerList", EmitDefaultValue = false)]
        public ContainerList? ContainerList { get; set; }

        /// <summary>
        /// Gets or Sets SystemInfo
        /// </summary>
        [DataMember(Name = "systemInfo", EmitDefaultValue = false)]
        public ProcessSystemInfo? SystemInfo { get; set; }

        /// <summary>
        /// Free-form object to be included in response. Must be object, not list or simple value. Do not affect document processing. Use it freely to pass your app params. Stored in process logs.
        /// </summary>
        /// <value>Free-form object to be included in response. Must be object, not list or simple value. Do not affect document processing. Use it freely to pass your app params. Stored in process logs.</value>
        [DataMember(Name = "passBackObject", EmitDefaultValue = false)]
        public Dictionary<string, Object>? PassBackObject { get; set; }

        /// <summary>
        /// Digital Travel Credential (DTC-VC) data in base64 format for processing
        /// </summary>
        /// <value>Digital Travel Credential (DTC-VC) data in base64 format for processing</value>
        [DataMember(Name = "dtc", EmitDefaultValue = false)]
        public string? Dtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionProcessRequest {\n");
            sb.Append("  ProcessParam: ").Append(ProcessParam).Append("\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  Env: ").Append(Env).Append("\n");
            sb.Append("  LivePortrait: ").Append(LivePortrait).Append("\n");
            sb.Append("  ExtPortrait: ").Append(ExtPortrait).Append("\n");
            sb.Append("  ContainerList: ").Append(ContainerList).Append("\n");
            sb.Append("  SystemInfo: ").Append(SystemInfo).Append("\n");
            sb.Append("  PassBackObject: ").Append(PassBackObject).Append("\n");
            sb.Append("  Dtc: ").Append(Dtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
