// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TransactionProcessRequest
    /// </summary>
    public partial class TransactionProcessRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionProcessRequest" /> class.
        /// </summary>
        /// <param name="processParam">processParam</param>
        /// <param name="list">list</param>
        /// <param name="livePortrait">Live portrait photo</param>
        /// <param name="extPortrait">Portrait photo from an external source</param>
        /// <param name="containerList">containerList</param>
        /// <param name="systemInfo">systemInfo</param>
        /// <param name="passBackObject">Free-form object to be included in response. Must be object, not list or simple value. Do not affect document processing. Use it freely to pass your app params. Stored in process logs.</param>
        /// <param name="dtc">Digital Travel Credential (DTC-VC) data in base64 format for processing</param>
        [JsonConstructor]
        public TransactionProcessRequest(ProcessParams processParam, Option<List<ProcessRequestImage>?> list = default, Option<string?> livePortrait = default, Option<string?> extPortrait = default, Option<ContainerList?> containerList = default, Option<ProcessSystemInfo?> systemInfo = default, Option<Dictionary<string, Object>?> passBackObject = default, Option<string?> dtc = default)
        {
            ProcessParam = processParam;
            ListOption = list;
            LivePortraitOption = livePortrait;
            ExtPortraitOption = extPortrait;
            ContainerListOption = containerList;
            SystemInfoOption = systemInfo;
            PassBackObjectOption = passBackObject;
            DtcOption = dtc;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ProcessParam
        /// </summary>
        [JsonPropertyName("processParam")]
        public ProcessParams ProcessParam { get; set; }

        /// <summary>
        /// Used to track the state of List
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ProcessRequestImage>?> ListOption { get; private set; }

        /// <summary>
        /// Gets or Sets List
        /// </summary>
        [JsonPropertyName("List")]
        public List<ProcessRequestImage>? List { get { return this.ListOption; } set { this.ListOption = new(value); } }

        /// <summary>
        /// Used to track the state of LivePortrait
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LivePortraitOption { get; private set; }

        /// <summary>
        /// Live portrait photo
        /// </summary>
        /// <value>Live portrait photo</value>
        /* <example>Base64 encoded data</example> */
        [JsonPropertyName("livePortrait")]
        public string? LivePortrait { get { return this.LivePortraitOption; } set { this.LivePortraitOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExtPortrait
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExtPortraitOption { get; private set; }

        /// <summary>
        /// Portrait photo from an external source
        /// </summary>
        /// <value>Portrait photo from an external source</value>
        /* <example>Base64 encoded data</example> */
        [JsonPropertyName("extPortrait")]
        public string? ExtPortrait { get { return this.ExtPortraitOption; } set { this.ExtPortraitOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContainerList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContainerList?> ContainerListOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContainerList
        /// </summary>
        [JsonPropertyName("ContainerList")]
        public ContainerList? ContainerList { get { return this.ContainerListOption; } set { this.ContainerListOption = new(value); } }

        /// <summary>
        /// Used to track the state of SystemInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ProcessSystemInfo?> SystemInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets SystemInfo
        /// </summary>
        [JsonPropertyName("systemInfo")]
        public ProcessSystemInfo? SystemInfo { get { return this.SystemInfoOption; } set { this.SystemInfoOption = new(value); } }

        /// <summary>
        /// Used to track the state of PassBackObject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> PassBackObjectOption { get; private set; }

        /// <summary>
        /// Free-form object to be included in response. Must be object, not list or simple value. Do not affect document processing. Use it freely to pass your app params. Stored in process logs.
        /// </summary>
        /// <value>Free-form object to be included in response. Must be object, not list or simple value. Do not affect document processing. Use it freely to pass your app params. Stored in process logs.</value>
        [JsonPropertyName("passBackObject")]
        public Dictionary<string, Object>? PassBackObject { get { return this.PassBackObjectOption; } set { this.PassBackObjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dtc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DtcOption { get; private set; }

        /// <summary>
        /// Digital Travel Credential (DTC-VC) data in base64 format for processing
        /// </summary>
        /// <value>Digital Travel Credential (DTC-VC) data in base64 format for processing</value>
        [JsonPropertyName("dtc")]
        public string? Dtc { get { return this.DtcOption; } set { this.DtcOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionProcessRequest {\n");
            sb.Append("  ProcessParam: ").Append(ProcessParam).Append("\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  LivePortrait: ").Append(LivePortrait).Append("\n");
            sb.Append("  ExtPortrait: ").Append(ExtPortrait).Append("\n");
            sb.Append("  ContainerList: ").Append(ContainerList).Append("\n");
            sb.Append("  SystemInfo: ").Append(SystemInfo).Append("\n");
            sb.Append("  PassBackObject: ").Append(PassBackObject).Append("\n");
            sb.Append("  Dtc: ").Append(Dtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionProcessRequest" />
    /// </summary>
    public class TransactionProcessRequestJsonConverter : JsonConverter<TransactionProcessRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransactionProcessRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionProcessRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ProcessParams?> processParam = default;
            Option<List<ProcessRequestImage>?> list = default;
            Option<string?> livePortrait = default;
            Option<string?> extPortrait = default;
            Option<ContainerList?> containerList = default;
            Option<ProcessSystemInfo?> systemInfo = default;
            Option<Dictionary<string, Object>?> passBackObject = default;
            Option<string?> dtc = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "processParam":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                processParam = new Option<ProcessParams?>(JsonSerializer.Deserialize<ProcessParams>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "List":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                list = new Option<List<ProcessRequestImage>?>(JsonSerializer.Deserialize<List<ProcessRequestImage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "livePortrait":
                            livePortrait = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "extPortrait":
                            extPortrait = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ContainerList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                containerList = new Option<ContainerList?>(JsonSerializer.Deserialize<ContainerList>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "systemInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                systemInfo = new Option<ProcessSystemInfo?>(JsonSerializer.Deserialize<ProcessSystemInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "passBackObject":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passBackObject = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dtc":
                            dtc = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!processParam.IsSet)
                throw new ArgumentException("Property is required for class TransactionProcessRequest.", nameof(processParam));

            if (processParam.IsSet && processParam.Value == null)
                throw new ArgumentNullException(nameof(processParam), "Property is not nullable for class TransactionProcessRequest.");

            if (list.IsSet && list.Value == null)
                throw new ArgumentNullException(nameof(list), "Property is not nullable for class TransactionProcessRequest.");

            if (livePortrait.IsSet && livePortrait.Value == null)
                throw new ArgumentNullException(nameof(livePortrait), "Property is not nullable for class TransactionProcessRequest.");

            if (extPortrait.IsSet && extPortrait.Value == null)
                throw new ArgumentNullException(nameof(extPortrait), "Property is not nullable for class TransactionProcessRequest.");

            if (containerList.IsSet && containerList.Value == null)
                throw new ArgumentNullException(nameof(containerList), "Property is not nullable for class TransactionProcessRequest.");

            if (systemInfo.IsSet && systemInfo.Value == null)
                throw new ArgumentNullException(nameof(systemInfo), "Property is not nullable for class TransactionProcessRequest.");

            if (passBackObject.IsSet && passBackObject.Value == null)
                throw new ArgumentNullException(nameof(passBackObject), "Property is not nullable for class TransactionProcessRequest.");

            if (dtc.IsSet && dtc.Value == null)
                throw new ArgumentNullException(nameof(dtc), "Property is not nullable for class TransactionProcessRequest.");

            return new TransactionProcessRequest(processParam.Value!, list, livePortrait, extPortrait, containerList, systemInfo, passBackObject, dtc);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionProcessRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionProcessRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionProcessRequest transactionProcessRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, transactionProcessRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionProcessRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionProcessRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TransactionProcessRequest transactionProcessRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionProcessRequest.ProcessParam == null)
                throw new ArgumentNullException(nameof(transactionProcessRequest.ProcessParam), "Property is required for class TransactionProcessRequest.");

            if (transactionProcessRequest.ListOption.IsSet && transactionProcessRequest.List == null)
                throw new ArgumentNullException(nameof(transactionProcessRequest.List), "Property is required for class TransactionProcessRequest.");

            if (transactionProcessRequest.LivePortraitOption.IsSet && transactionProcessRequest.LivePortrait == null)
                throw new ArgumentNullException(nameof(transactionProcessRequest.LivePortrait), "Property is required for class TransactionProcessRequest.");

            if (transactionProcessRequest.ExtPortraitOption.IsSet && transactionProcessRequest.ExtPortrait == null)
                throw new ArgumentNullException(nameof(transactionProcessRequest.ExtPortrait), "Property is required for class TransactionProcessRequest.");

            if (transactionProcessRequest.ContainerListOption.IsSet && transactionProcessRequest.ContainerList == null)
                throw new ArgumentNullException(nameof(transactionProcessRequest.ContainerList), "Property is required for class TransactionProcessRequest.");

            if (transactionProcessRequest.SystemInfoOption.IsSet && transactionProcessRequest.SystemInfo == null)
                throw new ArgumentNullException(nameof(transactionProcessRequest.SystemInfo), "Property is required for class TransactionProcessRequest.");

            if (transactionProcessRequest.PassBackObjectOption.IsSet && transactionProcessRequest.PassBackObject == null)
                throw new ArgumentNullException(nameof(transactionProcessRequest.PassBackObject), "Property is required for class TransactionProcessRequest.");

            if (transactionProcessRequest.DtcOption.IsSet && transactionProcessRequest.Dtc == null)
                throw new ArgumentNullException(nameof(transactionProcessRequest.Dtc), "Property is required for class TransactionProcessRequest.");

            writer.WritePropertyName("processParam");
            JsonSerializer.Serialize(writer, transactionProcessRequest.ProcessParam, jsonSerializerOptions);
            if (transactionProcessRequest.ListOption.IsSet)
            {
                writer.WritePropertyName("List");
                JsonSerializer.Serialize(writer, transactionProcessRequest.List, jsonSerializerOptions);
            }
            if (transactionProcessRequest.LivePortraitOption.IsSet)
                writer.WriteString("livePortrait", transactionProcessRequest.LivePortrait);

            if (transactionProcessRequest.ExtPortraitOption.IsSet)
                writer.WriteString("extPortrait", transactionProcessRequest.ExtPortrait);

            if (transactionProcessRequest.ContainerListOption.IsSet)
            {
                writer.WritePropertyName("ContainerList");
                JsonSerializer.Serialize(writer, transactionProcessRequest.ContainerList, jsonSerializerOptions);
            }
            if (transactionProcessRequest.SystemInfoOption.IsSet)
            {
                writer.WritePropertyName("systemInfo");
                JsonSerializer.Serialize(writer, transactionProcessRequest.SystemInfo, jsonSerializerOptions);
            }
            if (transactionProcessRequest.PassBackObjectOption.IsSet)
            {
                writer.WritePropertyName("passBackObject");
                JsonSerializer.Serialize(writer, transactionProcessRequest.PassBackObject, jsonSerializerOptions);
            }
            if (transactionProcessRequest.DtcOption.IsSet)
                writer.WriteString("dtc", transactionProcessRequest.Dtc);
        }
    }
}
