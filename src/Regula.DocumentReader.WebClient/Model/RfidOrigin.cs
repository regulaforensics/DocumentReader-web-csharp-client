/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Location of data in RFID chip
    /// </summary>
    [DataContract(Name = "RfidOrigin")]
    public partial class RfidOrigin : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidOrigin" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidOrigin() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidOrigin" /> class.
        /// </summary>
        /// <param name="dg">Source data group file (required).</param>
        /// <param name="dgTag">Index of the source record of the image with biometric information in the information data group (required).</param>
        /// <param name="tagEntry">Index of the template in the record with biometric data (required).</param>
        /// <param name="entryView">Index of the variant of the biometric data template (required).</param>
        public RfidOrigin(int dg = default(int), int dgTag = default(int), int tagEntry = default(int), int entryView = default(int))
        {
            this.Dg = dg;
            this.DgTag = dgTag;
            this.TagEntry = tagEntry;
            this.EntryView = entryView;
        }

        /// <summary>
        /// Source data group file
        /// </summary>
        /// <value>Source data group file</value>
        [DataMember(Name = "dg", IsRequired = true, EmitDefaultValue = true)]
        public int Dg { get; set; }

        /// <summary>
        /// Index of the source record of the image with biometric information in the information data group
        /// </summary>
        /// <value>Index of the source record of the image with biometric information in the information data group</value>
        [DataMember(Name = "dgTag", IsRequired = true, EmitDefaultValue = true)]
        public int DgTag { get; set; }

        /// <summary>
        /// Index of the template in the record with biometric data
        /// </summary>
        /// <value>Index of the template in the record with biometric data</value>
        [DataMember(Name = "tagEntry", IsRequired = true, EmitDefaultValue = true)]
        public int TagEntry { get; set; }

        /// <summary>
        /// Index of the variant of the biometric data template
        /// </summary>
        /// <value>Index of the variant of the biometric data template</value>
        [DataMember(Name = "entryView", IsRequired = true, EmitDefaultValue = true)]
        public int EntryView { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidOrigin {\n");
            sb.Append("  Dg: ").Append(Dg).Append("\n");
            sb.Append("  DgTag: ").Append(DgTag).Append("\n");
            sb.Append("  TagEntry: ").Append(TagEntry).Append("\n");
            sb.Append("  EntryView: ").Append(EntryView).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
