/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Location of data in RFID chip
    /// </summary>
    [DataContract]
    public partial class RfidOrigin :  IEquatable<RfidOrigin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidOrigin" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidOrigin() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidOrigin" /> class.
        /// </summary>
        /// <param name="dg">Source data group file (required).</param>
        /// <param name="dgTag">Index of the source record of the image with biometric information in the information data group (required).</param>
        /// <param name="tagEntry">Index of the template in the record with biometric data (required).</param>
        /// <param name="entryView">Index of the variant of the biometric data template (required).</param>
        public RfidOrigin(int dg = default(int), int dgTag = default(int), int tagEntry = default(int), int entryView = default(int))
        {
            // to ensure "dg" is required (not null)
            if (dg == null)
            {
                throw new InvalidDataException("dg is a required property for RfidOrigin and cannot be null");
            }
            else
            {
                this.Dg = dg;
            }
            
            // to ensure "dgTag" is required (not null)
            if (dgTag == null)
            {
                throw new InvalidDataException("dgTag is a required property for RfidOrigin and cannot be null");
            }
            else
            {
                this.DgTag = dgTag;
            }
            
            // to ensure "tagEntry" is required (not null)
            if (tagEntry == null)
            {
                throw new InvalidDataException("tagEntry is a required property for RfidOrigin and cannot be null");
            }
            else
            {
                this.TagEntry = tagEntry;
            }
            
            // to ensure "entryView" is required (not null)
            if (entryView == null)
            {
                throw new InvalidDataException("entryView is a required property for RfidOrigin and cannot be null");
            }
            else
            {
                this.EntryView = entryView;
            }
            
        }
        
        /// <summary>
        /// Source data group file
        /// </summary>
        /// <value>Source data group file</value>
        [DataMember(Name="dg", EmitDefaultValue=true)]
        public int Dg { get; set; }

        /// <summary>
        /// Index of the source record of the image with biometric information in the information data group
        /// </summary>
        /// <value>Index of the source record of the image with biometric information in the information data group</value>
        [DataMember(Name="dgTag", EmitDefaultValue=true)]
        public int DgTag { get; set; }

        /// <summary>
        /// Index of the template in the record with biometric data
        /// </summary>
        /// <value>Index of the template in the record with biometric data</value>
        [DataMember(Name="tagEntry", EmitDefaultValue=true)]
        public int TagEntry { get; set; }

        /// <summary>
        /// Index of the variant of the biometric data template
        /// </summary>
        /// <value>Index of the variant of the biometric data template</value>
        [DataMember(Name="entryView", EmitDefaultValue=true)]
        public int EntryView { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RfidOrigin {\n");
            sb.Append("  Dg: ").Append(Dg).Append("\n");
            sb.Append("  DgTag: ").Append(DgTag).Append("\n");
            sb.Append("  TagEntry: ").Append(TagEntry).Append("\n");
            sb.Append("  EntryView: ").Append(EntryView).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RfidOrigin);
        }

        /// <summary>
        /// Returns true if RfidOrigin instances are equal
        /// </summary>
        /// <param name="input">Instance of RfidOrigin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RfidOrigin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dg == input.Dg ||
                    (this.Dg != null &&
                    this.Dg.Equals(input.Dg))
                ) && 
                (
                    this.DgTag == input.DgTag ||
                    (this.DgTag != null &&
                    this.DgTag.Equals(input.DgTag))
                ) && 
                (
                    this.TagEntry == input.TagEntry ||
                    (this.TagEntry != null &&
                    this.TagEntry.Equals(input.TagEntry))
                ) && 
                (
                    this.EntryView == input.EntryView ||
                    (this.EntryView != null &&
                    this.EntryView.Equals(input.EntryView))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dg != null)
                    hashCode = hashCode * 59 + this.Dg.GetHashCode();
                if (this.DgTag != null)
                    hashCode = hashCode * 59 + this.DgTag.GetHashCode();
                if (this.TagEntry != null)
                    hashCode = hashCode * 59 + this.TagEntry.GetHashCode();
                if (this.EntryView != null)
                    hashCode = hashCode * 59 + this.EntryView.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
