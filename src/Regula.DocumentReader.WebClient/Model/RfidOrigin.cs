// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Location of data in RFID chip
    /// </summary>
    public partial class RfidOrigin : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidOrigin" /> class.
        /// </summary>
        /// <param name="dg">Source data group file</param>
        /// <param name="dgTag">Index of the source record of the image with biometric information in the information data group</param>
        /// <param name="tagEntry">Index of the template in the record with biometric data</param>
        /// <param name="entryView">Index of the variant of the biometric data template</param>
        [JsonConstructor]
        public RfidOrigin(int dg, int dgTag, int tagEntry, int entryView)
        {
            Dg = dg;
            DgTag = dgTag;
            TagEntry = tagEntry;
            EntryView = entryView;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Source data group file
        /// </summary>
        /// <value>Source data group file</value>
        [JsonPropertyName("dg")]
        public int Dg { get; set; }

        /// <summary>
        /// Index of the source record of the image with biometric information in the information data group
        /// </summary>
        /// <value>Index of the source record of the image with biometric information in the information data group</value>
        [JsonPropertyName("dgTag")]
        public int DgTag { get; set; }

        /// <summary>
        /// Index of the template in the record with biometric data
        /// </summary>
        /// <value>Index of the template in the record with biometric data</value>
        [JsonPropertyName("tagEntry")]
        public int TagEntry { get; set; }

        /// <summary>
        /// Index of the variant of the biometric data template
        /// </summary>
        /// <value>Index of the variant of the biometric data template</value>
        [JsonPropertyName("entryView")]
        public int EntryView { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidOrigin {\n");
            sb.Append("  Dg: ").Append(Dg).Append("\n");
            sb.Append("  DgTag: ").Append(DgTag).Append("\n");
            sb.Append("  TagEntry: ").Append(TagEntry).Append("\n");
            sb.Append("  EntryView: ").Append(EntryView).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidOrigin" />
    /// </summary>
    public class RfidOriginJsonConverter : JsonConverter<RfidOrigin>
    {
        /// <summary>
        /// Deserializes json to <see cref="RfidOrigin" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RfidOrigin Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> dg = default;
            Option<int?> dgTag = default;
            Option<int?> tagEntry = default;
            Option<int?> entryView = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dg":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dg = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "dgTag":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dgTag = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "tagEntry":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tagEntry = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "entryView":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                entryView = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!dg.IsSet)
                throw new ArgumentException("Property is required for class RfidOrigin.", nameof(dg));

            if (!dgTag.IsSet)
                throw new ArgumentException("Property is required for class RfidOrigin.", nameof(dgTag));

            if (!tagEntry.IsSet)
                throw new ArgumentException("Property is required for class RfidOrigin.", nameof(tagEntry));

            if (!entryView.IsSet)
                throw new ArgumentException("Property is required for class RfidOrigin.", nameof(entryView));

            if (dg.IsSet && dg.Value == null)
                throw new ArgumentNullException(nameof(dg), "Property is not nullable for class RfidOrigin.");

            if (dgTag.IsSet && dgTag.Value == null)
                throw new ArgumentNullException(nameof(dgTag), "Property is not nullable for class RfidOrigin.");

            if (tagEntry.IsSet && tagEntry.Value == null)
                throw new ArgumentNullException(nameof(tagEntry), "Property is not nullable for class RfidOrigin.");

            if (entryView.IsSet && entryView.Value == null)
                throw new ArgumentNullException(nameof(entryView), "Property is not nullable for class RfidOrigin.");

            return new RfidOrigin(dg.Value!.Value!, dgTag.Value!.Value!, tagEntry.Value!.Value!, entryView.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RfidOrigin" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidOrigin"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RfidOrigin rfidOrigin, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rfidOrigin, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RfidOrigin" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidOrigin"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RfidOrigin rfidOrigin, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("dg", rfidOrigin.Dg);

            writer.WriteNumber("dgTag", rfidOrigin.DgTag);

            writer.WriteNumber("tagEntry", rfidOrigin.TagEntry);

            writer.WriteNumber("entryView", rfidOrigin.EntryView);
        }
    }
}
