/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ImageQualityCheck
    /// </summary>
    [DataContract]
    public partial class ImageQualityCheck :  IEquatable<ImageQualityCheck>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageQualityCheck" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImageQualityCheck() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageQualityCheck" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="result">result (required).</param>
        /// <param name="featureType">featureType (required).</param>
        /// <param name="areas">areas.</param>
        /// <param name="mean">Check mean value (required).</param>
        /// <param name="stdDev">Check deviation value (required).</param>
        /// <param name="probability">Check probability value (required).</param>
        public ImageQualityCheck(Integer type = default(Integer), Integer result = default(Integer), Integer featureType = default(Integer), AreaArray areas = default(AreaArray), float mean = default(float), float stdDev = default(float), int probability = default(int))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ImageQualityCheck and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            // to ensure "result" is required (not null)
            if (result == null)
            {
                throw new InvalidDataException("result is a required property for ImageQualityCheck and cannot be null");
            }
            else
            {
                this.Result = result;
            }
            
            // to ensure "featureType" is required (not null)
            if (featureType == null)
            {
                throw new InvalidDataException("featureType is a required property for ImageQualityCheck and cannot be null");
            }
            else
            {
                this.FeatureType = featureType;
            }
            
            // to ensure "mean" is required (not null)
            if (mean == null)
            {
                throw new InvalidDataException("mean is a required property for ImageQualityCheck and cannot be null");
            }
            else
            {
                this.Mean = mean;
            }
            
            // to ensure "stdDev" is required (not null)
            if (stdDev == null)
            {
                throw new InvalidDataException("stdDev is a required property for ImageQualityCheck and cannot be null");
            }
            else
            {
                this.StdDev = stdDev;
            }
            
            // to ensure "probability" is required (not null)
            if (probability == null)
            {
                throw new InvalidDataException("probability is a required property for ImageQualityCheck and cannot be null");
            }
            else
            {
                this.Probability = probability;
            }
            
            this.Areas = areas;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public Integer Type { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=true)]
        public Integer Result { get; set; }

        /// <summary>
        /// Gets or Sets FeatureType
        /// </summary>
        [DataMember(Name="featureType", EmitDefaultValue=true)]
        public Integer FeatureType { get; set; }

        /// <summary>
        /// Gets or Sets Areas
        /// </summary>
        [DataMember(Name="areas", EmitDefaultValue=false)]
        public AreaArray Areas { get; set; }

        /// <summary>
        /// Check mean value
        /// </summary>
        /// <value>Check mean value</value>
        [DataMember(Name="mean", EmitDefaultValue=true)]
        public float Mean { get; set; }

        /// <summary>
        /// Check deviation value
        /// </summary>
        /// <value>Check deviation value</value>
        [DataMember(Name="std_dev", EmitDefaultValue=true)]
        public float StdDev { get; set; }

        /// <summary>
        /// Check probability value
        /// </summary>
        /// <value>Check probability value</value>
        [DataMember(Name="probability", EmitDefaultValue=true)]
        public int Probability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageQualityCheck {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  FeatureType: ").Append(FeatureType).Append("\n");
            sb.Append("  Areas: ").Append(Areas).Append("\n");
            sb.Append("  Mean: ").Append(Mean).Append("\n");
            sb.Append("  StdDev: ").Append(StdDev).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageQualityCheck);
        }

        /// <summary>
        /// Returns true if ImageQualityCheck instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageQualityCheck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageQualityCheck input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.FeatureType == input.FeatureType ||
                    (this.FeatureType != null &&
                    this.FeatureType.Equals(input.FeatureType))
                ) && 
                (
                    this.Areas == input.Areas ||
                    (this.Areas != null &&
                    this.Areas.Equals(input.Areas))
                ) && 
                (
                    this.Mean == input.Mean ||
                    (this.Mean != null &&
                    this.Mean.Equals(input.Mean))
                ) && 
                (
                    this.StdDev == input.StdDev ||
                    (this.StdDev != null &&
                    this.StdDev.Equals(input.StdDev))
                ) && 
                (
                    this.Probability == input.Probability ||
                    (this.Probability != null &&
                    this.Probability.Equals(input.Probability))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.FeatureType != null)
                    hashCode = hashCode * 59 + this.FeatureType.GetHashCode();
                if (this.Areas != null)
                    hashCode = hashCode * 59 + this.Areas.GetHashCode();
                if (this.Mean != null)
                    hashCode = hashCode * 59 + this.Mean.GetHashCode();
                if (this.StdDev != null)
                    hashCode = hashCode * 59 + this.StdDev.GetHashCode();
                if (this.Probability != null)
                    hashCode = hashCode * 59 + this.Probability.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
