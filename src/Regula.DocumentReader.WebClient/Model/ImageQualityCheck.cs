// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ImageQualityCheck
    /// </summary>
    public partial class ImageQualityCheck : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageQualityCheck" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="result">result</param>
        /// <param name="featureType">featureType</param>
        /// <param name="mean">Check mean value</param>
        /// <param name="stdDev">Check deviation value</param>
        /// <param name="probability">Check probability value</param>
        /// <param name="areas">areas</param>
        [JsonConstructor]
        public ImageQualityCheck(ImageQualityCheckType type, CheckResult result, SecurityFeatureType featureType, float mean, float stdDev, int probability, Option<AreaArray?> areas = default)
        {
            Type = type;
            Result = result;
            FeatureType = featureType;
            Mean = mean;
            StdDev = stdDev;
            Probability = probability;
            AreasOption = areas;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public ImageQualityCheckType Type { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [JsonPropertyName("result")]
        public CheckResult Result { get; set; }

        /// <summary>
        /// Gets or Sets FeatureType
        /// </summary>
        [JsonPropertyName("featureType")]
        public SecurityFeatureType FeatureType { get; set; }

        /// <summary>
        /// Check mean value
        /// </summary>
        /// <value>Check mean value</value>
        [JsonPropertyName("mean")]
        public float Mean { get; set; }

        /// <summary>
        /// Check deviation value
        /// </summary>
        /// <value>Check deviation value</value>
        [JsonPropertyName("std_dev")]
        public float StdDev { get; set; }

        /// <summary>
        /// Check probability value
        /// </summary>
        /// <value>Check probability value</value>
        [JsonPropertyName("probability")]
        public int Probability { get; set; }

        /// <summary>
        /// Used to track the state of Areas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AreaArray?> AreasOption { get; private set; }

        /// <summary>
        /// Gets or Sets Areas
        /// </summary>
        [JsonPropertyName("areas")]
        public AreaArray? Areas { get { return this.AreasOption; } set { this.AreasOption = new Option<AreaArray?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImageQualityCheck {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  FeatureType: ").Append(FeatureType).Append("\n");
            sb.Append("  Mean: ").Append(Mean).Append("\n");
            sb.Append("  StdDev: ").Append(StdDev).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  Areas: ").Append(Areas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImageQualityCheck" />
    /// </summary>
    public class ImageQualityCheckJsonConverter : JsonConverter<ImageQualityCheck>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImageQualityCheck" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImageQualityCheck Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ImageQualityCheckType?> type = default;
            Option<CheckResult?> result = default;
            Option<SecurityFeatureType?> featureType = default;
            Option<float?> mean = default;
            Option<float?> stdDev = default;
            Option<int?> probability = default;
            Option<AreaArray?> areas = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ImageQualityCheckType?>(ImageQualityCheckTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "result":
                            string? resultRawValue = utf8JsonReader.GetString();
                            if (resultRawValue != null)
                                result = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(resultRawValue));
                            break;
                        case "featureType":
                            string? featureTypeRawValue = utf8JsonReader.GetString();
                            if (featureTypeRawValue != null)
                                featureType = new Option<SecurityFeatureType?>(SecurityFeatureTypeValueConverter.FromStringOrDefault(featureTypeRawValue));
                            break;
                        case "mean":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mean = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "std_dev":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stdDev = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "probability":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                probability = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "areas":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                areas = new Option<AreaArray?>(JsonSerializer.Deserialize<AreaArray>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ImageQualityCheck.", nameof(type));

            if (!result.IsSet)
                throw new ArgumentException("Property is required for class ImageQualityCheck.", nameof(result));

            if (!featureType.IsSet)
                throw new ArgumentException("Property is required for class ImageQualityCheck.", nameof(featureType));

            if (!mean.IsSet)
                throw new ArgumentException("Property is required for class ImageQualityCheck.", nameof(mean));

            if (!stdDev.IsSet)
                throw new ArgumentException("Property is required for class ImageQualityCheck.", nameof(stdDev));

            if (!probability.IsSet)
                throw new ArgumentException("Property is required for class ImageQualityCheck.", nameof(probability));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ImageQualityCheck.");

            if (result.IsSet && result.Value == null)
                throw new ArgumentNullException(nameof(result), "Property is not nullable for class ImageQualityCheck.");

            if (featureType.IsSet && featureType.Value == null)
                throw new ArgumentNullException(nameof(featureType), "Property is not nullable for class ImageQualityCheck.");

            if (mean.IsSet && mean.Value == null)
                throw new ArgumentNullException(nameof(mean), "Property is not nullable for class ImageQualityCheck.");

            if (stdDev.IsSet && stdDev.Value == null)
                throw new ArgumentNullException(nameof(stdDev), "Property is not nullable for class ImageQualityCheck.");

            if (probability.IsSet && probability.Value == null)
                throw new ArgumentNullException(nameof(probability), "Property is not nullable for class ImageQualityCheck.");

            if (areas.IsSet && areas.Value == null)
                throw new ArgumentNullException(nameof(areas), "Property is not nullable for class ImageQualityCheck.");

            return new ImageQualityCheck(type.Value!.Value!, result.Value!.Value!, featureType.Value!.Value!, mean.Value!.Value!, stdDev.Value!.Value!, probability.Value!.Value!, areas);
        }

        /// <summary>
        /// Serializes a <see cref="ImageQualityCheck" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imageQualityCheck"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImageQualityCheck imageQualityCheck, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, imageQualityCheck, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImageQualityCheck" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imageQualityCheck"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImageQualityCheck imageQualityCheck, JsonSerializerOptions jsonSerializerOptions)
        {
            if (imageQualityCheck.AreasOption.IsSet && imageQualityCheck.Areas == null)
                throw new ArgumentNullException(nameof(imageQualityCheck.Areas), "Property is required for class ImageQualityCheck.");

            var typeRawValue = ImageQualityCheckTypeValueConverter.ToJsonValue(imageQualityCheck.Type);
            writer.WriteNumber("type", typeRawValue);

            var resultRawValue = CheckResultValueConverter.ToJsonValue(imageQualityCheck.Result);
            writer.WriteNumber("result", resultRawValue);

            var featureTypeRawValue = SecurityFeatureTypeValueConverter.ToJsonValue(imageQualityCheck.FeatureType);
            writer.WriteNumber("featureType", featureTypeRawValue);

            writer.WriteNumber("mean", imageQualityCheck.Mean);

            writer.WriteNumber("std_dev", imageQualityCheck.StdDev);

            writer.WriteNumber("probability", imageQualityCheck.Probability);

            if (imageQualityCheck.AreasOption.IsSet)
            {
                writer.WritePropertyName("areas");
                JsonSerializer.Serialize(writer, imageQualityCheck.Areas, jsonSerializerOptions);
            }
        }
    }
}
