// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// LivenessParams
    /// </summary>
    public partial class LivenessParams : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LivenessParams" /> class.
        /// </summary>
        /// <param name="checkOVI">This parameter is used to enable OVI check</param>
        /// <param name="checkMLI">This parameter is used to enable MLI check</param>
        /// <param name="checkHolo">This parameter is used to enable Hologram detection</param>
        /// <param name="checkED">This parameter is used to enable Electronic device detection</param>
        /// <param name="checkBlackAndWhiteCopy">This parameter is used to enable Black and white copy check</param>
        [JsonConstructor]
        public LivenessParams(Option<bool?> checkOVI = default, Option<bool?> checkMLI = default, Option<bool?> checkHolo = default, Option<bool?> checkED = default, Option<bool?> checkBlackAndWhiteCopy = default)
        {
            CheckOVIOption = checkOVI;
            CheckMLIOption = checkMLI;
            CheckHoloOption = checkHolo;
            CheckEDOption = checkED;
            CheckBlackAndWhiteCopyOption = checkBlackAndWhiteCopy;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CheckOVI
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckOVIOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable OVI check
        /// </summary>
        /// <value>This parameter is used to enable OVI check</value>
        [JsonPropertyName("checkOVI")]
        public bool? CheckOVI { get { return this.CheckOVIOption; } set { this.CheckOVIOption = new(value); } }

        /// <summary>
        /// Used to track the state of CheckMLI
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckMLIOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable MLI check
        /// </summary>
        /// <value>This parameter is used to enable MLI check</value>
        [JsonPropertyName("checkMLI")]
        public bool? CheckMLI { get { return this.CheckMLIOption; } set { this.CheckMLIOption = new(value); } }

        /// <summary>
        /// Used to track the state of CheckHolo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckHoloOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Hologram detection
        /// </summary>
        /// <value>This parameter is used to enable Hologram detection</value>
        [JsonPropertyName("checkHolo")]
        public bool? CheckHolo { get { return this.CheckHoloOption; } set { this.CheckHoloOption = new(value); } }

        /// <summary>
        /// Used to track the state of CheckED
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckEDOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Electronic device detection
        /// </summary>
        /// <value>This parameter is used to enable Electronic device detection</value>
        [JsonPropertyName("checkED")]
        public bool? CheckED { get { return this.CheckEDOption; } set { this.CheckEDOption = new(value); } }

        /// <summary>
        /// Used to track the state of CheckBlackAndWhiteCopy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckBlackAndWhiteCopyOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Black and white copy check
        /// </summary>
        /// <value>This parameter is used to enable Black and white copy check</value>
        [JsonPropertyName("checkBlackAndWhiteCopy")]
        public bool? CheckBlackAndWhiteCopy { get { return this.CheckBlackAndWhiteCopyOption; } set { this.CheckBlackAndWhiteCopyOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LivenessParams {\n");
            sb.Append("  CheckOVI: ").Append(CheckOVI).Append("\n");
            sb.Append("  CheckMLI: ").Append(CheckMLI).Append("\n");
            sb.Append("  CheckHolo: ").Append(CheckHolo).Append("\n");
            sb.Append("  CheckED: ").Append(CheckED).Append("\n");
            sb.Append("  CheckBlackAndWhiteCopy: ").Append(CheckBlackAndWhiteCopy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LivenessParams" />
    /// </summary>
    public class LivenessParamsJsonConverter : JsonConverter<LivenessParams>
    {
        /// <summary>
        /// Deserializes json to <see cref="LivenessParams" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LivenessParams Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> checkOVI = default;
            Option<bool?> checkMLI = default;
            Option<bool?> checkHolo = default;
            Option<bool?> checkED = default;
            Option<bool?> checkBlackAndWhiteCopy = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "checkOVI":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkOVI = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkMLI":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkMLI = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkHolo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkHolo = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkED":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkED = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkBlackAndWhiteCopy":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkBlackAndWhiteCopy = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (checkOVI.IsSet && checkOVI.Value == null)
                throw new ArgumentNullException(nameof(checkOVI), "Property is not nullable for class LivenessParams.");

            if (checkMLI.IsSet && checkMLI.Value == null)
                throw new ArgumentNullException(nameof(checkMLI), "Property is not nullable for class LivenessParams.");

            if (checkHolo.IsSet && checkHolo.Value == null)
                throw new ArgumentNullException(nameof(checkHolo), "Property is not nullable for class LivenessParams.");

            if (checkED.IsSet && checkED.Value == null)
                throw new ArgumentNullException(nameof(checkED), "Property is not nullable for class LivenessParams.");

            if (checkBlackAndWhiteCopy.IsSet && checkBlackAndWhiteCopy.Value == null)
                throw new ArgumentNullException(nameof(checkBlackAndWhiteCopy), "Property is not nullable for class LivenessParams.");

            return new LivenessParams(checkOVI, checkMLI, checkHolo, checkED, checkBlackAndWhiteCopy);
        }

        /// <summary>
        /// Serializes a <see cref="LivenessParams" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="livenessParams"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LivenessParams livenessParams, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, livenessParams, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LivenessParams" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="livenessParams"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LivenessParams livenessParams, JsonSerializerOptions jsonSerializerOptions)
        {
            if (livenessParams.CheckOVIOption.IsSet)
                writer.WriteBoolean("checkOVI", livenessParams.CheckOVIOption.Value!.Value);

            if (livenessParams.CheckMLIOption.IsSet)
                writer.WriteBoolean("checkMLI", livenessParams.CheckMLIOption.Value!.Value);

            if (livenessParams.CheckHoloOption.IsSet)
                writer.WriteBoolean("checkHolo", livenessParams.CheckHoloOption.Value!.Value);

            if (livenessParams.CheckEDOption.IsSet)
                writer.WriteBoolean("checkED", livenessParams.CheckEDOption.Value!.Value);

            if (livenessParams.CheckBlackAndWhiteCopyOption.IsSet)
                writer.WriteBoolean("checkBlackAndWhiteCopy", livenessParams.CheckBlackAndWhiteCopyOption.Value!.Value);
        }
    }
}
