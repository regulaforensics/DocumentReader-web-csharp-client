/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// DeviceInfo2
    /// </summary>
    [DataContract]
    public partial class DeviceInfo2 :  IEquatable<DeviceInfo2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceInfo2" /> class.
        /// </summary>
        /// <param name="app">app.</param>
        /// <param name="licenseId">licenseId.</param>
        /// <param name="licenseType">licenseType.</param>
        /// <param name="licenseSerial">licenseSerial.</param>
        /// <param name="licenseValidUntil">licenseValidUntil.</param>
        /// <param name="scenarios">scenarios.</param>
        /// <param name="version">version.</param>
        public DeviceInfo2(string app = default(string), string licenseId = default(string), string licenseType = default(string), string licenseSerial = default(string), DateTime licenseValidUntil = default(DateTime), List<string> scenarios = default(List<string>), string version = default(string))
        {
            this.App = app;
            this.LicenseId = licenseId;
            this.LicenseType = licenseType;
            this.LicenseSerial = licenseSerial;
            this.LicenseValidUntil = licenseValidUntil;
            this.Scenarios = scenarios;
            this.Version = version;
        }
        
        /// <summary>
        /// Gets or Sets App
        /// </summary>
        [DataMember(Name="app", EmitDefaultValue=false)]
        public string App { get; set; }

        /// <summary>
        /// Gets or Sets LicenseId
        /// </summary>
        [DataMember(Name="licenseId", EmitDefaultValue=false)]
        public string LicenseId { get; set; }

        /// <summary>
        /// Gets or Sets LicenseType
        /// </summary>
        [DataMember(Name="licenseType", EmitDefaultValue=false)]
        public string LicenseType { get; set; }

        /// <summary>
        /// Gets or Sets LicenseSerial
        /// </summary>
        [DataMember(Name="licenseSerial", EmitDefaultValue=false)]
        public string LicenseSerial { get; set; }

        /// <summary>
        /// Gets or Sets LicenseValidUntil
        /// </summary>
        [DataMember(Name="licenseValidUntil", EmitDefaultValue=false)]
        public DateTime LicenseValidUntil { get; set; }

        /// <summary>
        /// Gets or Sets Scenarios
        /// </summary>
        [DataMember(Name="scenarios", EmitDefaultValue=false)]
        public List<string> Scenarios { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceInfo2 {\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  LicenseId: ").Append(LicenseId).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  LicenseSerial: ").Append(LicenseSerial).Append("\n");
            sb.Append("  LicenseValidUntil: ").Append(LicenseValidUntil).Append("\n");
            sb.Append("  Scenarios: ").Append(Scenarios).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceInfo2);
        }

        /// <summary>
        /// Returns true if DeviceInfo2 instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceInfo2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceInfo2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.App == input.App ||
                    (this.App != null &&
                    this.App.Equals(input.App))
                ) && 
                (
                    this.LicenseId == input.LicenseId ||
                    (this.LicenseId != null &&
                    this.LicenseId.Equals(input.LicenseId))
                ) && 
                (
                    this.LicenseType == input.LicenseType ||
                    (this.LicenseType != null &&
                    this.LicenseType.Equals(input.LicenseType))
                ) && 
                (
                    this.LicenseSerial == input.LicenseSerial ||
                    (this.LicenseSerial != null &&
                    this.LicenseSerial.Equals(input.LicenseSerial))
                ) && 
                (
                    this.LicenseValidUntil == input.LicenseValidUntil ||
                    (this.LicenseValidUntil != null &&
                    this.LicenseValidUntil.Equals(input.LicenseValidUntil))
                ) && 
                (
                    this.Scenarios == input.Scenarios ||
                    this.Scenarios != null &&
                    input.Scenarios != null &&
                    this.Scenarios.SequenceEqual(input.Scenarios)
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.App != null)
                    hashCode = hashCode * 59 + this.App.GetHashCode();
                if (this.LicenseId != null)
                    hashCode = hashCode * 59 + this.LicenseId.GetHashCode();
                if (this.LicenseType != null)
                    hashCode = hashCode * 59 + this.LicenseType.GetHashCode();
                if (this.LicenseSerial != null)
                    hashCode = hashCode * 59 + this.LicenseSerial.GetHashCode();
                if (this.LicenseValidUntil != null)
                    hashCode = hashCode * 59 + this.LicenseValidUntil.GetHashCode();
                if (this.Scenarios != null)
                    hashCode = hashCode * 59 + this.Scenarios.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
