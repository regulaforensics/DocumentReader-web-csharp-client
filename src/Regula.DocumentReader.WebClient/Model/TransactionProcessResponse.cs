// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TransactionProcessResponse
    /// </summary>
    public partial class TransactionProcessResponse : ProcessResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionProcessResponse" /> class.
        /// </summary>
        /// <param name="chipPage">chipPage</param>
        /// <param name="coreLibResultCode">coreLibResultCode</param>
        /// <param name="processingFinished">processingFinished</param>
        /// <param name="containerList">containerList</param>
        /// <param name="transactionInfo">transactionInfo</param>
        /// <param name="morePagesAvailable">morePagesAvailable</param>
        /// <param name="elapsedTime">Time the document processing has taken, ms.</param>
        /// <param name="log">Base64 encoded transaction processing log</param>
        /// <param name="passBackObject">Free-form object provided in request. See passBackObject property of ProcessRequest.</param>
        /// <param name="metadata">metadata</param>
        [JsonConstructor]
        public TransactionProcessResponse(RfidLocation chipPage, int coreLibResultCode, ProcessingStatus processingFinished, ContainerList containerList, TransactionInfo transactionInfo, int morePagesAvailable, int elapsedTime, Option<string?> log = default, Option<Dictionary<string, Object>?> passBackObject = default, Option<Dictionary<string, Object>?> metadata = default) : base(chipPage, coreLibResultCode, processingFinished, containerList, transactionInfo, morePagesAvailable, elapsedTime, log, passBackObject, metadata)
        {
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionProcessResponse {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CoreLibResultCode: ").Append(CoreLibResultCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionProcessResponse" />
    /// </summary>
    public class TransactionProcessResponseJsonConverter : JsonConverter<TransactionProcessResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransactionProcessResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionProcessResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RfidLocation?> chipPage = default;
            Option<int?> coreLibResultCode = default;
            Option<ProcessingStatus?> processingFinished = default;
            Option<ContainerList?> containerList = default;
            Option<TransactionInfo?> transactionInfo = default;
            Option<int?> morePagesAvailable = default;
            Option<int?> elapsedTime = default;
            Option<string?> log = default;
            Option<Dictionary<string, Object>?> passBackObject = default;
            Option<Dictionary<string, Object>?> metadata = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ChipPage":
                            string? chipPageRawValue = utf8JsonReader.GetString();
                            if (chipPageRawValue != null)
                                chipPage = new Option<RfidLocation?>(RfidLocationValueConverter.FromStringOrDefault(chipPageRawValue));
                            break;
                        case "CoreLibResultCode":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                coreLibResultCode = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ProcessingFinished":
                            string? processingFinishedRawValue = utf8JsonReader.GetString();
                            if (processingFinishedRawValue != null)
                                processingFinished = new Option<ProcessingStatus?>(ProcessingStatusValueConverter.FromStringOrDefault(processingFinishedRawValue));
                            break;
                        case "ContainerList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                containerList = new Option<ContainerList?>(JsonSerializer.Deserialize<ContainerList>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "TransactionInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transactionInfo = new Option<TransactionInfo?>(JsonSerializer.Deserialize<TransactionInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "morePagesAvailable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                morePagesAvailable = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "elapsedTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                elapsedTime = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "log":
                            log = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "passBackObject":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passBackObject = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "metadata":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                metadata = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!chipPage.IsSet)
                throw new ArgumentException("Property is required for class TransactionProcessResponse.", nameof(chipPage));

            if (!coreLibResultCode.IsSet)
                throw new ArgumentException("Property is required for class TransactionProcessResponse.", nameof(coreLibResultCode));

            if (!processingFinished.IsSet)
                throw new ArgumentException("Property is required for class TransactionProcessResponse.", nameof(processingFinished));

            if (!containerList.IsSet)
                throw new ArgumentException("Property is required for class TransactionProcessResponse.", nameof(containerList));

            if (!transactionInfo.IsSet)
                throw new ArgumentException("Property is required for class TransactionProcessResponse.", nameof(transactionInfo));

            if (!morePagesAvailable.IsSet)
                throw new ArgumentException("Property is required for class TransactionProcessResponse.", nameof(morePagesAvailable));

            if (!elapsedTime.IsSet)
                throw new ArgumentException("Property is required for class TransactionProcessResponse.", nameof(elapsedTime));

            if (chipPage.IsSet && chipPage.Value == null)
                throw new ArgumentNullException(nameof(chipPage), "Property is not nullable for class TransactionProcessResponse.");

            if (coreLibResultCode.IsSet && coreLibResultCode.Value == null)
                throw new ArgumentNullException(nameof(coreLibResultCode), "Property is not nullable for class TransactionProcessResponse.");

            if (processingFinished.IsSet && processingFinished.Value == null)
                throw new ArgumentNullException(nameof(processingFinished), "Property is not nullable for class TransactionProcessResponse.");

            if (containerList.IsSet && containerList.Value == null)
                throw new ArgumentNullException(nameof(containerList), "Property is not nullable for class TransactionProcessResponse.");

            if (transactionInfo.IsSet && transactionInfo.Value == null)
                throw new ArgumentNullException(nameof(transactionInfo), "Property is not nullable for class TransactionProcessResponse.");

            if (morePagesAvailable.IsSet && morePagesAvailable.Value == null)
                throw new ArgumentNullException(nameof(morePagesAvailable), "Property is not nullable for class TransactionProcessResponse.");

            if (elapsedTime.IsSet && elapsedTime.Value == null)
                throw new ArgumentNullException(nameof(elapsedTime), "Property is not nullable for class TransactionProcessResponse.");

            if (log.IsSet && log.Value == null)
                throw new ArgumentNullException(nameof(log), "Property is not nullable for class TransactionProcessResponse.");

            if (passBackObject.IsSet && passBackObject.Value == null)
                throw new ArgumentNullException(nameof(passBackObject), "Property is not nullable for class TransactionProcessResponse.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class TransactionProcessResponse.");

            return new TransactionProcessResponse(chipPage.Value!.Value!, coreLibResultCode.Value!.Value!, processingFinished.Value!.Value!, containerList.Value!, transactionInfo.Value!, morePagesAvailable.Value!.Value!, elapsedTime.Value!.Value!, log, passBackObject, metadata);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionProcessResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionProcessResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionProcessResponse transactionProcessResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, transactionProcessResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionProcessResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionProcessResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TransactionProcessResponse transactionProcessResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionProcessResponse.ContainerList == null)
                throw new ArgumentNullException(nameof(transactionProcessResponse.ContainerList), "Property is required for class TransactionProcessResponse.");

            if (transactionProcessResponse.TransactionInfo == null)
                throw new ArgumentNullException(nameof(transactionProcessResponse.TransactionInfo), "Property is required for class TransactionProcessResponse.");

            if (transactionProcessResponse.LogOption.IsSet && transactionProcessResponse.Log == null)
                throw new ArgumentNullException(nameof(transactionProcessResponse.Log), "Property is required for class TransactionProcessResponse.");

            if (transactionProcessResponse.PassBackObjectOption.IsSet && transactionProcessResponse.PassBackObject == null)
                throw new ArgumentNullException(nameof(transactionProcessResponse.PassBackObject), "Property is required for class TransactionProcessResponse.");

            if (transactionProcessResponse.MetadataOption.IsSet && transactionProcessResponse.Metadata == null)
                throw new ArgumentNullException(nameof(transactionProcessResponse.Metadata), "Property is required for class TransactionProcessResponse.");

            var chipPageRawValue = RfidLocationValueConverter.ToJsonValue(transactionProcessResponse.ChipPage);
            writer.WriteNumber("ChipPage", chipPageRawValue);

            writer.WriteNumber("CoreLibResultCode", transactionProcessResponse.CoreLibResultCode);

            var processingFinishedRawValue = ProcessingStatusValueConverter.ToJsonValue(transactionProcessResponse.ProcessingFinished);
            writer.WriteNumber("ProcessingFinished", processingFinishedRawValue);

            writer.WritePropertyName("ContainerList");
            JsonSerializer.Serialize(writer, transactionProcessResponse.ContainerList, jsonSerializerOptions);
            writer.WritePropertyName("TransactionInfo");
            JsonSerializer.Serialize(writer, transactionProcessResponse.TransactionInfo, jsonSerializerOptions);
            writer.WriteNumber("morePagesAvailable", transactionProcessResponse.MorePagesAvailable);

            writer.WriteNumber("elapsedTime", transactionProcessResponse.ElapsedTime);

            if (transactionProcessResponse.LogOption.IsSet)
                writer.WriteString("log", transactionProcessResponse.Log);

            if (transactionProcessResponse.PassBackObjectOption.IsSet)
            {
                writer.WritePropertyName("passBackObject");
                JsonSerializer.Serialize(writer, transactionProcessResponse.PassBackObject, jsonSerializerOptions);
            }
            if (transactionProcessResponse.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, transactionProcessResponse.Metadata, jsonSerializerOptions);
            }
        }
    }
}
