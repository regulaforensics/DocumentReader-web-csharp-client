// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// AuthParams
    /// </summary>
    public partial class AuthParams : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthParams" /> class.
        /// </summary>
        /// <param name="checkLiveness">This parameter is used to enable document liveness check</param>
        /// <param name="livenessParams">livenessParams</param>
        /// <param name="checkUVLuminiscence">This parameter is used to enable Document luminescence check in UV light</param>
        /// <param name="checkIRB900">This parameter is used to enable B900 ink MRZ contrast check in IR light</param>
        /// <param name="checkImagePatterns">This parameter is used to enable Image patterns presence/absence check (position, shape, color)</param>
        /// <param name="checkFibers">This parameter is used to enable Fibers detection</param>
        /// <param name="checkExtMRZ">This parameter is used to enable Extended MRZ Check</param>
        /// <param name="checkExtOCR">This parameter is used to enable Extended OCR Check</param>
        /// <param name="checkAxial">This parameter is used to enable laminate integrity check in axial light</param>
        /// <param name="checkBarcodeFormat">This parameter is used to enable Barcode format check (code metadata, data format, contents format, etc.)</param>
        /// <param name="checkIRVisibility">This parameter is used to enable Document elements visibility check in IR light</param>
        /// <param name="checkIPI">This parameter is used to enable Invisible Personal Information (IPI) check</param>
        /// <param name="checkPhotoEmbedding">This parameter is used to enable Owner&#39;s photo embedding check (is photo printed or sticked)</param>
        /// <param name="checkPhotoComparison">This parameter is used to enable Portrait comparison check</param>
        /// <param name="checkLetterScreen">This parameter is used to enable LetterScreen check</param>
        /// <param name="checkSecurityText">This parameter is used to enable Security text check</param>
        [JsonConstructor]
        public AuthParams(Option<bool?> checkLiveness = default, Option<LivenessParams?> livenessParams = default, Option<bool?> checkUVLuminiscence = default, Option<bool?> checkIRB900 = default, Option<bool?> checkImagePatterns = default, Option<bool?> checkFibers = default, Option<bool?> checkExtMRZ = default, Option<bool?> checkExtOCR = default, Option<bool?> checkAxial = default, Option<bool?> checkBarcodeFormat = default, Option<bool?> checkIRVisibility = default, Option<bool?> checkIPI = default, Option<bool?> checkPhotoEmbedding = default, Option<bool?> checkPhotoComparison = default, Option<bool?> checkLetterScreen = default, Option<bool?> checkSecurityText = default)
        {
            CheckLivenessOption = checkLiveness;
            LivenessParamsOption = livenessParams;
            CheckUVLuminiscenceOption = checkUVLuminiscence;
            CheckIRB900Option = checkIRB900;
            CheckImagePatternsOption = checkImagePatterns;
            CheckFibersOption = checkFibers;
            CheckExtMRZOption = checkExtMRZ;
            CheckExtOCROption = checkExtOCR;
            CheckAxialOption = checkAxial;
            CheckBarcodeFormatOption = checkBarcodeFormat;
            CheckIRVisibilityOption = checkIRVisibility;
            CheckIPIOption = checkIPI;
            CheckPhotoEmbeddingOption = checkPhotoEmbedding;
            CheckPhotoComparisonOption = checkPhotoComparison;
            CheckLetterScreenOption = checkLetterScreen;
            CheckSecurityTextOption = checkSecurityText;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CheckLiveness
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckLivenessOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable document liveness check
        /// </summary>
        /// <value>This parameter is used to enable document liveness check</value>
        [JsonPropertyName("checkLiveness")]
        public bool? CheckLiveness { get { return this.CheckLivenessOption; } set { this.CheckLivenessOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of LivenessParams
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LivenessParams?> LivenessParamsOption { get; private set; }

        /// <summary>
        /// Gets or Sets LivenessParams
        /// </summary>
        [JsonPropertyName("livenessParams")]
        public LivenessParams? LivenessParams { get { return this.LivenessParamsOption; } set { this.LivenessParamsOption = new Option<LivenessParams?>(value); } }

        /// <summary>
        /// Used to track the state of CheckUVLuminiscence
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckUVLuminiscenceOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Document luminescence check in UV light
        /// </summary>
        /// <value>This parameter is used to enable Document luminescence check in UV light</value>
        [JsonPropertyName("checkUVLuminiscence")]
        public bool? CheckUVLuminiscence { get { return this.CheckUVLuminiscenceOption; } set { this.CheckUVLuminiscenceOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckIRB900
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckIRB900Option { get; private set; }

        /// <summary>
        /// This parameter is used to enable B900 ink MRZ contrast check in IR light
        /// </summary>
        /// <value>This parameter is used to enable B900 ink MRZ contrast check in IR light</value>
        [JsonPropertyName("checkIRB900")]
        public bool? CheckIRB900 { get { return this.CheckIRB900Option; } set { this.CheckIRB900Option = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckImagePatterns
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckImagePatternsOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Image patterns presence/absence check (position, shape, color)
        /// </summary>
        /// <value>This parameter is used to enable Image patterns presence/absence check (position, shape, color)</value>
        [JsonPropertyName("checkImagePatterns")]
        public bool? CheckImagePatterns { get { return this.CheckImagePatternsOption; } set { this.CheckImagePatternsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckFibers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckFibersOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Fibers detection
        /// </summary>
        /// <value>This parameter is used to enable Fibers detection</value>
        [JsonPropertyName("checkFibers")]
        public bool? CheckFibers { get { return this.CheckFibersOption; } set { this.CheckFibersOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckExtMRZ
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckExtMRZOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Extended MRZ Check
        /// </summary>
        /// <value>This parameter is used to enable Extended MRZ Check</value>
        [JsonPropertyName("checkExtMRZ")]
        public bool? CheckExtMRZ { get { return this.CheckExtMRZOption; } set { this.CheckExtMRZOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckExtOCR
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckExtOCROption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Extended OCR Check
        /// </summary>
        /// <value>This parameter is used to enable Extended OCR Check</value>
        [JsonPropertyName("checkExtOCR")]
        public bool? CheckExtOCR { get { return this.CheckExtOCROption; } set { this.CheckExtOCROption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckAxial
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckAxialOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable laminate integrity check in axial light
        /// </summary>
        /// <value>This parameter is used to enable laminate integrity check in axial light</value>
        [JsonPropertyName("checkAxial")]
        public bool? CheckAxial { get { return this.CheckAxialOption; } set { this.CheckAxialOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckBarcodeFormat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckBarcodeFormatOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Barcode format check (code metadata, data format, contents format, etc.)
        /// </summary>
        /// <value>This parameter is used to enable Barcode format check (code metadata, data format, contents format, etc.)</value>
        [JsonPropertyName("checkBarcodeFormat")]
        public bool? CheckBarcodeFormat { get { return this.CheckBarcodeFormatOption; } set { this.CheckBarcodeFormatOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckIRVisibility
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckIRVisibilityOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Document elements visibility check in IR light
        /// </summary>
        /// <value>This parameter is used to enable Document elements visibility check in IR light</value>
        [JsonPropertyName("checkIRVisibility")]
        public bool? CheckIRVisibility { get { return this.CheckIRVisibilityOption; } set { this.CheckIRVisibilityOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckIPI
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckIPIOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Invisible Personal Information (IPI) check
        /// </summary>
        /// <value>This parameter is used to enable Invisible Personal Information (IPI) check</value>
        [JsonPropertyName("checkIPI")]
        public bool? CheckIPI { get { return this.CheckIPIOption; } set { this.CheckIPIOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckPhotoEmbedding
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckPhotoEmbeddingOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Owner&#39;s photo embedding check (is photo printed or sticked)
        /// </summary>
        /// <value>This parameter is used to enable Owner&#39;s photo embedding check (is photo printed or sticked)</value>
        [JsonPropertyName("checkPhotoEmbedding")]
        public bool? CheckPhotoEmbedding { get { return this.CheckPhotoEmbeddingOption; } set { this.CheckPhotoEmbeddingOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckPhotoComparison
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckPhotoComparisonOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Portrait comparison check
        /// </summary>
        /// <value>This parameter is used to enable Portrait comparison check</value>
        [JsonPropertyName("checkPhotoComparison")]
        public bool? CheckPhotoComparison { get { return this.CheckPhotoComparisonOption; } set { this.CheckPhotoComparisonOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckLetterScreen
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckLetterScreenOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable LetterScreen check
        /// </summary>
        /// <value>This parameter is used to enable LetterScreen check</value>
        [JsonPropertyName("checkLetterScreen")]
        public bool? CheckLetterScreen { get { return this.CheckLetterScreenOption; } set { this.CheckLetterScreenOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckSecurityText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckSecurityTextOption { get; private set; }

        /// <summary>
        /// This parameter is used to enable Security text check
        /// </summary>
        /// <value>This parameter is used to enable Security text check</value>
        [JsonPropertyName("checkSecurityText")]
        public bool? CheckSecurityText { get { return this.CheckSecurityTextOption; } set { this.CheckSecurityTextOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthParams {\n");
            sb.Append("  CheckLiveness: ").Append(CheckLiveness).Append("\n");
            sb.Append("  LivenessParams: ").Append(LivenessParams).Append("\n");
            sb.Append("  CheckUVLuminiscence: ").Append(CheckUVLuminiscence).Append("\n");
            sb.Append("  CheckIRB900: ").Append(CheckIRB900).Append("\n");
            sb.Append("  CheckImagePatterns: ").Append(CheckImagePatterns).Append("\n");
            sb.Append("  CheckFibers: ").Append(CheckFibers).Append("\n");
            sb.Append("  CheckExtMRZ: ").Append(CheckExtMRZ).Append("\n");
            sb.Append("  CheckExtOCR: ").Append(CheckExtOCR).Append("\n");
            sb.Append("  CheckAxial: ").Append(CheckAxial).Append("\n");
            sb.Append("  CheckBarcodeFormat: ").Append(CheckBarcodeFormat).Append("\n");
            sb.Append("  CheckIRVisibility: ").Append(CheckIRVisibility).Append("\n");
            sb.Append("  CheckIPI: ").Append(CheckIPI).Append("\n");
            sb.Append("  CheckPhotoEmbedding: ").Append(CheckPhotoEmbedding).Append("\n");
            sb.Append("  CheckPhotoComparison: ").Append(CheckPhotoComparison).Append("\n");
            sb.Append("  CheckLetterScreen: ").Append(CheckLetterScreen).Append("\n");
            sb.Append("  CheckSecurityText: ").Append(CheckSecurityText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthParams" />
    /// </summary>
    public class AuthParamsJsonConverter : JsonConverter<AuthParams>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthParams" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthParams Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> checkLiveness = default;
            Option<LivenessParams?> livenessParams = default;
            Option<bool?> checkUVLuminiscence = default;
            Option<bool?> checkIRB900 = default;
            Option<bool?> checkImagePatterns = default;
            Option<bool?> checkFibers = default;
            Option<bool?> checkExtMRZ = default;
            Option<bool?> checkExtOCR = default;
            Option<bool?> checkAxial = default;
            Option<bool?> checkBarcodeFormat = default;
            Option<bool?> checkIRVisibility = default;
            Option<bool?> checkIPI = default;
            Option<bool?> checkPhotoEmbedding = default;
            Option<bool?> checkPhotoComparison = default;
            Option<bool?> checkLetterScreen = default;
            Option<bool?> checkSecurityText = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "checkLiveness":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkLiveness = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "livenessParams":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                livenessParams = new Option<LivenessParams?>(JsonSerializer.Deserialize<LivenessParams>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "checkUVLuminiscence":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkUVLuminiscence = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkIRB900":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkIRB900 = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkImagePatterns":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkImagePatterns = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkFibers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkFibers = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkExtMRZ":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkExtMRZ = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkExtOCR":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkExtOCR = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkAxial":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkAxial = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkBarcodeFormat":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkBarcodeFormat = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkIRVisibility":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkIRVisibility = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkIPI":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkIPI = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkPhotoEmbedding":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkPhotoEmbedding = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkPhotoComparison":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkPhotoComparison = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkLetterScreen":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkLetterScreen = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checkSecurityText":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkSecurityText = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (checkLiveness.IsSet && checkLiveness.Value == null)
                throw new ArgumentNullException(nameof(checkLiveness), "Property is not nullable for class AuthParams.");

            if (livenessParams.IsSet && livenessParams.Value == null)
                throw new ArgumentNullException(nameof(livenessParams), "Property is not nullable for class AuthParams.");

            if (checkUVLuminiscence.IsSet && checkUVLuminiscence.Value == null)
                throw new ArgumentNullException(nameof(checkUVLuminiscence), "Property is not nullable for class AuthParams.");

            if (checkIRB900.IsSet && checkIRB900.Value == null)
                throw new ArgumentNullException(nameof(checkIRB900), "Property is not nullable for class AuthParams.");

            if (checkImagePatterns.IsSet && checkImagePatterns.Value == null)
                throw new ArgumentNullException(nameof(checkImagePatterns), "Property is not nullable for class AuthParams.");

            if (checkFibers.IsSet && checkFibers.Value == null)
                throw new ArgumentNullException(nameof(checkFibers), "Property is not nullable for class AuthParams.");

            if (checkExtMRZ.IsSet && checkExtMRZ.Value == null)
                throw new ArgumentNullException(nameof(checkExtMRZ), "Property is not nullable for class AuthParams.");

            if (checkExtOCR.IsSet && checkExtOCR.Value == null)
                throw new ArgumentNullException(nameof(checkExtOCR), "Property is not nullable for class AuthParams.");

            if (checkAxial.IsSet && checkAxial.Value == null)
                throw new ArgumentNullException(nameof(checkAxial), "Property is not nullable for class AuthParams.");

            if (checkBarcodeFormat.IsSet && checkBarcodeFormat.Value == null)
                throw new ArgumentNullException(nameof(checkBarcodeFormat), "Property is not nullable for class AuthParams.");

            if (checkIRVisibility.IsSet && checkIRVisibility.Value == null)
                throw new ArgumentNullException(nameof(checkIRVisibility), "Property is not nullable for class AuthParams.");

            if (checkIPI.IsSet && checkIPI.Value == null)
                throw new ArgumentNullException(nameof(checkIPI), "Property is not nullable for class AuthParams.");

            if (checkPhotoEmbedding.IsSet && checkPhotoEmbedding.Value == null)
                throw new ArgumentNullException(nameof(checkPhotoEmbedding), "Property is not nullable for class AuthParams.");

            if (checkPhotoComparison.IsSet && checkPhotoComparison.Value == null)
                throw new ArgumentNullException(nameof(checkPhotoComparison), "Property is not nullable for class AuthParams.");

            if (checkLetterScreen.IsSet && checkLetterScreen.Value == null)
                throw new ArgumentNullException(nameof(checkLetterScreen), "Property is not nullable for class AuthParams.");

            if (checkSecurityText.IsSet && checkSecurityText.Value == null)
                throw new ArgumentNullException(nameof(checkSecurityText), "Property is not nullable for class AuthParams.");

            return new AuthParams(checkLiveness, livenessParams, checkUVLuminiscence, checkIRB900, checkImagePatterns, checkFibers, checkExtMRZ, checkExtOCR, checkAxial, checkBarcodeFormat, checkIRVisibility, checkIPI, checkPhotoEmbedding, checkPhotoComparison, checkLetterScreen, checkSecurityText);
        }

        /// <summary>
        /// Serializes a <see cref="AuthParams" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authParams"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthParams authParams, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, authParams, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthParams" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authParams"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthParams authParams, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authParams.LivenessParamsOption.IsSet && authParams.LivenessParams == null)
                throw new ArgumentNullException(nameof(authParams.LivenessParams), "Property is required for class AuthParams.");

            if (authParams.CheckLivenessOption.IsSet)
                writer.WriteBoolean("checkLiveness", authParams.CheckLivenessOption.Value!.Value);

            if (authParams.LivenessParamsOption.IsSet)
            {
                writer.WritePropertyName("livenessParams");
                JsonSerializer.Serialize(writer, authParams.LivenessParams, jsonSerializerOptions);
            }
            if (authParams.CheckUVLuminiscenceOption.IsSet)
                writer.WriteBoolean("checkUVLuminiscence", authParams.CheckUVLuminiscenceOption.Value!.Value);

            if (authParams.CheckIRB900Option.IsSet)
                writer.WriteBoolean("checkIRB900", authParams.CheckIRB900Option.Value!.Value);

            if (authParams.CheckImagePatternsOption.IsSet)
                writer.WriteBoolean("checkImagePatterns", authParams.CheckImagePatternsOption.Value!.Value);

            if (authParams.CheckFibersOption.IsSet)
                writer.WriteBoolean("checkFibers", authParams.CheckFibersOption.Value!.Value);

            if (authParams.CheckExtMRZOption.IsSet)
                writer.WriteBoolean("checkExtMRZ", authParams.CheckExtMRZOption.Value!.Value);

            if (authParams.CheckExtOCROption.IsSet)
                writer.WriteBoolean("checkExtOCR", authParams.CheckExtOCROption.Value!.Value);

            if (authParams.CheckAxialOption.IsSet)
                writer.WriteBoolean("checkAxial", authParams.CheckAxialOption.Value!.Value);

            if (authParams.CheckBarcodeFormatOption.IsSet)
                writer.WriteBoolean("checkBarcodeFormat", authParams.CheckBarcodeFormatOption.Value!.Value);

            if (authParams.CheckIRVisibilityOption.IsSet)
                writer.WriteBoolean("checkIRVisibility", authParams.CheckIRVisibilityOption.Value!.Value);

            if (authParams.CheckIPIOption.IsSet)
                writer.WriteBoolean("checkIPI", authParams.CheckIPIOption.Value!.Value);

            if (authParams.CheckPhotoEmbeddingOption.IsSet)
                writer.WriteBoolean("checkPhotoEmbedding", authParams.CheckPhotoEmbeddingOption.Value!.Value);

            if (authParams.CheckPhotoComparisonOption.IsSet)
                writer.WriteBoolean("checkPhotoComparison", authParams.CheckPhotoComparisonOption.Value!.Value);

            if (authParams.CheckLetterScreenOption.IsSet)
                writer.WriteBoolean("checkLetterScreen", authParams.CheckLetterScreenOption.Value!.Value);

            if (authParams.CheckSecurityTextOption.IsSet)
                writer.WriteBoolean("checkSecurityText", authParams.CheckSecurityTextOption.Value!.Value);
        }
    }
}
