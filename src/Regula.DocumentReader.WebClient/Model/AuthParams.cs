/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// AuthParams
    /// </summary>
    [DataContract(Name = "AuthParams")]
    public partial class AuthParams : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthParams" /> class.
        /// </summary>
        /// <param name="checkLiveness">This parameter is used to enable document liveness check.</param>
        /// <param name="livenessParams">livenessParams.</param>
        /// <param name="checkUVLuminiscence">This parameter is used to enable Document luminescence check in UV light.</param>
        /// <param name="checkIRB900">This parameter is used to enable B900 ink MRZ contrast check in IR light.</param>
        /// <param name="checkImagePatterns">This parameter is used to enable Image patterns presence/absence check (position, shape, color).</param>
        /// <param name="checkFibers">This parameter is used to enable Fibers detection.</param>
        /// <param name="checkExtMRZ">This parameter is used to enable Extended MRZ Check.</param>
        /// <param name="checkExtOCR">This parameter is used to enable Extended OCR Check.</param>
        /// <param name="checkAxial">This parameter is used to enable laminate integrity check in axial light.</param>
        /// <param name="checkBarcodeFormat">This parameter is used to enable Barcode format check (code metadata, data format, contents format, etc.).</param>
        /// <param name="checkIRVisibility">This parameter is used to enable Document elements visibility check in IR light.</param>
        /// <param name="checkIPI">This parameter is used to enable Invisible Personal Information (IPI) check.</param>
        /// <param name="checkPhotoEmbedding">This parameter is used to enable Owner&#39;s photo embedding check (is photo printed or sticked).</param>
        /// <param name="checkPhotoComparison">This parameter is used to enable Portrait comparison check.</param>
        /// <param name="checkLetterScreen">This parameter is used to enable LetterScreen check.</param>
        /// <param name="checkSecurityText">This parameter is used to enable Security text check.</param>
        public AuthParams(bool checkLiveness = default(bool), LivenessParams livenessParams = default(LivenessParams), bool checkUVLuminiscence = default(bool), bool checkIRB900 = default(bool), bool checkImagePatterns = default(bool), bool checkFibers = default(bool), bool checkExtMRZ = default(bool), bool checkExtOCR = default(bool), bool checkAxial = default(bool), bool checkBarcodeFormat = default(bool), bool checkIRVisibility = default(bool), bool checkIPI = default(bool), bool checkPhotoEmbedding = default(bool), bool checkPhotoComparison = default(bool), bool checkLetterScreen = default(bool), bool checkSecurityText = default(bool))
        {
            this.CheckLiveness = checkLiveness;
            this.LivenessParams = livenessParams;
            this.CheckUVLuminiscence = checkUVLuminiscence;
            this.CheckIRB900 = checkIRB900;
            this.CheckImagePatterns = checkImagePatterns;
            this.CheckFibers = checkFibers;
            this.CheckExtMRZ = checkExtMRZ;
            this.CheckExtOCR = checkExtOCR;
            this.CheckAxial = checkAxial;
            this.CheckBarcodeFormat = checkBarcodeFormat;
            this.CheckIRVisibility = checkIRVisibility;
            this.CheckIPI = checkIPI;
            this.CheckPhotoEmbedding = checkPhotoEmbedding;
            this.CheckPhotoComparison = checkPhotoComparison;
            this.CheckLetterScreen = checkLetterScreen;
            this.CheckSecurityText = checkSecurityText;
        }

        /// <summary>
        /// This parameter is used to enable document liveness check
        /// </summary>
        /// <value>This parameter is used to enable document liveness check</value>
        [DataMember(Name = "checkLiveness", EmitDefaultValue = false)]
        public bool? CheckLiveness { get; set; }

        /// <summary>
        /// Gets or Sets LivenessParams
        /// </summary>
        [DataMember(Name = "livenessParams", EmitDefaultValue = false)]
        public LivenessParams? LivenessParams { get; set; }

        /// <summary>
        /// This parameter is used to enable Document luminescence check in UV light
        /// </summary>
        /// <value>This parameter is used to enable Document luminescence check in UV light</value>
        [DataMember(Name = "checkUVLuminiscence", EmitDefaultValue = false)]
        public bool? CheckUVLuminiscence { get; set; }

        /// <summary>
        /// This parameter is used to enable B900 ink MRZ contrast check in IR light
        /// </summary>
        /// <value>This parameter is used to enable B900 ink MRZ contrast check in IR light</value>
        [DataMember(Name = "checkIRB900", EmitDefaultValue = false)]
        public bool? CheckIRB900 { get; set; }

        /// <summary>
        /// This parameter is used to enable Image patterns presence/absence check (position, shape, color)
        /// </summary>
        /// <value>This parameter is used to enable Image patterns presence/absence check (position, shape, color)</value>
        [DataMember(Name = "checkImagePatterns", EmitDefaultValue = false)]
        public bool? CheckImagePatterns { get; set; }

        /// <summary>
        /// This parameter is used to enable Fibers detection
        /// </summary>
        /// <value>This parameter is used to enable Fibers detection</value>
        [DataMember(Name = "checkFibers", EmitDefaultValue = false)]
        public bool? CheckFibers { get; set; }

        /// <summary>
        /// This parameter is used to enable Extended MRZ Check
        /// </summary>
        /// <value>This parameter is used to enable Extended MRZ Check</value>
        [DataMember(Name = "checkExtMRZ", EmitDefaultValue = false)]
        public bool? CheckExtMRZ { get; set; }

        /// <summary>
        /// This parameter is used to enable Extended OCR Check
        /// </summary>
        /// <value>This parameter is used to enable Extended OCR Check</value>
        [DataMember(Name = "checkExtOCR", EmitDefaultValue = false)]
        public bool? CheckExtOCR { get; set; }

        /// <summary>
        /// This parameter is used to enable laminate integrity check in axial light
        /// </summary>
        /// <value>This parameter is used to enable laminate integrity check in axial light</value>
        [DataMember(Name = "checkAxial", EmitDefaultValue = false)]
        public bool? CheckAxial { get; set; }

        /// <summary>
        /// This parameter is used to enable Barcode format check (code metadata, data format, contents format, etc.)
        /// </summary>
        /// <value>This parameter is used to enable Barcode format check (code metadata, data format, contents format, etc.)</value>
        [DataMember(Name = "checkBarcodeFormat", EmitDefaultValue = false)]
        public bool? CheckBarcodeFormat { get; set; }

        /// <summary>
        /// This parameter is used to enable Document elements visibility check in IR light
        /// </summary>
        /// <value>This parameter is used to enable Document elements visibility check in IR light</value>
        [DataMember(Name = "checkIRVisibility", EmitDefaultValue = false)]
        public bool? CheckIRVisibility { get; set; }

        /// <summary>
        /// This parameter is used to enable Invisible Personal Information (IPI) check
        /// </summary>
        /// <value>This parameter is used to enable Invisible Personal Information (IPI) check</value>
        [DataMember(Name = "checkIPI", EmitDefaultValue = false)]
        public bool? CheckIPI { get; set; }

        /// <summary>
        /// This parameter is used to enable Owner&#39;s photo embedding check (is photo printed or sticked)
        /// </summary>
        /// <value>This parameter is used to enable Owner&#39;s photo embedding check (is photo printed or sticked)</value>
        [DataMember(Name = "checkPhotoEmbedding", EmitDefaultValue = false)]
        public bool? CheckPhotoEmbedding { get; set; }

        /// <summary>
        /// This parameter is used to enable Portrait comparison check
        /// </summary>
        /// <value>This parameter is used to enable Portrait comparison check</value>
        [DataMember(Name = "checkPhotoComparison", EmitDefaultValue = false)]
        public bool? CheckPhotoComparison { get; set; }

        /// <summary>
        /// This parameter is used to enable LetterScreen check
        /// </summary>
        /// <value>This parameter is used to enable LetterScreen check</value>
        [DataMember(Name = "checkLetterScreen", EmitDefaultValue = false)]
        public bool? CheckLetterScreen { get; set; }

        /// <summary>
        /// This parameter is used to enable Security text check
        /// </summary>
        /// <value>This parameter is used to enable Security text check</value>
        [DataMember(Name = "checkSecurityText", EmitDefaultValue = false)]
        public bool? CheckSecurityText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthParams {\n");
            sb.Append("  CheckLiveness: ").Append(CheckLiveness).Append("\n");
            sb.Append("  LivenessParams: ").Append(LivenessParams).Append("\n");
            sb.Append("  CheckUVLuminiscence: ").Append(CheckUVLuminiscence).Append("\n");
            sb.Append("  CheckIRB900: ").Append(CheckIRB900).Append("\n");
            sb.Append("  CheckImagePatterns: ").Append(CheckImagePatterns).Append("\n");
            sb.Append("  CheckFibers: ").Append(CheckFibers).Append("\n");
            sb.Append("  CheckExtMRZ: ").Append(CheckExtMRZ).Append("\n");
            sb.Append("  CheckExtOCR: ").Append(CheckExtOCR).Append("\n");
            sb.Append("  CheckAxial: ").Append(CheckAxial).Append("\n");
            sb.Append("  CheckBarcodeFormat: ").Append(CheckBarcodeFormat).Append("\n");
            sb.Append("  CheckIRVisibility: ").Append(CheckIRVisibility).Append("\n");
            sb.Append("  CheckIPI: ").Append(CheckIPI).Append("\n");
            sb.Append("  CheckPhotoEmbedding: ").Append(CheckPhotoEmbedding).Append("\n");
            sb.Append("  CheckPhotoComparison: ").Append(CheckPhotoComparison).Append("\n");
            sb.Append("  CheckLetterScreen: ").Append(CheckLetterScreen).Append("\n");
            sb.Append("  CheckSecurityText: ").Append(CheckSecurityText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
