// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Defines GraphicFieldType
    /// </summary>
    public enum GraphicFieldType
    {
        /// <summary>
        /// Enum PORTRAIT for value: 201
        /// </summary>
        PORTRAIT = 201,

        /// <summary>
        /// Enum FINGERPRINT for value: 202
        /// </summary>
        FINGERPRINT = 202,

        /// <summary>
        /// Enum EYE for value: 203
        /// </summary>
        EYE = 203,

        /// <summary>
        /// Enum SIGNATURE for value: 204
        /// </summary>
        SIGNATURE = 204,

        /// <summary>
        /// Enum BAR_CODE for value: 205
        /// </summary>
        BAR_CODE = 205,

        /// <summary>
        /// Enum PROOF_OF_CITIZENSHIP for value: 206
        /// </summary>
        PROOF_OF_CITIZENSHIP = 206,

        /// <summary>
        /// Enum DOCUMENT_FRONT for value: 207
        /// </summary>
        DOCUMENT_FRONT = 207,

        /// <summary>
        /// Enum DOCUMENT_REAR for value: 208
        /// </summary>
        DOCUMENT_REAR = 208,

        /// <summary>
        /// Enum COLOR_DYNAMIC for value: 209
        /// </summary>
        COLOR_DYNAMIC = 209,

        /// <summary>
        /// Enum GHOST_PORTRAIT for value: 210
        /// </summary>
        GHOST_PORTRAIT = 210,

        /// <summary>
        /// Enum STAMP for value: 211
        /// </summary>
        STAMP = 211,

        /// <summary>
        /// Enum PORTRAIT_OF_CHILD for value: 212
        /// </summary>
        PORTRAIT_OF_CHILD = 212,

        /// <summary>
        /// Enum CONTACT_CHIP for value: 213
        /// </summary>
        CONTACT_CHIP = 213,

        /// <summary>
        /// Enum OTHER for value: 250
        /// </summary>
        OTHER = 250,

        /// <summary>
        /// Enum FINGER_LEFT_THUMB for value: 300
        /// </summary>
        FINGER_LEFT_THUMB = 300,

        /// <summary>
        /// Enum FINGER_LEFT_INDEX for value: 301
        /// </summary>
        FINGER_LEFT_INDEX = 301,

        /// <summary>
        /// Enum FINGER_LEFT_MIDDLE for value: 302
        /// </summary>
        FINGER_LEFT_MIDDLE = 302,

        /// <summary>
        /// Enum FINGER_LEFT_RING for value: 303
        /// </summary>
        FINGER_LEFT_RING = 303,

        /// <summary>
        /// Enum FINGER_LEFT_LITTLE for value: 304
        /// </summary>
        FINGER_LEFT_LITTLE = 304,

        /// <summary>
        /// Enum FINGER_RIGHT_THUMB for value: 305
        /// </summary>
        FINGER_RIGHT_THUMB = 305,

        /// <summary>
        /// Enum FINGER_RIGHT_INDEX for value: 306
        /// </summary>
        FINGER_RIGHT_INDEX = 306,

        /// <summary>
        /// Enum FINGER_RIGHT_MIDDLE for value: 307
        /// </summary>
        FINGER_RIGHT_MIDDLE = 307,

        /// <summary>
        /// Enum FINGER_RIGHT_RING for value: 308
        /// </summary>
        FINGER_RIGHT_RING = 308,

        /// <summary>
        /// Enum FINGER_RIGHT_LITTLE for value: 309
        /// </summary>
        FINGER_RIGHT_LITTLE = 309,

        /// <summary>
        /// Enum FINGER_RIGHT_FOUR_FINGERS for value: 313
        /// </summary>
        FINGER_RIGHT_FOUR_FINGERS = 313,

        /// <summary>
        /// Enum FINGER_LEFT_FOUR_FINGERS for value: 314
        /// </summary>
        FINGER_LEFT_FOUR_FINGERS = 314,

        /// <summary>
        /// Enum FINGER_TWO_THUMBS for value: 315
        /// </summary>
        FINGER_TWO_THUMBS = 315
    }

    /// <summary>
    /// Converts <see cref="GraphicFieldType"/> to and from the JSON value
    /// </summary>
    public static class GraphicFieldTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="GraphicFieldType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GraphicFieldType FromString(string value)
        {
            if (value.Equals((201).ToString()))
                return GraphicFieldType.PORTRAIT;

            if (value.Equals((202).ToString()))
                return GraphicFieldType.FINGERPRINT;

            if (value.Equals((203).ToString()))
                return GraphicFieldType.EYE;

            if (value.Equals((204).ToString()))
                return GraphicFieldType.SIGNATURE;

            if (value.Equals((205).ToString()))
                return GraphicFieldType.BAR_CODE;

            if (value.Equals((206).ToString()))
                return GraphicFieldType.PROOF_OF_CITIZENSHIP;

            if (value.Equals((207).ToString()))
                return GraphicFieldType.DOCUMENT_FRONT;

            if (value.Equals((208).ToString()))
                return GraphicFieldType.DOCUMENT_REAR;

            if (value.Equals((209).ToString()))
                return GraphicFieldType.COLOR_DYNAMIC;

            if (value.Equals((210).ToString()))
                return GraphicFieldType.GHOST_PORTRAIT;

            if (value.Equals((211).ToString()))
                return GraphicFieldType.STAMP;

            if (value.Equals((212).ToString()))
                return GraphicFieldType.PORTRAIT_OF_CHILD;

            if (value.Equals((213).ToString()))
                return GraphicFieldType.CONTACT_CHIP;

            if (value.Equals((250).ToString()))
                return GraphicFieldType.OTHER;

            if (value.Equals((300).ToString()))
                return GraphicFieldType.FINGER_LEFT_THUMB;

            if (value.Equals((301).ToString()))
                return GraphicFieldType.FINGER_LEFT_INDEX;

            if (value.Equals((302).ToString()))
                return GraphicFieldType.FINGER_LEFT_MIDDLE;

            if (value.Equals((303).ToString()))
                return GraphicFieldType.FINGER_LEFT_RING;

            if (value.Equals((304).ToString()))
                return GraphicFieldType.FINGER_LEFT_LITTLE;

            if (value.Equals((305).ToString()))
                return GraphicFieldType.FINGER_RIGHT_THUMB;

            if (value.Equals((306).ToString()))
                return GraphicFieldType.FINGER_RIGHT_INDEX;

            if (value.Equals((307).ToString()))
                return GraphicFieldType.FINGER_RIGHT_MIDDLE;

            if (value.Equals((308).ToString()))
                return GraphicFieldType.FINGER_RIGHT_RING;

            if (value.Equals((309).ToString()))
                return GraphicFieldType.FINGER_RIGHT_LITTLE;

            if (value.Equals((313).ToString()))
                return GraphicFieldType.FINGER_RIGHT_FOUR_FINGERS;

            if (value.Equals((314).ToString()))
                return GraphicFieldType.FINGER_LEFT_FOUR_FINGERS;

            if (value.Equals((315).ToString()))
                return GraphicFieldType.FINGER_TWO_THUMBS;

            throw new NotImplementedException($"Could not convert value to type GraphicFieldType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="GraphicFieldType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GraphicFieldType? FromStringOrDefault(string value)
        {
            if (value.Equals((201).ToString()))
                return GraphicFieldType.PORTRAIT;

            if (value.Equals((202).ToString()))
                return GraphicFieldType.FINGERPRINT;

            if (value.Equals((203).ToString()))
                return GraphicFieldType.EYE;

            if (value.Equals((204).ToString()))
                return GraphicFieldType.SIGNATURE;

            if (value.Equals((205).ToString()))
                return GraphicFieldType.BAR_CODE;

            if (value.Equals((206).ToString()))
                return GraphicFieldType.PROOF_OF_CITIZENSHIP;

            if (value.Equals((207).ToString()))
                return GraphicFieldType.DOCUMENT_FRONT;

            if (value.Equals((208).ToString()))
                return GraphicFieldType.DOCUMENT_REAR;

            if (value.Equals((209).ToString()))
                return GraphicFieldType.COLOR_DYNAMIC;

            if (value.Equals((210).ToString()))
                return GraphicFieldType.GHOST_PORTRAIT;

            if (value.Equals((211).ToString()))
                return GraphicFieldType.STAMP;

            if (value.Equals((212).ToString()))
                return GraphicFieldType.PORTRAIT_OF_CHILD;

            if (value.Equals((213).ToString()))
                return GraphicFieldType.CONTACT_CHIP;

            if (value.Equals((250).ToString()))
                return GraphicFieldType.OTHER;

            if (value.Equals((300).ToString()))
                return GraphicFieldType.FINGER_LEFT_THUMB;

            if (value.Equals((301).ToString()))
                return GraphicFieldType.FINGER_LEFT_INDEX;

            if (value.Equals((302).ToString()))
                return GraphicFieldType.FINGER_LEFT_MIDDLE;

            if (value.Equals((303).ToString()))
                return GraphicFieldType.FINGER_LEFT_RING;

            if (value.Equals((304).ToString()))
                return GraphicFieldType.FINGER_LEFT_LITTLE;

            if (value.Equals((305).ToString()))
                return GraphicFieldType.FINGER_RIGHT_THUMB;

            if (value.Equals((306).ToString()))
                return GraphicFieldType.FINGER_RIGHT_INDEX;

            if (value.Equals((307).ToString()))
                return GraphicFieldType.FINGER_RIGHT_MIDDLE;

            if (value.Equals((308).ToString()))
                return GraphicFieldType.FINGER_RIGHT_RING;

            if (value.Equals((309).ToString()))
                return GraphicFieldType.FINGER_RIGHT_LITTLE;

            if (value.Equals((313).ToString()))
                return GraphicFieldType.FINGER_RIGHT_FOUR_FINGERS;

            if (value.Equals((314).ToString()))
                return GraphicFieldType.FINGER_LEFT_FOUR_FINGERS;

            if (value.Equals((315).ToString()))
                return GraphicFieldType.FINGER_TWO_THUMBS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="GraphicFieldType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(GraphicFieldType value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GraphicFieldType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class GraphicFieldTypeJsonConverter : JsonConverter<GraphicFieldType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override GraphicFieldType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            GraphicFieldType? result = rawValue == null
                ? null
                : GraphicFieldTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the GraphicFieldType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="graphicFieldType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, GraphicFieldType graphicFieldType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(graphicFieldType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GraphicFieldType"/>
    /// </summary>
    public class GraphicFieldTypeNullableJsonConverter : JsonConverter<GraphicFieldType?>
    {
        /// <summary>
        /// Returns a GraphicFieldType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override GraphicFieldType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            GraphicFieldType? result = rawValue == null
                ? null
                : GraphicFieldTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="graphicFieldType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, GraphicFieldType? graphicFieldType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(graphicFieldType?.ToString() ?? "null");
        }
    }
}
