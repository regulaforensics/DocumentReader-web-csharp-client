/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ImagesResult
    /// </summary>
    [DataContract]
    public partial class ImagesResult : ResultItem,  IEquatable<ImagesResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesResult" /> class.
        /// </summary>
        [JsonConstructor]
        protected ImagesResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesResult" /> class.
        /// </summary>
        /// <param name="images">images (required).</param>
        public ImagesResult(Images images = default(Images), int bufLength = default(int), int light = default(int), int listIdx = default(int), int pageIdx = default(int), int resultType = default) : base(bufLength, light, listIdx, pageIdx, resultType)
        {
            // to ensure "images" is required (not null)
            if (images == null)
            {
                throw new InvalidDataException("images is a required property for ImagesResult and cannot be null");
            }
            else
            {
                this.Images = images;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name="Images", EmitDefaultValue=true)]
        public Images Images { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImagesResult {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImagesResult);
        }

        /// <summary>
        /// Returns true if ImagesResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ImagesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImagesResult input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Images == input.Images ||
                    (this.Images != null &&
                    this.Images.Equals(input.Images))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
