/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ImageQA
    /// </summary>
    [DataContract]
    public partial class ImageQA :  IEquatable<ImageQA>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageQA" /> class.
        /// </summary>
        /// <param name="brightnessThreshold">Set the threshold for an actual document brightness below which the check fails.</param>
        /// <param name="dpiThreshold">This parameter sets threshold for Image QA check of the presented document physical dpi. If actual document dpi is below this threshold, check will fail..</param>
        /// <param name="angleThreshold">This parameter sets threshold for Image QA check of the presented document perspective angle in degrees. If actual document perspective angle is above this threshold, check will fail..</param>
        /// <param name="focusCheck">This option enables focus check while performing image quality validation..</param>
        /// <param name="glaresCheck">This option enables glares check while performing image quality validation..</param>
        /// <param name="colornessCheck">This option enables colorness check while performing image quality validation..</param>
        /// <param name="moireCheck">This option enables screen capture (moire patterns) check while performing image quality validation..</param>
        /// <param name="documentPositionIndent">This parameter specifies the necessary margin. Default 0..</param>
        /// <param name="expectedPass">This parameter controls the quality checks that the image should pass to be considered a valid input during the scanning process..</param>
        public ImageQA(double brightnessThreshold = default(double), int dpiThreshold = default(int), int angleThreshold = default(int), bool? focusCheck = default(bool?), bool? glaresCheck = default(bool?), bool? colornessCheck = default(bool?), bool? moireCheck = default(bool?), int documentPositionIndent = default(int), List<InputImageQualityChecks> expectedPass = default(List<InputImageQualityChecks>))
        {
            this.BrightnessThreshold = brightnessThreshold;
            this.DpiThreshold = dpiThreshold;
            this.AngleThreshold = angleThreshold;
            this.FocusCheck = focusCheck;
            this.GlaresCheck = glaresCheck;
            this.ColornessCheck = colornessCheck;
            this.MoireCheck = moireCheck;
            this.DocumentPositionIndent = documentPositionIndent;
            this.ExpectedPass = expectedPass;
        }
        
        /// <summary>
        /// Set the threshold for an actual document brightness below which the check fails
        /// </summary>
        /// <value>Set the threshold for an actual document brightness below which the check fails</value>
        [DataMember(Name="brightnessThreshold", EmitDefaultValue=false)]
        public double BrightnessThreshold { get; set; }

        /// <summary>
        /// This parameter sets threshold for Image QA check of the presented document physical dpi. If actual document dpi is below this threshold, check will fail.
        /// </summary>
        /// <value>This parameter sets threshold for Image QA check of the presented document physical dpi. If actual document dpi is below this threshold, check will fail.</value>
        [DataMember(Name="dpiThreshold", EmitDefaultValue=false)]
        public int DpiThreshold { get; set; }

        /// <summary>
        /// This parameter sets threshold for Image QA check of the presented document perspective angle in degrees. If actual document perspective angle is above this threshold, check will fail.
        /// </summary>
        /// <value>This parameter sets threshold for Image QA check of the presented document perspective angle in degrees. If actual document perspective angle is above this threshold, check will fail.</value>
        [DataMember(Name="angleThreshold", EmitDefaultValue=false)]
        public int AngleThreshold { get; set; }

        /// <summary>
        /// This option enables focus check while performing image quality validation.
        /// </summary>
        /// <value>This option enables focus check while performing image quality validation.</value>
        [DataMember(Name="focusCheck", EmitDefaultValue=false)]
        public bool? FocusCheck { get; set; }

        /// <summary>
        /// This option enables glares check while performing image quality validation.
        /// </summary>
        /// <value>This option enables glares check while performing image quality validation.</value>
        [DataMember(Name="glaresCheck", EmitDefaultValue=false)]
        public bool? GlaresCheck { get; set; }

        /// <summary>
        /// This option enables colorness check while performing image quality validation.
        /// </summary>
        /// <value>This option enables colorness check while performing image quality validation.</value>
        [DataMember(Name="colornessCheck", EmitDefaultValue=false)]
        public bool? ColornessCheck { get; set; }

        /// <summary>
        /// This option enables screen capture (moire patterns) check while performing image quality validation.
        /// </summary>
        /// <value>This option enables screen capture (moire patterns) check while performing image quality validation.</value>
        [DataMember(Name="moireCheck", EmitDefaultValue=false)]
        public bool? MoireCheck { get; set; }

        /// <summary>
        /// This parameter specifies the necessary margin. Default 0.
        /// </summary>
        /// <value>This parameter specifies the necessary margin. Default 0.</value>
        [DataMember(Name="documentPositionIndent", EmitDefaultValue=false)]
        public int DocumentPositionIndent { get; set; }

        /// <summary>
        /// This parameter controls the quality checks that the image should pass to be considered a valid input during the scanning process.
        /// </summary>
        /// <value>This parameter controls the quality checks that the image should pass to be considered a valid input during the scanning process.</value>
        [DataMember(Name="expectedPass", EmitDefaultValue=false)]
        public List<InputImageQualityChecks> ExpectedPass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageQA {\n");
            sb.Append("  BrightnessThreshold: ").Append(BrightnessThreshold).Append("\n");
            sb.Append("  DpiThreshold: ").Append(DpiThreshold).Append("\n");
            sb.Append("  AngleThreshold: ").Append(AngleThreshold).Append("\n");
            sb.Append("  FocusCheck: ").Append(FocusCheck).Append("\n");
            sb.Append("  GlaresCheck: ").Append(GlaresCheck).Append("\n");
            sb.Append("  ColornessCheck: ").Append(ColornessCheck).Append("\n");
            sb.Append("  MoireCheck: ").Append(MoireCheck).Append("\n");
            sb.Append("  DocumentPositionIndent: ").Append(DocumentPositionIndent).Append("\n");
            sb.Append("  ExpectedPass: ").Append(ExpectedPass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageQA);
        }

        /// <summary>
        /// Returns true if ImageQA instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageQA to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageQA input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BrightnessThreshold == input.BrightnessThreshold ||
                    (this.BrightnessThreshold != null &&
                    this.BrightnessThreshold.Equals(input.BrightnessThreshold))
                ) && 
                (
                    this.DpiThreshold == input.DpiThreshold ||
                    (this.DpiThreshold != null &&
                    this.DpiThreshold.Equals(input.DpiThreshold))
                ) && 
                (
                    this.AngleThreshold == input.AngleThreshold ||
                    (this.AngleThreshold != null &&
                    this.AngleThreshold.Equals(input.AngleThreshold))
                ) && 
                (
                    this.FocusCheck == input.FocusCheck ||
                    (this.FocusCheck != null &&
                    this.FocusCheck.Equals(input.FocusCheck))
                ) && 
                (
                    this.GlaresCheck == input.GlaresCheck ||
                    (this.GlaresCheck != null &&
                    this.GlaresCheck.Equals(input.GlaresCheck))
                ) && 
                (
                    this.ColornessCheck == input.ColornessCheck ||
                    (this.ColornessCheck != null &&
                    this.ColornessCheck.Equals(input.ColornessCheck))
                ) && 
                (
                    this.MoireCheck == input.MoireCheck ||
                    (this.MoireCheck != null &&
                    this.MoireCheck.Equals(input.MoireCheck))
                ) && 
                (
                    this.DocumentPositionIndent == input.DocumentPositionIndent ||
                    (this.DocumentPositionIndent != null &&
                    this.DocumentPositionIndent.Equals(input.DocumentPositionIndent))
                ) && 
                (
                    this.ExpectedPass == input.ExpectedPass ||
                    this.ExpectedPass != null &&
                    input.ExpectedPass != null &&
                    this.ExpectedPass.SequenceEqual(input.ExpectedPass)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BrightnessThreshold != null)
                    hashCode = hashCode * 59 + this.BrightnessThreshold.GetHashCode();
                if (this.DpiThreshold != null)
                    hashCode = hashCode * 59 + this.DpiThreshold.GetHashCode();
                if (this.AngleThreshold != null)
                    hashCode = hashCode * 59 + this.AngleThreshold.GetHashCode();
                if (this.FocusCheck != null)
                    hashCode = hashCode * 59 + this.FocusCheck.GetHashCode();
                if (this.GlaresCheck != null)
                    hashCode = hashCode * 59 + this.GlaresCheck.GetHashCode();
                if (this.ColornessCheck != null)
                    hashCode = hashCode * 59 + this.ColornessCheck.GetHashCode();
                if (this.MoireCheck != null)
                    hashCode = hashCode * 59 + this.MoireCheck.GetHashCode();
                if (this.DocumentPositionIndent != null)
                    hashCode = hashCode * 59 + this.DocumentPositionIndent.GetHashCode();
                if (this.ExpectedPass != null)
                    hashCode = hashCode * 59 + this.ExpectedPass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
