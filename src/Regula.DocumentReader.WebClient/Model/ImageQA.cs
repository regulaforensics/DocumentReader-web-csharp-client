// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ImageQA
    /// </summary>
    public partial class ImageQA : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageQA" /> class.
        /// </summary>
        /// <param name="brightnessThreshold">Set the threshold for an actual document brightness below which the check fails</param>
        /// <param name="dpiThreshold">This parameter sets threshold for Image QA check of the presented document physical dpi. If actual document dpi is below this threshold, check will fail.</param>
        /// <param name="angleThreshold">This parameter sets threshold for Image QA check of the presented document perspective angle in degrees. If actual document perspective angle is above this threshold, check will fail.</param>
        /// <param name="focusCheck">This option enables focus check while performing image quality validation.</param>
        /// <param name="glaresCheck">This option enables glares check while performing image quality validation.</param>
        /// <param name="colornessCheck">This option enables colorness check while performing image quality validation.</param>
        /// <param name="moireCheck">This option enables screen capture (moire patterns) check while performing image quality validation.</param>
        /// <param name="documentPositionIndent">This parameter specifies the necessary margin. Default 0.</param>
        /// <param name="expectedPass">This parameter controls the quality checks that the image should pass to be considered a valid input during the scanning process.</param>
        [JsonConstructor]
        public ImageQA(Option<double?> brightnessThreshold = default, Option<int?> dpiThreshold = default, Option<int?> angleThreshold = default, Option<bool?> focusCheck = default, Option<bool?> glaresCheck = default, Option<bool?> colornessCheck = default, Option<bool?> moireCheck = default, Option<int?> documentPositionIndent = default, Option<List<InputImageQualityChecks>?> expectedPass = default)
        {
            BrightnessThresholdOption = brightnessThreshold;
            DpiThresholdOption = dpiThreshold;
            AngleThresholdOption = angleThreshold;
            FocusCheckOption = focusCheck;
            GlaresCheckOption = glaresCheck;
            ColornessCheckOption = colornessCheck;
            MoireCheckOption = moireCheck;
            DocumentPositionIndentOption = documentPositionIndent;
            ExpectedPassOption = expectedPass;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BrightnessThreshold
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BrightnessThresholdOption { get; private set; }

        /// <summary>
        /// Set the threshold for an actual document brightness below which the check fails
        /// </summary>
        /// <value>Set the threshold for an actual document brightness below which the check fails</value>
        [JsonPropertyName("brightnessThreshold")]
        public double? BrightnessThreshold { get { return this.BrightnessThresholdOption; } set { this.BrightnessThresholdOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of DpiThreshold
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DpiThresholdOption { get; private set; }

        /// <summary>
        /// This parameter sets threshold for Image QA check of the presented document physical dpi. If actual document dpi is below this threshold, check will fail.
        /// </summary>
        /// <value>This parameter sets threshold for Image QA check of the presented document physical dpi. If actual document dpi is below this threshold, check will fail.</value>
        [JsonPropertyName("dpiThreshold")]
        public int? DpiThreshold { get { return this.DpiThresholdOption; } set { this.DpiThresholdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of AngleThreshold
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AngleThresholdOption { get; private set; }

        /// <summary>
        /// This parameter sets threshold for Image QA check of the presented document perspective angle in degrees. If actual document perspective angle is above this threshold, check will fail.
        /// </summary>
        /// <value>This parameter sets threshold for Image QA check of the presented document perspective angle in degrees. If actual document perspective angle is above this threshold, check will fail.</value>
        [JsonPropertyName("angleThreshold")]
        public int? AngleThreshold { get { return this.AngleThresholdOption; } set { this.AngleThresholdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of FocusCheck
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FocusCheckOption { get; private set; }

        /// <summary>
        /// This option enables focus check while performing image quality validation.
        /// </summary>
        /// <value>This option enables focus check while performing image quality validation.</value>
        [JsonPropertyName("focusCheck")]
        public bool? FocusCheck { get { return this.FocusCheckOption; } set { this.FocusCheckOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of GlaresCheck
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> GlaresCheckOption { get; private set; }

        /// <summary>
        /// This option enables glares check while performing image quality validation.
        /// </summary>
        /// <value>This option enables glares check while performing image quality validation.</value>
        [JsonPropertyName("glaresCheck")]
        public bool? GlaresCheck { get { return this.GlaresCheckOption; } set { this.GlaresCheckOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ColornessCheck
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ColornessCheckOption { get; private set; }

        /// <summary>
        /// This option enables colorness check while performing image quality validation.
        /// </summary>
        /// <value>This option enables colorness check while performing image quality validation.</value>
        [JsonPropertyName("colornessCheck")]
        public bool? ColornessCheck { get { return this.ColornessCheckOption; } set { this.ColornessCheckOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of MoireCheck
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MoireCheckOption { get; private set; }

        /// <summary>
        /// This option enables screen capture (moire patterns) check while performing image quality validation.
        /// </summary>
        /// <value>This option enables screen capture (moire patterns) check while performing image quality validation.</value>
        [JsonPropertyName("moireCheck")]
        public bool? MoireCheck { get { return this.MoireCheckOption; } set { this.MoireCheckOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DocumentPositionIndent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DocumentPositionIndentOption { get; private set; }

        /// <summary>
        /// This parameter specifies the necessary margin. Default 0.
        /// </summary>
        /// <value>This parameter specifies the necessary margin. Default 0.</value>
        [JsonPropertyName("documentPositionIndent")]
        public int? DocumentPositionIndent { get { return this.DocumentPositionIndentOption; } set { this.DocumentPositionIndentOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ExpectedPass
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<InputImageQualityChecks>?> ExpectedPassOption { get; private set; }

        /// <summary>
        /// This parameter controls the quality checks that the image should pass to be considered a valid input during the scanning process.
        /// </summary>
        /// <value>This parameter controls the quality checks that the image should pass to be considered a valid input during the scanning process.</value>
        [JsonPropertyName("expectedPass")]
        public List<InputImageQualityChecks>? ExpectedPass { get { return this.ExpectedPassOption; } set { this.ExpectedPassOption = new Option<List<InputImageQualityChecks>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImageQA {\n");
            sb.Append("  BrightnessThreshold: ").Append(BrightnessThreshold).Append("\n");
            sb.Append("  DpiThreshold: ").Append(DpiThreshold).Append("\n");
            sb.Append("  AngleThreshold: ").Append(AngleThreshold).Append("\n");
            sb.Append("  FocusCheck: ").Append(FocusCheck).Append("\n");
            sb.Append("  GlaresCheck: ").Append(GlaresCheck).Append("\n");
            sb.Append("  ColornessCheck: ").Append(ColornessCheck).Append("\n");
            sb.Append("  MoireCheck: ").Append(MoireCheck).Append("\n");
            sb.Append("  DocumentPositionIndent: ").Append(DocumentPositionIndent).Append("\n");
            sb.Append("  ExpectedPass: ").Append(ExpectedPass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImageQA" />
    /// </summary>
    public class ImageQAJsonConverter : JsonConverter<ImageQA>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImageQA" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImageQA Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> brightnessThreshold = default;
            Option<int?> dpiThreshold = default;
            Option<int?> angleThreshold = default;
            Option<bool?> focusCheck = default;
            Option<bool?> glaresCheck = default;
            Option<bool?> colornessCheck = default;
            Option<bool?> moireCheck = default;
            Option<int?> documentPositionIndent = default;
            Option<List<InputImageQualityChecks>?> expectedPass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "brightnessThreshold":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                brightnessThreshold = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "dpiThreshold":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dpiThreshold = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "angleThreshold":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                angleThreshold = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "focusCheck":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                focusCheck = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "glaresCheck":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                glaresCheck = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "colornessCheck":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                colornessCheck = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "moireCheck":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                moireCheck = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "documentPositionIndent":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                documentPositionIndent = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "expectedPass":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expectedPass = new Option<List<InputImageQualityChecks>?>(JsonSerializer.Deserialize<List<InputImageQualityChecks>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (brightnessThreshold.IsSet && brightnessThreshold.Value == null)
                throw new ArgumentNullException(nameof(brightnessThreshold), "Property is not nullable for class ImageQA.");

            if (dpiThreshold.IsSet && dpiThreshold.Value == null)
                throw new ArgumentNullException(nameof(dpiThreshold), "Property is not nullable for class ImageQA.");

            if (angleThreshold.IsSet && angleThreshold.Value == null)
                throw new ArgumentNullException(nameof(angleThreshold), "Property is not nullable for class ImageQA.");

            if (focusCheck.IsSet && focusCheck.Value == null)
                throw new ArgumentNullException(nameof(focusCheck), "Property is not nullable for class ImageQA.");

            if (glaresCheck.IsSet && glaresCheck.Value == null)
                throw new ArgumentNullException(nameof(glaresCheck), "Property is not nullable for class ImageQA.");

            if (colornessCheck.IsSet && colornessCheck.Value == null)
                throw new ArgumentNullException(nameof(colornessCheck), "Property is not nullable for class ImageQA.");

            if (moireCheck.IsSet && moireCheck.Value == null)
                throw new ArgumentNullException(nameof(moireCheck), "Property is not nullable for class ImageQA.");

            if (documentPositionIndent.IsSet && documentPositionIndent.Value == null)
                throw new ArgumentNullException(nameof(documentPositionIndent), "Property is not nullable for class ImageQA.");

            if (expectedPass.IsSet && expectedPass.Value == null)
                throw new ArgumentNullException(nameof(expectedPass), "Property is not nullable for class ImageQA.");

            return new ImageQA(brightnessThreshold, dpiThreshold, angleThreshold, focusCheck, glaresCheck, colornessCheck, moireCheck, documentPositionIndent, expectedPass);
        }

        /// <summary>
        /// Serializes a <see cref="ImageQA" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imageQA"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImageQA imageQA, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, imageQA, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImageQA" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imageQA"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImageQA imageQA, JsonSerializerOptions jsonSerializerOptions)
        {
            if (imageQA.ExpectedPassOption.IsSet && imageQA.ExpectedPass == null)
                throw new ArgumentNullException(nameof(imageQA.ExpectedPass), "Property is required for class ImageQA.");

            if (imageQA.BrightnessThresholdOption.IsSet)
                writer.WriteNumber("brightnessThreshold", imageQA.BrightnessThresholdOption.Value!.Value);

            if (imageQA.DpiThresholdOption.IsSet)
                writer.WriteNumber("dpiThreshold", imageQA.DpiThresholdOption.Value!.Value);

            if (imageQA.AngleThresholdOption.IsSet)
                writer.WriteNumber("angleThreshold", imageQA.AngleThresholdOption.Value!.Value);

            if (imageQA.FocusCheckOption.IsSet)
                writer.WriteBoolean("focusCheck", imageQA.FocusCheckOption.Value!.Value);

            if (imageQA.GlaresCheckOption.IsSet)
                writer.WriteBoolean("glaresCheck", imageQA.GlaresCheckOption.Value!.Value);

            if (imageQA.ColornessCheckOption.IsSet)
                writer.WriteBoolean("colornessCheck", imageQA.ColornessCheckOption.Value!.Value);

            if (imageQA.MoireCheckOption.IsSet)
                writer.WriteBoolean("moireCheck", imageQA.MoireCheckOption.Value!.Value);

            if (imageQA.DocumentPositionIndentOption.IsSet)
                writer.WriteNumber("documentPositionIndent", imageQA.DocumentPositionIndentOption.Value!.Value);

            if (imageQA.ExpectedPassOption.IsSet)
            {
                writer.WritePropertyName("expectedPass");
                JsonSerializer.Serialize(writer, imageQA.ExpectedPass, jsonSerializerOptions);
            }
        }
    }
}
