/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 5.5.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ImageQA
    /// </summary>
    [DataContract]
    public partial class ImageQA :  IEquatable<ImageQA>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageQA" /> class.
        /// </summary>
        /// <param name="dpiThreshold">This parameter sets threshold for Image QA check of the presented document physical dpi. If actual document dpi is below this threshold, check will fail. (default to 150).</param>
        /// <param name="angleThreshold">This parameter sets threshold for Image QA check of the presented document perspective angle in degrees. If actual document perspective angle is above this threshold, check will fail. (default to 5).</param>
        public ImageQA(int dpiThreshold = 150, int angleThreshold = 5)
        {
            // use default value if no "dpiThreshold" provided
            if (dpiThreshold == null)
            {
                this.DpiThreshold = 150;
            }
            else
            {
                this.DpiThreshold = dpiThreshold;
            }
            // use default value if no "angleThreshold" provided
            if (angleThreshold == null)
            {
                this.AngleThreshold = 5;
            }
            else
            {
                this.AngleThreshold = angleThreshold;
            }
        }
        
        /// <summary>
        /// This parameter sets threshold for Image QA check of the presented document physical dpi. If actual document dpi is below this threshold, check will fail.
        /// </summary>
        /// <value>This parameter sets threshold for Image QA check of the presented document physical dpi. If actual document dpi is below this threshold, check will fail.</value>
        [DataMember(Name="dpiThreshold", EmitDefaultValue=false)]
        public int DpiThreshold { get; set; }

        /// <summary>
        /// This parameter sets threshold for Image QA check of the presented document perspective angle in degrees. If actual document perspective angle is above this threshold, check will fail.
        /// </summary>
        /// <value>This parameter sets threshold for Image QA check of the presented document perspective angle in degrees. If actual document perspective angle is above this threshold, check will fail.</value>
        [DataMember(Name="angleThreshold", EmitDefaultValue=false)]
        public int AngleThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageQA {\n");
            sb.Append("  DpiThreshold: ").Append(DpiThreshold).Append("\n");
            sb.Append("  AngleThreshold: ").Append(AngleThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageQA);
        }

        /// <summary>
        /// Returns true if ImageQA instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageQA to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageQA input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DpiThreshold == input.DpiThreshold ||
                    (this.DpiThreshold != null &&
                    this.DpiThreshold.Equals(input.DpiThreshold))
                ) && 
                (
                    this.AngleThreshold == input.AngleThreshold ||
                    (this.AngleThreshold != null &&
                    this.AngleThreshold.Equals(input.AngleThreshold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DpiThreshold != null)
                    hashCode = hashCode * 59 + this.DpiThreshold.GetHashCode();
                if (this.AngleThreshold != null)
                    hashCode = hashCode * 59 + this.AngleThreshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
