/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// MRZTestQuality
    /// </summary>
    [DataContract(Name = "MRZTestQuality")]
    public partial class MRZTestQuality : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MRZTestQuality" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MRZTestQuality() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MRZTestQuality" /> class.
        /// </summary>
        /// <param name="cHECKSUMS">cHECKSUMS (required).</param>
        /// <param name="cONTRASTPRINT">cONTRASTPRINT (required).</param>
        /// <param name="dOCFORMAT">dOCFORMAT (required).</param>
        /// <param name="mRZFORMAT">mRZFORMAT (required).</param>
        /// <param name="pRINTPOSITION">pRINTPOSITION (required).</param>
        /// <param name="sTAINMRZ">sTAINMRZ (required).</param>
        /// <param name="sYMBOLSPARAM">sYMBOLSPARAM (required).</param>
        /// <param name="strCount">strCount (required).</param>
        /// <param name="strings">strings (required).</param>
        /// <param name="tEXTUALFILLING">tEXTUALFILLING (required).</param>
        public MRZTestQuality(int cHECKSUMS = default(int), int cONTRASTPRINT = default(int), int dOCFORMAT = default(int), int mRZFORMAT = default(int), int pRINTPOSITION = default(int), int sTAINMRZ = default(int), int sYMBOLSPARAM = default(int), int strCount = default(int), List<StringItem> strings = default(List<StringItem>), int tEXTUALFILLING = default(int))
        {
            this.CHECK_SUMS = cHECKSUMS;
            this.CONTRAST_PRINT = cONTRASTPRINT;
            this.DOC_FORMAT = dOCFORMAT;
            this.MRZ_FORMAT = mRZFORMAT;
            this.PRINT_POSITION = pRINTPOSITION;
            this.STAIN_MRZ = sTAINMRZ;
            this.SYMBOLS_PARAM = sYMBOLSPARAM;
            this.StrCount = strCount;
            // to ensure "strings" is required (not null)
            if (strings == null)
            {
                throw new ArgumentNullException("strings is a required property for MRZTestQuality and cannot be null");
            }
            this.Strings = strings;
            this.TEXTUAL_FILLING = tEXTUALFILLING;
        }

        /// <summary>
        /// Gets or Sets CHECK_SUMS
        /// </summary>
        [DataMember(Name = "CHECK_SUMS", IsRequired = true, EmitDefaultValue = true)]
        public int CHECK_SUMS { get; set; }

        /// <summary>
        /// Gets or Sets CONTRAST_PRINT
        /// </summary>
        [DataMember(Name = "CONTRAST_PRINT", IsRequired = true, EmitDefaultValue = true)]
        public int CONTRAST_PRINT { get; set; }

        /// <summary>
        /// Gets or Sets DOC_FORMAT
        /// </summary>
        [DataMember(Name = "DOC_FORMAT", IsRequired = true, EmitDefaultValue = true)]
        public int DOC_FORMAT { get; set; }

        /// <summary>
        /// Gets or Sets MRZ_FORMAT
        /// </summary>
        [DataMember(Name = "MRZ_FORMAT", IsRequired = true, EmitDefaultValue = true)]
        public int MRZ_FORMAT { get; set; }

        /// <summary>
        /// Gets or Sets PRINT_POSITION
        /// </summary>
        [DataMember(Name = "PRINT_POSITION", IsRequired = true, EmitDefaultValue = true)]
        public int PRINT_POSITION { get; set; }

        /// <summary>
        /// Gets or Sets STAIN_MRZ
        /// </summary>
        [DataMember(Name = "STAIN_MRZ", IsRequired = true, EmitDefaultValue = true)]
        public int STAIN_MRZ { get; set; }

        /// <summary>
        /// Gets or Sets SYMBOLS_PARAM
        /// </summary>
        [DataMember(Name = "SYMBOLS_PARAM", IsRequired = true, EmitDefaultValue = true)]
        public int SYMBOLS_PARAM { get; set; }

        /// <summary>
        /// Gets or Sets StrCount
        /// </summary>
        [DataMember(Name = "StrCount", IsRequired = true, EmitDefaultValue = true)]
        public int StrCount { get; set; }

        /// <summary>
        /// Gets or Sets Strings
        /// </summary>
        [DataMember(Name = "Strings", IsRequired = true, EmitDefaultValue = true)]
        public List<StringItem> Strings { get; set; }

        /// <summary>
        /// Gets or Sets TEXTUAL_FILLING
        /// </summary>
        [DataMember(Name = "TEXTUAL_FILLING", IsRequired = true, EmitDefaultValue = true)]
        public int TEXTUAL_FILLING { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MRZTestQuality {\n");
            sb.Append("  CHECK_SUMS: ").Append(CHECK_SUMS).Append("\n");
            sb.Append("  CONTRAST_PRINT: ").Append(CONTRAST_PRINT).Append("\n");
            sb.Append("  DOC_FORMAT: ").Append(DOC_FORMAT).Append("\n");
            sb.Append("  MRZ_FORMAT: ").Append(MRZ_FORMAT).Append("\n");
            sb.Append("  PRINT_POSITION: ").Append(PRINT_POSITION).Append("\n");
            sb.Append("  STAIN_MRZ: ").Append(STAIN_MRZ).Append("\n");
            sb.Append("  SYMBOLS_PARAM: ").Append(SYMBOLS_PARAM).Append("\n");
            sb.Append("  StrCount: ").Append(StrCount).Append("\n");
            sb.Append("  Strings: ").Append(Strings).Append("\n");
            sb.Append("  TEXTUAL_FILLING: ").Append(TEXTUAL_FILLING).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
