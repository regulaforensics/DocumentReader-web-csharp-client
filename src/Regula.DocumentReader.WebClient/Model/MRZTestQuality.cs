// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// MRZTestQuality
    /// </summary>
    public partial class MRZTestQuality : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MRZTestQuality" /> class.
        /// </summary>
        /// <param name="cHECKSUMS">cHECKSUMS</param>
        /// <param name="cONTRASTPRINT">cONTRASTPRINT</param>
        /// <param name="dOCFORMAT">dOCFORMAT</param>
        /// <param name="mRZFORMAT">mRZFORMAT</param>
        /// <param name="pRINTPOSITION">pRINTPOSITION</param>
        /// <param name="sTAINMRZ">sTAINMRZ</param>
        /// <param name="sYMBOLSPARAM">sYMBOLSPARAM</param>
        /// <param name="strCount">strCount</param>
        /// <param name="strings">strings</param>
        /// <param name="tEXTUALFILLING">tEXTUALFILLING</param>
        [JsonConstructor]
        public MRZTestQuality(int cHECKSUMS, int cONTRASTPRINT, int dOCFORMAT, int mRZFORMAT, int pRINTPOSITION, int sTAINMRZ, int sYMBOLSPARAM, int strCount, List<StringItem> strings, int tEXTUALFILLING)
        {
            CHECK_SUMS = cHECKSUMS;
            CONTRAST_PRINT = cONTRASTPRINT;
            DOC_FORMAT = dOCFORMAT;
            MRZ_FORMAT = mRZFORMAT;
            PRINT_POSITION = pRINTPOSITION;
            STAIN_MRZ = sTAINMRZ;
            SYMBOLS_PARAM = sYMBOLSPARAM;
            StrCount = strCount;
            Strings = strings;
            TEXTUAL_FILLING = tEXTUALFILLING;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CHECK_SUMS
        /// </summary>
        [JsonPropertyName("CHECK_SUMS")]
        public int CHECK_SUMS { get; set; }

        /// <summary>
        /// Gets or Sets CONTRAST_PRINT
        /// </summary>
        [JsonPropertyName("CONTRAST_PRINT")]
        public int CONTRAST_PRINT { get; set; }

        /// <summary>
        /// Gets or Sets DOC_FORMAT
        /// </summary>
        [JsonPropertyName("DOC_FORMAT")]
        public int DOC_FORMAT { get; set; }

        /// <summary>
        /// Gets or Sets MRZ_FORMAT
        /// </summary>
        [JsonPropertyName("MRZ_FORMAT")]
        public int MRZ_FORMAT { get; set; }

        /// <summary>
        /// Gets or Sets PRINT_POSITION
        /// </summary>
        [JsonPropertyName("PRINT_POSITION")]
        public int PRINT_POSITION { get; set; }

        /// <summary>
        /// Gets or Sets STAIN_MRZ
        /// </summary>
        [JsonPropertyName("STAIN_MRZ")]
        public int STAIN_MRZ { get; set; }

        /// <summary>
        /// Gets or Sets SYMBOLS_PARAM
        /// </summary>
        [JsonPropertyName("SYMBOLS_PARAM")]
        public int SYMBOLS_PARAM { get; set; }

        /// <summary>
        /// Gets or Sets StrCount
        /// </summary>
        [JsonPropertyName("StrCount")]
        public int StrCount { get; set; }

        /// <summary>
        /// Gets or Sets Strings
        /// </summary>
        [JsonPropertyName("Strings")]
        public List<StringItem> Strings { get; set; }

        /// <summary>
        /// Gets or Sets TEXTUAL_FILLING
        /// </summary>
        [JsonPropertyName("TEXTUAL_FILLING")]
        public int TEXTUAL_FILLING { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MRZTestQuality {\n");
            sb.Append("  CHECK_SUMS: ").Append(CHECK_SUMS).Append("\n");
            sb.Append("  CONTRAST_PRINT: ").Append(CONTRAST_PRINT).Append("\n");
            sb.Append("  DOC_FORMAT: ").Append(DOC_FORMAT).Append("\n");
            sb.Append("  MRZ_FORMAT: ").Append(MRZ_FORMAT).Append("\n");
            sb.Append("  PRINT_POSITION: ").Append(PRINT_POSITION).Append("\n");
            sb.Append("  STAIN_MRZ: ").Append(STAIN_MRZ).Append("\n");
            sb.Append("  SYMBOLS_PARAM: ").Append(SYMBOLS_PARAM).Append("\n");
            sb.Append("  StrCount: ").Append(StrCount).Append("\n");
            sb.Append("  Strings: ").Append(Strings).Append("\n");
            sb.Append("  TEXTUAL_FILLING: ").Append(TEXTUAL_FILLING).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MRZTestQuality" />
    /// </summary>
    public class MRZTestQualityJsonConverter : JsonConverter<MRZTestQuality>
    {
        /// <summary>
        /// Deserializes json to <see cref="MRZTestQuality" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MRZTestQuality Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> cHECKSUMS = default;
            Option<int?> cONTRASTPRINT = default;
            Option<int?> dOCFORMAT = default;
            Option<int?> mRZFORMAT = default;
            Option<int?> pRINTPOSITION = default;
            Option<int?> sTAINMRZ = default;
            Option<int?> sYMBOLSPARAM = default;
            Option<int?> strCount = default;
            Option<List<StringItem>?> strings = default;
            Option<int?> tEXTUALFILLING = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "CHECK_SUMS":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cHECKSUMS = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "CONTRAST_PRINT":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cONTRASTPRINT = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "DOC_FORMAT":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dOCFORMAT = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "MRZ_FORMAT":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mRZFORMAT = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "PRINT_POSITION":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pRINTPOSITION = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "STAIN_MRZ":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sTAINMRZ = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "SYMBOLS_PARAM":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sYMBOLSPARAM = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "StrCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                strCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Strings":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                strings = new Option<List<StringItem>?>(JsonSerializer.Deserialize<List<StringItem>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "TEXTUAL_FILLING":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tEXTUALFILLING = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!cHECKSUMS.IsSet)
                throw new ArgumentException("Property is required for class MRZTestQuality.", nameof(cHECKSUMS));

            if (!cONTRASTPRINT.IsSet)
                throw new ArgumentException("Property is required for class MRZTestQuality.", nameof(cONTRASTPRINT));

            if (!dOCFORMAT.IsSet)
                throw new ArgumentException("Property is required for class MRZTestQuality.", nameof(dOCFORMAT));

            if (!mRZFORMAT.IsSet)
                throw new ArgumentException("Property is required for class MRZTestQuality.", nameof(mRZFORMAT));

            if (!pRINTPOSITION.IsSet)
                throw new ArgumentException("Property is required for class MRZTestQuality.", nameof(pRINTPOSITION));

            if (!sTAINMRZ.IsSet)
                throw new ArgumentException("Property is required for class MRZTestQuality.", nameof(sTAINMRZ));

            if (!sYMBOLSPARAM.IsSet)
                throw new ArgumentException("Property is required for class MRZTestQuality.", nameof(sYMBOLSPARAM));

            if (!strCount.IsSet)
                throw new ArgumentException("Property is required for class MRZTestQuality.", nameof(strCount));

            if (!strings.IsSet)
                throw new ArgumentException("Property is required for class MRZTestQuality.", nameof(strings));

            if (!tEXTUALFILLING.IsSet)
                throw new ArgumentException("Property is required for class MRZTestQuality.", nameof(tEXTUALFILLING));

            if (cHECKSUMS.IsSet && cHECKSUMS.Value == null)
                throw new ArgumentNullException(nameof(cHECKSUMS), "Property is not nullable for class MRZTestQuality.");

            if (cONTRASTPRINT.IsSet && cONTRASTPRINT.Value == null)
                throw new ArgumentNullException(nameof(cONTRASTPRINT), "Property is not nullable for class MRZTestQuality.");

            if (dOCFORMAT.IsSet && dOCFORMAT.Value == null)
                throw new ArgumentNullException(nameof(dOCFORMAT), "Property is not nullable for class MRZTestQuality.");

            if (mRZFORMAT.IsSet && mRZFORMAT.Value == null)
                throw new ArgumentNullException(nameof(mRZFORMAT), "Property is not nullable for class MRZTestQuality.");

            if (pRINTPOSITION.IsSet && pRINTPOSITION.Value == null)
                throw new ArgumentNullException(nameof(pRINTPOSITION), "Property is not nullable for class MRZTestQuality.");

            if (sTAINMRZ.IsSet && sTAINMRZ.Value == null)
                throw new ArgumentNullException(nameof(sTAINMRZ), "Property is not nullable for class MRZTestQuality.");

            if (sYMBOLSPARAM.IsSet && sYMBOLSPARAM.Value == null)
                throw new ArgumentNullException(nameof(sYMBOLSPARAM), "Property is not nullable for class MRZTestQuality.");

            if (strCount.IsSet && strCount.Value == null)
                throw new ArgumentNullException(nameof(strCount), "Property is not nullable for class MRZTestQuality.");

            if (strings.IsSet && strings.Value == null)
                throw new ArgumentNullException(nameof(strings), "Property is not nullable for class MRZTestQuality.");

            if (tEXTUALFILLING.IsSet && tEXTUALFILLING.Value == null)
                throw new ArgumentNullException(nameof(tEXTUALFILLING), "Property is not nullable for class MRZTestQuality.");

            return new MRZTestQuality(cHECKSUMS.Value!.Value!, cONTRASTPRINT.Value!.Value!, dOCFORMAT.Value!.Value!, mRZFORMAT.Value!.Value!, pRINTPOSITION.Value!.Value!, sTAINMRZ.Value!.Value!, sYMBOLSPARAM.Value!.Value!, strCount.Value!.Value!, strings.Value!, tEXTUALFILLING.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="MRZTestQuality" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mRZTestQuality"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MRZTestQuality mRZTestQuality, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, mRZTestQuality, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MRZTestQuality" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mRZTestQuality"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MRZTestQuality mRZTestQuality, JsonSerializerOptions jsonSerializerOptions)
        {
            if (mRZTestQuality.Strings == null)
                throw new ArgumentNullException(nameof(mRZTestQuality.Strings), "Property is required for class MRZTestQuality.");

            writer.WriteNumber("CHECK_SUMS", mRZTestQuality.CHECK_SUMS);

            writer.WriteNumber("CONTRAST_PRINT", mRZTestQuality.CONTRAST_PRINT);

            writer.WriteNumber("DOC_FORMAT", mRZTestQuality.DOC_FORMAT);

            writer.WriteNumber("MRZ_FORMAT", mRZTestQuality.MRZ_FORMAT);

            writer.WriteNumber("PRINT_POSITION", mRZTestQuality.PRINT_POSITION);

            writer.WriteNumber("STAIN_MRZ", mRZTestQuality.STAIN_MRZ);

            writer.WriteNumber("SYMBOLS_PARAM", mRZTestQuality.SYMBOLS_PARAM);

            writer.WriteNumber("StrCount", mRZTestQuality.StrCount);

            writer.WritePropertyName("Strings");
            JsonSerializer.Serialize(writer, mRZTestQuality.Strings, jsonSerializerOptions);
            writer.WriteNumber("TEXTUAL_FILLING", mRZTestQuality.TEXTUAL_FILLING);
        }
    }
}
