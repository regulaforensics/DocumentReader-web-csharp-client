/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// GraphData
    /// </summary>
    [DataContract(Name = "GraphData")]
    public partial class GraphData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GraphData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphData" /> class.
        /// </summary>
        /// <param name="fieldType">fieldType (required).</param>
        /// <param name="fileImage">fileImage (required).</param>
        /// <param name="graphicsType">graphicsType (required).</param>
        /// <param name="originDG">originDG (required).</param>
        /// <param name="originDGTag">originDGTag (required).</param>
        /// <param name="originEntryView">originEntryView (required).</param>
        /// <param name="originTagEntry">originTagEntry (required).</param>
        public GraphData(int fieldType = default(int), FileImage fileImage = default(FileImage), int graphicsType = default(int), int originDG = default(int), int originDGTag = default(int), int originEntryView = default(int), int originTagEntry = default(int))
        {
            this.FieldType = fieldType;
            // to ensure "fileImage" is required (not null)
            if (fileImage == null)
            {
                throw new ArgumentNullException("fileImage is a required property for GraphData and cannot be null");
            }
            this.FileImage = fileImage;
            this.GraphicsType = graphicsType;
            this.OriginDG = originDG;
            this.OriginDGTag = originDGTag;
            this.OriginEntryView = originEntryView;
            this.OriginTagEntry = originTagEntry;
        }

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name = "FieldType", IsRequired = true, EmitDefaultValue = true)]
        public int FieldType { get; set; }

        /// <summary>
        /// Gets or Sets FileImage
        /// </summary>
        [DataMember(Name = "File_Image", IsRequired = true, EmitDefaultValue = true)]
        public FileImage FileImage { get; set; }

        /// <summary>
        /// Gets or Sets GraphicsType
        /// </summary>
        [DataMember(Name = "GraphicsType", IsRequired = true, EmitDefaultValue = true)]
        public int GraphicsType { get; set; }

        /// <summary>
        /// Gets or Sets OriginDG
        /// </summary>
        [DataMember(Name = "OriginDG", IsRequired = true, EmitDefaultValue = true)]
        public int OriginDG { get; set; }

        /// <summary>
        /// Gets or Sets OriginDGTag
        /// </summary>
        [DataMember(Name = "OriginDGTag", IsRequired = true, EmitDefaultValue = true)]
        public int OriginDGTag { get; set; }

        /// <summary>
        /// Gets or Sets OriginEntryView
        /// </summary>
        [DataMember(Name = "OriginEntryView", IsRequired = true, EmitDefaultValue = true)]
        public int OriginEntryView { get; set; }

        /// <summary>
        /// Gets or Sets OriginTagEntry
        /// </summary>
        [DataMember(Name = "OriginTagEntry", IsRequired = true, EmitDefaultValue = true)]
        public int OriginTagEntry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GraphData {\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  FileImage: ").Append(FileImage).Append("\n");
            sb.Append("  GraphicsType: ").Append(GraphicsType).Append("\n");
            sb.Append("  OriginDG: ").Append(OriginDG).Append("\n");
            sb.Append("  OriginDGTag: ").Append(OriginDGTag).Append("\n");
            sb.Append("  OriginEntryView: ").Append(OriginEntryView).Append("\n");
            sb.Append("  OriginTagEntry: ").Append(OriginTagEntry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
