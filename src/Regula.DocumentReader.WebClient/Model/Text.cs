// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Contains all document text fields data with validity and cross-source compare checks
    /// </summary>
    public partial class Text : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Text" /> class.
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="validityStatus">validityStatus</param>
        /// <param name="comparisonStatus">comparisonStatus</param>
        /// <param name="dateFormat">Date format</param>
        /// <param name="fieldList">fieldList</param>
        /// <param name="availableSourceList">availableSourceList</param>
        [JsonConstructor]
        public Text(CheckResult status, CheckResult validityStatus, CheckResult comparisonStatus, string dateFormat, List<TextField> fieldList, List<TextAvailableSource> availableSourceList)
        {
            Status = status;
            ValidityStatus = validityStatus;
            ComparisonStatus = comparisonStatus;
            DateFormat = dateFormat;
            FieldList = fieldList;
            AvailableSourceList = availableSourceList;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public CheckResult Status { get; set; }

        /// <summary>
        /// Gets or Sets ValidityStatus
        /// </summary>
        [JsonPropertyName("validityStatus")]
        public CheckResult ValidityStatus { get; set; }

        /// <summary>
        /// Gets or Sets ComparisonStatus
        /// </summary>
        [JsonPropertyName("comparisonStatus")]
        public CheckResult ComparisonStatus { get; set; }

        /// <summary>
        /// Date format
        /// </summary>
        /// <value>Date format</value>
        [JsonPropertyName("dateFormat")]
        public string DateFormat { get; set; }

        /// <summary>
        /// Gets or Sets FieldList
        /// </summary>
        [JsonPropertyName("fieldList")]
        public List<TextField> FieldList { get; set; }

        /// <summary>
        /// Gets or Sets AvailableSourceList
        /// </summary>
        [JsonPropertyName("availableSourceList")]
        public List<TextAvailableSource> AvailableSourceList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Text {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ValidityStatus: ").Append(ValidityStatus).Append("\n");
            sb.Append("  ComparisonStatus: ").Append(ComparisonStatus).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  FieldList: ").Append(FieldList).Append("\n");
            sb.Append("  AvailableSourceList: ").Append(AvailableSourceList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Text" />
    /// </summary>
    public class TextJsonConverter : JsonConverter<Text>
    {
        /// <summary>
        /// Deserializes json to <see cref="Text" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Text Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CheckResult?> status = default;
            Option<CheckResult?> validityStatus = default;
            Option<CheckResult?> comparisonStatus = default;
            Option<string?> dateFormat = default;
            Option<List<TextField>?> fieldList = default;
            Option<List<TextAvailableSource>?> availableSourceList = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "validityStatus":
                            string? validityStatusRawValue = utf8JsonReader.GetString();
                            if (validityStatusRawValue != null)
                                validityStatus = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(validityStatusRawValue));
                            break;
                        case "comparisonStatus":
                            string? comparisonStatusRawValue = utf8JsonReader.GetString();
                            if (comparisonStatusRawValue != null)
                                comparisonStatus = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(comparisonStatusRawValue));
                            break;
                        case "dateFormat":
                            dateFormat = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fieldList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldList = new Option<List<TextField>?>(JsonSerializer.Deserialize<List<TextField>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "availableSourceList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                availableSourceList = new Option<List<TextAvailableSource>?>(JsonSerializer.Deserialize<List<TextAvailableSource>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class Text.", nameof(status));

            if (!validityStatus.IsSet)
                throw new ArgumentException("Property is required for class Text.", nameof(validityStatus));

            if (!comparisonStatus.IsSet)
                throw new ArgumentException("Property is required for class Text.", nameof(comparisonStatus));

            if (!dateFormat.IsSet)
                throw new ArgumentException("Property is required for class Text.", nameof(dateFormat));

            if (!fieldList.IsSet)
                throw new ArgumentException("Property is required for class Text.", nameof(fieldList));

            if (!availableSourceList.IsSet)
                throw new ArgumentException("Property is required for class Text.", nameof(availableSourceList));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Text.");

            if (validityStatus.IsSet && validityStatus.Value == null)
                throw new ArgumentNullException(nameof(validityStatus), "Property is not nullable for class Text.");

            if (comparisonStatus.IsSet && comparisonStatus.Value == null)
                throw new ArgumentNullException(nameof(comparisonStatus), "Property is not nullable for class Text.");

            if (dateFormat.IsSet && dateFormat.Value == null)
                throw new ArgumentNullException(nameof(dateFormat), "Property is not nullable for class Text.");

            if (fieldList.IsSet && fieldList.Value == null)
                throw new ArgumentNullException(nameof(fieldList), "Property is not nullable for class Text.");

            if (availableSourceList.IsSet && availableSourceList.Value == null)
                throw new ArgumentNullException(nameof(availableSourceList), "Property is not nullable for class Text.");

            return new Text(status.Value!.Value!, validityStatus.Value!.Value!, comparisonStatus.Value!.Value!, dateFormat.Value!, fieldList.Value!, availableSourceList.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Text" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="text"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Text text, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, text, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Text" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="text"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Text text, JsonSerializerOptions jsonSerializerOptions)
        {
            if (text.DateFormat == null)
                throw new ArgumentNullException(nameof(text.DateFormat), "Property is required for class Text.");

            if (text.FieldList == null)
                throw new ArgumentNullException(nameof(text.FieldList), "Property is required for class Text.");

            if (text.AvailableSourceList == null)
                throw new ArgumentNullException(nameof(text.AvailableSourceList), "Property is required for class Text.");

            var statusRawValue = CheckResultValueConverter.ToJsonValue(text.Status);
            writer.WriteNumber("status", statusRawValue);

            var validityStatusRawValue = CheckResultValueConverter.ToJsonValue(text.ValidityStatus);
            writer.WriteNumber("validityStatus", validityStatusRawValue);

            var comparisonStatusRawValue = CheckResultValueConverter.ToJsonValue(text.ComparisonStatus);
            writer.WriteNumber("comparisonStatus", comparisonStatusRawValue);

            writer.WriteString("dateFormat", text.DateFormat);

            writer.WritePropertyName("fieldList");
            JsonSerializer.Serialize(writer, text.FieldList, jsonSerializerOptions);
            writer.WritePropertyName("availableSourceList");
            JsonSerializer.Serialize(writer, text.AvailableSourceList, jsonSerializerOptions);
        }
    }
}
