/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Contains all document text fields data with validity and cross-source compare checks
    /// </summary>
    [DataContract(Name = "Text")]
    public partial class Text : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult Status { get; set; }

        /// <summary>
        /// Gets or Sets ValidityStatus
        /// </summary>
        [DataMember(Name = "validityStatus", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult ValidityStatus { get; set; }

        /// <summary>
        /// Gets or Sets ComparisonStatus
        /// </summary>
        [DataMember(Name = "comparisonStatus", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult ComparisonStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Text" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Text() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Text" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="validityStatus">validityStatus (required).</param>
        /// <param name="comparisonStatus">comparisonStatus (required).</param>
        /// <param name="dateFormat">Date format (required).</param>
        /// <param name="fieldList">fieldList (required).</param>
        /// <param name="availableSourceList">availableSourceList (required).</param>
        public Text(CheckResult status = default(CheckResult), CheckResult validityStatus = default(CheckResult), CheckResult comparisonStatus = default(CheckResult), string dateFormat = default(string), List<TextField> fieldList = default(List<TextField>), List<TextAvailableSource> availableSourceList = default(List<TextAvailableSource>))
        {
            this.Status = status;
            this.ValidityStatus = validityStatus;
            this.ComparisonStatus = comparisonStatus;
            // to ensure "dateFormat" is required (not null)
            if (dateFormat == null)
            {
                throw new ArgumentNullException("dateFormat is a required property for Text and cannot be null");
            }
            this.DateFormat = dateFormat;
            // to ensure "fieldList" is required (not null)
            if (fieldList == null)
            {
                throw new ArgumentNullException("fieldList is a required property for Text and cannot be null");
            }
            this.FieldList = fieldList;
            // to ensure "availableSourceList" is required (not null)
            if (availableSourceList == null)
            {
                throw new ArgumentNullException("availableSourceList is a required property for Text and cannot be null");
            }
            this.AvailableSourceList = availableSourceList;
        }

        /// <summary>
        /// Date format
        /// </summary>
        /// <value>Date format</value>
        [DataMember(Name = "dateFormat", IsRequired = true, EmitDefaultValue = true)]
        public string DateFormat { get; set; }

        /// <summary>
        /// Gets or Sets FieldList
        /// </summary>
        [DataMember(Name = "fieldList", IsRequired = true, EmitDefaultValue = true)]
        public List<TextField> FieldList { get; set; }

        /// <summary>
        /// Gets or Sets AvailableSourceList
        /// </summary>
        [DataMember(Name = "availableSourceList", IsRequired = true, EmitDefaultValue = true)]
        public List<TextAvailableSource> AvailableSourceList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Text {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ValidityStatus: ").Append(ValidityStatus).Append("\n");
            sb.Append("  ComparisonStatus: ").Append(ComparisonStatus).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  FieldList: ").Append(FieldList).Append("\n");
            sb.Append("  AvailableSourceList: ").Append(AvailableSourceList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
