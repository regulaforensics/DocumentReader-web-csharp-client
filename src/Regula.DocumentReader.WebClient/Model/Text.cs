/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Contains all document text fields data with validity and cross-source compare checks
    /// </summary>
    [DataContract]
    public partial class Text :  IEquatable<Text>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Text" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Text() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Text" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="validityStatus">validityStatus (required).</param>
        /// <param name="comparisonStatus">comparisonStatus (required).</param>
        /// <param name="dateFormat">Date format (required).</param>
        /// <param name="fieldList">fieldList (required).</param>
        /// <param name="availableSourceList">availableSourceList (required).</param>
        public Text(int status = default(int), int validityStatus = default(int), int comparisonStatus = default(int), string dateFormat = default(string), List<TextField> fieldList = default(List<TextField>), List<TextAvailableSource> availableSourceList = default(List<TextAvailableSource>))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for Text and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            
            // to ensure "validityStatus" is required (not null)
            if (validityStatus == null)
            {
                throw new InvalidDataException("validityStatus is a required property for Text and cannot be null");
            }
            else
            {
                this.ValidityStatus = validityStatus;
            }
            
            // to ensure "comparisonStatus" is required (not null)
            if (comparisonStatus == null)
            {
                throw new InvalidDataException("comparisonStatus is a required property for Text and cannot be null");
            }
            else
            {
                this.ComparisonStatus = comparisonStatus;
            }
            
            // to ensure "dateFormat" is required (not null)
            if (dateFormat == null)
            {
                throw new InvalidDataException("dateFormat is a required property for Text and cannot be null");
            }
            else
            {
                this.DateFormat = dateFormat;
            }
            
            // to ensure "fieldList" is required (not null)
            if (fieldList == null)
            {
                throw new InvalidDataException("fieldList is a required property for Text and cannot be null");
            }
            else
            {
                this.FieldList = fieldList;
            }
            
            // to ensure "availableSourceList" is required (not null)
            if (availableSourceList == null)
            {
                throw new InvalidDataException("availableSourceList is a required property for Text and cannot be null");
            }
            else
            {
                this.AvailableSourceList = availableSourceList;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public int Status { get; set; }

        /// <summary>
        /// Gets or Sets ValidityStatus
        /// </summary>
        [DataMember(Name="validityStatus", EmitDefaultValue=true)]
        public int ValidityStatus { get; set; }

        /// <summary>
        /// Gets or Sets ComparisonStatus
        /// </summary>
        [DataMember(Name="comparisonStatus", EmitDefaultValue=true)]
        public int ComparisonStatus { get; set; }

        /// <summary>
        /// Date format
        /// </summary>
        /// <value>Date format</value>
        [DataMember(Name="dateFormat", EmitDefaultValue=true)]
        public string DateFormat { get; set; }

        /// <summary>
        /// Gets or Sets FieldList
        /// </summary>
        [DataMember(Name="fieldList", EmitDefaultValue=true)]
        public List<TextField> FieldList { get; set; }

        /// <summary>
        /// Gets or Sets AvailableSourceList
        /// </summary>
        [DataMember(Name="availableSourceList", EmitDefaultValue=true)]
        public List<TextAvailableSource> AvailableSourceList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Text {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ValidityStatus: ").Append(ValidityStatus).Append("\n");
            sb.Append("  ComparisonStatus: ").Append(ComparisonStatus).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  FieldList: ").Append(FieldList).Append("\n");
            sb.Append("  AvailableSourceList: ").Append(AvailableSourceList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Text);
        }

        /// <summary>
        /// Returns true if Text instances are equal
        /// </summary>
        /// <param name="input">Instance of Text to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Text input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ValidityStatus == input.ValidityStatus ||
                    (this.ValidityStatus != null &&
                    this.ValidityStatus.Equals(input.ValidityStatus))
                ) && 
                (
                    this.ComparisonStatus == input.ComparisonStatus ||
                    (this.ComparisonStatus != null &&
                    this.ComparisonStatus.Equals(input.ComparisonStatus))
                ) && 
                (
                    this.DateFormat == input.DateFormat ||
                    (this.DateFormat != null &&
                    this.DateFormat.Equals(input.DateFormat))
                ) && 
                (
                    this.FieldList == input.FieldList ||
                    this.FieldList != null &&
                    input.FieldList != null &&
                    this.FieldList.SequenceEqual(input.FieldList)
                ) && 
                (
                    this.AvailableSourceList == input.AvailableSourceList ||
                    this.AvailableSourceList != null &&
                    input.AvailableSourceList != null &&
                    this.AvailableSourceList.SequenceEqual(input.AvailableSourceList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ValidityStatus != null)
                    hashCode = hashCode * 59 + this.ValidityStatus.GetHashCode();
                if (this.ComparisonStatus != null)
                    hashCode = hashCode * 59 + this.ComparisonStatus.GetHashCode();
                if (this.DateFormat != null)
                    hashCode = hashCode * 59 + this.DateFormat.GetHashCode();
                if (this.FieldList != null)
                    hashCode = hashCode * 59 + this.FieldList.GetHashCode();
                if (this.AvailableSourceList != null)
                    hashCode = hashCode * 59 + this.AvailableSourceList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
