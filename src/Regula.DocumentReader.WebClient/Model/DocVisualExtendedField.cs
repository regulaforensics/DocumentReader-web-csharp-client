/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// DocVisualExtendedField
    /// </summary>
    [DataContract]
    public partial class DocVisualExtendedField :  IEquatable<DocVisualExtendedField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocVisualExtendedField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocVisualExtendedField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocVisualExtendedField" /> class.
        /// </summary>
        /// <param name="wFieldType">wFieldType (required).</param>
        /// <param name="fieldName">Field name. Only use to search values for fields with fieldType&#x3D;50(other). In general, use wFieldType for lookup. (required).</param>
        /// <param name="wLCID">wLCID (required).</param>
        /// <param name="stringsResult">Array of recognizing probabilities for a each line of text field. Only for Result.VISUAL_TEXT and Result.MRZ_TEXT results..</param>
        /// <param name="bufText">Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;.</param>
        /// <param name="fieldRect">fieldRect.</param>
        /// <param name="rFIDOriginDG">Origin data group information. Only for Result.RFID_TEXT results..</param>
        /// <param name="rFIDOriginTagEntry">Index of the text field record in origin data group. Only for Result.RFID_TEXT results..</param>
        public DocVisualExtendedField(int wFieldType = default(int), string fieldName = default(string), int wLCID = default(int), List<StringRecognitionResult> stringsResult = default(List<StringRecognitionResult>), string bufText = default(string), RectangleCoordinates fieldRect = default(RectangleCoordinates), int rFIDOriginDG = default(int), int rFIDOriginTagEntry = default(int))
        {
            // to ensure "wFieldType" is required (not null)
            if (wFieldType == null)
            {
                throw new InvalidDataException("wFieldType is a required property for DocVisualExtendedField and cannot be null");
            }
            else
            {
                this.WFieldType = wFieldType;
            }
            
            // to ensure "fieldName" is required (not null)
            if (fieldName == null)
            {
                throw new InvalidDataException("fieldName is a required property for DocVisualExtendedField and cannot be null");
            }
            else
            {
                this.FieldName = fieldName;
            }
            
            // to ensure "wLCID" is required (not null)
            if (wLCID == null)
            {
                throw new InvalidDataException("wLCID is a required property for DocVisualExtendedField and cannot be null");
            }
            else
            {
                this.WLCID = wLCID;
            }
            
            this.StringsResult = stringsResult;
            this.BufText = bufText;
            this.FieldRect = fieldRect;
            this.RFIDOriginDG = rFIDOriginDG;
            this.RFIDOriginTagEntry = rFIDOriginTagEntry;
        }
        
        /// <summary>
        /// Gets or Sets WFieldType
        /// </summary>
        [DataMember(Name="wFieldType", EmitDefaultValue=true)]
        public int WFieldType { get; set; }

        /// <summary>
        /// Field name. Only use to search values for fields with fieldType&#x3D;50(other). In general, use wFieldType for lookup.
        /// </summary>
        /// <value>Field name. Only use to search values for fields with fieldType&#x3D;50(other). In general, use wFieldType for lookup.</value>
        [DataMember(Name="FieldName", EmitDefaultValue=true)]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or Sets WLCID
        /// </summary>
        [DataMember(Name="wLCID", EmitDefaultValue=true)]
        public int WLCID { get; set; }

        /// <summary>
        /// Array of recognizing probabilities for a each line of text field. Only for Result.VISUAL_TEXT and Result.MRZ_TEXT results.
        /// </summary>
        /// <value>Array of recognizing probabilities for a each line of text field. Only for Result.VISUAL_TEXT and Result.MRZ_TEXT results.</value>
        [DataMember(Name="StringsResult", EmitDefaultValue=false)]
        public List<StringRecognitionResult> StringsResult { get; set; }

        /// <summary>
        /// Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;
        /// </summary>
        /// <value>Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;</value>
        [DataMember(Name="Buf_Text", EmitDefaultValue=false)]
        public string BufText { get; set; }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [DataMember(Name="FieldRect", EmitDefaultValue=false)]
        public RectangleCoordinates FieldRect { get; set; }

        /// <summary>
        /// Origin data group information. Only for Result.RFID_TEXT results.
        /// </summary>
        /// <value>Origin data group information. Only for Result.RFID_TEXT results.</value>
        [DataMember(Name="RFID_OriginDG", EmitDefaultValue=false)]
        public int RFIDOriginDG { get; set; }

        /// <summary>
        /// Index of the text field record in origin data group. Only for Result.RFID_TEXT results.
        /// </summary>
        /// <value>Index of the text field record in origin data group. Only for Result.RFID_TEXT results.</value>
        [DataMember(Name="RFID_OriginTagEntry", EmitDefaultValue=false)]
        public int RFIDOriginTagEntry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocVisualExtendedField {\n");
            sb.Append("  WFieldType: ").Append(WFieldType).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  WLCID: ").Append(WLCID).Append("\n");
            sb.Append("  StringsResult: ").Append(StringsResult).Append("\n");
            sb.Append("  BufText: ").Append(BufText).Append("\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  RFIDOriginDG: ").Append(RFIDOriginDG).Append("\n");
            sb.Append("  RFIDOriginTagEntry: ").Append(RFIDOriginTagEntry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocVisualExtendedField);
        }

        /// <summary>
        /// Returns true if DocVisualExtendedField instances are equal
        /// </summary>
        /// <param name="input">Instance of DocVisualExtendedField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocVisualExtendedField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WFieldType == input.WFieldType ||
                    (this.WFieldType != null &&
                    this.WFieldType.Equals(input.WFieldType))
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.WLCID == input.WLCID ||
                    (this.WLCID != null &&
                    this.WLCID.Equals(input.WLCID))
                ) && 
                (
                    this.StringsResult == input.StringsResult ||
                    this.StringsResult != null &&
                    input.StringsResult != null &&
                    this.StringsResult.SequenceEqual(input.StringsResult)
                ) && 
                (
                    this.BufText == input.BufText ||
                    (this.BufText != null &&
                    this.BufText.Equals(input.BufText))
                ) && 
                (
                    this.FieldRect == input.FieldRect ||
                    (this.FieldRect != null &&
                    this.FieldRect.Equals(input.FieldRect))
                ) && 
                (
                    this.RFIDOriginDG == input.RFIDOriginDG ||
                    (this.RFIDOriginDG != null &&
                    this.RFIDOriginDG.Equals(input.RFIDOriginDG))
                ) && 
                (
                    this.RFIDOriginTagEntry == input.RFIDOriginTagEntry ||
                    (this.RFIDOriginTagEntry != null &&
                    this.RFIDOriginTagEntry.Equals(input.RFIDOriginTagEntry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WFieldType != null)
                    hashCode = hashCode * 59 + this.WFieldType.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.WLCID != null)
                    hashCode = hashCode * 59 + this.WLCID.GetHashCode();
                if (this.StringsResult != null)
                    hashCode = hashCode * 59 + this.StringsResult.GetHashCode();
                if (this.BufText != null)
                    hashCode = hashCode * 59 + this.BufText.GetHashCode();
                if (this.FieldRect != null)
                    hashCode = hashCode * 59 + this.FieldRect.GetHashCode();
                if (this.RFIDOriginDG != null)
                    hashCode = hashCode * 59 + this.RFIDOriginDG.GetHashCode();
                if (this.RFIDOriginTagEntry != null)
                    hashCode = hashCode * 59 + this.RFIDOriginTagEntry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
