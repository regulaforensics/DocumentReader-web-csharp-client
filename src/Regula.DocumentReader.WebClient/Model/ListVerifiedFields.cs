// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ListVerifiedFields
    /// </summary>
    public partial class ListVerifiedFields : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListVerifiedFields" /> class.
        /// </summary>
        /// <param name="count">Number of pFieldMaps array elements</param>
        /// <param name="pFieldMaps">pFieldMaps</param>
        /// <param name="pDateFormat">pDateFormat</param>
        [JsonConstructor]
        public ListVerifiedFields(decimal count, List<VerifiedFieldMap> pFieldMaps, Option<string?> pDateFormat = default)
        {
            Count = count;
            PFieldMaps = pFieldMaps;
            PDateFormatOption = pDateFormat;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Number of pFieldMaps array elements
        /// </summary>
        /// <value>Number of pFieldMaps array elements</value>
        [JsonPropertyName("Count")]
        public decimal Count { get; set; }

        /// <summary>
        /// Gets or Sets PFieldMaps
        /// </summary>
        [JsonPropertyName("pFieldMaps")]
        public List<VerifiedFieldMap> PFieldMaps { get; set; }

        /// <summary>
        /// Used to track the state of PDateFormat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PDateFormatOption { get; private set; }

        /// <summary>
        /// Gets or Sets PDateFormat
        /// </summary>
        [JsonPropertyName("pDateFormat")]
        public string? PDateFormat { get { return this.PDateFormatOption; } set { this.PDateFormatOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListVerifiedFields {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  PFieldMaps: ").Append(PFieldMaps).Append("\n");
            sb.Append("  PDateFormat: ").Append(PDateFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ListVerifiedFields" />
    /// </summary>
    public class ListVerifiedFieldsJsonConverter : JsonConverter<ListVerifiedFields>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListVerifiedFields" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListVerifiedFields Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> count = default;
            Option<List<VerifiedFieldMap>?> pFieldMaps = default;
            Option<string?> pDateFormat = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                count = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "pFieldMaps":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pFieldMaps = new Option<List<VerifiedFieldMap>?>(JsonSerializer.Deserialize<List<VerifiedFieldMap>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pDateFormat":
                            pDateFormat = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!count.IsSet)
                throw new ArgumentException("Property is required for class ListVerifiedFields.", nameof(count));

            if (!pFieldMaps.IsSet)
                throw new ArgumentException("Property is required for class ListVerifiedFields.", nameof(pFieldMaps));

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class ListVerifiedFields.");

            if (pFieldMaps.IsSet && pFieldMaps.Value == null)
                throw new ArgumentNullException(nameof(pFieldMaps), "Property is not nullable for class ListVerifiedFields.");

            if (pDateFormat.IsSet && pDateFormat.Value == null)
                throw new ArgumentNullException(nameof(pDateFormat), "Property is not nullable for class ListVerifiedFields.");

            return new ListVerifiedFields(count.Value!.Value!, pFieldMaps.Value!, pDateFormat);
        }

        /// <summary>
        /// Serializes a <see cref="ListVerifiedFields" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listVerifiedFields"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListVerifiedFields listVerifiedFields, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, listVerifiedFields, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ListVerifiedFields" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listVerifiedFields"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListVerifiedFields listVerifiedFields, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listVerifiedFields.PFieldMaps == null)
                throw new ArgumentNullException(nameof(listVerifiedFields.PFieldMaps), "Property is required for class ListVerifiedFields.");

            if (listVerifiedFields.PDateFormatOption.IsSet && listVerifiedFields.PDateFormat == null)
                throw new ArgumentNullException(nameof(listVerifiedFields.PDateFormat), "Property is required for class ListVerifiedFields.");

            writer.WriteNumber("Count", listVerifiedFields.Count);

            writer.WritePropertyName("pFieldMaps");
            JsonSerializer.Serialize(writer, listVerifiedFields.PFieldMaps, jsonSerializerOptions);
            if (listVerifiedFields.PDateFormatOption.IsSet)
                writer.WriteString("pDateFormat", listVerifiedFields.PDateFormat);
        }
    }
}
