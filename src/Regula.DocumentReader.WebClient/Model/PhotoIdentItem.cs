// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// PhotoIdentItem
    /// </summary>
    public partial class PhotoIdentItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhotoIdentItem" /> class.
        /// </summary>
        /// <param name="lightIndex">lightIndex</param>
        /// <param name="area">area</param>
        /// <param name="sourceImage">sourceImage</param>
        /// <param name="resultImages">resultImages</param>
        /// <param name="fieldTypesCount">fieldTypesCount</param>
        /// <param name="fieldTypesList">fieldTypesList</param>
        /// <param name="step">step</param>
        /// <param name="angle">angle</param>
        /// <param name="reserved1">reserved1</param>
        /// <param name="reserved2">reserved2</param>
        /// <param name="reserved3">reserved3</param>
        [JsonConstructor]
        public PhotoIdentItem(Light lightIndex, RectangleCoordinates area, ImageData sourceImage, RawImageContainerList resultImages, Option<int?> fieldTypesCount = default, Option<List<int>?> fieldTypesList = default, Option<int?> step = default, Option<int?> angle = default, Option<int?> reserved1 = default, Option<int?> reserved2 = default, Option<int?> reserved3 = default)
        {
            LightIndex = lightIndex;
            Area = area;
            SourceImage = sourceImage;
            ResultImages = resultImages;
            FieldTypesCountOption = fieldTypesCount;
            FieldTypesListOption = fieldTypesList;
            StepOption = step;
            AngleOption = angle;
            Reserved1Option = reserved1;
            Reserved2Option = reserved2;
            Reserved3Option = reserved3;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets LightIndex
        /// </summary>
        [JsonPropertyName("LightIndex")]
        public Light LightIndex { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [JsonPropertyName("Area")]
        public RectangleCoordinates Area { get; set; }

        /// <summary>
        /// Gets or Sets SourceImage
        /// </summary>
        [JsonPropertyName("SourceImage")]
        public ImageData SourceImage { get; set; }

        /// <summary>
        /// Gets or Sets ResultImages
        /// </summary>
        [JsonPropertyName("ResultImages")]
        public RawImageContainerList ResultImages { get; set; }

        /// <summary>
        /// Used to track the state of FieldTypesCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FieldTypesCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets FieldTypesCount
        /// </summary>
        [JsonPropertyName("FieldTypesCount")]
        public int? FieldTypesCount { get { return this.FieldTypesCountOption; } set { this.FieldTypesCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of FieldTypesList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> FieldTypesListOption { get; private set; }

        /// <summary>
        /// Gets or Sets FieldTypesList
        /// </summary>
        [JsonPropertyName("FieldTypesList")]
        public List<int>? FieldTypesList { get { return this.FieldTypesListOption; } set { this.FieldTypesListOption = new(value); } }

        /// <summary>
        /// Used to track the state of Step
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StepOption { get; private set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [JsonPropertyName("Step")]
        public int? Step { get { return this.StepOption; } set { this.StepOption = new(value); } }

        /// <summary>
        /// Used to track the state of Angle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AngleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Angle
        /// </summary>
        [JsonPropertyName("Angle")]
        public int? Angle { get { return this.AngleOption; } set { this.AngleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reserved1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> Reserved1Option { get; private set; }

        /// <summary>
        /// Gets or Sets Reserved1
        /// </summary>
        [JsonPropertyName("Reserved1")]
        public int? Reserved1 { get { return this.Reserved1Option; } set { this.Reserved1Option = new(value); } }

        /// <summary>
        /// Used to track the state of Reserved2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> Reserved2Option { get; private set; }

        /// <summary>
        /// Gets or Sets Reserved2
        /// </summary>
        [JsonPropertyName("Reserved2")]
        public int? Reserved2 { get { return this.Reserved2Option; } set { this.Reserved2Option = new(value); } }

        /// <summary>
        /// Used to track the state of Reserved3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> Reserved3Option { get; private set; }

        /// <summary>
        /// Gets or Sets Reserved3
        /// </summary>
        [JsonPropertyName("Reserved3")]
        public int? Reserved3 { get { return this.Reserved3Option; } set { this.Reserved3Option = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhotoIdentItem {\n");
            sb.Append("  LightIndex: ").Append(LightIndex).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  SourceImage: ").Append(SourceImage).Append("\n");
            sb.Append("  ResultImages: ").Append(ResultImages).Append("\n");
            sb.Append("  FieldTypesCount: ").Append(FieldTypesCount).Append("\n");
            sb.Append("  FieldTypesList: ").Append(FieldTypesList).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  Reserved1: ").Append(Reserved1).Append("\n");
            sb.Append("  Reserved2: ").Append(Reserved2).Append("\n");
            sb.Append("  Reserved3: ").Append(Reserved3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PhotoIdentItem" />
    /// </summary>
    public class PhotoIdentItemJsonConverter : JsonConverter<PhotoIdentItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="PhotoIdentItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PhotoIdentItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Light?> lightIndex = default;
            Option<RectangleCoordinates?> area = default;
            Option<ImageData?> sourceImage = default;
            Option<RawImageContainerList?> resultImages = default;
            Option<int?> fieldTypesCount = default;
            Option<List<int>?> fieldTypesList = default;
            Option<int?> step = default;
            Option<int?> angle = default;
            Option<int?> reserved1 = default;
            Option<int?> reserved2 = default;
            Option<int?> reserved3 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "LightIndex":
                            string? lightIndexRawValue = utf8JsonReader.GetString();
                            if (lightIndexRawValue != null)
                                lightIndex = new Option<Light?>(LightValueConverter.FromStringOrDefault(lightIndexRawValue));
                            break;
                        case "Area":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                area = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "SourceImage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sourceImage = new Option<ImageData?>(JsonSerializer.Deserialize<ImageData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ResultImages":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resultImages = new Option<RawImageContainerList?>(JsonSerializer.Deserialize<RawImageContainerList>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "FieldTypesCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldTypesCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "FieldTypesList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldTypesList = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Step":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                step = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Angle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                angle = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Reserved1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved1 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Reserved2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved2 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Reserved3":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved3 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!lightIndex.IsSet)
                throw new ArgumentException("Property is required for class PhotoIdentItem.", nameof(lightIndex));

            if (!area.IsSet)
                throw new ArgumentException("Property is required for class PhotoIdentItem.", nameof(area));

            if (!sourceImage.IsSet)
                throw new ArgumentException("Property is required for class PhotoIdentItem.", nameof(sourceImage));

            if (!resultImages.IsSet)
                throw new ArgumentException("Property is required for class PhotoIdentItem.", nameof(resultImages));

            if (lightIndex.IsSet && lightIndex.Value == null)
                throw new ArgumentNullException(nameof(lightIndex), "Property is not nullable for class PhotoIdentItem.");

            if (area.IsSet && area.Value == null)
                throw new ArgumentNullException(nameof(area), "Property is not nullable for class PhotoIdentItem.");

            if (sourceImage.IsSet && sourceImage.Value == null)
                throw new ArgumentNullException(nameof(sourceImage), "Property is not nullable for class PhotoIdentItem.");

            if (resultImages.IsSet && resultImages.Value == null)
                throw new ArgumentNullException(nameof(resultImages), "Property is not nullable for class PhotoIdentItem.");

            if (fieldTypesCount.IsSet && fieldTypesCount.Value == null)
                throw new ArgumentNullException(nameof(fieldTypesCount), "Property is not nullable for class PhotoIdentItem.");

            if (fieldTypesList.IsSet && fieldTypesList.Value == null)
                throw new ArgumentNullException(nameof(fieldTypesList), "Property is not nullable for class PhotoIdentItem.");

            if (step.IsSet && step.Value == null)
                throw new ArgumentNullException(nameof(step), "Property is not nullable for class PhotoIdentItem.");

            if (angle.IsSet && angle.Value == null)
                throw new ArgumentNullException(nameof(angle), "Property is not nullable for class PhotoIdentItem.");

            if (reserved1.IsSet && reserved1.Value == null)
                throw new ArgumentNullException(nameof(reserved1), "Property is not nullable for class PhotoIdentItem.");

            if (reserved2.IsSet && reserved2.Value == null)
                throw new ArgumentNullException(nameof(reserved2), "Property is not nullable for class PhotoIdentItem.");

            if (reserved3.IsSet && reserved3.Value == null)
                throw new ArgumentNullException(nameof(reserved3), "Property is not nullable for class PhotoIdentItem.");

            return new PhotoIdentItem(lightIndex.Value!.Value!, area.Value!, sourceImage.Value!, resultImages.Value!, fieldTypesCount, fieldTypesList, step, angle, reserved1, reserved2, reserved3);
        }

        /// <summary>
        /// Serializes a <see cref="PhotoIdentItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="photoIdentItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PhotoIdentItem photoIdentItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, photoIdentItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PhotoIdentItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="photoIdentItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PhotoIdentItem photoIdentItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (photoIdentItem.Area == null)
                throw new ArgumentNullException(nameof(photoIdentItem.Area), "Property is required for class PhotoIdentItem.");

            if (photoIdentItem.SourceImage == null)
                throw new ArgumentNullException(nameof(photoIdentItem.SourceImage), "Property is required for class PhotoIdentItem.");

            if (photoIdentItem.ResultImages == null)
                throw new ArgumentNullException(nameof(photoIdentItem.ResultImages), "Property is required for class PhotoIdentItem.");

            if (photoIdentItem.FieldTypesListOption.IsSet && photoIdentItem.FieldTypesList == null)
                throw new ArgumentNullException(nameof(photoIdentItem.FieldTypesList), "Property is required for class PhotoIdentItem.");

            var lightIndexRawValue = LightValueConverter.ToJsonValue(photoIdentItem.LightIndex);
            writer.WriteNumber("LightIndex", lightIndexRawValue);

            writer.WritePropertyName("Area");
            JsonSerializer.Serialize(writer, photoIdentItem.Area, jsonSerializerOptions);
            writer.WritePropertyName("SourceImage");
            JsonSerializer.Serialize(writer, photoIdentItem.SourceImage, jsonSerializerOptions);
            writer.WritePropertyName("ResultImages");
            JsonSerializer.Serialize(writer, photoIdentItem.ResultImages, jsonSerializerOptions);
            if (photoIdentItem.FieldTypesCountOption.IsSet)
                writer.WriteNumber("FieldTypesCount", photoIdentItem.FieldTypesCountOption.Value!.Value);

            if (photoIdentItem.FieldTypesListOption.IsSet)
            {
                writer.WritePropertyName("FieldTypesList");
                JsonSerializer.Serialize(writer, photoIdentItem.FieldTypesList, jsonSerializerOptions);
            }
            if (photoIdentItem.StepOption.IsSet)
                writer.WriteNumber("Step", photoIdentItem.StepOption.Value!.Value);

            if (photoIdentItem.AngleOption.IsSet)
                writer.WriteNumber("Angle", photoIdentItem.AngleOption.Value!.Value);

            if (photoIdentItem.Reserved1Option.IsSet)
                writer.WriteNumber("Reserved1", photoIdentItem.Reserved1Option.Value!.Value);

            if (photoIdentItem.Reserved2Option.IsSet)
                writer.WriteNumber("Reserved2", photoIdentItem.Reserved2Option.Value!.Value);

            if (photoIdentItem.Reserved3Option.IsSet)
                writer.WriteNumber("Reserved3", photoIdentItem.Reserved3Option.Value!.Value);
        }
    }
}
