/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// AuthenticityCheckResultListInner
    /// </summary>
    [JsonConverter(typeof(AuthenticityCheckResultListInnerJsonConverter))]
    [DataContract(Name = "AuthenticityCheckResult_List_inner")]
    public partial class AuthenticityCheckResultListInner : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultListInner" /> class
        /// with the <see cref="SecurityFeatureResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SecurityFeatureResult.</param>
        public AuthenticityCheckResultListInner(SecurityFeatureResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultListInner" /> class
        /// with the <see cref="IdentResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of IdentResult.</param>
        public AuthenticityCheckResultListInner(IdentResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultListInner" /> class
        /// with the <see cref="FiberResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of FiberResult.</param>
        public AuthenticityCheckResultListInner(FiberResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultListInner" /> class
        /// with the <see cref="OCRSecurityTextResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of OCRSecurityTextResult.</param>
        public AuthenticityCheckResultListInner(OCRSecurityTextResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultListInner" /> class
        /// with the <see cref="PhotoIdentResult" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PhotoIdentResult.</param>
        public AuthenticityCheckResultListInner(PhotoIdentResult actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(FiberResult) || value is FiberResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(IdentResult) || value is IdentResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(OCRSecurityTextResult) || value is OCRSecurityTextResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PhotoIdentResult) || value is PhotoIdentResult)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SecurityFeatureResult) || value is SecurityFeatureResult)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: FiberResult, IdentResult, OCRSecurityTextResult, PhotoIdentResult, SecurityFeatureResult");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `SecurityFeatureResult`. If the actual instance is not `SecurityFeatureResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SecurityFeatureResult</returns>
        public SecurityFeatureResult GetSecurityFeatureResult()
        {
            return (SecurityFeatureResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `IdentResult`. If the actual instance is not `IdentResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of IdentResult</returns>
        public IdentResult GetIdentResult()
        {
            return (IdentResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `FiberResult`. If the actual instance is not `FiberResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of FiberResult</returns>
        public FiberResult GetFiberResult()
        {
            return (FiberResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `OCRSecurityTextResult`. If the actual instance is not `OCRSecurityTextResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of OCRSecurityTextResult</returns>
        public OCRSecurityTextResult GetOCRSecurityTextResult()
        {
            return (OCRSecurityTextResult)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PhotoIdentResult`. If the actual instance is not `PhotoIdentResult`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PhotoIdentResult</returns>
        public PhotoIdentResult GetPhotoIdentResult()
        {
            return (PhotoIdentResult)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticityCheckResultListInner {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, AuthenticityCheckResultListInner.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of AuthenticityCheckResultListInner
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of AuthenticityCheckResultListInner</returns>
        public static AuthenticityCheckResultListInner FromJson(string jsonString)
        {
            AuthenticityCheckResultListInner newAuthenticityCheckResultListInner = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newAuthenticityCheckResultListInner;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(FiberResult).GetProperty("AdditionalProperties") == null)
                {
                    newAuthenticityCheckResultListInner = new AuthenticityCheckResultListInner(JsonConvert.DeserializeObject<FiberResult>(jsonString, AuthenticityCheckResultListInner.SerializerSettings));
                }
                else
                {
                    newAuthenticityCheckResultListInner = new AuthenticityCheckResultListInner(JsonConvert.DeserializeObject<FiberResult>(jsonString, AuthenticityCheckResultListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("FiberResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into FiberResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(IdentResult).GetProperty("AdditionalProperties") == null)
                {
                    newAuthenticityCheckResultListInner = new AuthenticityCheckResultListInner(JsonConvert.DeserializeObject<IdentResult>(jsonString, AuthenticityCheckResultListInner.SerializerSettings));
                }
                else
                {
                    newAuthenticityCheckResultListInner = new AuthenticityCheckResultListInner(JsonConvert.DeserializeObject<IdentResult>(jsonString, AuthenticityCheckResultListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("IdentResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into IdentResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(OCRSecurityTextResult).GetProperty("AdditionalProperties") == null)
                {
                    newAuthenticityCheckResultListInner = new AuthenticityCheckResultListInner(JsonConvert.DeserializeObject<OCRSecurityTextResult>(jsonString, AuthenticityCheckResultListInner.SerializerSettings));
                }
                else
                {
                    newAuthenticityCheckResultListInner = new AuthenticityCheckResultListInner(JsonConvert.DeserializeObject<OCRSecurityTextResult>(jsonString, AuthenticityCheckResultListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("OCRSecurityTextResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into OCRSecurityTextResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PhotoIdentResult).GetProperty("AdditionalProperties") == null)
                {
                    newAuthenticityCheckResultListInner = new AuthenticityCheckResultListInner(JsonConvert.DeserializeObject<PhotoIdentResult>(jsonString, AuthenticityCheckResultListInner.SerializerSettings));
                }
                else
                {
                    newAuthenticityCheckResultListInner = new AuthenticityCheckResultListInner(JsonConvert.DeserializeObject<PhotoIdentResult>(jsonString, AuthenticityCheckResultListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PhotoIdentResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PhotoIdentResult: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(SecurityFeatureResult).GetProperty("AdditionalProperties") == null)
                {
                    newAuthenticityCheckResultListInner = new AuthenticityCheckResultListInner(JsonConvert.DeserializeObject<SecurityFeatureResult>(jsonString, AuthenticityCheckResultListInner.SerializerSettings));
                }
                else
                {
                    newAuthenticityCheckResultListInner = new AuthenticityCheckResultListInner(JsonConvert.DeserializeObject<SecurityFeatureResult>(jsonString, AuthenticityCheckResultListInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("SecurityFeatureResult");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into SecurityFeatureResult: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newAuthenticityCheckResultListInner;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for AuthenticityCheckResultListInner
    /// </summary>
    public class AuthenticityCheckResultListInnerJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(AuthenticityCheckResultListInner).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return AuthenticityCheckResultListInner.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return AuthenticityCheckResultListInner.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
