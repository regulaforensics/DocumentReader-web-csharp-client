// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// AuthenticityCheckResultListInner
    /// </summary>
    public partial class AuthenticityCheckResultListInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultListInner" /> class.
        /// </summary>
        /// <param name="securityFeatureResult"></param>
        public AuthenticityCheckResultListInner(SecurityFeatureResult securityFeatureResult)
        {
            SecurityFeatureResult = securityFeatureResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultListInner" /> class.
        /// </summary>
        /// <param name="identResult"></param>
        public AuthenticityCheckResultListInner(IdentResult identResult)
        {
            IdentResult = identResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultListInner" /> class.
        /// </summary>
        /// <param name="fiberResult"></param>
        public AuthenticityCheckResultListInner(FiberResult fiberResult)
        {
            FiberResult = fiberResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultListInner" /> class.
        /// </summary>
        /// <param name="oCRSecurityTextResult"></param>
        public AuthenticityCheckResultListInner(OCRSecurityTextResult oCRSecurityTextResult)
        {
            OCRSecurityTextResult = oCRSecurityTextResult;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResultListInner" /> class.
        /// </summary>
        /// <param name="photoIdentResult"></param>
        public AuthenticityCheckResultListInner(PhotoIdentResult photoIdentResult)
        {
            PhotoIdentResult = photoIdentResult;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SecurityFeatureResult
        /// </summary>
        public SecurityFeatureResult? SecurityFeatureResult { get; set; }

        /// <summary>
        /// Gets or Sets IdentResult
        /// </summary>
        public IdentResult? IdentResult { get; set; }

        /// <summary>
        /// Gets or Sets FiberResult
        /// </summary>
        public FiberResult? FiberResult { get; set; }

        /// <summary>
        /// Gets or Sets OCRSecurityTextResult
        /// </summary>
        public OCRSecurityTextResult? OCRSecurityTextResult { get; set; }

        /// <summary>
        /// Gets or Sets PhotoIdentResult
        /// </summary>
        public PhotoIdentResult? PhotoIdentResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticityCheckResultListInner {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthenticityCheckResultListInner" />
    /// </summary>
    public class AuthenticityCheckResultListInnerJsonConverter : JsonConverter<AuthenticityCheckResultListInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthenticityCheckResultListInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthenticityCheckResultListInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> type = default;

            SecurityFeatureResult? securityFeatureResult = null;
            IdentResult? identResult = null;
            FiberResult? fiberResult = null;
            OCRSecurityTextResult? oCRSecurityTextResult = null;
            PhotoIdentResult? photoIdentResult = null;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName?.Equals("Type") ?? false)
                    {
                        string? discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator?.Equals("1") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderSecurityFeatureResult = utf8JsonReader;
                            securityFeatureResult = JsonSerializer.Deserialize<SecurityFeatureResult>(ref utf8JsonReaderSecurityFeatureResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("1024") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderIdentResult = utf8JsonReader;
                            identResult = JsonSerializer.Deserialize<IdentResult>(ref utf8JsonReaderIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("1048576") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderIdentResult = utf8JsonReader;
                            identResult = JsonSerializer.Deserialize<IdentResult>(ref utf8JsonReaderIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("128") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderPhotoIdentResult = utf8JsonReader;
                            photoIdentResult = JsonSerializer.Deserialize<PhotoIdentResult>(ref utf8JsonReaderPhotoIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("131072") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderIdentResult = utf8JsonReader;
                            identResult = JsonSerializer.Deserialize<IdentResult>(ref utf8JsonReaderIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("16") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderFiberResult = utf8JsonReader;
                            fiberResult = JsonSerializer.Deserialize<FiberResult>(ref utf8JsonReaderFiberResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("16384") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderFiberResult = utf8JsonReader;
                            fiberResult = JsonSerializer.Deserialize<FiberResult>(ref utf8JsonReaderFiberResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("2") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderSecurityFeatureResult = utf8JsonReader;
                            securityFeatureResult = JsonSerializer.Deserialize<SecurityFeatureResult>(ref utf8JsonReaderSecurityFeatureResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("2048") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderIdentResult = utf8JsonReader;
                            identResult = JsonSerializer.Deserialize<IdentResult>(ref utf8JsonReaderIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("256") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderPhotoIdentResult = utf8JsonReader;
                            photoIdentResult = JsonSerializer.Deserialize<PhotoIdentResult>(ref utf8JsonReaderPhotoIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("262144") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderIdentResult = utf8JsonReader;
                            identResult = JsonSerializer.Deserialize<IdentResult>(ref utf8JsonReaderIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("32") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderIdentResult = utf8JsonReader;
                            identResult = JsonSerializer.Deserialize<IdentResult>(ref utf8JsonReaderIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("32768") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderIdentResult = utf8JsonReader;
                            identResult = JsonSerializer.Deserialize<IdentResult>(ref utf8JsonReaderIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("4") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderIdentResult = utf8JsonReader;
                            identResult = JsonSerializer.Deserialize<IdentResult>(ref utf8JsonReaderIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("4096") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderSecurityFeatureResult = utf8JsonReader;
                            securityFeatureResult = JsonSerializer.Deserialize<SecurityFeatureResult>(ref utf8JsonReaderSecurityFeatureResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("512") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderSecurityFeatureResult = utf8JsonReader;
                            securityFeatureResult = JsonSerializer.Deserialize<SecurityFeatureResult>(ref utf8JsonReaderSecurityFeatureResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("524288") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderIdentResult = utf8JsonReader;
                            identResult = JsonSerializer.Deserialize<IdentResult>(ref utf8JsonReaderIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("64") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderOCRSecurityTextResult = utf8JsonReader;
                            oCRSecurityTextResult = JsonSerializer.Deserialize<OCRSecurityTextResult>(ref utf8JsonReaderOCRSecurityTextResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("65536") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderSecurityFeatureResult = utf8JsonReader;
                            securityFeatureResult = JsonSerializer.Deserialize<SecurityFeatureResult>(ref utf8JsonReaderSecurityFeatureResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("8") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderSecurityFeatureResult = utf8JsonReader;
                            securityFeatureResult = JsonSerializer.Deserialize<SecurityFeatureResult>(ref utf8JsonReaderSecurityFeatureResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("8192") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderSecurityFeatureResult = utf8JsonReader;
                            securityFeatureResult = JsonSerializer.Deserialize<SecurityFeatureResult>(ref utf8JsonReaderSecurityFeatureResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("8388608") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderSecurityFeatureResult = utf8JsonReader;
                            securityFeatureResult = JsonSerializer.Deserialize<SecurityFeatureResult>(ref utf8JsonReaderSecurityFeatureResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("FiberResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderFiberResult = utf8JsonReader;
                            fiberResult = JsonSerializer.Deserialize<FiberResult>(ref utf8JsonReaderFiberResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("IdentResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderIdentResult = utf8JsonReader;
                            identResult = JsonSerializer.Deserialize<IdentResult>(ref utf8JsonReaderIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("OCRSecurityTextResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderOCRSecurityTextResult = utf8JsonReader;
                            oCRSecurityTextResult = JsonSerializer.Deserialize<OCRSecurityTextResult>(ref utf8JsonReaderOCRSecurityTextResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("PhotoIdentResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderPhotoIdentResult = utf8JsonReader;
                            photoIdentResult = JsonSerializer.Deserialize<PhotoIdentResult>(ref utf8JsonReaderPhotoIdentResult, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("SecurityFeatureResult") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderSecurityFeatureResult = utf8JsonReader;
                            securityFeatureResult = JsonSerializer.Deserialize<SecurityFeatureResult>(ref utf8JsonReaderSecurityFeatureResult, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Type":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                type = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class AuthenticityCheckResultListInner.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class AuthenticityCheckResultListInner.");

            if (securityFeatureResult != null)
                return new AuthenticityCheckResultListInner(securityFeatureResult);

            if (identResult != null)
                return new AuthenticityCheckResultListInner(identResult);

            if (identResult != null)
                return new AuthenticityCheckResultListInner(identResult);

            if (photoIdentResult != null)
                return new AuthenticityCheckResultListInner(photoIdentResult);

            if (identResult != null)
                return new AuthenticityCheckResultListInner(identResult);

            if (fiberResult != null)
                return new AuthenticityCheckResultListInner(fiberResult);

            if (fiberResult != null)
                return new AuthenticityCheckResultListInner(fiberResult);

            if (securityFeatureResult != null)
                return new AuthenticityCheckResultListInner(securityFeatureResult);

            if (identResult != null)
                return new AuthenticityCheckResultListInner(identResult);

            if (photoIdentResult != null)
                return new AuthenticityCheckResultListInner(photoIdentResult);

            if (identResult != null)
                return new AuthenticityCheckResultListInner(identResult);

            if (identResult != null)
                return new AuthenticityCheckResultListInner(identResult);

            if (identResult != null)
                return new AuthenticityCheckResultListInner(identResult);

            if (identResult != null)
                return new AuthenticityCheckResultListInner(identResult);

            if (securityFeatureResult != null)
                return new AuthenticityCheckResultListInner(securityFeatureResult);

            if (securityFeatureResult != null)
                return new AuthenticityCheckResultListInner(securityFeatureResult);

            if (identResult != null)
                return new AuthenticityCheckResultListInner(identResult);

            if (oCRSecurityTextResult != null)
                return new AuthenticityCheckResultListInner(oCRSecurityTextResult);

            if (securityFeatureResult != null)
                return new AuthenticityCheckResultListInner(securityFeatureResult);

            if (securityFeatureResult != null)
                return new AuthenticityCheckResultListInner(securityFeatureResult);

            if (securityFeatureResult != null)
                return new AuthenticityCheckResultListInner(securityFeatureResult);

            if (securityFeatureResult != null)
                return new AuthenticityCheckResultListInner(securityFeatureResult);

            if (fiberResult != null)
                return new AuthenticityCheckResultListInner(fiberResult);

            if (identResult != null)
                return new AuthenticityCheckResultListInner(identResult);

            if (oCRSecurityTextResult != null)
                return new AuthenticityCheckResultListInner(oCRSecurityTextResult);

            if (photoIdentResult != null)
                return new AuthenticityCheckResultListInner(photoIdentResult);

            if (securityFeatureResult != null)
                return new AuthenticityCheckResultListInner(securityFeatureResult);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="AuthenticityCheckResultListInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authenticityCheckResultListInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthenticityCheckResultListInner authenticityCheckResultListInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (authenticityCheckResultListInner.SecurityFeatureResult != null)
            {
                SecurityFeatureResultJsonConverter securityFeatureResultJsonConverter = (SecurityFeatureResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(authenticityCheckResultListInner.SecurityFeatureResult.GetType()));
                securityFeatureResultJsonConverter.WriteProperties(writer, authenticityCheckResultListInner.SecurityFeatureResult, jsonSerializerOptions);
            }

            if (authenticityCheckResultListInner.IdentResult != null)
            {
                IdentResultJsonConverter identResultJsonConverter = (IdentResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(authenticityCheckResultListInner.IdentResult.GetType()));
                identResultJsonConverter.WriteProperties(writer, authenticityCheckResultListInner.IdentResult, jsonSerializerOptions);
            }

            if (authenticityCheckResultListInner.FiberResult != null)
            {
                FiberResultJsonConverter fiberResultJsonConverter = (FiberResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(authenticityCheckResultListInner.FiberResult.GetType()));
                fiberResultJsonConverter.WriteProperties(writer, authenticityCheckResultListInner.FiberResult, jsonSerializerOptions);
            }

            if (authenticityCheckResultListInner.OCRSecurityTextResult != null)
            {
                OCRSecurityTextResultJsonConverter oCRSecurityTextResultJsonConverter = (OCRSecurityTextResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(authenticityCheckResultListInner.OCRSecurityTextResult.GetType()));
                oCRSecurityTextResultJsonConverter.WriteProperties(writer, authenticityCheckResultListInner.OCRSecurityTextResult, jsonSerializerOptions);
            }

            if (authenticityCheckResultListInner.PhotoIdentResult != null)
            {
                PhotoIdentResultJsonConverter photoIdentResultJsonConverter = (PhotoIdentResultJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(authenticityCheckResultListInner.PhotoIdentResult.GetType()));
                photoIdentResultJsonConverter.WriteProperties(writer, authenticityCheckResultListInner.PhotoIdentResult, jsonSerializerOptions);
            }

            WriteProperties(writer, authenticityCheckResultListInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthenticityCheckResultListInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authenticityCheckResultListInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthenticityCheckResultListInner authenticityCheckResultListInner, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
