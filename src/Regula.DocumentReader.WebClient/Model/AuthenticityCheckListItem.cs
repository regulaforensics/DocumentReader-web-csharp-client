// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// AuthenticityCheckListItem
    /// </summary>
    public partial class AuthenticityCheckListItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckListItem" /> class.
        /// </summary>
        /// <param name="authenticityCheckList">authenticityCheckList</param>
        [JsonConstructor]
        public AuthenticityCheckListItem(AuthenticityCheckList authenticityCheckList)
        {
            AuthenticityCheckList = authenticityCheckList;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AuthenticityCheckList
        /// </summary>
        [JsonPropertyName("AuthenticityCheckList")]
        public AuthenticityCheckList AuthenticityCheckList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticityCheckListItem {\n");
            sb.Append("  AuthenticityCheckList: ").Append(AuthenticityCheckList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthenticityCheckListItem" />
    /// </summary>
    public class AuthenticityCheckListItemJsonConverter : JsonConverter<AuthenticityCheckListItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthenticityCheckListItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthenticityCheckListItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AuthenticityCheckList?> authenticityCheckList = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AuthenticityCheckList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                authenticityCheckList = new Option<AuthenticityCheckList?>(JsonSerializer.Deserialize<AuthenticityCheckList>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!authenticityCheckList.IsSet)
                throw new ArgumentException("Property is required for class AuthenticityCheckListItem.", nameof(authenticityCheckList));

            if (authenticityCheckList.IsSet && authenticityCheckList.Value == null)
                throw new ArgumentNullException(nameof(authenticityCheckList), "Property is not nullable for class AuthenticityCheckListItem.");

            return new AuthenticityCheckListItem(authenticityCheckList.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AuthenticityCheckListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authenticityCheckListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthenticityCheckListItem authenticityCheckListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, authenticityCheckListItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthenticityCheckListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authenticityCheckListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthenticityCheckListItem authenticityCheckListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authenticityCheckListItem.AuthenticityCheckList == null)
                throw new ArgumentNullException(nameof(authenticityCheckListItem.AuthenticityCheckList), "Property is required for class AuthenticityCheckListItem.");

            writer.WritePropertyName("AuthenticityCheckList");
            JsonSerializer.Serialize(writer, authenticityCheckListItem.AuthenticityCheckList, jsonSerializerOptions);
        }
    }
}
