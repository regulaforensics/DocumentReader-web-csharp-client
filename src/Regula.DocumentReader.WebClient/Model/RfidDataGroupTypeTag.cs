// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Enumeration representing RFID Data Group Types. Constants with prefix  correspond to the informational data groups of ePassport application, with prefix EID_ – those of eID application, with prefix EDL_ – eDL application
    /// </summary>
    /// <value>Enumeration representing RFID Data Group Types. Constants with prefix  correspond to the informational data groups of ePassport application, with prefix EID_ – those of eID application, with prefix EDL_ – eDL application</value>
    public enum RfidDataGroupTypeTag
    {
        /// <summary>
        /// Enum COM for value: 96
        /// </summary>
        COM = 96,

        /// <summary>
        /// Enum DG1 for value: 97
        /// </summary>
        DG1 = 97,

        /// <summary>
        /// Enum DG2 for value: 117
        /// </summary>
        DG2 = 117,

        /// <summary>
        /// Enum DG3 for value: 99
        /// </summary>
        DG3 = 99,

        /// <summary>
        /// Enum DG4 for value: 118
        /// </summary>
        DG4 = 118,

        /// <summary>
        /// Enum DG5 for value: 101
        /// </summary>
        DG5 = 101,

        /// <summary>
        /// Enum DG6 for value: 102
        /// </summary>
        DG6 = 102,

        /// <summary>
        /// Enum DG7 for value: 103
        /// </summary>
        DG7 = 103,

        /// <summary>
        /// Enum DG8 for value: 104
        /// </summary>
        DG8 = 104,

        /// <summary>
        /// Enum DG9 for value: 105
        /// </summary>
        DG9 = 105,

        /// <summary>
        /// Enum DG10 for value: 106
        /// </summary>
        DG10 = 106,

        /// <summary>
        /// Enum DG11 for value: 107
        /// </summary>
        DG11 = 107,

        /// <summary>
        /// Enum DG12 for value: 108
        /// </summary>
        DG12 = 108,

        /// <summary>
        /// Enum DG13 for value: 109
        /// </summary>
        DG13 = 109,

        /// <summary>
        /// Enum DG14 for value: 110
        /// </summary>
        DG14 = 110,

        /// <summary>
        /// Enum DG15 for value: 111
        /// </summary>
        DG15 = 111,

        /// <summary>
        /// Enum DG16 for value: 112
        /// </summary>
        DG16 = 112,

        /// <summary>
        /// Enum SOD for value: 119
        /// </summary>
        SOD = 119,

        /// <summary>
        /// Enum EID_DG1 for value: 97
        /// </summary>
        EID_DG1 = 97,

        /// <summary>
        /// Enum EID_DG2 for value: 98
        /// </summary>
        EID_DG2 = 98,

        /// <summary>
        /// Enum EID_DG3 for value: 99
        /// </summary>
        EID_DG3 = 99,

        /// <summary>
        /// Enum EID_DG4 for value: 100
        /// </summary>
        EID_DG4 = 100,

        /// <summary>
        /// Enum EID_DG5 for value: 101
        /// </summary>
        EID_DG5 = 101,

        /// <summary>
        /// Enum EID_DG6 for value: 102
        /// </summary>
        EID_DG6 = 102,

        /// <summary>
        /// Enum EID_DG7 for value: 103
        /// </summary>
        EID_DG7 = 103,

        /// <summary>
        /// Enum EID_DG8 for value: 104
        /// </summary>
        EID_DG8 = 104,

        /// <summary>
        /// Enum EID_DG9 for value: 105
        /// </summary>
        EID_DG9 = 105,

        /// <summary>
        /// Enum EID_DG10 for value: 106
        /// </summary>
        EID_DG10 = 106,

        /// <summary>
        /// Enum EID_DG11 for value: 107
        /// </summary>
        EID_DG11 = 107,

        /// <summary>
        /// Enum EID_DG12 for value: 108
        /// </summary>
        EID_DG12 = 108,

        /// <summary>
        /// Enum EID_DG13 for value: 109
        /// </summary>
        EID_DG13 = 109,

        /// <summary>
        /// Enum EID_DG14 for value: 110
        /// </summary>
        EID_DG14 = 110,

        /// <summary>
        /// Enum EID_DG15 for value: 111
        /// </summary>
        EID_DG15 = 111,

        /// <summary>
        /// Enum EID_DG16 for value: 112
        /// </summary>
        EID_DG16 = 112,

        /// <summary>
        /// Enum EID_DG17 for value: 113
        /// </summary>
        EID_DG17 = 113,

        /// <summary>
        /// Enum EID_DG18 for value: 114
        /// </summary>
        EID_DG18 = 114,

        /// <summary>
        /// Enum EID_DG19 for value: 115
        /// </summary>
        EID_DG19 = 115,

        /// <summary>
        /// Enum EID_DG20 for value: 116
        /// </summary>
        EID_DG20 = 116,

        /// <summary>
        /// Enum EID_DG21 for value: 117
        /// </summary>
        EID_DG21 = 117,

        /// <summary>
        /// Enum EDL_COM for value: 96
        /// </summary>
        EDL_COM = 96,

        /// <summary>
        /// Enum EDL_SOD for value: 119
        /// </summary>
        EDL_SOD = 119,

        /// <summary>
        /// Enum EDL_CE for value: 119
        /// </summary>
        EDL_CE = 119,

        /// <summary>
        /// Enum EDL_DG1 for value: 97
        /// </summary>
        EDL_DG1 = 97,

        /// <summary>
        /// Enum EDL_DG2 for value: 107
        /// </summary>
        EDL_DG2 = 107,

        /// <summary>
        /// Enum EDL_DG3 for value: 108
        /// </summary>
        EDL_DG3 = 108,

        /// <summary>
        /// Enum EDL_DG4 for value: 101
        /// </summary>
        EDL_DG4 = 101,

        /// <summary>
        /// Enum EDL_DG5 for value: 103
        /// </summary>
        EDL_DG5 = 103,

        /// <summary>
        /// Enum EDL_DG6 for value: 117
        /// </summary>
        EDL_DG6 = 117,

        /// <summary>
        /// Enum EDL_DG7 for value: 99
        /// </summary>
        EDL_DG7 = 99,

        /// <summary>
        /// Enum EDL_DG8 for value: 118
        /// </summary>
        EDL_DG8 = 118,

        /// <summary>
        /// Enum EDL_DG9 for value: 112
        /// </summary>
        EDL_DG9 = 112,

        /// <summary>
        /// Enum EDL_DG11 for value: 109
        /// </summary>
        EDL_DG11 = 109,

        /// <summary>
        /// Enum EDL_DG12 for value: 113
        /// </summary>
        EDL_DG12 = 113,

        /// <summary>
        /// Enum EDL_DG13 for value: 111
        /// </summary>
        EDL_DG13 = 111,

        /// <summary>
        /// Enum EDL_DG14 for value: 110
        /// </summary>
        EDL_DG14 = 110
    }

    /// <summary>
    /// Converts <see cref="RfidDataGroupTypeTag"/> to and from the JSON value
    /// </summary>
    public static class RfidDataGroupTypeTagValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RfidDataGroupTypeTag"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RfidDataGroupTypeTag FromString(string value)
        {
            if (value.Equals((96).ToString()))
                return RfidDataGroupTypeTag.COM;

            if (value.Equals((97).ToString()))
                return RfidDataGroupTypeTag.DG1;

            if (value.Equals((117).ToString()))
                return RfidDataGroupTypeTag.DG2;

            if (value.Equals((99).ToString()))
                return RfidDataGroupTypeTag.DG3;

            if (value.Equals((118).ToString()))
                return RfidDataGroupTypeTag.DG4;

            if (value.Equals((101).ToString()))
                return RfidDataGroupTypeTag.DG5;

            if (value.Equals((102).ToString()))
                return RfidDataGroupTypeTag.DG6;

            if (value.Equals((103).ToString()))
                return RfidDataGroupTypeTag.DG7;

            if (value.Equals((104).ToString()))
                return RfidDataGroupTypeTag.DG8;

            if (value.Equals((105).ToString()))
                return RfidDataGroupTypeTag.DG9;

            if (value.Equals((106).ToString()))
                return RfidDataGroupTypeTag.DG10;

            if (value.Equals((107).ToString()))
                return RfidDataGroupTypeTag.DG11;

            if (value.Equals((108).ToString()))
                return RfidDataGroupTypeTag.DG12;

            if (value.Equals((109).ToString()))
                return RfidDataGroupTypeTag.DG13;

            if (value.Equals((110).ToString()))
                return RfidDataGroupTypeTag.DG14;

            if (value.Equals((111).ToString()))
                return RfidDataGroupTypeTag.DG15;

            if (value.Equals((112).ToString()))
                return RfidDataGroupTypeTag.DG16;

            if (value.Equals((119).ToString()))
                return RfidDataGroupTypeTag.SOD;

            if (value.Equals((97).ToString()))
                return RfidDataGroupTypeTag.EID_DG1;

            if (value.Equals((98).ToString()))
                return RfidDataGroupTypeTag.EID_DG2;

            if (value.Equals((99).ToString()))
                return RfidDataGroupTypeTag.EID_DG3;

            if (value.Equals((100).ToString()))
                return RfidDataGroupTypeTag.EID_DG4;

            if (value.Equals((101).ToString()))
                return RfidDataGroupTypeTag.EID_DG5;

            if (value.Equals((102).ToString()))
                return RfidDataGroupTypeTag.EID_DG6;

            if (value.Equals((103).ToString()))
                return RfidDataGroupTypeTag.EID_DG7;

            if (value.Equals((104).ToString()))
                return RfidDataGroupTypeTag.EID_DG8;

            if (value.Equals((105).ToString()))
                return RfidDataGroupTypeTag.EID_DG9;

            if (value.Equals((106).ToString()))
                return RfidDataGroupTypeTag.EID_DG10;

            if (value.Equals((107).ToString()))
                return RfidDataGroupTypeTag.EID_DG11;

            if (value.Equals((108).ToString()))
                return RfidDataGroupTypeTag.EID_DG12;

            if (value.Equals((109).ToString()))
                return RfidDataGroupTypeTag.EID_DG13;

            if (value.Equals((110).ToString()))
                return RfidDataGroupTypeTag.EID_DG14;

            if (value.Equals((111).ToString()))
                return RfidDataGroupTypeTag.EID_DG15;

            if (value.Equals((112).ToString()))
                return RfidDataGroupTypeTag.EID_DG16;

            if (value.Equals((113).ToString()))
                return RfidDataGroupTypeTag.EID_DG17;

            if (value.Equals((114).ToString()))
                return RfidDataGroupTypeTag.EID_DG18;

            if (value.Equals((115).ToString()))
                return RfidDataGroupTypeTag.EID_DG19;

            if (value.Equals((116).ToString()))
                return RfidDataGroupTypeTag.EID_DG20;

            if (value.Equals((117).ToString()))
                return RfidDataGroupTypeTag.EID_DG21;

            if (value.Equals((96).ToString()))
                return RfidDataGroupTypeTag.EDL_COM;

            if (value.Equals((119).ToString()))
                return RfidDataGroupTypeTag.EDL_SOD;

            if (value.Equals((119).ToString()))
                return RfidDataGroupTypeTag.EDL_CE;

            if (value.Equals((97).ToString()))
                return RfidDataGroupTypeTag.EDL_DG1;

            if (value.Equals((107).ToString()))
                return RfidDataGroupTypeTag.EDL_DG2;

            if (value.Equals((108).ToString()))
                return RfidDataGroupTypeTag.EDL_DG3;

            if (value.Equals((101).ToString()))
                return RfidDataGroupTypeTag.EDL_DG4;

            if (value.Equals((103).ToString()))
                return RfidDataGroupTypeTag.EDL_DG5;

            if (value.Equals((117).ToString()))
                return RfidDataGroupTypeTag.EDL_DG6;

            if (value.Equals((99).ToString()))
                return RfidDataGroupTypeTag.EDL_DG7;

            if (value.Equals((118).ToString()))
                return RfidDataGroupTypeTag.EDL_DG8;

            if (value.Equals((112).ToString()))
                return RfidDataGroupTypeTag.EDL_DG9;

            if (value.Equals((109).ToString()))
                return RfidDataGroupTypeTag.EDL_DG11;

            if (value.Equals((113).ToString()))
                return RfidDataGroupTypeTag.EDL_DG12;

            if (value.Equals((111).ToString()))
                return RfidDataGroupTypeTag.EDL_DG13;

            if (value.Equals((110).ToString()))
                return RfidDataGroupTypeTag.EDL_DG14;

            throw new NotImplementedException($"Could not convert value to type RfidDataGroupTypeTag: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RfidDataGroupTypeTag"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RfidDataGroupTypeTag? FromStringOrDefault(string value)
        {
            if (value.Equals((96).ToString()))
                return RfidDataGroupTypeTag.COM;

            if (value.Equals((97).ToString()))
                return RfidDataGroupTypeTag.DG1;

            if (value.Equals((117).ToString()))
                return RfidDataGroupTypeTag.DG2;

            if (value.Equals((99).ToString()))
                return RfidDataGroupTypeTag.DG3;

            if (value.Equals((118).ToString()))
                return RfidDataGroupTypeTag.DG4;

            if (value.Equals((101).ToString()))
                return RfidDataGroupTypeTag.DG5;

            if (value.Equals((102).ToString()))
                return RfidDataGroupTypeTag.DG6;

            if (value.Equals((103).ToString()))
                return RfidDataGroupTypeTag.DG7;

            if (value.Equals((104).ToString()))
                return RfidDataGroupTypeTag.DG8;

            if (value.Equals((105).ToString()))
                return RfidDataGroupTypeTag.DG9;

            if (value.Equals((106).ToString()))
                return RfidDataGroupTypeTag.DG10;

            if (value.Equals((107).ToString()))
                return RfidDataGroupTypeTag.DG11;

            if (value.Equals((108).ToString()))
                return RfidDataGroupTypeTag.DG12;

            if (value.Equals((109).ToString()))
                return RfidDataGroupTypeTag.DG13;

            if (value.Equals((110).ToString()))
                return RfidDataGroupTypeTag.DG14;

            if (value.Equals((111).ToString()))
                return RfidDataGroupTypeTag.DG15;

            if (value.Equals((112).ToString()))
                return RfidDataGroupTypeTag.DG16;

            if (value.Equals((119).ToString()))
                return RfidDataGroupTypeTag.SOD;

            if (value.Equals((97).ToString()))
                return RfidDataGroupTypeTag.EID_DG1;

            if (value.Equals((98).ToString()))
                return RfidDataGroupTypeTag.EID_DG2;

            if (value.Equals((99).ToString()))
                return RfidDataGroupTypeTag.EID_DG3;

            if (value.Equals((100).ToString()))
                return RfidDataGroupTypeTag.EID_DG4;

            if (value.Equals((101).ToString()))
                return RfidDataGroupTypeTag.EID_DG5;

            if (value.Equals((102).ToString()))
                return RfidDataGroupTypeTag.EID_DG6;

            if (value.Equals((103).ToString()))
                return RfidDataGroupTypeTag.EID_DG7;

            if (value.Equals((104).ToString()))
                return RfidDataGroupTypeTag.EID_DG8;

            if (value.Equals((105).ToString()))
                return RfidDataGroupTypeTag.EID_DG9;

            if (value.Equals((106).ToString()))
                return RfidDataGroupTypeTag.EID_DG10;

            if (value.Equals((107).ToString()))
                return RfidDataGroupTypeTag.EID_DG11;

            if (value.Equals((108).ToString()))
                return RfidDataGroupTypeTag.EID_DG12;

            if (value.Equals((109).ToString()))
                return RfidDataGroupTypeTag.EID_DG13;

            if (value.Equals((110).ToString()))
                return RfidDataGroupTypeTag.EID_DG14;

            if (value.Equals((111).ToString()))
                return RfidDataGroupTypeTag.EID_DG15;

            if (value.Equals((112).ToString()))
                return RfidDataGroupTypeTag.EID_DG16;

            if (value.Equals((113).ToString()))
                return RfidDataGroupTypeTag.EID_DG17;

            if (value.Equals((114).ToString()))
                return RfidDataGroupTypeTag.EID_DG18;

            if (value.Equals((115).ToString()))
                return RfidDataGroupTypeTag.EID_DG19;

            if (value.Equals((116).ToString()))
                return RfidDataGroupTypeTag.EID_DG20;

            if (value.Equals((117).ToString()))
                return RfidDataGroupTypeTag.EID_DG21;

            if (value.Equals((96).ToString()))
                return RfidDataGroupTypeTag.EDL_COM;

            if (value.Equals((119).ToString()))
                return RfidDataGroupTypeTag.EDL_SOD;

            if (value.Equals((119).ToString()))
                return RfidDataGroupTypeTag.EDL_CE;

            if (value.Equals((97).ToString()))
                return RfidDataGroupTypeTag.EDL_DG1;

            if (value.Equals((107).ToString()))
                return RfidDataGroupTypeTag.EDL_DG2;

            if (value.Equals((108).ToString()))
                return RfidDataGroupTypeTag.EDL_DG3;

            if (value.Equals((101).ToString()))
                return RfidDataGroupTypeTag.EDL_DG4;

            if (value.Equals((103).ToString()))
                return RfidDataGroupTypeTag.EDL_DG5;

            if (value.Equals((117).ToString()))
                return RfidDataGroupTypeTag.EDL_DG6;

            if (value.Equals((99).ToString()))
                return RfidDataGroupTypeTag.EDL_DG7;

            if (value.Equals((118).ToString()))
                return RfidDataGroupTypeTag.EDL_DG8;

            if (value.Equals((112).ToString()))
                return RfidDataGroupTypeTag.EDL_DG9;

            if (value.Equals((109).ToString()))
                return RfidDataGroupTypeTag.EDL_DG11;

            if (value.Equals((113).ToString()))
                return RfidDataGroupTypeTag.EDL_DG12;

            if (value.Equals((111).ToString()))
                return RfidDataGroupTypeTag.EDL_DG13;

            if (value.Equals((110).ToString()))
                return RfidDataGroupTypeTag.EDL_DG14;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RfidDataGroupTypeTag"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(RfidDataGroupTypeTag value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidDataGroupTypeTag"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RfidDataGroupTypeTagJsonConverter : JsonConverter<RfidDataGroupTypeTag>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RfidDataGroupTypeTag Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RfidDataGroupTypeTag? result = rawValue == null
                ? null
                : RfidDataGroupTypeTagValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RfidDataGroupTypeTag to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidDataGroupTypeTag"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RfidDataGroupTypeTag rfidDataGroupTypeTag, JsonSerializerOptions options)
        {
            writer.WriteStringValue(rfidDataGroupTypeTag.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidDataGroupTypeTag"/>
    /// </summary>
    public class RfidDataGroupTypeTagNullableJsonConverter : JsonConverter<RfidDataGroupTypeTag?>
    {
        /// <summary>
        /// Returns a RfidDataGroupTypeTag from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RfidDataGroupTypeTag? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RfidDataGroupTypeTag? result = rawValue == null
                ? null
                : RfidDataGroupTypeTagValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidDataGroupTypeTag"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RfidDataGroupTypeTag? rfidDataGroupTypeTag, JsonSerializerOptions options)
        {
            writer.WriteStringValue(rfidDataGroupTypeTag?.ToString() ?? "null");
        }
    }
}
