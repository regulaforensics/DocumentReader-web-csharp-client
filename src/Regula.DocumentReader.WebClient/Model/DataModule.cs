/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// DataModule
    /// </summary>
    [DataContract(Name = "DataModule")]
    public partial class DataModule : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MType
        /// </summary>
        [DataMember(Name = "mType", IsRequired = true, EmitDefaultValue = true)]
        public BarCodeModuleType MType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataModule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataModule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataModule" /> class.
        /// </summary>
        /// <param name="mData">mData (required).</param>
        /// <param name="mLength">mLength (required).</param>
        /// <param name="mReserved1">mReserved1.</param>
        /// <param name="mReserver2">mReserver2.</param>
        /// <param name="mType">mType (required).</param>
        public DataModule(string mData = default(string), int mLength = default(int), int mReserved1 = default(int), int mReserver2 = default(int), BarCodeModuleType mType = default(BarCodeModuleType))
        {
            // to ensure "mData" is required (not null)
            if (mData == null)
            {
                throw new ArgumentNullException("mData is a required property for DataModule and cannot be null");
            }
            this.MData = mData;
            this.MLength = mLength;
            this.MType = mType;
            this.MReserved1 = mReserved1;
            this.MReserver2 = mReserver2;
        }

        /// <summary>
        /// Gets or Sets MData
        /// </summary>
        [DataMember(Name = "mData", IsRequired = true, EmitDefaultValue = true)]
        public string MData { get; set; }

        /// <summary>
        /// Gets or Sets MLength
        /// </summary>
        [DataMember(Name = "mLength", IsRequired = true, EmitDefaultValue = true)]
        public int MLength { get; set; }

        /// <summary>
        /// Gets or Sets MReserved1
        /// </summary>
        [DataMember(Name = "mReserved1", EmitDefaultValue = false)]
        public int MReserved1 { get; set; }

        /// <summary>
        /// Gets or Sets MReserver2
        /// </summary>
        [DataMember(Name = "mReserver2", EmitDefaultValue = false)]
        public int MReserver2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataModule {\n");
            sb.Append("  MData: ").Append(MData).Append("\n");
            sb.Append("  MLength: ").Append(MLength).Append("\n");
            sb.Append("  MReserved1: ").Append(MReserved1).Append("\n");
            sb.Append("  MReserver2: ").Append(MReserver2).Append("\n");
            sb.Append("  MType: ").Append(MType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
