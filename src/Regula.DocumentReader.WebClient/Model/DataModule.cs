/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.6.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// DataModule
    /// </summary>
    [DataContract]
    public partial class DataModule :  IEquatable<DataModule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataModule" /> class.
        /// </summary>
        /// <param name="mData">mData.</param>
        /// <param name="mLength">mLength.</param>
        /// <param name="mReserved1">mReserved1.</param>
        /// <param name="mReserver2">mReserver2.</param>
        /// <param name="mType">mType.</param>
        public DataModule(string mData = default(string), int mLength = default(int), int mReserved1 = default(int), int mReserver2 = default(int), int mType = default(int))
        {
            this.MData = mData;
            this.MLength = mLength;
            this.MReserved1 = mReserved1;
            this.MReserver2 = mReserver2;
            this.MType = mType;
        }
        
        /// <summary>
        /// Gets or Sets MData
        /// </summary>
        [DataMember(Name="mData", EmitDefaultValue=false)]
        public string MData { get; set; }

        /// <summary>
        /// Gets or Sets MLength
        /// </summary>
        [DataMember(Name="mLength", EmitDefaultValue=false)]
        public int MLength { get; set; }

        /// <summary>
        /// Gets or Sets MReserved1
        /// </summary>
        [DataMember(Name="mReserved1", EmitDefaultValue=false)]
        public int MReserved1 { get; set; }

        /// <summary>
        /// Gets or Sets MReserver2
        /// </summary>
        [DataMember(Name="mReserver2", EmitDefaultValue=false)]
        public int MReserver2 { get; set; }

        /// <summary>
        /// Gets or Sets MType
        /// </summary>
        [DataMember(Name="mType", EmitDefaultValue=false)]
        public int MType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataModule {\n");
            sb.Append("  MData: ").Append(MData).Append("\n");
            sb.Append("  MLength: ").Append(MLength).Append("\n");
            sb.Append("  MReserved1: ").Append(MReserved1).Append("\n");
            sb.Append("  MReserver2: ").Append(MReserver2).Append("\n");
            sb.Append("  MType: ").Append(MType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataModule);
        }

        /// <summary>
        /// Returns true if DataModule instances are equal
        /// </summary>
        /// <param name="input">Instance of DataModule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataModule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MData == input.MData ||
                    (this.MData != null &&
                    this.MData.Equals(input.MData))
                ) && 
                (
                    this.MLength == input.MLength ||
                    (this.MLength != null &&
                    this.MLength.Equals(input.MLength))
                ) && 
                (
                    this.MReserved1 == input.MReserved1 ||
                    (this.MReserved1 != null &&
                    this.MReserved1.Equals(input.MReserved1))
                ) && 
                (
                    this.MReserver2 == input.MReserver2 ||
                    (this.MReserver2 != null &&
                    this.MReserver2.Equals(input.MReserver2))
                ) && 
                (
                    this.MType == input.MType ||
                    (this.MType != null &&
                    this.MType.Equals(input.MType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MData != null)
                    hashCode = hashCode * 59 + this.MData.GetHashCode();
                if (this.MLength != null)
                    hashCode = hashCode * 59 + this.MLength.GetHashCode();
                if (this.MReserved1 != null)
                    hashCode = hashCode * 59 + this.MReserved1.GetHashCode();
                if (this.MReserver2 != null)
                    hashCode = hashCode * 59 + this.MReserver2.GetHashCode();
                if (this.MType != null)
                    hashCode = hashCode * 59 + this.MType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
