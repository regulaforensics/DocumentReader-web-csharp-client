// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// DataModule
    /// </summary>
    public partial class DataModule : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataModule" /> class.
        /// </summary>
        /// <param name="mData">mData</param>
        /// <param name="mLength">mLength</param>
        /// <param name="mType">mType</param>
        /// <param name="mReserved1">mReserved1</param>
        /// <param name="mReserver2">mReserver2</param>
        [JsonConstructor]
        public DataModule(string mData, int mLength, BarCodeModuleType mType, Option<int?> mReserved1 = default, Option<int?> mReserver2 = default)
        {
            MData = mData;
            MLength = mLength;
            MType = mType;
            MReserved1Option = mReserved1;
            MReserver2Option = mReserver2;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets MType
        /// </summary>
        [JsonPropertyName("mType")]
        public BarCodeModuleType MType { get; set; }

        /// <summary>
        /// Gets or Sets MData
        /// </summary>
        [JsonPropertyName("mData")]
        public string MData { get; set; }

        /// <summary>
        /// Gets or Sets MLength
        /// </summary>
        [JsonPropertyName("mLength")]
        public int MLength { get; set; }

        /// <summary>
        /// Used to track the state of MReserved1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MReserved1Option { get; private set; }

        /// <summary>
        /// Gets or Sets MReserved1
        /// </summary>
        [JsonPropertyName("mReserved1")]
        public int? MReserved1 { get { return this.MReserved1Option; } set { this.MReserved1Option = new(value); } }

        /// <summary>
        /// Used to track the state of MReserver2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MReserver2Option { get; private set; }

        /// <summary>
        /// Gets or Sets MReserver2
        /// </summary>
        [JsonPropertyName("mReserver2")]
        public int? MReserver2 { get { return this.MReserver2Option; } set { this.MReserver2Option = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataModule {\n");
            sb.Append("  MData: ").Append(MData).Append("\n");
            sb.Append("  MLength: ").Append(MLength).Append("\n");
            sb.Append("  MType: ").Append(MType).Append("\n");
            sb.Append("  MReserved1: ").Append(MReserved1).Append("\n");
            sb.Append("  MReserver2: ").Append(MReserver2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DataModule" />
    /// </summary>
    public class DataModuleJsonConverter : JsonConverter<DataModule>
    {
        /// <summary>
        /// Deserializes json to <see cref="DataModule" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DataModule Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> mData = default;
            Option<int?> mLength = default;
            Option<BarCodeModuleType?> mType = default;
            Option<int?> mReserved1 = default;
            Option<int?> mReserver2 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "mData":
                            mData = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mLength":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mLength = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "mType":
                            string? mTypeRawValue = utf8JsonReader.GetString();
                            if (mTypeRawValue != null)
                                mType = new Option<BarCodeModuleType?>(BarCodeModuleTypeValueConverter.FromStringOrDefault(mTypeRawValue));
                            break;
                        case "mReserved1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mReserved1 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "mReserver2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mReserver2 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!mData.IsSet)
                throw new ArgumentException("Property is required for class DataModule.", nameof(mData));

            if (!mLength.IsSet)
                throw new ArgumentException("Property is required for class DataModule.", nameof(mLength));

            if (!mType.IsSet)
                throw new ArgumentException("Property is required for class DataModule.", nameof(mType));

            if (mData.IsSet && mData.Value == null)
                throw new ArgumentNullException(nameof(mData), "Property is not nullable for class DataModule.");

            if (mLength.IsSet && mLength.Value == null)
                throw new ArgumentNullException(nameof(mLength), "Property is not nullable for class DataModule.");

            if (mType.IsSet && mType.Value == null)
                throw new ArgumentNullException(nameof(mType), "Property is not nullable for class DataModule.");

            if (mReserved1.IsSet && mReserved1.Value == null)
                throw new ArgumentNullException(nameof(mReserved1), "Property is not nullable for class DataModule.");

            if (mReserver2.IsSet && mReserver2.Value == null)
                throw new ArgumentNullException(nameof(mReserver2), "Property is not nullable for class DataModule.");

            return new DataModule(mData.Value!, mLength.Value!.Value!, mType.Value!.Value!, mReserved1, mReserver2);
        }

        /// <summary>
        /// Serializes a <see cref="DataModule" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dataModule"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DataModule dataModule, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dataModule, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DataModule" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dataModule"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DataModule dataModule, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dataModule.MData == null)
                throw new ArgumentNullException(nameof(dataModule.MData), "Property is required for class DataModule.");

            writer.WriteString("mData", dataModule.MData);

            writer.WriteNumber("mLength", dataModule.MLength);

            var mTypeRawValue = BarCodeModuleTypeValueConverter.ToJsonValue(dataModule.MType);
            writer.WriteNumber("mType", mTypeRawValue);

            if (dataModule.MReserved1Option.IsSet)
                writer.WriteNumber("mReserved1", dataModule.MReserved1Option.Value!.Value);

            if (dataModule.MReserver2Option.IsSet)
                writer.WriteNumber("mReserver2", dataModule.MReserver2Option.Value!.Value);
        }
    }
}
