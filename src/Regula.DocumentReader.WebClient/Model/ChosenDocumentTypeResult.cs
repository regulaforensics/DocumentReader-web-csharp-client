/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Contains information about the type of document that was determined based on the analysis of the provided image
    /// </summary>
    [DataContract]
    public partial class ChosenDocumentTypeResult :  IEquatable<ChosenDocumentTypeResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChosenDocumentTypeResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChosenDocumentTypeResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChosenDocumentTypeResult" /> class.
        /// </summary>
        /// <param name="oneCandidate">oneCandidate (required).</param>
        /// <param name="bufLength">bufLength.</param>
        /// <param name="light">light.</param>
        /// <param name="listIdx">listIdx.</param>
        /// <param name="pageIdx">pageIdx.</param>
        /// <param name="resultType">Same as Result type, but used for safe parsing of not-described values. See Result type. (required) (default to 0).</param>
        public ChosenDocumentTypeResult(OneCandidate oneCandidate = default(OneCandidate), int bufLength = default(int), int light = default(int), int listIdx = default(int), int pageIdx = default(int), int resultType = 0)
        {
            // to ensure "oneCandidate" is required (not null)
            if (oneCandidate == null)
            {
                throw new InvalidDataException("oneCandidate is a required property for ChosenDocumentTypeResult and cannot be null");
            }
            else
            {
                this.OneCandidate = oneCandidate;
            }
            
            // to ensure "resultType" is required (not null)
            if (resultType == null)
            {
                throw new InvalidDataException("resultType is a required property for ChosenDocumentTypeResult and cannot be null");
            }
            else
            {
                this.ResultType = resultType;
            }
            
            this.BufLength = bufLength;
            this.Light = light;
            this.ListIdx = listIdx;
            this.PageIdx = pageIdx;
        }
        
        /// <summary>
        /// Gets or Sets OneCandidate
        /// </summary>
        [DataMember(Name="OneCandidate", EmitDefaultValue=true)]
        public OneCandidate OneCandidate { get; set; }

        /// <summary>
        /// Gets or Sets XMLBuffer
        /// </summary>
        [DataMember(Name="XML_buffer", EmitDefaultValue=false)]
        public string XMLBuffer { get; private set; }

        /// <summary>
        /// Gets or Sets BufLength
        /// </summary>
        [DataMember(Name="buf_length", EmitDefaultValue=false)]
        public int BufLength { get; set; }

        /// <summary>
        /// Gets or Sets Light
        /// </summary>
        [DataMember(Name="light", EmitDefaultValue=false)]
        public int Light { get; set; }

        /// <summary>
        /// Gets or Sets ListIdx
        /// </summary>
        [DataMember(Name="list_idx", EmitDefaultValue=false)]
        public int ListIdx { get; set; }

        /// <summary>
        /// Gets or Sets PageIdx
        /// </summary>
        [DataMember(Name="page_idx", EmitDefaultValue=false)]
        public int PageIdx { get; set; }

        /// <summary>
        /// Same as Result type, but used for safe parsing of not-described values. See Result type.
        /// </summary>
        /// <value>Same as Result type, but used for safe parsing of not-described values. See Result type.</value>
        [DataMember(Name="result_type", EmitDefaultValue=true)]
        public int ResultType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChosenDocumentTypeResult {\n");
            sb.Append("  OneCandidate: ").Append(OneCandidate).Append("\n");
            sb.Append("  XMLBuffer: ").Append(XMLBuffer).Append("\n");
            sb.Append("  BufLength: ").Append(BufLength).Append("\n");
            sb.Append("  Light: ").Append(Light).Append("\n");
            sb.Append("  ListIdx: ").Append(ListIdx).Append("\n");
            sb.Append("  PageIdx: ").Append(PageIdx).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChosenDocumentTypeResult);
        }

        /// <summary>
        /// Returns true if ChosenDocumentTypeResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ChosenDocumentTypeResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChosenDocumentTypeResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OneCandidate == input.OneCandidate ||
                    (this.OneCandidate != null &&
                    this.OneCandidate.Equals(input.OneCandidate))
                ) && 
                (
                    this.XMLBuffer == input.XMLBuffer ||
                    (this.XMLBuffer != null &&
                    this.XMLBuffer.Equals(input.XMLBuffer))
                ) && 
                (
                    this.BufLength == input.BufLength ||
                    (this.BufLength != null &&
                    this.BufLength.Equals(input.BufLength))
                ) && 
                (
                    this.Light == input.Light ||
                    (this.Light != null &&
                    this.Light.Equals(input.Light))
                ) && 
                (
                    this.ListIdx == input.ListIdx ||
                    (this.ListIdx != null &&
                    this.ListIdx.Equals(input.ListIdx))
                ) && 
                (
                    this.PageIdx == input.PageIdx ||
                    (this.PageIdx != null &&
                    this.PageIdx.Equals(input.PageIdx))
                ) && 
                (
                    this.ResultType == input.ResultType ||
                    (this.ResultType != null &&
                    this.ResultType.Equals(input.ResultType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OneCandidate != null)
                    hashCode = hashCode * 59 + this.OneCandidate.GetHashCode();
                if (this.XMLBuffer != null)
                    hashCode = hashCode * 59 + this.XMLBuffer.GetHashCode();
                if (this.BufLength != null)
                    hashCode = hashCode * 59 + this.BufLength.GetHashCode();
                if (this.Light != null)
                    hashCode = hashCode * 59 + this.Light.GetHashCode();
                if (this.ListIdx != null)
                    hashCode = hashCode * 59 + this.ListIdx.GetHashCode();
                if (this.PageIdx != null)
                    hashCode = hashCode * 59 + this.PageIdx.GetHashCode();
                if (this.ResultType != null)
                    hashCode = hashCode * 59 + this.ResultType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
