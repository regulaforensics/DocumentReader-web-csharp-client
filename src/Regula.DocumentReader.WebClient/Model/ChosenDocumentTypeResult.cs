/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Contains information about the type of document that was determined based on the analysis of the provided image
    /// </summary>
    [DataContract]
    public partial class ChosenDocumentTypeResult : ResultItem,  IEquatable<ChosenDocumentTypeResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChosenDocumentTypeResult" /> class.
        /// </summary>
        [JsonConstructor]
        protected ChosenDocumentTypeResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChosenDocumentTypeResult" /> class.
        /// </summary>
        /// <param name="oneCandidate">oneCandidate.</param>
        public ChosenDocumentTypeResult(OneCandidate oneCandidate = default(OneCandidate), int bufLength = default(int), int light = default(int), int listIdx = default(int), int pageIdx = default(int), int resultType = default) : base(bufLength, light, listIdx, pageIdx, resultType)
        {
            this.OneCandidate = oneCandidate;
        }
        
        /// <summary>
        /// Gets or Sets OneCandidate
        /// </summary>
        [DataMember(Name="OneCandidate", EmitDefaultValue=false)]
        public OneCandidate OneCandidate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChosenDocumentTypeResult {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  OneCandidate: ").Append(OneCandidate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChosenDocumentTypeResult);
        }

        /// <summary>
        /// Returns true if ChosenDocumentTypeResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ChosenDocumentTypeResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChosenDocumentTypeResult input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.OneCandidate == input.OneCandidate ||
                    (this.OneCandidate != null &&
                    this.OneCandidate.Equals(input.OneCandidate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.OneCandidate != null)
                    hashCode = hashCode * 59 + this.OneCandidate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
