/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to store an array of binary information that is a part of one of the informational data groups
    /// </summary>
    [DataContract]
    public partial class TrfFtBytes :  IEquatable<TrfFtBytes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrfFtBytes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrfFtBytes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrfFtBytes" /> class.
        /// </summary>
        /// <param name="type">Logical type of the field (required).</param>
        /// <param name="status">Result of logical analysis of compliance of the contents of the field with the requirements of the specification (required).</param>
        /// <param name="length">Length of Data array (required).</param>
        /// <param name="data">Binary data array. Base64 encoded. (required).</param>
        public TrfFtBytes(AnyOfGraphicFieldTypeTextFieldType type = default(AnyOfGraphicFieldTypeTextFieldType), decimal status = default(decimal), decimal length = default(decimal), string data = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for TrfFtBytes and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for TrfFtBytes and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            
            // to ensure "length" is required (not null)
            if (length == null)
            {
                throw new InvalidDataException("length is a required property for TrfFtBytes and cannot be null");
            }
            else
            {
                this.Length = length;
            }
            
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for TrfFtBytes and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            
        }
        
        /// <summary>
        /// Logical type of the field
        /// </summary>
        /// <value>Logical type of the field</value>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public AnyOfGraphicFieldTypeTextFieldType Type { get; set; }

        /// <summary>
        /// Result of logical analysis of compliance of the contents of the field with the requirements of the specification
        /// </summary>
        /// <value>Result of logical analysis of compliance of the contents of the field with the requirements of the specification</value>
        [DataMember(Name="Status", EmitDefaultValue=true)]
        public decimal Status { get; set; }

        /// <summary>
        /// Length of Data array
        /// </summary>
        /// <value>Length of Data array</value>
        [DataMember(Name="Length", EmitDefaultValue=true)]
        public decimal Length { get; set; }

        /// <summary>
        /// Binary data array. Base64 encoded.
        /// </summary>
        /// <value>Binary data array. Base64 encoded.</value>
        [DataMember(Name="Data", EmitDefaultValue=true)]
        public string Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrfFtBytes {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrfFtBytes);
        }

        /// <summary>
        /// Returns true if TrfFtBytes instances are equal
        /// </summary>
        /// <param name="input">Instance of TrfFtBytes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrfFtBytes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
