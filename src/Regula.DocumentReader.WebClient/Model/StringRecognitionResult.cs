// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Describes single row recognition results in multi-line text field of a document
    /// </summary>
    public partial class StringRecognitionResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StringRecognitionResult" /> class.
        /// </summary>
        /// <param name="symbolsCount">Number of StringResult array elements</param>
        /// <param name="stringResult">Array of recognition results for individual characters of a string</param>
        /// <param name="bufLength">Buf_Text text string length</param>
        /// <param name="bufText">Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;</param>
        /// <param name="reserved">reserved</param>
        [JsonConstructor]
        public StringRecognitionResult(decimal symbolsCount, List<SymbolRecognitionResult> stringResult, Option<decimal?> bufLength = default, Option<string?> bufText = default, Option<int?> reserved = default)
        {
            SymbolsCount = symbolsCount;
            StringResult = stringResult;
            BufLengthOption = bufLength;
            BufTextOption = bufText;
            ReservedOption = reserved;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Number of StringResult array elements
        /// </summary>
        /// <value>Number of StringResult array elements</value>
        [JsonPropertyName("SymbolsCount")]
        public decimal SymbolsCount { get; set; }

        /// <summary>
        /// Array of recognition results for individual characters of a string
        /// </summary>
        /// <value>Array of recognition results for individual characters of a string</value>
        [JsonPropertyName("StringResult")]
        public List<SymbolRecognitionResult> StringResult { get; set; }

        /// <summary>
        /// Used to track the state of BufLength
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> BufLengthOption { get; private set; }

        /// <summary>
        /// Buf_Text text string length
        /// </summary>
        /// <value>Buf_Text text string length</value>
        [JsonPropertyName("Buf_Length")]
        public decimal? BufLength { get { return this.BufLengthOption; } set { this.BufLengthOption = new(value); } }

        /// <summary>
        /// Used to track the state of BufText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BufTextOption { get; private set; }

        /// <summary>
        /// Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;
        /// </summary>
        /// <value>Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;</value>
        [JsonPropertyName("Buf_Text")]
        public string? BufText { get { return this.BufTextOption; } set { this.BufTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reserved
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ReservedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reserved
        /// </summary>
        [JsonPropertyName("Reserved")]
        public int? Reserved { get { return this.ReservedOption; } set { this.ReservedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StringRecognitionResult {\n");
            sb.Append("  SymbolsCount: ").Append(SymbolsCount).Append("\n");
            sb.Append("  StringResult: ").Append(StringResult).Append("\n");
            sb.Append("  BufLength: ").Append(BufLength).Append("\n");
            sb.Append("  BufText: ").Append(BufText).Append("\n");
            sb.Append("  Reserved: ").Append(Reserved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StringRecognitionResult" />
    /// </summary>
    public class StringRecognitionResultJsonConverter : JsonConverter<StringRecognitionResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="StringRecognitionResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override StringRecognitionResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> symbolsCount = default;
            Option<List<SymbolRecognitionResult>?> stringResult = default;
            Option<decimal?> bufLength = default;
            Option<string?> bufText = default;
            Option<int?> reserved = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "SymbolsCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                symbolsCount = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "StringResult":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stringResult = new Option<List<SymbolRecognitionResult>?>(JsonSerializer.Deserialize<List<SymbolRecognitionResult>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Buf_Length":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bufLength = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Buf_Text":
                            bufText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Reserved":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!symbolsCount.IsSet)
                throw new ArgumentException("Property is required for class StringRecognitionResult.", nameof(symbolsCount));

            if (!stringResult.IsSet)
                throw new ArgumentException("Property is required for class StringRecognitionResult.", nameof(stringResult));

            if (symbolsCount.IsSet && symbolsCount.Value == null)
                throw new ArgumentNullException(nameof(symbolsCount), "Property is not nullable for class StringRecognitionResult.");

            if (stringResult.IsSet && stringResult.Value == null)
                throw new ArgumentNullException(nameof(stringResult), "Property is not nullable for class StringRecognitionResult.");

            if (bufLength.IsSet && bufLength.Value == null)
                throw new ArgumentNullException(nameof(bufLength), "Property is not nullable for class StringRecognitionResult.");

            if (bufText.IsSet && bufText.Value == null)
                throw new ArgumentNullException(nameof(bufText), "Property is not nullable for class StringRecognitionResult.");

            if (reserved.IsSet && reserved.Value == null)
                throw new ArgumentNullException(nameof(reserved), "Property is not nullable for class StringRecognitionResult.");

            return new StringRecognitionResult(symbolsCount.Value!.Value!, stringResult.Value!, bufLength, bufText, reserved);
        }

        /// <summary>
        /// Serializes a <see cref="StringRecognitionResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="stringRecognitionResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, StringRecognitionResult stringRecognitionResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, stringRecognitionResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="StringRecognitionResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="stringRecognitionResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, StringRecognitionResult stringRecognitionResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (stringRecognitionResult.StringResult == null)
                throw new ArgumentNullException(nameof(stringRecognitionResult.StringResult), "Property is required for class StringRecognitionResult.");

            if (stringRecognitionResult.BufTextOption.IsSet && stringRecognitionResult.BufText == null)
                throw new ArgumentNullException(nameof(stringRecognitionResult.BufText), "Property is required for class StringRecognitionResult.");

            writer.WriteNumber("SymbolsCount", stringRecognitionResult.SymbolsCount);

            writer.WritePropertyName("StringResult");
            JsonSerializer.Serialize(writer, stringRecognitionResult.StringResult, jsonSerializerOptions);
            if (stringRecognitionResult.BufLengthOption.IsSet)
                writer.WriteNumber("Buf_Length", stringRecognitionResult.BufLengthOption.Value!.Value);

            if (stringRecognitionResult.BufTextOption.IsSet)
                writer.WriteString("Buf_Text", stringRecognitionResult.BufText);

            if (stringRecognitionResult.ReservedOption.IsSet)
                writer.WriteNumber("Reserved", stringRecognitionResult.ReservedOption.Value!.Value);
        }
    }
}
