/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Describes single row recognition results in multi-line text field of a document
    /// </summary>
    [DataContract]
    public partial class StringRecognitionResult :  IEquatable<StringRecognitionResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StringRecognitionResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StringRecognitionResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StringRecognitionResult" /> class.
        /// </summary>
        /// <param name="symbolsCount">Number of StringResult array elements (required).</param>
        /// <param name="reserved">reserved.</param>
        /// <param name="stringResult">Array of recognition results for individual characters of a string (required).</param>
        /// <param name="bufLength">Buf_Text text string length.</param>
        /// <param name="bufText">Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;.</param>
        public StringRecognitionResult(decimal symbolsCount = default(decimal), Object reserved = default(Object), List<SymbolRecognitionResult> stringResult = default(List<SymbolRecognitionResult>), decimal bufLength = default(decimal), string bufText = default(string))
        {
            // to ensure "symbolsCount" is required (not null)
            if (symbolsCount == null)
            {
                throw new InvalidDataException("symbolsCount is a required property for StringRecognitionResult and cannot be null");
            }
            else
            {
                this.SymbolsCount = symbolsCount;
            }
            
            this.Reserved = reserved;
            // to ensure "stringResult" is required (not null)
            if (stringResult == null)
            {
                throw new InvalidDataException("stringResult is a required property for StringRecognitionResult and cannot be null");
            }
            else
            {
                this.StringResult = stringResult;
            }
            
            this.Reserved = reserved;
            this.BufLength = bufLength;
            this.BufText = bufText;
        }
        
        /// <summary>
        /// Number of StringResult array elements
        /// </summary>
        /// <value>Number of StringResult array elements</value>
        [DataMember(Name="SymbolsCount", EmitDefaultValue=true)]
        public decimal SymbolsCount { get; set; }

        /// <summary>
        /// Gets or Sets Reserved
        /// </summary>
        [DataMember(Name="Reserved", EmitDefaultValue=true)]
        public Object Reserved { get; set; }

        /// <summary>
        /// Array of recognition results for individual characters of a string
        /// </summary>
        /// <value>Array of recognition results for individual characters of a string</value>
        [DataMember(Name="StringResult", EmitDefaultValue=true)]
        public List<SymbolRecognitionResult> StringResult { get; set; }

        /// <summary>
        /// Buf_Text text string length
        /// </summary>
        /// <value>Buf_Text text string length</value>
        [DataMember(Name="Buf_Length", EmitDefaultValue=false)]
        public decimal BufLength { get; set; }

        /// <summary>
        /// Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;
        /// </summary>
        /// <value>Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;</value>
        [DataMember(Name="Buf_Text", EmitDefaultValue=false)]
        public string BufText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StringRecognitionResult {\n");
            sb.Append("  SymbolsCount: ").Append(SymbolsCount).Append("\n");
            sb.Append("  Reserved: ").Append(Reserved).Append("\n");
            sb.Append("  StringResult: ").Append(StringResult).Append("\n");
            sb.Append("  BufLength: ").Append(BufLength).Append("\n");
            sb.Append("  BufText: ").Append(BufText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StringRecognitionResult);
        }

        /// <summary>
        /// Returns true if StringRecognitionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of StringRecognitionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StringRecognitionResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SymbolsCount == input.SymbolsCount ||
                    (this.SymbolsCount != null &&
                    this.SymbolsCount.Equals(input.SymbolsCount))
                ) && 
                (
                    this.Reserved == input.Reserved ||
                    (this.Reserved != null &&
                    this.Reserved.Equals(input.Reserved))
                ) && 
                (
                    this.StringResult == input.StringResult ||
                    this.StringResult != null &&
                    input.StringResult != null &&
                    this.StringResult.SequenceEqual(input.StringResult)
                ) && 
                (
                    this.BufLength == input.BufLength ||
                    (this.BufLength != null &&
                    this.BufLength.Equals(input.BufLength))
                ) && 
                (
                    this.BufText == input.BufText ||
                    (this.BufText != null &&
                    this.BufText.Equals(input.BufText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SymbolsCount != null)
                    hashCode = hashCode * 59 + this.SymbolsCount.GetHashCode();
                if (this.Reserved != null)
                    hashCode = hashCode * 59 + this.Reserved.GetHashCode();
                if (this.StringResult != null)
                    hashCode = hashCode * 59 + this.StringResult.GetHashCode();
                if (this.BufLength != null)
                    hashCode = hashCode * 59 + this.BufLength.GetHashCode();
                if (this.BufText != null)
                    hashCode = hashCode * 59 + this.BufText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
