/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Describes single row recognition results in multi-line text field of a document
    /// </summary>
    [DataContract(Name = "StringRecognitionResult")]
    public partial class StringRecognitionResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StringRecognitionResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StringRecognitionResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StringRecognitionResult" /> class.
        /// </summary>
        /// <param name="symbolsCount">Number of StringResult array elements (required).</param>
        /// <param name="stringResult">Array of recognition results for individual characters of a string (required).</param>
        /// <param name="bufLength">Buf_Text text string length.</param>
        /// <param name="bufText">Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;.</param>
        /// <param name="reserved">reserved.</param>
        public StringRecognitionResult(decimal symbolsCount = default(decimal), List<SymbolRecognitionResult> stringResult = default(List<SymbolRecognitionResult>), decimal bufLength = default(decimal), string bufText = default(string), int reserved = default(int))
        {
            this.SymbolsCount = symbolsCount;
            // to ensure "stringResult" is required (not null)
            if (stringResult == null)
            {
                throw new ArgumentNullException("stringResult is a required property for StringRecognitionResult and cannot be null");
            }
            this.StringResult = stringResult;
            this.BufLength = bufLength;
            this.BufText = bufText;
            this.Reserved = reserved;
        }

        /// <summary>
        /// Number of StringResult array elements
        /// </summary>
        /// <value>Number of StringResult array elements</value>
        [DataMember(Name = "SymbolsCount", IsRequired = true, EmitDefaultValue = true)]
        public decimal SymbolsCount { get; set; }

        /// <summary>
        /// Array of recognition results for individual characters of a string
        /// </summary>
        /// <value>Array of recognition results for individual characters of a string</value>
        [DataMember(Name = "StringResult", IsRequired = true, EmitDefaultValue = true)]
        public List<SymbolRecognitionResult> StringResult { get; set; }

        /// <summary>
        /// Buf_Text text string length
        /// </summary>
        /// <value>Buf_Text text string length</value>
        [DataMember(Name = "Buf_Length", EmitDefaultValue = false)]
        public decimal BufLength { get; set; }

        /// <summary>
        /// Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;
        /// </summary>
        /// <value>Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;</value>
        [DataMember(Name = "Buf_Text", EmitDefaultValue = false)]
        public string BufText { get; set; }

        /// <summary>
        /// Gets or Sets Reserved
        /// </summary>
        [DataMember(Name = "Reserved", EmitDefaultValue = false)]
        public int Reserved { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StringRecognitionResult {\n");
            sb.Append("  SymbolsCount: ").Append(SymbolsCount).Append("\n");
            sb.Append("  StringResult: ").Append(StringResult).Append("\n");
            sb.Append("  BufLength: ").Append(BufLength).Append("\n");
            sb.Append("  BufText: ").Append(BufText).Append("\n");
            sb.Append("  Reserved: ").Append(Reserved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
