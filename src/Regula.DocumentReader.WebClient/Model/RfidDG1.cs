// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure used to store the contents of EF.DG1 informational data group of ePassport application – document MRZ data
    /// </summary>
    public partial class RfidDG1 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidDG1" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="documentID">documentID</param>
        /// <param name="documentType">Symbolic code of document type</param>
        /// <param name="state">Symbolic code of document issuing state</param>
        /// <param name="holder">DO’s name and surname</param>
        /// <param name="documentNumber">Document number</param>
        /// <param name="checkDigitDocumentNumber">Check digit of document number</param>
        /// <param name="nationality">Symbolic code of DO’s nationality</param>
        /// <param name="birthday">DO’s date of birth</param>
        /// <param name="checkDigitBirthday">Check digit of DO’s date of birth</param>
        /// <param name="sex">DO’s sex</param>
        /// <param name="expiryDate">Term of validity of the document</param>
        /// <param name="checkDigitExpiryDate">Check digit of term of validity of the document</param>
        /// <param name="optionalData">DO’s personal number or other additional data</param>
        /// <param name="checkDigitOptionalData">Check digit of additional data</param>
        /// <param name="checkDigitComposite">General check digit</param>
        [JsonConstructor]
        public RfidDG1(RfidDataGroupTypeTag type, DocumentFormat documentID, string documentType, string state, string holder, string documentNumber, decimal checkDigitDocumentNumber, string nationality, string birthday, decimal checkDigitBirthday, string sex, string expiryDate, decimal checkDigitExpiryDate, string optionalData, decimal checkDigitOptionalData, decimal checkDigitComposite)
        {
            Type = type;
            DocumentID = documentID;
            DocumentType = documentType;
            State = state;
            Holder = holder;
            DocumentNumber = documentNumber;
            CheckDigitDocumentNumber = checkDigitDocumentNumber;
            Nationality = nationality;
            Birthday = birthday;
            CheckDigitBirthday = checkDigitBirthday;
            Sex = sex;
            ExpiryDate = expiryDate;
            CheckDigitExpiryDate = checkDigitExpiryDate;
            OptionalData = optionalData;
            CheckDigitOptionalData = checkDigitOptionalData;
            CheckDigitComposite = checkDigitComposite;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("Type")]
        public RfidDataGroupTypeTag Type { get; set; }

        /// <summary>
        /// Gets or Sets DocumentID
        /// </summary>
        [JsonPropertyName("DocumentID")]
        public DocumentFormat DocumentID { get; set; }

        /// <summary>
        /// Symbolic code of document type
        /// </summary>
        /// <value>Symbolic code of document type</value>
        [JsonPropertyName("DocumentType")]
        public string DocumentType { get; set; }

        /// <summary>
        /// Symbolic code of document issuing state
        /// </summary>
        /// <value>Symbolic code of document issuing state</value>
        [JsonPropertyName("State")]
        public string State { get; set; }

        /// <summary>
        /// DO’s name and surname
        /// </summary>
        /// <value>DO’s name and surname</value>
        [JsonPropertyName("Holder")]
        public string Holder { get; set; }

        /// <summary>
        /// Document number
        /// </summary>
        /// <value>Document number</value>
        [JsonPropertyName("DocumentNumber")]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Check digit of document number
        /// </summary>
        /// <value>Check digit of document number</value>
        [JsonPropertyName("CheckDigitDocumentNumber")]
        public decimal CheckDigitDocumentNumber { get; set; }

        /// <summary>
        /// Symbolic code of DO’s nationality
        /// </summary>
        /// <value>Symbolic code of DO’s nationality</value>
        [JsonPropertyName("Nationality")]
        public string Nationality { get; set; }

        /// <summary>
        /// DO’s date of birth
        /// </summary>
        /// <value>DO’s date of birth</value>
        [JsonPropertyName("Birthday")]
        public string Birthday { get; set; }

        /// <summary>
        /// Check digit of DO’s date of birth
        /// </summary>
        /// <value>Check digit of DO’s date of birth</value>
        [JsonPropertyName("CheckDigitBirthday")]
        public decimal CheckDigitBirthday { get; set; }

        /// <summary>
        /// DO’s sex
        /// </summary>
        /// <value>DO’s sex</value>
        [JsonPropertyName("Sex")]
        public string Sex { get; set; }

        /// <summary>
        /// Term of validity of the document
        /// </summary>
        /// <value>Term of validity of the document</value>
        [JsonPropertyName("ExpiryDate")]
        public string ExpiryDate { get; set; }

        /// <summary>
        /// Check digit of term of validity of the document
        /// </summary>
        /// <value>Check digit of term of validity of the document</value>
        [JsonPropertyName("CheckDigitExpiryDate")]
        public decimal CheckDigitExpiryDate { get; set; }

        /// <summary>
        /// DO’s personal number or other additional data
        /// </summary>
        /// <value>DO’s personal number or other additional data</value>
        [JsonPropertyName("OptionalData")]
        public string OptionalData { get; set; }

        /// <summary>
        /// Check digit of additional data
        /// </summary>
        /// <value>Check digit of additional data</value>
        [JsonPropertyName("CheckDigitOptionalData")]
        public decimal CheckDigitOptionalData { get; set; }

        /// <summary>
        /// General check digit
        /// </summary>
        /// <value>General check digit</value>
        [JsonPropertyName("CheckDigitComposite")]
        public decimal CheckDigitComposite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidDG1 {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DocumentID: ").Append(DocumentID).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Holder: ").Append(Holder).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  CheckDigitDocumentNumber: ").Append(CheckDigitDocumentNumber).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  Birthday: ").Append(Birthday).Append("\n");
            sb.Append("  CheckDigitBirthday: ").Append(CheckDigitBirthday).Append("\n");
            sb.Append("  Sex: ").Append(Sex).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  CheckDigitExpiryDate: ").Append(CheckDigitExpiryDate).Append("\n");
            sb.Append("  OptionalData: ").Append(OptionalData).Append("\n");
            sb.Append("  CheckDigitOptionalData: ").Append(CheckDigitOptionalData).Append("\n");
            sb.Append("  CheckDigitComposite: ").Append(CheckDigitComposite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidDG1" />
    /// </summary>
    public class RfidDG1JsonConverter : JsonConverter<RfidDG1>
    {
        /// <summary>
        /// Deserializes json to <see cref="RfidDG1" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RfidDG1 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RfidDataGroupTypeTag?> type = default;
            Option<DocumentFormat?> documentID = default;
            Option<string?> documentType = default;
            Option<string?> state = default;
            Option<string?> holder = default;
            Option<string?> documentNumber = default;
            Option<decimal?> checkDigitDocumentNumber = default;
            Option<string?> nationality = default;
            Option<string?> birthday = default;
            Option<decimal?> checkDigitBirthday = default;
            Option<string?> sex = default;
            Option<string?> expiryDate = default;
            Option<decimal?> checkDigitExpiryDate = default;
            Option<string?> optionalData = default;
            Option<decimal?> checkDigitOptionalData = default;
            Option<decimal?> checkDigitComposite = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<RfidDataGroupTypeTag?>(RfidDataGroupTypeTagValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "DocumentID":
                            string? documentIDRawValue = utf8JsonReader.GetString();
                            if (documentIDRawValue != null)
                                documentID = new Option<DocumentFormat?>(DocumentFormatValueConverter.FromStringOrDefault(documentIDRawValue));
                            break;
                        case "DocumentType":
                            documentType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "State":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Holder":
                            holder = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "DocumentNumber":
                            documentNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "CheckDigitDocumentNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkDigitDocumentNumber = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Nationality":
                            nationality = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Birthday":
                            birthday = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "CheckDigitBirthday":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkDigitBirthday = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Sex":
                            sex = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ExpiryDate":
                            expiryDate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "CheckDigitExpiryDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkDigitExpiryDate = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "OptionalData":
                            optionalData = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "CheckDigitOptionalData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkDigitOptionalData = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "CheckDigitComposite":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkDigitComposite = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(type));

            if (!documentID.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(documentID));

            if (!documentType.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(documentType));

            if (!state.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(state));

            if (!holder.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(holder));

            if (!documentNumber.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(documentNumber));

            if (!checkDigitDocumentNumber.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(checkDigitDocumentNumber));

            if (!nationality.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(nationality));

            if (!birthday.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(birthday));

            if (!checkDigitBirthday.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(checkDigitBirthday));

            if (!sex.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(sex));

            if (!expiryDate.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(expiryDate));

            if (!checkDigitExpiryDate.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(checkDigitExpiryDate));

            if (!optionalData.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(optionalData));

            if (!checkDigitOptionalData.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(checkDigitOptionalData));

            if (!checkDigitComposite.IsSet)
                throw new ArgumentException("Property is required for class RfidDG1.", nameof(checkDigitComposite));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class RfidDG1.");

            if (documentID.IsSet && documentID.Value == null)
                throw new ArgumentNullException(nameof(documentID), "Property is not nullable for class RfidDG1.");

            if (documentType.IsSet && documentType.Value == null)
                throw new ArgumentNullException(nameof(documentType), "Property is not nullable for class RfidDG1.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class RfidDG1.");

            if (holder.IsSet && holder.Value == null)
                throw new ArgumentNullException(nameof(holder), "Property is not nullable for class RfidDG1.");

            if (documentNumber.IsSet && documentNumber.Value == null)
                throw new ArgumentNullException(nameof(documentNumber), "Property is not nullable for class RfidDG1.");

            if (checkDigitDocumentNumber.IsSet && checkDigitDocumentNumber.Value == null)
                throw new ArgumentNullException(nameof(checkDigitDocumentNumber), "Property is not nullable for class RfidDG1.");

            if (nationality.IsSet && nationality.Value == null)
                throw new ArgumentNullException(nameof(nationality), "Property is not nullable for class RfidDG1.");

            if (birthday.IsSet && birthday.Value == null)
                throw new ArgumentNullException(nameof(birthday), "Property is not nullable for class RfidDG1.");

            if (checkDigitBirthday.IsSet && checkDigitBirthday.Value == null)
                throw new ArgumentNullException(nameof(checkDigitBirthday), "Property is not nullable for class RfidDG1.");

            if (sex.IsSet && sex.Value == null)
                throw new ArgumentNullException(nameof(sex), "Property is not nullable for class RfidDG1.");

            if (expiryDate.IsSet && expiryDate.Value == null)
                throw new ArgumentNullException(nameof(expiryDate), "Property is not nullable for class RfidDG1.");

            if (checkDigitExpiryDate.IsSet && checkDigitExpiryDate.Value == null)
                throw new ArgumentNullException(nameof(checkDigitExpiryDate), "Property is not nullable for class RfidDG1.");

            if (optionalData.IsSet && optionalData.Value == null)
                throw new ArgumentNullException(nameof(optionalData), "Property is not nullable for class RfidDG1.");

            if (checkDigitOptionalData.IsSet && checkDigitOptionalData.Value == null)
                throw new ArgumentNullException(nameof(checkDigitOptionalData), "Property is not nullable for class RfidDG1.");

            if (checkDigitComposite.IsSet && checkDigitComposite.Value == null)
                throw new ArgumentNullException(nameof(checkDigitComposite), "Property is not nullable for class RfidDG1.");

            return new RfidDG1(type.Value!.Value!, documentID.Value!.Value!, documentType.Value!, state.Value!, holder.Value!, documentNumber.Value!, checkDigitDocumentNumber.Value!.Value!, nationality.Value!, birthday.Value!, checkDigitBirthday.Value!.Value!, sex.Value!, expiryDate.Value!, checkDigitExpiryDate.Value!.Value!, optionalData.Value!, checkDigitOptionalData.Value!.Value!, checkDigitComposite.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RfidDG1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidDG1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RfidDG1 rfidDG1, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rfidDG1, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RfidDG1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidDG1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RfidDG1 rfidDG1, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rfidDG1.DocumentType == null)
                throw new ArgumentNullException(nameof(rfidDG1.DocumentType), "Property is required for class RfidDG1.");

            if (rfidDG1.State == null)
                throw new ArgumentNullException(nameof(rfidDG1.State), "Property is required for class RfidDG1.");

            if (rfidDG1.Holder == null)
                throw new ArgumentNullException(nameof(rfidDG1.Holder), "Property is required for class RfidDG1.");

            if (rfidDG1.DocumentNumber == null)
                throw new ArgumentNullException(nameof(rfidDG1.DocumentNumber), "Property is required for class RfidDG1.");

            if (rfidDG1.Nationality == null)
                throw new ArgumentNullException(nameof(rfidDG1.Nationality), "Property is required for class RfidDG1.");

            if (rfidDG1.Birthday == null)
                throw new ArgumentNullException(nameof(rfidDG1.Birthday), "Property is required for class RfidDG1.");

            if (rfidDG1.Sex == null)
                throw new ArgumentNullException(nameof(rfidDG1.Sex), "Property is required for class RfidDG1.");

            if (rfidDG1.ExpiryDate == null)
                throw new ArgumentNullException(nameof(rfidDG1.ExpiryDate), "Property is required for class RfidDG1.");

            if (rfidDG1.OptionalData == null)
                throw new ArgumentNullException(nameof(rfidDG1.OptionalData), "Property is required for class RfidDG1.");

            var typeRawValue = RfidDataGroupTypeTagValueConverter.ToJsonValue(rfidDG1.Type);
            writer.WriteNumber("Type", typeRawValue);

            var documentIDRawValue = DocumentFormatValueConverter.ToJsonValue(rfidDG1.DocumentID);
            writer.WriteNumber("DocumentID", documentIDRawValue);

            writer.WriteString("DocumentType", rfidDG1.DocumentType);

            writer.WriteString("State", rfidDG1.State);

            writer.WriteString("Holder", rfidDG1.Holder);

            writer.WriteString("DocumentNumber", rfidDG1.DocumentNumber);

            writer.WriteNumber("CheckDigitDocumentNumber", rfidDG1.CheckDigitDocumentNumber);

            writer.WriteString("Nationality", rfidDG1.Nationality);

            writer.WriteString("Birthday", rfidDG1.Birthday);

            writer.WriteNumber("CheckDigitBirthday", rfidDG1.CheckDigitBirthday);

            writer.WriteString("Sex", rfidDG1.Sex);

            writer.WriteString("ExpiryDate", rfidDG1.ExpiryDate);

            writer.WriteNumber("CheckDigitExpiryDate", rfidDG1.CheckDigitExpiryDate);

            writer.WriteString("OptionalData", rfidDG1.OptionalData);

            writer.WriteNumber("CheckDigitOptionalData", rfidDG1.CheckDigitOptionalData);

            writer.WriteNumber("CheckDigitComposite", rfidDG1.CheckDigitComposite);
        }
    }
}
