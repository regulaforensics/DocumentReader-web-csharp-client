// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Describes a single character recognition results in the text field line
    /// </summary>
    public partial class SymbolRecognitionResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolRecognitionResult" /> class.
        /// </summary>
        /// <param name="symbolRect">symbolRect</param>
        /// <param name="candidatesCount">Number of significant elements of ListOfCandidates array</param>
        /// <param name="listOfCandidates">Array of candidate characters. Sorted in descending order of recognition probabilities (the first element has highest probability)</param>
        /// <param name="baseLineBottom">baseLineBottom</param>
        /// <param name="baseLineTop">baseLineTop</param>
        /// <param name="reserved">reserved</param>
        [JsonConstructor]
        public SymbolRecognitionResult(RectangleCoordinates symbolRect, decimal candidatesCount, List<SymbolCandidate> listOfCandidates, Option<int?> baseLineBottom = default, Option<int?> baseLineTop = default, Option<int?> reserved = default)
        {
            SymbolRect = symbolRect;
            CandidatesCount = candidatesCount;
            ListOfCandidates = listOfCandidates;
            BaseLineBottomOption = baseLineBottom;
            BaseLineTopOption = baseLineTop;
            ReservedOption = reserved;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SymbolRect
        /// </summary>
        [JsonPropertyName("SymbolRect")]
        public RectangleCoordinates SymbolRect { get; set; }

        /// <summary>
        /// Number of significant elements of ListOfCandidates array
        /// </summary>
        /// <value>Number of significant elements of ListOfCandidates array</value>
        [JsonPropertyName("CandidatesCount")]
        public decimal CandidatesCount { get; set; }

        /// <summary>
        /// Array of candidate characters. Sorted in descending order of recognition probabilities (the first element has highest probability)
        /// </summary>
        /// <value>Array of candidate characters. Sorted in descending order of recognition probabilities (the first element has highest probability)</value>
        [JsonPropertyName("ListOfCandidates")]
        public List<SymbolCandidate> ListOfCandidates { get; set; }

        /// <summary>
        /// Used to track the state of BaseLineBottom
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BaseLineBottomOption { get; private set; }

        /// <summary>
        /// Gets or Sets BaseLineBottom
        /// </summary>
        [JsonPropertyName("BaseLineBottom")]
        public int? BaseLineBottom { get { return this.BaseLineBottomOption; } set { this.BaseLineBottomOption = new(value); } }

        /// <summary>
        /// Used to track the state of BaseLineTop
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BaseLineTopOption { get; private set; }

        /// <summary>
        /// Gets or Sets BaseLineTop
        /// </summary>
        [JsonPropertyName("BaseLineTop")]
        public int? BaseLineTop { get { return this.BaseLineTopOption; } set { this.BaseLineTopOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reserved
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ReservedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reserved
        /// </summary>
        [JsonPropertyName("Reserved")]
        public int? Reserved { get { return this.ReservedOption; } set { this.ReservedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SymbolRecognitionResult {\n");
            sb.Append("  SymbolRect: ").Append(SymbolRect).Append("\n");
            sb.Append("  CandidatesCount: ").Append(CandidatesCount).Append("\n");
            sb.Append("  ListOfCandidates: ").Append(ListOfCandidates).Append("\n");
            sb.Append("  BaseLineBottom: ").Append(BaseLineBottom).Append("\n");
            sb.Append("  BaseLineTop: ").Append(BaseLineTop).Append("\n");
            sb.Append("  Reserved: ").Append(Reserved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SymbolRecognitionResult" />
    /// </summary>
    public class SymbolRecognitionResultJsonConverter : JsonConverter<SymbolRecognitionResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="SymbolRecognitionResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SymbolRecognitionResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RectangleCoordinates?> symbolRect = default;
            Option<decimal?> candidatesCount = default;
            Option<List<SymbolCandidate>?> listOfCandidates = default;
            Option<int?> baseLineBottom = default;
            Option<int?> baseLineTop = default;
            Option<int?> reserved = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "SymbolRect":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                symbolRect = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "CandidatesCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                candidatesCount = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "ListOfCandidates":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                listOfCandidates = new Option<List<SymbolCandidate>?>(JsonSerializer.Deserialize<List<SymbolCandidate>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "BaseLineBottom":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                baseLineBottom = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "BaseLineTop":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                baseLineTop = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Reserved":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!symbolRect.IsSet)
                throw new ArgumentException("Property is required for class SymbolRecognitionResult.", nameof(symbolRect));

            if (!candidatesCount.IsSet)
                throw new ArgumentException("Property is required for class SymbolRecognitionResult.", nameof(candidatesCount));

            if (!listOfCandidates.IsSet)
                throw new ArgumentException("Property is required for class SymbolRecognitionResult.", nameof(listOfCandidates));

            if (symbolRect.IsSet && symbolRect.Value == null)
                throw new ArgumentNullException(nameof(symbolRect), "Property is not nullable for class SymbolRecognitionResult.");

            if (candidatesCount.IsSet && candidatesCount.Value == null)
                throw new ArgumentNullException(nameof(candidatesCount), "Property is not nullable for class SymbolRecognitionResult.");

            if (listOfCandidates.IsSet && listOfCandidates.Value == null)
                throw new ArgumentNullException(nameof(listOfCandidates), "Property is not nullable for class SymbolRecognitionResult.");

            if (baseLineBottom.IsSet && baseLineBottom.Value == null)
                throw new ArgumentNullException(nameof(baseLineBottom), "Property is not nullable for class SymbolRecognitionResult.");

            if (baseLineTop.IsSet && baseLineTop.Value == null)
                throw new ArgumentNullException(nameof(baseLineTop), "Property is not nullable for class SymbolRecognitionResult.");

            if (reserved.IsSet && reserved.Value == null)
                throw new ArgumentNullException(nameof(reserved), "Property is not nullable for class SymbolRecognitionResult.");

            return new SymbolRecognitionResult(symbolRect.Value!, candidatesCount.Value!.Value!, listOfCandidates.Value!, baseLineBottom, baseLineTop, reserved);
        }

        /// <summary>
        /// Serializes a <see cref="SymbolRecognitionResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="symbolRecognitionResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SymbolRecognitionResult symbolRecognitionResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, symbolRecognitionResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SymbolRecognitionResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="symbolRecognitionResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SymbolRecognitionResult symbolRecognitionResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (symbolRecognitionResult.SymbolRect == null)
                throw new ArgumentNullException(nameof(symbolRecognitionResult.SymbolRect), "Property is required for class SymbolRecognitionResult.");

            if (symbolRecognitionResult.ListOfCandidates == null)
                throw new ArgumentNullException(nameof(symbolRecognitionResult.ListOfCandidates), "Property is required for class SymbolRecognitionResult.");

            writer.WritePropertyName("SymbolRect");
            JsonSerializer.Serialize(writer, symbolRecognitionResult.SymbolRect, jsonSerializerOptions);
            writer.WriteNumber("CandidatesCount", symbolRecognitionResult.CandidatesCount);

            writer.WritePropertyName("ListOfCandidates");
            JsonSerializer.Serialize(writer, symbolRecognitionResult.ListOfCandidates, jsonSerializerOptions);
            if (symbolRecognitionResult.BaseLineBottomOption.IsSet)
                writer.WriteNumber("BaseLineBottom", symbolRecognitionResult.BaseLineBottomOption.Value!.Value);

            if (symbolRecognitionResult.BaseLineTopOption.IsSet)
                writer.WriteNumber("BaseLineTop", symbolRecognitionResult.BaseLineTopOption.Value!.Value);

            if (symbolRecognitionResult.ReservedOption.IsSet)
                writer.WriteNumber("Reserved", symbolRecognitionResult.ReservedOption.Value!.Value);
        }
    }
}
