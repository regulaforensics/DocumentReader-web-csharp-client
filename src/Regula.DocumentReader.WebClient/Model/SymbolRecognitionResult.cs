/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Describes a single character recognition results in the text field line
    /// </summary>
    [DataContract(Name = "SymbolRecognitionResult")]
    public partial class SymbolRecognitionResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolRecognitionResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SymbolRecognitionResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolRecognitionResult" /> class.
        /// </summary>
        /// <param name="symbolRect">symbolRect.</param>
        /// <param name="candidatesCount">Number of significant elements of ListOfCandidates array (required).</param>
        /// <param name="listOfCandidates">Array of candidate characters. Sorted in descending order of recognition probabilities (the first element has highest probability) (required).</param>
        /// <param name="baseLineBottom">baseLineBottom.</param>
        /// <param name="baseLineTop">baseLineTop.</param>
        public SymbolRecognitionResult(RectangleCoordinates symbolRect = default(RectangleCoordinates), decimal candidatesCount = default(decimal), List<SymbolCandidate> listOfCandidates = default(List<SymbolCandidate>), int baseLineBottom = default(int), int baseLineTop = default(int))
        {
            this.CandidatesCount = candidatesCount;
            // to ensure "listOfCandidates" is required (not null)
            if (listOfCandidates == null)
            {
                throw new ArgumentNullException("listOfCandidates is a required property for SymbolRecognitionResult and cannot be null");
            }
            this.ListOfCandidates = listOfCandidates;
            this.SymbolRect = symbolRect;
            this.BaseLineBottom = baseLineBottom;
            this.BaseLineTop = baseLineTop;
        }

        /// <summary>
        /// Gets or Sets SymbolRect
        /// </summary>
        [DataMember(Name = "SymbolRect", EmitDefaultValue = false)]
        public RectangleCoordinates? SymbolRect { get; set; }

        /// <summary>
        /// Number of significant elements of ListOfCandidates array
        /// </summary>
        /// <value>Number of significant elements of ListOfCandidates array</value>
        [DataMember(Name = "CandidatesCount", IsRequired = true, EmitDefaultValue = true)]
        public decimal CandidatesCount { get; set; }

        /// <summary>
        /// Array of candidate characters. Sorted in descending order of recognition probabilities (the first element has highest probability)
        /// </summary>
        /// <value>Array of candidate characters. Sorted in descending order of recognition probabilities (the first element has highest probability)</value>
        [DataMember(Name = "ListOfCandidates", IsRequired = true, EmitDefaultValue = true)]
        public List<SymbolCandidate> ListOfCandidates { get; set; }

        /// <summary>
        /// Gets or Sets BaseLineBottom
        /// </summary>
        [DataMember(Name = "BaseLineBottom", EmitDefaultValue = false)]
        public int? BaseLineBottom { get; set; }

        /// <summary>
        /// Gets or Sets BaseLineTop
        /// </summary>
        [DataMember(Name = "BaseLineTop", EmitDefaultValue = false)]
        public int? BaseLineTop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SymbolRecognitionResult {\n");
            sb.Append("  SymbolRect: ").Append(SymbolRect).Append("\n");
            sb.Append("  CandidatesCount: ").Append(CandidatesCount).Append("\n");
            sb.Append("  ListOfCandidates: ").Append(ListOfCandidates).Append("\n");
            sb.Append("  BaseLineBottom: ").Append(BaseLineBottom).Append("\n");
            sb.Append("  BaseLineTop: ").Append(BaseLineTop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
