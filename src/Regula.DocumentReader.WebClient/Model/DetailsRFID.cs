// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Details on performed RFID checks
    /// </summary>
    public partial class DetailsRFID : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsRFID" /> class.
        /// </summary>
        /// <param name="overallStatus">overallStatus</param>
        /// <param name="aA">aA</param>
        /// <param name="bAC">bAC</param>
        /// <param name="cA">cA</param>
        /// <param name="pA">pA</param>
        /// <param name="pACE">pACE</param>
        /// <param name="tA">tA</param>
        [JsonConstructor]
        public DetailsRFID(CheckResult overallStatus, CheckResult aA, CheckResult bAC, CheckResult cA, CheckResult pA, CheckResult pACE, CheckResult tA)
        {
            OverallStatus = overallStatus;
            AA = aA;
            BAC = bAC;
            CA = cA;
            PA = pA;
            PACE = pACE;
            TA = tA;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets OverallStatus
        /// </summary>
        [JsonPropertyName("overallStatus")]
        public CheckResult OverallStatus { get; set; }

        /// <summary>
        /// Gets or Sets AA
        /// </summary>
        [JsonPropertyName("AA")]
        public CheckResult AA { get; set; }

        /// <summary>
        /// Gets or Sets BAC
        /// </summary>
        [JsonPropertyName("BAC")]
        public CheckResult BAC { get; set; }

        /// <summary>
        /// Gets or Sets CA
        /// </summary>
        [JsonPropertyName("CA")]
        public CheckResult CA { get; set; }

        /// <summary>
        /// Gets or Sets PA
        /// </summary>
        [JsonPropertyName("PA")]
        public CheckResult PA { get; set; }

        /// <summary>
        /// Gets or Sets PACE
        /// </summary>
        [JsonPropertyName("PACE")]
        public CheckResult PACE { get; set; }

        /// <summary>
        /// Gets or Sets TA
        /// </summary>
        [JsonPropertyName("TA")]
        public CheckResult TA { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailsRFID {\n");
            sb.Append("  OverallStatus: ").Append(OverallStatus).Append("\n");
            sb.Append("  AA: ").Append(AA).Append("\n");
            sb.Append("  BAC: ").Append(BAC).Append("\n");
            sb.Append("  CA: ").Append(CA).Append("\n");
            sb.Append("  PA: ").Append(PA).Append("\n");
            sb.Append("  PACE: ").Append(PACE).Append("\n");
            sb.Append("  TA: ").Append(TA).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DetailsRFID" />
    /// </summary>
    public class DetailsRFIDJsonConverter : JsonConverter<DetailsRFID>
    {
        /// <summary>
        /// Deserializes json to <see cref="DetailsRFID" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DetailsRFID Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CheckResult?> overallStatus = default;
            Option<CheckResult?> aA = default;
            Option<CheckResult?> bAC = default;
            Option<CheckResult?> cA = default;
            Option<CheckResult?> pA = default;
            Option<CheckResult?> pACE = default;
            Option<CheckResult?> tA = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "overallStatus":
                            string? overallStatusRawValue = utf8JsonReader.GetString();
                            if (overallStatusRawValue != null)
                                overallStatus = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(overallStatusRawValue));
                            break;
                        case "AA":
                            string? aARawValue = utf8JsonReader.GetString();
                            if (aARawValue != null)
                                aA = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(aARawValue));
                            break;
                        case "BAC":
                            string? bACRawValue = utf8JsonReader.GetString();
                            if (bACRawValue != null)
                                bAC = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(bACRawValue));
                            break;
                        case "CA":
                            string? cARawValue = utf8JsonReader.GetString();
                            if (cARawValue != null)
                                cA = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(cARawValue));
                            break;
                        case "PA":
                            string? pARawValue = utf8JsonReader.GetString();
                            if (pARawValue != null)
                                pA = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(pARawValue));
                            break;
                        case "PACE":
                            string? pACERawValue = utf8JsonReader.GetString();
                            if (pACERawValue != null)
                                pACE = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(pACERawValue));
                            break;
                        case "TA":
                            string? tARawValue = utf8JsonReader.GetString();
                            if (tARawValue != null)
                                tA = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(tARawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!overallStatus.IsSet)
                throw new ArgumentException("Property is required for class DetailsRFID.", nameof(overallStatus));

            if (!aA.IsSet)
                throw new ArgumentException("Property is required for class DetailsRFID.", nameof(aA));

            if (!bAC.IsSet)
                throw new ArgumentException("Property is required for class DetailsRFID.", nameof(bAC));

            if (!cA.IsSet)
                throw new ArgumentException("Property is required for class DetailsRFID.", nameof(cA));

            if (!pA.IsSet)
                throw new ArgumentException("Property is required for class DetailsRFID.", nameof(pA));

            if (!pACE.IsSet)
                throw new ArgumentException("Property is required for class DetailsRFID.", nameof(pACE));

            if (!tA.IsSet)
                throw new ArgumentException("Property is required for class DetailsRFID.", nameof(tA));

            if (overallStatus.IsSet && overallStatus.Value == null)
                throw new ArgumentNullException(nameof(overallStatus), "Property is not nullable for class DetailsRFID.");

            if (aA.IsSet && aA.Value == null)
                throw new ArgumentNullException(nameof(aA), "Property is not nullable for class DetailsRFID.");

            if (bAC.IsSet && bAC.Value == null)
                throw new ArgumentNullException(nameof(bAC), "Property is not nullable for class DetailsRFID.");

            if (cA.IsSet && cA.Value == null)
                throw new ArgumentNullException(nameof(cA), "Property is not nullable for class DetailsRFID.");

            if (pA.IsSet && pA.Value == null)
                throw new ArgumentNullException(nameof(pA), "Property is not nullable for class DetailsRFID.");

            if (pACE.IsSet && pACE.Value == null)
                throw new ArgumentNullException(nameof(pACE), "Property is not nullable for class DetailsRFID.");

            if (tA.IsSet && tA.Value == null)
                throw new ArgumentNullException(nameof(tA), "Property is not nullable for class DetailsRFID.");

            return new DetailsRFID(overallStatus.Value!.Value!, aA.Value!.Value!, bAC.Value!.Value!, cA.Value!.Value!, pA.Value!.Value!, pACE.Value!.Value!, tA.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="DetailsRFID" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="detailsRFID"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DetailsRFID detailsRFID, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, detailsRFID, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DetailsRFID" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="detailsRFID"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DetailsRFID detailsRFID, JsonSerializerOptions jsonSerializerOptions)
        {
            var overallStatusRawValue = CheckResultValueConverter.ToJsonValue(detailsRFID.OverallStatus);
            writer.WriteNumber("overallStatus", overallStatusRawValue);

            var aARawValue = CheckResultValueConverter.ToJsonValue(detailsRFID.AA);
            writer.WriteNumber("AA", aARawValue);

            var bACRawValue = CheckResultValueConverter.ToJsonValue(detailsRFID.BAC);
            writer.WriteNumber("BAC", bACRawValue);

            var cARawValue = CheckResultValueConverter.ToJsonValue(detailsRFID.CA);
            writer.WriteNumber("CA", cARawValue);

            var pARawValue = CheckResultValueConverter.ToJsonValue(detailsRFID.PA);
            writer.WriteNumber("PA", pARawValue);

            var pACERawValue = CheckResultValueConverter.ToJsonValue(detailsRFID.PACE);
            writer.WriteNumber("PACE", pACERawValue);

            var tARawValue = CheckResultValueConverter.ToJsonValue(detailsRFID.TA);
            writer.WriteNumber("TA", tARawValue);
        }
    }
}
