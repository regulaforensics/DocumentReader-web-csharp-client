/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Details on performed RFID checks
    /// </summary>
    [DataContract(Name = "detailsRFID")]
    public partial class DetailsRFID : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OverallStatus
        /// </summary>
        [DataMember(Name = "overallStatus", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult OverallStatus { get; set; }

        /// <summary>
        /// Gets or Sets AA
        /// </summary>
        [DataMember(Name = "AA", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult AA { get; set; }

        /// <summary>
        /// Gets or Sets BAC
        /// </summary>
        [DataMember(Name = "BAC", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult BAC { get; set; }

        /// <summary>
        /// Gets or Sets CA
        /// </summary>
        [DataMember(Name = "CA", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult CA { get; set; }

        /// <summary>
        /// Gets or Sets PA
        /// </summary>
        [DataMember(Name = "PA", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult PA { get; set; }

        /// <summary>
        /// Gets or Sets PACE
        /// </summary>
        [DataMember(Name = "PACE", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult PACE { get; set; }

        /// <summary>
        /// Gets or Sets TA
        /// </summary>
        [DataMember(Name = "TA", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult TA { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsRFID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DetailsRFID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsRFID" /> class.
        /// </summary>
        /// <param name="overallStatus">overallStatus (required).</param>
        /// <param name="aA">aA (required).</param>
        /// <param name="bAC">bAC (required).</param>
        /// <param name="cA">cA (required).</param>
        /// <param name="pA">pA (required).</param>
        /// <param name="pACE">pACE (required).</param>
        /// <param name="tA">tA (required).</param>
        public DetailsRFID(CheckResult overallStatus = default(CheckResult), CheckResult aA = default(CheckResult), CheckResult bAC = default(CheckResult), CheckResult cA = default(CheckResult), CheckResult pA = default(CheckResult), CheckResult pACE = default(CheckResult), CheckResult tA = default(CheckResult))
        {
            this.OverallStatus = overallStatus;
            this.AA = aA;
            this.BAC = bAC;
            this.CA = cA;
            this.PA = pA;
            this.PACE = pACE;
            this.TA = tA;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailsRFID {\n");
            sb.Append("  OverallStatus: ").Append(OverallStatus).Append("\n");
            sb.Append("  AA: ").Append(AA).Append("\n");
            sb.Append("  BAC: ").Append(BAC).Append("\n");
            sb.Append("  CA: ").Append(CA).Append("\n");
            sb.Append("  PA: ").Append(PA).Append("\n");
            sb.Append("  PACE: ").Append(PACE).Append("\n");
            sb.Append("  TA: ").Append(TA).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
