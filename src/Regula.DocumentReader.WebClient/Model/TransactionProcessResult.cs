// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TransactionProcessResult
    /// </summary>
    public partial class TransactionProcessResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionProcessResult" /> class.
        /// </summary>
        /// <param name="outData">outData</param>
        /// <param name="inData">inData</param>
        /// <param name="tag">tag</param>
        /// <param name="transactionId">transactionId</param>
        [JsonConstructor]
        public TransactionProcessResult(Option<OutData?> outData = default, Option<InData?> inData = default, Option<string?> tag = default, Option<Guid?> transactionId = default)
        {
            OutDataOption = outData;
            InDataOption = inData;
            TagOption = tag;
            TransactionIdOption = transactionId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OutData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OutData?> OutDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets OutData
        /// </summary>
        [JsonPropertyName("OutData")]
        public OutData? OutData { get { return this.OutDataOption; } set { this.OutDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of InData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InData?> InDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets InData
        /// </summary>
        [JsonPropertyName("InData")]
        public InData? InData { get { return this.InDataOption; } set { this.InDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [JsonPropertyName("tag")]
        public string? Tag { get { return this.TagOption; } set { this.TagOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransactionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> TransactionIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [JsonPropertyName("transactionId")]
        public Guid? TransactionId { get { return this.TransactionIdOption; } set { this.TransactionIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionProcessResult {\n");
            sb.Append("  OutData: ").Append(OutData).Append("\n");
            sb.Append("  InData: ").Append(InData).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionProcessResult" />
    /// </summary>
    public class TransactionProcessResultJsonConverter : JsonConverter<TransactionProcessResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransactionProcessResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionProcessResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<OutData?> outData = default;
            Option<InData?> inData = default;
            Option<string?> tag = default;
            Option<Guid?> transactionId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "OutData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                outData = new Option<OutData?>(JsonSerializer.Deserialize<OutData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "InData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inData = new Option<InData?>(JsonSerializer.Deserialize<InData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "transactionId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transactionId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (outData.IsSet && outData.Value == null)
                throw new ArgumentNullException(nameof(outData), "Property is not nullable for class TransactionProcessResult.");

            if (inData.IsSet && inData.Value == null)
                throw new ArgumentNullException(nameof(inData), "Property is not nullable for class TransactionProcessResult.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class TransactionProcessResult.");

            if (transactionId.IsSet && transactionId.Value == null)
                throw new ArgumentNullException(nameof(transactionId), "Property is not nullable for class TransactionProcessResult.");

            return new TransactionProcessResult(outData, inData, tag, transactionId);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionProcessResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionProcessResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionProcessResult transactionProcessResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, transactionProcessResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionProcessResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionProcessResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TransactionProcessResult transactionProcessResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionProcessResult.OutDataOption.IsSet && transactionProcessResult.OutData == null)
                throw new ArgumentNullException(nameof(transactionProcessResult.OutData), "Property is required for class TransactionProcessResult.");

            if (transactionProcessResult.InDataOption.IsSet && transactionProcessResult.InData == null)
                throw new ArgumentNullException(nameof(transactionProcessResult.InData), "Property is required for class TransactionProcessResult.");

            if (transactionProcessResult.TagOption.IsSet && transactionProcessResult.Tag == null)
                throw new ArgumentNullException(nameof(transactionProcessResult.Tag), "Property is required for class TransactionProcessResult.");

            if (transactionProcessResult.OutDataOption.IsSet)
            {
                writer.WritePropertyName("OutData");
                JsonSerializer.Serialize(writer, transactionProcessResult.OutData, jsonSerializerOptions);
            }
            if (transactionProcessResult.InDataOption.IsSet)
            {
                writer.WritePropertyName("InData");
                JsonSerializer.Serialize(writer, transactionProcessResult.InData, jsonSerializerOptions);
            }
            if (transactionProcessResult.TagOption.IsSet)
                writer.WriteString("tag", transactionProcessResult.Tag);

            if (transactionProcessResult.TransactionIdOption.IsSet)
                writer.WriteString("transactionId", transactionProcessResult.TransactionIdOption.Value!.Value);
        }
    }
}
