/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// PhotoIdentResult
    /// </summary>
    [DataContract]
    public partial class PhotoIdentResult :  IEquatable<PhotoIdentResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhotoIdentResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhotoIdentResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhotoIdentResult" /> class.
        /// </summary>
        /// <param name="type">Same as authenticity result type, but used for safe parsing of not-described values: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/authenticity-result-type/ (required) (default to 0).</param>
        /// <param name="elementResult">elementResult.</param>
        /// <param name="elementDiagnose">elementDiagnose.</param>
        /// <param name="percentValue">percentValue.</param>
        /// <param name="lightIndex">lightIndex (required).</param>
        /// <param name="area">area (required).</param>
        /// <param name="sourceImage">sourceImage (required).</param>
        /// <param name="resultImages">resultImages (required).</param>
        /// <param name="fieldTypesCount">fieldTypesCount.</param>
        /// <param name="fieldTypesList">fieldTypesList.</param>
        /// <param name="step">step.</param>
        /// <param name="angle">angle.</param>
        /// <param name="reserved1">reserved1.</param>
        /// <param name="reserved2">reserved2.</param>
        /// <param name="reserved3">reserved3.</param>
        public PhotoIdentResult(int type = 0, int elementResult = default(int), int elementDiagnose = default(int), int percentValue = default(int), int lightIndex = default(int), RectangleCoordinates area = default(RectangleCoordinates), ImageData sourceImage = default(ImageData), RawImageContainerList resultImages = default(RawImageContainerList), int fieldTypesCount = default(int), List<int> fieldTypesList = default(List<int>), int step = default(int), int angle = default(int), int reserved1 = default(int), int reserved2 = default(int), int reserved3 = default(int))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for PhotoIdentResult and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            // to ensure "lightIndex" is required (not null)
            if (lightIndex == null)
            {
                throw new InvalidDataException("lightIndex is a required property for PhotoIdentResult and cannot be null");
            }
            else
            {
                this.LightIndex = lightIndex;
            }
            
            // to ensure "area" is required (not null)
            if (area == null)
            {
                throw new InvalidDataException("area is a required property for PhotoIdentResult and cannot be null");
            }
            else
            {
                this.Area = area;
            }
            
            // to ensure "sourceImage" is required (not null)
            if (sourceImage == null)
            {
                throw new InvalidDataException("sourceImage is a required property for PhotoIdentResult and cannot be null");
            }
            else
            {
                this.SourceImage = sourceImage;
            }
            
            // to ensure "resultImages" is required (not null)
            if (resultImages == null)
            {
                throw new InvalidDataException("resultImages is a required property for PhotoIdentResult and cannot be null");
            }
            else
            {
                this.ResultImages = resultImages;
            }
            
            this.ElementResult = elementResult;
            this.ElementDiagnose = elementDiagnose;
            this.PercentValue = percentValue;
            this.FieldTypesCount = fieldTypesCount;
            this.FieldTypesList = fieldTypesList;
            this.Step = step;
            this.Angle = angle;
            this.Reserved1 = reserved1;
            this.Reserved2 = reserved2;
            this.Reserved3 = reserved3;
        }
        
        /// <summary>
        /// Same as authenticity result type, but used for safe parsing of not-described values: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/authenticity-result-type/
        /// </summary>
        /// <value>Same as authenticity result type, but used for safe parsing of not-described values: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/authenticity-result-type/</value>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public int Type { get; set; }

        /// <summary>
        /// Gets or Sets ElementResult
        /// </summary>
        [DataMember(Name="ElementResult", EmitDefaultValue=false)]
        public int ElementResult { get; set; }

        /// <summary>
        /// Gets or Sets ElementDiagnose
        /// </summary>
        [DataMember(Name="ElementDiagnose", EmitDefaultValue=false)]
        public int ElementDiagnose { get; set; }

        /// <summary>
        /// Gets or Sets PercentValue
        /// </summary>
        [DataMember(Name="PercentValue", EmitDefaultValue=false)]
        public int PercentValue { get; set; }

        /// <summary>
        /// Gets or Sets LightIndex
        /// </summary>
        [DataMember(Name="LightIndex", EmitDefaultValue=true)]
        public int LightIndex { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name="Area", EmitDefaultValue=true)]
        public RectangleCoordinates Area { get; set; }

        /// <summary>
        /// Gets or Sets SourceImage
        /// </summary>
        [DataMember(Name="SourceImage", EmitDefaultValue=true)]
        public ImageData SourceImage { get; set; }

        /// <summary>
        /// Gets or Sets ResultImages
        /// </summary>
        [DataMember(Name="ResultImages", EmitDefaultValue=true)]
        public RawImageContainerList ResultImages { get; set; }

        /// <summary>
        /// Gets or Sets FieldTypesCount
        /// </summary>
        [DataMember(Name="FieldTypesCount", EmitDefaultValue=false)]
        public int FieldTypesCount { get; set; }

        /// <summary>
        /// Gets or Sets FieldTypesList
        /// </summary>
        [DataMember(Name="FieldTypesList", EmitDefaultValue=false)]
        public List<int> FieldTypesList { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name="Step", EmitDefaultValue=false)]
        public int Step { get; set; }

        /// <summary>
        /// Gets or Sets Angle
        /// </summary>
        [DataMember(Name="Angle", EmitDefaultValue=false)]
        public int Angle { get; set; }

        /// <summary>
        /// Gets or Sets Reserved1
        /// </summary>
        [DataMember(Name="Reserved1", EmitDefaultValue=false)]
        public int Reserved1 { get; set; }

        /// <summary>
        /// Gets or Sets Reserved2
        /// </summary>
        [DataMember(Name="Reserved2", EmitDefaultValue=false)]
        public int Reserved2 { get; set; }

        /// <summary>
        /// Gets or Sets Reserved3
        /// </summary>
        [DataMember(Name="Reserved3", EmitDefaultValue=false)]
        public int Reserved3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhotoIdentResult {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ElementResult: ").Append(ElementResult).Append("\n");
            sb.Append("  ElementDiagnose: ").Append(ElementDiagnose).Append("\n");
            sb.Append("  PercentValue: ").Append(PercentValue).Append("\n");
            sb.Append("  LightIndex: ").Append(LightIndex).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  SourceImage: ").Append(SourceImage).Append("\n");
            sb.Append("  ResultImages: ").Append(ResultImages).Append("\n");
            sb.Append("  FieldTypesCount: ").Append(FieldTypesCount).Append("\n");
            sb.Append("  FieldTypesList: ").Append(FieldTypesList).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  Reserved1: ").Append(Reserved1).Append("\n");
            sb.Append("  Reserved2: ").Append(Reserved2).Append("\n");
            sb.Append("  Reserved3: ").Append(Reserved3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhotoIdentResult);
        }

        /// <summary>
        /// Returns true if PhotoIdentResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PhotoIdentResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhotoIdentResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ElementResult == input.ElementResult ||
                    (this.ElementResult != null &&
                    this.ElementResult.Equals(input.ElementResult))
                ) && 
                (
                    this.ElementDiagnose == input.ElementDiagnose ||
                    (this.ElementDiagnose != null &&
                    this.ElementDiagnose.Equals(input.ElementDiagnose))
                ) && 
                (
                    this.PercentValue == input.PercentValue ||
                    (this.PercentValue != null &&
                    this.PercentValue.Equals(input.PercentValue))
                ) && 
                (
                    this.LightIndex == input.LightIndex ||
                    (this.LightIndex != null &&
                    this.LightIndex.Equals(input.LightIndex))
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.SourceImage == input.SourceImage ||
                    (this.SourceImage != null &&
                    this.SourceImage.Equals(input.SourceImage))
                ) && 
                (
                    this.ResultImages == input.ResultImages ||
                    (this.ResultImages != null &&
                    this.ResultImages.Equals(input.ResultImages))
                ) && 
                (
                    this.FieldTypesCount == input.FieldTypesCount ||
                    (this.FieldTypesCount != null &&
                    this.FieldTypesCount.Equals(input.FieldTypesCount))
                ) && 
                (
                    this.FieldTypesList == input.FieldTypesList ||
                    this.FieldTypesList != null &&
                    input.FieldTypesList != null &&
                    this.FieldTypesList.SequenceEqual(input.FieldTypesList)
                ) && 
                (
                    this.Step == input.Step ||
                    (this.Step != null &&
                    this.Step.Equals(input.Step))
                ) && 
                (
                    this.Angle == input.Angle ||
                    (this.Angle != null &&
                    this.Angle.Equals(input.Angle))
                ) && 
                (
                    this.Reserved1 == input.Reserved1 ||
                    (this.Reserved1 != null &&
                    this.Reserved1.Equals(input.Reserved1))
                ) && 
                (
                    this.Reserved2 == input.Reserved2 ||
                    (this.Reserved2 != null &&
                    this.Reserved2.Equals(input.Reserved2))
                ) && 
                (
                    this.Reserved3 == input.Reserved3 ||
                    (this.Reserved3 != null &&
                    this.Reserved3.Equals(input.Reserved3))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ElementResult != null)
                    hashCode = hashCode * 59 + this.ElementResult.GetHashCode();
                if (this.ElementDiagnose != null)
                    hashCode = hashCode * 59 + this.ElementDiagnose.GetHashCode();
                if (this.PercentValue != null)
                    hashCode = hashCode * 59 + this.PercentValue.GetHashCode();
                if (this.LightIndex != null)
                    hashCode = hashCode * 59 + this.LightIndex.GetHashCode();
                if (this.Area != null)
                    hashCode = hashCode * 59 + this.Area.GetHashCode();
                if (this.SourceImage != null)
                    hashCode = hashCode * 59 + this.SourceImage.GetHashCode();
                if (this.ResultImages != null)
                    hashCode = hashCode * 59 + this.ResultImages.GetHashCode();
                if (this.FieldTypesCount != null)
                    hashCode = hashCode * 59 + this.FieldTypesCount.GetHashCode();
                if (this.FieldTypesList != null)
                    hashCode = hashCode * 59 + this.FieldTypesList.GetHashCode();
                if (this.Step != null)
                    hashCode = hashCode * 59 + this.Step.GetHashCode();
                if (this.Angle != null)
                    hashCode = hashCode * 59 + this.Angle.GetHashCode();
                if (this.Reserved1 != null)
                    hashCode = hashCode * 59 + this.Reserved1.GetHashCode();
                if (this.Reserved2 != null)
                    hashCode = hashCode * 59 + this.Reserved2.GetHashCode();
                if (this.Reserved3 != null)
                    hashCode = hashCode * 59 + this.Reserved3.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
