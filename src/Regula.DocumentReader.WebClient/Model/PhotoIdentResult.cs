/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// PhotoIdentResult
    /// </summary>
    [DataContract(Name = "PhotoIdentResult")]
    public partial class PhotoIdentResult : AuthenticityCheckResultItem, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LightIndex
        /// </summary>
        [DataMember(Name = "LightIndex", IsRequired = true, EmitDefaultValue = true)]
        public Light LightIndex { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhotoIdentResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhotoIdentResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhotoIdentResult" /> class.
        /// </summary>
        /// <param name="lightIndex">lightIndex (required).</param>
        /// <param name="area">area (required).</param>
        /// <param name="sourceImage">sourceImage (required).</param>
        /// <param name="resultImages">resultImages (required).</param>
        /// <param name="fieldTypesCount">fieldTypesCount.</param>
        /// <param name="fieldTypesList">fieldTypesList.</param>
        /// <param name="step">step.</param>
        /// <param name="angle">angle.</param>
        /// <param name="result">result.</param>
        /// <param name="reserved3">reserved3.</param>
        /// <param name="type">type (required) (default to AuthenticityResultType.IPI).</param>
        /// <param name="elementResult">elementResult.</param>
        /// <param name="elementDiagnose">elementDiagnose.</param>
        /// <param name="percentValue">percentValue.</param>
        public PhotoIdentResult(Light lightIndex = default(Light), RectangleCoordinates area = default(RectangleCoordinates), ImageData sourceImage = default(ImageData), RawImageContainerList resultImages = default(RawImageContainerList), int fieldTypesCount = default(int), List<int> fieldTypesList = default(List<int>), int step = default(int), int angle = default(int), int result = default(int), int reserved3 = default(int), AuthenticityResultType type = AuthenticityResultType.IPI, CheckResult? elementResult = default(CheckResult?), CheckDiagnose? elementDiagnose = default(CheckDiagnose?), int percentValue = default(int)) : base(type, elementResult, elementDiagnose, percentValue)
        {
            this.LightIndex = lightIndex;
            // to ensure "area" is required (not null)
            if (area == null)
            {
                throw new ArgumentNullException("area is a required property for PhotoIdentResult and cannot be null");
            }
            this.Area = area;
            // to ensure "sourceImage" is required (not null)
            if (sourceImage == null)
            {
                throw new ArgumentNullException("sourceImage is a required property for PhotoIdentResult and cannot be null");
            }
            this.SourceImage = sourceImage;
            // to ensure "resultImages" is required (not null)
            if (resultImages == null)
            {
                throw new ArgumentNullException("resultImages is a required property for PhotoIdentResult and cannot be null");
            }
            this.ResultImages = resultImages;
            this.FieldTypesCount = fieldTypesCount;
            this.FieldTypesList = fieldTypesList;
            this.Step = step;
            this.Angle = angle;
            this.Result = result;
            this.Reserved3 = reserved3;
        }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name = "Area", IsRequired = true, EmitDefaultValue = true)]
        public RectangleCoordinates Area { get; set; }

        /// <summary>
        /// Gets or Sets SourceImage
        /// </summary>
        [DataMember(Name = "SourceImage", IsRequired = true, EmitDefaultValue = true)]
        public ImageData SourceImage { get; set; }

        /// <summary>
        /// Gets or Sets ResultImages
        /// </summary>
        [DataMember(Name = "ResultImages", IsRequired = true, EmitDefaultValue = true)]
        public RawImageContainerList ResultImages { get; set; }

        /// <summary>
        /// Gets or Sets FieldTypesCount
        /// </summary>
        [DataMember(Name = "FieldTypesCount", EmitDefaultValue = false)]
        public int? FieldTypesCount { get; set; }

        /// <summary>
        /// Gets or Sets FieldTypesList
        /// </summary>
        [DataMember(Name = "FieldTypesList", EmitDefaultValue = false)]
        public List<int>? FieldTypesList { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name = "Step", EmitDefaultValue = false)]
        public int? Step { get; set; }

        /// <summary>
        /// Gets or Sets Angle
        /// </summary>
        [DataMember(Name = "Angle", EmitDefaultValue = false)]
        public int? Angle { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "Result", EmitDefaultValue = false)]
        public int? Result { get; set; }

        /// <summary>
        /// Gets or Sets Reserved3
        /// </summary>
        [DataMember(Name = "Reserved3", EmitDefaultValue = false)]
        public int? Reserved3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhotoIdentResult {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  LightIndex: ").Append(LightIndex).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  SourceImage: ").Append(SourceImage).Append("\n");
            sb.Append("  ResultImages: ").Append(ResultImages).Append("\n");
            sb.Append("  FieldTypesCount: ").Append(FieldTypesCount).Append("\n");
            sb.Append("  FieldTypesList: ").Append(FieldTypesList).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Reserved3: ").Append(Reserved3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
