// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// FieldItem
    /// </summary>
    public partial class FieldItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldItem" /> class.
        /// </summary>
        /// <param name="fieldLength">fieldLength</param>
        /// <param name="fieldPos">fieldPos</param>
        /// <param name="fieldType">fieldType</param>
        /// <param name="tESTRESULT">tESTRESULT</param>
        /// <param name="validCheckSum">validCheckSum</param>
        /// <param name="reserved">reserved</param>
        [JsonConstructor]
        public FieldItem(int fieldLength, int fieldPos, int fieldType, int tESTRESULT, int validCheckSum, int reserved)
        {
            FieldLength = fieldLength;
            FieldPos = fieldPos;
            FieldType = fieldType;
            TEST_RESULT = tESTRESULT;
            ValidCheckSum = validCheckSum;
            Reserved = reserved;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets FieldLength
        /// </summary>
        [JsonPropertyName("FieldLength")]
        public int FieldLength { get; set; }

        /// <summary>
        /// Gets or Sets FieldPos
        /// </summary>
        [JsonPropertyName("FieldPos")]
        public int FieldPos { get; set; }

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [JsonPropertyName("FieldType")]
        public int FieldType { get; set; }

        /// <summary>
        /// Gets or Sets TEST_RESULT
        /// </summary>
        [JsonPropertyName("TEST_RESULT")]
        public int TEST_RESULT { get; set; }

        /// <summary>
        /// Gets or Sets ValidCheckSum
        /// </summary>
        [JsonPropertyName("ValidCheckSum")]
        public int ValidCheckSum { get; set; }

        /// <summary>
        /// Gets or Sets Reserved
        /// </summary>
        [JsonPropertyName("reserved")]
        public int Reserved { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldItem {\n");
            sb.Append("  FieldLength: ").Append(FieldLength).Append("\n");
            sb.Append("  FieldPos: ").Append(FieldPos).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  TEST_RESULT: ").Append(TEST_RESULT).Append("\n");
            sb.Append("  ValidCheckSum: ").Append(ValidCheckSum).Append("\n");
            sb.Append("  Reserved: ").Append(Reserved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FieldItem" />
    /// </summary>
    public class FieldItemJsonConverter : JsonConverter<FieldItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="FieldItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FieldItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> fieldLength = default;
            Option<int?> fieldPos = default;
            Option<int?> fieldType = default;
            Option<int?> tESTRESULT = default;
            Option<int?> validCheckSum = default;
            Option<int?> reserved = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "FieldLength":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldLength = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "FieldPos":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldPos = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "FieldType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "TEST_RESULT":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tESTRESULT = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ValidCheckSum":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validCheckSum = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "reserved":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fieldLength.IsSet)
                throw new ArgumentException("Property is required for class FieldItem.", nameof(fieldLength));

            if (!fieldPos.IsSet)
                throw new ArgumentException("Property is required for class FieldItem.", nameof(fieldPos));

            if (!fieldType.IsSet)
                throw new ArgumentException("Property is required for class FieldItem.", nameof(fieldType));

            if (!tESTRESULT.IsSet)
                throw new ArgumentException("Property is required for class FieldItem.", nameof(tESTRESULT));

            if (!validCheckSum.IsSet)
                throw new ArgumentException("Property is required for class FieldItem.", nameof(validCheckSum));

            if (!reserved.IsSet)
                throw new ArgumentException("Property is required for class FieldItem.", nameof(reserved));

            if (fieldLength.IsSet && fieldLength.Value == null)
                throw new ArgumentNullException(nameof(fieldLength), "Property is not nullable for class FieldItem.");

            if (fieldPos.IsSet && fieldPos.Value == null)
                throw new ArgumentNullException(nameof(fieldPos), "Property is not nullable for class FieldItem.");

            if (fieldType.IsSet && fieldType.Value == null)
                throw new ArgumentNullException(nameof(fieldType), "Property is not nullable for class FieldItem.");

            if (tESTRESULT.IsSet && tESTRESULT.Value == null)
                throw new ArgumentNullException(nameof(tESTRESULT), "Property is not nullable for class FieldItem.");

            if (validCheckSum.IsSet && validCheckSum.Value == null)
                throw new ArgumentNullException(nameof(validCheckSum), "Property is not nullable for class FieldItem.");

            if (reserved.IsSet && reserved.Value == null)
                throw new ArgumentNullException(nameof(reserved), "Property is not nullable for class FieldItem.");

            return new FieldItem(fieldLength.Value!.Value!, fieldPos.Value!.Value!, fieldType.Value!.Value!, tESTRESULT.Value!.Value!, validCheckSum.Value!.Value!, reserved.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="FieldItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fieldItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FieldItem fieldItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fieldItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FieldItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fieldItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FieldItem fieldItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("FieldLength", fieldItem.FieldLength);

            writer.WriteNumber("FieldPos", fieldItem.FieldPos);

            writer.WriteNumber("FieldType", fieldItem.FieldType);

            writer.WriteNumber("TEST_RESULT", fieldItem.TEST_RESULT);

            writer.WriteNumber("ValidCheckSum", fieldItem.ValidCheckSum);

            writer.WriteNumber("reserved", fieldItem.Reserved);
        }
    }
}
