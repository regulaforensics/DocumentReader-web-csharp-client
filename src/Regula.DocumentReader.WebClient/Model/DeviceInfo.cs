// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// DeviceInfo
    /// </summary>
    public partial class DeviceInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceInfo" /> class.
        /// </summary>
        /// <param name="appName">appName</param>
        /// <param name="varVersion">varVersion</param>
        /// <param name="licenseId">licenseId</param>
        /// <param name="licenseSerial">licenseSerial</param>
        /// <param name="validUntil">validUntil</param>
        /// <param name="serverTime">serverTime</param>
        [JsonConstructor]
        public DeviceInfo(Option<string?> appName = default, Option<string?> varVersion = default, Option<string?> licenseId = default, Option<string?> licenseSerial = default, Option<DateTime?> validUntil = default, Option<DateTime?> serverTime = default)
        {
            AppNameOption = appName;
            VarVersionOption = varVersion;
            LicenseIdOption = licenseId;
            LicenseSerialOption = licenseSerial;
            ValidUntilOption = validUntil;
            ServerTimeOption = serverTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AppName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AppNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets AppName
        /// </summary>
        [JsonPropertyName("app-name")]
        public string? AppName { get { return this.AppNameOption; } set { this.AppNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of LicenseId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LicenseIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets LicenseId
        /// </summary>
        [JsonPropertyName("license-id")]
        public string? LicenseId { get { return this.LicenseIdOption; } set { this.LicenseIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of LicenseSerial
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LicenseSerialOption { get; private set; }

        /// <summary>
        /// Gets or Sets LicenseSerial
        /// </summary>
        [JsonPropertyName("license-serial")]
        public string? LicenseSerial { get { return this.LicenseSerialOption; } set { this.LicenseSerialOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValidUntil
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ValidUntilOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValidUntil
        /// </summary>
        [JsonPropertyName("valid-until")]
        public DateTime? ValidUntil { get { return this.ValidUntilOption; } set { this.ValidUntilOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServerTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ServerTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ServerTime
        /// </summary>
        [JsonPropertyName("server-time")]
        public DateTime? ServerTime { get { return this.ServerTimeOption; } set { this.ServerTimeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceInfo {\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  LicenseId: ").Append(LicenseId).Append("\n");
            sb.Append("  LicenseSerial: ").Append(LicenseSerial).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("  ServerTime: ").Append(ServerTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DeviceInfo" />
    /// </summary>
    public class DeviceInfoJsonConverter : JsonConverter<DeviceInfo>
    {
        /// <summary>
        /// The format to use to serialize ValidUntil
        /// </summary>
        public static string ValidUntilFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ServerTime
        /// </summary>
        public static string ServerTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DeviceInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DeviceInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> appName = default;
            Option<string?> varVersion = default;
            Option<string?> licenseId = default;
            Option<string?> licenseSerial = default;
            Option<DateTime?> validUntil = default;
            Option<DateTime?> serverTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "app-name":
                            appName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "license-id":
                            licenseId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "license-serial":
                            licenseSerial = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "valid-until":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validUntil = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "server-time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                serverTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (appName.IsSet && appName.Value == null)
                throw new ArgumentNullException(nameof(appName), "Property is not nullable for class DeviceInfo.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class DeviceInfo.");

            if (licenseId.IsSet && licenseId.Value == null)
                throw new ArgumentNullException(nameof(licenseId), "Property is not nullable for class DeviceInfo.");

            if (licenseSerial.IsSet && licenseSerial.Value == null)
                throw new ArgumentNullException(nameof(licenseSerial), "Property is not nullable for class DeviceInfo.");

            if (validUntil.IsSet && validUntil.Value == null)
                throw new ArgumentNullException(nameof(validUntil), "Property is not nullable for class DeviceInfo.");

            if (serverTime.IsSet && serverTime.Value == null)
                throw new ArgumentNullException(nameof(serverTime), "Property is not nullable for class DeviceInfo.");

            return new DeviceInfo(appName, varVersion, licenseId, licenseSerial, validUntil, serverTime);
        }

        /// <summary>
        /// Serializes a <see cref="DeviceInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deviceInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DeviceInfo deviceInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, deviceInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DeviceInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deviceInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DeviceInfo deviceInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (deviceInfo.AppNameOption.IsSet && deviceInfo.AppName == null)
                throw new ArgumentNullException(nameof(deviceInfo.AppName), "Property is required for class DeviceInfo.");

            if (deviceInfo.VarVersionOption.IsSet && deviceInfo.VarVersion == null)
                throw new ArgumentNullException(nameof(deviceInfo.VarVersion), "Property is required for class DeviceInfo.");

            if (deviceInfo.LicenseIdOption.IsSet && deviceInfo.LicenseId == null)
                throw new ArgumentNullException(nameof(deviceInfo.LicenseId), "Property is required for class DeviceInfo.");

            if (deviceInfo.LicenseSerialOption.IsSet && deviceInfo.LicenseSerial == null)
                throw new ArgumentNullException(nameof(deviceInfo.LicenseSerial), "Property is required for class DeviceInfo.");

            if (deviceInfo.AppNameOption.IsSet)
                writer.WriteString("app-name", deviceInfo.AppName);

            if (deviceInfo.VarVersionOption.IsSet)
                writer.WriteString("version", deviceInfo.VarVersion);

            if (deviceInfo.LicenseIdOption.IsSet)
                writer.WriteString("license-id", deviceInfo.LicenseId);

            if (deviceInfo.LicenseSerialOption.IsSet)
                writer.WriteString("license-serial", deviceInfo.LicenseSerial);

            if (deviceInfo.ValidUntilOption.IsSet)
                writer.WriteString("valid-until", deviceInfo.ValidUntilOption.Value!.Value.ToString(ValidUntilFormat));

            if (deviceInfo.ServerTimeOption.IsSet)
                writer.WriteString("server-time", deviceInfo.ServerTimeOption.Value!.Value.ToString(ServerTimeFormat));
        }
    }
}
