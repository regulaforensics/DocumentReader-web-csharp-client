/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// DeviceInfo
    /// </summary>
    [DataContract(Name = "DeviceInfo")]
    public partial class DeviceInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceInfo" /> class.
        /// </summary>
        /// <param name="appName">Application name..</param>
        /// <param name="varVersion">Product version..</param>
        /// <param name="licenseId">Unique license identifier..</param>
        /// <param name="licenseSerial">License serial number..</param>
        /// <param name="licenseType">licenseType.</param>
        /// <param name="validUntil">License validity date..</param>
        /// <param name="serverTime">serverTime.</param>
        /// <param name="supportedScenarios">List of supported scenarios..</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="documentsDatabase">documentsDatabase.</param>
        public DeviceInfo(string appName = default(string), string varVersion = default(string), string licenseId = default(string), string licenseSerial = default(string), string licenseType = default(string), DateTime validUntil = default(DateTime), string serverTime = default(string), List<string> supportedScenarios = default(List<string>), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), DeviceInfoDocumentsDatabase documentsDatabase = default(DeviceInfoDocumentsDatabase))
        {
            this.AppName = appName;
            this.VarVersion = varVersion;
            this.LicenseId = licenseId;
            this.LicenseSerial = licenseSerial;
            this.LicenseType = licenseType;
            this.ValidUntil = validUntil;
            this.ServerTime = serverTime;
            this.SupportedScenarios = supportedScenarios;
            this.Metadata = metadata;
            this.DocumentsDatabase = documentsDatabase;
        }

        /// <summary>
        /// Application name.
        /// </summary>
        /// <value>Application name.</value>
        [DataMember(Name = "app-name", EmitDefaultValue = false)]
        public string? AppName { get; set; }

        /// <summary>
        /// Product version.
        /// </summary>
        /// <value>Product version.</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string? VarVersion { get; set; }

        /// <summary>
        /// Unique license identifier.
        /// </summary>
        /// <value>Unique license identifier.</value>
        [DataMember(Name = "license-id", EmitDefaultValue = false)]
        public string? LicenseId { get; set; }

        /// <summary>
        /// License serial number.
        /// </summary>
        /// <value>License serial number.</value>
        [DataMember(Name = "license-serial", EmitDefaultValue = false)]
        public string? LicenseSerial { get; set; }

        /// <summary>
        /// Gets or Sets LicenseType
        /// </summary>
        [DataMember(Name = "license-type", EmitDefaultValue = false)]
        public string? LicenseType { get; set; }

        /// <summary>
        /// License validity date.
        /// </summary>
        /// <value>License validity date.</value>
        [DataMember(Name = "valid-until", EmitDefaultValue = false)]
        public DateTime? ValidUntil { get; set; }

        /// <summary>
        /// Gets or Sets ServerTime
        /// </summary>
        [DataMember(Name = "server-time", EmitDefaultValue = false)]
        public string? ServerTime { get; set; }

        /// <summary>
        /// List of supported scenarios.
        /// </summary>
        /// <value>List of supported scenarios.</value>
        [DataMember(Name = "supported-scenarios", EmitDefaultValue = false)]
        public List<string>? SupportedScenarios { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object>? Metadata { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsDatabase
        /// </summary>
        [DataMember(Name = "documents-database", EmitDefaultValue = false)]
        public DeviceInfoDocumentsDatabase? DocumentsDatabase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceInfo {\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  LicenseId: ").Append(LicenseId).Append("\n");
            sb.Append("  LicenseSerial: ").Append(LicenseSerial).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("  ServerTime: ").Append(ServerTime).Append("\n");
            sb.Append("  SupportedScenarios: ").Append(SupportedScenarios).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  DocumentsDatabase: ").Append(DocumentsDatabase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
