// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// FaceDetection
    /// </summary>
    public partial class FaceDetection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceDetection" /> class.
        /// </summary>
        /// <param name="count">count</param>
        /// <param name="countFalseDetection">countFalseDetection</param>
        /// <param name="res">res</param>
        /// <param name="reserved1">reserved1</param>
        /// <param name="reserved2">reserved2</param>
        [JsonConstructor]
        public FaceDetection(int count, int countFalseDetection, List<FaceItem> res, Option<int?> reserved1 = default, Option<int?> reserved2 = default)
        {
            Count = count;
            CountFalseDetection = countFalseDetection;
            Res = res;
            Reserved1Option = reserved1;
            Reserved2Option = reserved2;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [JsonPropertyName("Count")]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets CountFalseDetection
        /// </summary>
        [JsonPropertyName("CountFalseDetection")]
        public int CountFalseDetection { get; set; }

        /// <summary>
        /// Gets or Sets Res
        /// </summary>
        [JsonPropertyName("Res")]
        public List<FaceItem> Res { get; set; }

        /// <summary>
        /// Used to track the state of Reserved1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> Reserved1Option { get; private set; }

        /// <summary>
        /// Gets or Sets Reserved1
        /// </summary>
        [JsonPropertyName("Reserved1")]
        public int? Reserved1 { get { return this.Reserved1Option; } set { this.Reserved1Option = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Reserved2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> Reserved2Option { get; private set; }

        /// <summary>
        /// Gets or Sets Reserved2
        /// </summary>
        [JsonPropertyName("Reserved2")]
        public int? Reserved2 { get { return this.Reserved2Option; } set { this.Reserved2Option = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaceDetection {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  CountFalseDetection: ").Append(CountFalseDetection).Append("\n");
            sb.Append("  Res: ").Append(Res).Append("\n");
            sb.Append("  Reserved1: ").Append(Reserved1).Append("\n");
            sb.Append("  Reserved2: ").Append(Reserved2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FaceDetection" />
    /// </summary>
    public class FaceDetectionJsonConverter : JsonConverter<FaceDetection>
    {
        /// <summary>
        /// Deserializes json to <see cref="FaceDetection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FaceDetection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> count = default;
            Option<int?> countFalseDetection = default;
            Option<List<FaceItem>?> res = default;
            Option<int?> reserved1 = default;
            Option<int?> reserved2 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                count = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "CountFalseDetection":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                countFalseDetection = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Res":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                res = new Option<List<FaceItem>?>(JsonSerializer.Deserialize<List<FaceItem>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Reserved1":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved1 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Reserved2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reserved2 = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!count.IsSet)
                throw new ArgumentException("Property is required for class FaceDetection.", nameof(count));

            if (!countFalseDetection.IsSet)
                throw new ArgumentException("Property is required for class FaceDetection.", nameof(countFalseDetection));

            if (!res.IsSet)
                throw new ArgumentException("Property is required for class FaceDetection.", nameof(res));

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class FaceDetection.");

            if (countFalseDetection.IsSet && countFalseDetection.Value == null)
                throw new ArgumentNullException(nameof(countFalseDetection), "Property is not nullable for class FaceDetection.");

            if (res.IsSet && res.Value == null)
                throw new ArgumentNullException(nameof(res), "Property is not nullable for class FaceDetection.");

            if (reserved1.IsSet && reserved1.Value == null)
                throw new ArgumentNullException(nameof(reserved1), "Property is not nullable for class FaceDetection.");

            if (reserved2.IsSet && reserved2.Value == null)
                throw new ArgumentNullException(nameof(reserved2), "Property is not nullable for class FaceDetection.");

            return new FaceDetection(count.Value!.Value!, countFalseDetection.Value!.Value!, res.Value!, reserved1, reserved2);
        }

        /// <summary>
        /// Serializes a <see cref="FaceDetection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="faceDetection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FaceDetection faceDetection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, faceDetection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FaceDetection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="faceDetection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FaceDetection faceDetection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (faceDetection.Res == null)
                throw new ArgumentNullException(nameof(faceDetection.Res), "Property is required for class FaceDetection.");

            writer.WriteNumber("Count", faceDetection.Count);

            writer.WriteNumber("CountFalseDetection", faceDetection.CountFalseDetection);

            writer.WritePropertyName("Res");
            JsonSerializer.Serialize(writer, faceDetection.Res, jsonSerializerOptions);
            if (faceDetection.Reserved1Option.IsSet)
                writer.WriteNumber("Reserved1", faceDetection.Reserved1Option.Value!.Value);

            if (faceDetection.Reserved2Option.IsSet)
                writer.WriteNumber("Reserved2", faceDetection.Reserved2Option.Value!.Value);
        }
    }
}
