/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure contains information on a certificate validity.
    /// </summary>
    [DataContract]
    public partial class RfidValidity :  IEquatable<RfidValidity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidValidity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidValidity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidValidity" /> class.
        /// </summary>
        /// <param name="notBefore">notBefore (required).</param>
        /// <param name="notAfter">notAfter (required).</param>
        public RfidValidity(TrfFtString notBefore = default(TrfFtString), TrfFtString notAfter = default(TrfFtString))
        {
            // to ensure "notBefore" is required (not null)
            if (notBefore == null)
            {
                throw new InvalidDataException("notBefore is a required property for RfidValidity and cannot be null");
            }
            else
            {
                this.NotBefore = notBefore;
            }
            
            // to ensure "notAfter" is required (not null)
            if (notAfter == null)
            {
                throw new InvalidDataException("notAfter is a required property for RfidValidity and cannot be null");
            }
            else
            {
                this.NotAfter = notAfter;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets NotBefore
        /// </summary>
        [DataMember(Name="NotBefore", EmitDefaultValue=true)]
        public TrfFtString NotBefore { get; set; }

        /// <summary>
        /// Gets or Sets NotAfter
        /// </summary>
        [DataMember(Name="NotAfter", EmitDefaultValue=true)]
        public TrfFtString NotAfter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RfidValidity {\n");
            sb.Append("  NotBefore: ").Append(NotBefore).Append("\n");
            sb.Append("  NotAfter: ").Append(NotAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RfidValidity);
        }

        /// <summary>
        /// Returns true if RfidValidity instances are equal
        /// </summary>
        /// <param name="input">Instance of RfidValidity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RfidValidity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NotBefore == input.NotBefore ||
                    (this.NotBefore != null &&
                    this.NotBefore.Equals(input.NotBefore))
                ) && 
                (
                    this.NotAfter == input.NotAfter ||
                    (this.NotAfter != null &&
                    this.NotAfter.Equals(input.NotAfter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NotBefore != null)
                    hashCode = hashCode * 59 + this.NotBefore.GetHashCode();
                if (this.NotAfter != null)
                    hashCode = hashCode * 59 + this.NotAfter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
