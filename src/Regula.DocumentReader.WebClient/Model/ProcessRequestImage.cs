/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ProcessRequestImage
    /// </summary>
    [DataContract]
    public partial class ProcessRequestImage :  IEquatable<ProcessRequestImage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessRequestImage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessRequestImage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessRequestImage" /> class.
        /// </summary>
        /// <param name="imageData">imageData (required).</param>
        /// <param name="light">light.</param>
        /// <param name="pageIdx">page/image number.</param>
        public ProcessRequestImage(ImageData imageData = default(ImageData), int light = default(int), int pageIdx = default(int))
        {
            // to ensure "imageData" is required (not null)
            if (imageData == null)
            {
                throw new InvalidDataException("imageData is a required property for ProcessRequestImage and cannot be null");
            }
            else
            {
                this.ImageData = imageData;
            }
            
            this.Light = light;
            this.PageIdx = pageIdx;
        }
        
        /// <summary>
        /// Gets or Sets ImageData
        /// </summary>
        [DataMember(Name="ImageData", EmitDefaultValue=true)]
        public ImageData ImageData { get; set; }

        /// <summary>
        /// Gets or Sets Light
        /// </summary>
        [DataMember(Name="light", EmitDefaultValue=false)]
        public int Light { get; set; }

        /// <summary>
        /// page/image number
        /// </summary>
        /// <value>page/image number</value>
        [DataMember(Name="page_idx", EmitDefaultValue=false)]
        public int PageIdx { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessRequestImage {\n");
            sb.Append("  ImageData: ").Append(ImageData).Append("\n");
            sb.Append("  Light: ").Append(Light).Append("\n");
            sb.Append("  PageIdx: ").Append(PageIdx).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessRequestImage);
        }

        /// <summary>
        /// Returns true if ProcessRequestImage instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessRequestImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessRequestImage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ImageData == input.ImageData ||
                    (this.ImageData != null &&
                    this.ImageData.Equals(input.ImageData))
                ) && 
                (
                    this.Light == input.Light ||
                    (this.Light != null &&
                    this.Light.Equals(input.Light))
                ) && 
                (
                    this.PageIdx == input.PageIdx ||
                    (this.PageIdx != null &&
                    this.PageIdx.Equals(input.PageIdx))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImageData != null)
                    hashCode = hashCode * 59 + this.ImageData.GetHashCode();
                if (this.Light != null)
                    hashCode = hashCode * 59 + this.Light.GetHashCode();
                if (this.PageIdx != null)
                    hashCode = hashCode * 59 + this.PageIdx.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
