// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// ProcessRequestImage
    /// </summary>
    public partial class ProcessRequestImage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessRequestImage" /> class.
        /// </summary>
        /// <param name="imageData">imageData</param>
        /// <param name="light">light</param>
        /// <param name="pageIdx">page/image number</param>
        [JsonConstructor]
        public ProcessRequestImage(Option<ImageData?> imageData = default, Option<Light?> light = default, Option<int?> pageIdx = default)
        {
            ImageDataOption = imageData;
            LightOption = light;
            PageIdxOption = pageIdx;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Light
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Light?> LightOption { get; private set; }

        /// <summary>
        /// Gets or Sets Light
        /// </summary>
        [JsonPropertyName("light")]
        public Light? Light { get { return this.LightOption; } set { this.LightOption = new Option<Light?>(value); } }

        /// <summary>
        /// Used to track the state of ImageData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ImageData?> ImageDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImageData
        /// </summary>
        [JsonPropertyName("ImageData")]
        public ImageData? ImageData { get { return this.ImageDataOption; } set { this.ImageDataOption = new Option<ImageData?>(value); } }

        /// <summary>
        /// Used to track the state of PageIdx
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageIdxOption { get; private set; }

        /// <summary>
        /// page/image number
        /// </summary>
        /// <value>page/image number</value>
        [JsonPropertyName("page_idx")]
        public int? PageIdx { get { return this.PageIdxOption; } set { this.PageIdxOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessRequestImage {\n");
            sb.Append("  ImageData: ").Append(ImageData).Append("\n");
            sb.Append("  Light: ").Append(Light).Append("\n");
            sb.Append("  PageIdx: ").Append(PageIdx).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProcessRequestImage" />
    /// </summary>
    public class ProcessRequestImageJsonConverter : JsonConverter<ProcessRequestImage>
    {
        /// <summary>
        /// Deserializes json to <see cref="ProcessRequestImage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProcessRequestImage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ImageData?> imageData = default;
            Option<Light?> light = default;
            Option<int?> pageIdx = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ImageData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                imageData = new Option<ImageData?>(JsonSerializer.Deserialize<ImageData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "light":
                            string? lightRawValue = utf8JsonReader.GetString();
                            if (lightRawValue != null)
                                light = new Option<Light?>(LightValueConverter.FromStringOrDefault(lightRawValue));
                            break;
                        case "page_idx":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pageIdx = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (imageData.IsSet && imageData.Value == null)
                throw new ArgumentNullException(nameof(imageData), "Property is not nullable for class ProcessRequestImage.");

            if (light.IsSet && light.Value == null)
                throw new ArgumentNullException(nameof(light), "Property is not nullable for class ProcessRequestImage.");

            if (pageIdx.IsSet && pageIdx.Value == null)
                throw new ArgumentNullException(nameof(pageIdx), "Property is not nullable for class ProcessRequestImage.");

            return new ProcessRequestImage(imageData, light, pageIdx);
        }

        /// <summary>
        /// Serializes a <see cref="ProcessRequestImage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="processRequestImage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProcessRequestImage processRequestImage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, processRequestImage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProcessRequestImage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="processRequestImage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ProcessRequestImage processRequestImage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (processRequestImage.ImageDataOption.IsSet && processRequestImage.ImageData == null)
                throw new ArgumentNullException(nameof(processRequestImage.ImageData), "Property is required for class ProcessRequestImage.");

            if (processRequestImage.ImageDataOption.IsSet)
            {
                writer.WritePropertyName("ImageData");
                JsonSerializer.Serialize(writer, processRequestImage.ImageData, jsonSerializerOptions);
            }
            if (processRequestImage.LightOption.IsSet)
            {
                var lightRawValue = LightValueConverter.ToJsonValue(processRequestImage.Light!.Value);
                writer.WriteNumber("light", lightRawValue);
            }
            if (processRequestImage.PageIdxOption.IsSet)
                writer.WriteNumber("page_idx", processRequestImage.PageIdxOption.Value!.Value);
        }
    }
}
