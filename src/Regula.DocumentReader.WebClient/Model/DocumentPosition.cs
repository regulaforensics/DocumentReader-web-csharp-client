/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// DocumentPosition
    /// </summary>
    [DataContract]
    public partial class DocumentPosition :  IEquatable<DocumentPosition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentPosition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentPosition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentPosition" /> class.
        /// </summary>
        /// <param name="docFormat">docFormat (required).</param>
        /// <param name="angle">Document rotation angle (required).</param>
        /// <param name="width">Document width (required).</param>
        /// <param name="height">Document height (required).</param>
        /// <param name="center">center (required).</param>
        /// <param name="leftBottom">leftBottom (required).</param>
        /// <param name="leftTop">leftTop (required).</param>
        /// <param name="rightBottom">rightBottom (required).</param>
        /// <param name="rightTop">rightTop (required).</param>
        /// <param name="dpi">dpi (required).</param>
        public DocumentPosition(Integer docFormat = default(Integer), decimal angle = default(decimal), int width = default(int), int height = default(int), Point center = default(Point), Point leftBottom = default(Point), Point leftTop = default(Point), Point rightBottom = default(Point), Point rightTop = default(Point), int dpi = default(int))
        {
            // to ensure "docFormat" is required (not null)
            if (docFormat == null)
            {
                throw new InvalidDataException("docFormat is a required property for DocumentPosition and cannot be null");
            }
            else
            {
                this.DocFormat = docFormat;
            }
            
            // to ensure "angle" is required (not null)
            if (angle == null)
            {
                throw new InvalidDataException("angle is a required property for DocumentPosition and cannot be null");
            }
            else
            {
                this.Angle = angle;
            }
            
            // to ensure "width" is required (not null)
            if (width == null)
            {
                throw new InvalidDataException("width is a required property for DocumentPosition and cannot be null");
            }
            else
            {
                this.Width = width;
            }
            
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new InvalidDataException("height is a required property for DocumentPosition and cannot be null");
            }
            else
            {
                this.Height = height;
            }
            
            // to ensure "center" is required (not null)
            if (center == null)
            {
                throw new InvalidDataException("center is a required property for DocumentPosition and cannot be null");
            }
            else
            {
                this.Center = center;
            }
            
            // to ensure "leftBottom" is required (not null)
            if (leftBottom == null)
            {
                throw new InvalidDataException("leftBottom is a required property for DocumentPosition and cannot be null");
            }
            else
            {
                this.LeftBottom = leftBottom;
            }
            
            // to ensure "leftTop" is required (not null)
            if (leftTop == null)
            {
                throw new InvalidDataException("leftTop is a required property for DocumentPosition and cannot be null");
            }
            else
            {
                this.LeftTop = leftTop;
            }
            
            // to ensure "rightBottom" is required (not null)
            if (rightBottom == null)
            {
                throw new InvalidDataException("rightBottom is a required property for DocumentPosition and cannot be null");
            }
            else
            {
                this.RightBottom = rightBottom;
            }
            
            // to ensure "rightTop" is required (not null)
            if (rightTop == null)
            {
                throw new InvalidDataException("rightTop is a required property for DocumentPosition and cannot be null");
            }
            else
            {
                this.RightTop = rightTop;
            }
            
            // to ensure "dpi" is required (not null)
            if (dpi == null)
            {
                throw new InvalidDataException("dpi is a required property for DocumentPosition and cannot be null");
            }
            else
            {
                this.Dpi = dpi;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets DocFormat
        /// </summary>
        [DataMember(Name="docFormat", EmitDefaultValue=true)]
        public Integer DocFormat { get; set; }

        /// <summary>
        /// Document rotation angle
        /// </summary>
        /// <value>Document rotation angle</value>
        [DataMember(Name="Angle", EmitDefaultValue=true)]
        public decimal Angle { get; set; }

        /// <summary>
        /// Document width
        /// </summary>
        /// <value>Document width</value>
        [DataMember(Name="Width", EmitDefaultValue=true)]
        public int Width { get; set; }

        /// <summary>
        /// Document height
        /// </summary>
        /// <value>Document height</value>
        [DataMember(Name="Height", EmitDefaultValue=true)]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets Center
        /// </summary>
        [DataMember(Name="Center", EmitDefaultValue=true)]
        public Point Center { get; set; }

        /// <summary>
        /// Gets or Sets LeftBottom
        /// </summary>
        [DataMember(Name="LeftBottom", EmitDefaultValue=true)]
        public Point LeftBottom { get; set; }

        /// <summary>
        /// Gets or Sets LeftTop
        /// </summary>
        [DataMember(Name="LeftTop", EmitDefaultValue=true)]
        public Point LeftTop { get; set; }

        /// <summary>
        /// Gets or Sets RightBottom
        /// </summary>
        [DataMember(Name="RightBottom", EmitDefaultValue=true)]
        public Point RightBottom { get; set; }

        /// <summary>
        /// Gets or Sets RightTop
        /// </summary>
        [DataMember(Name="RightTop", EmitDefaultValue=true)]
        public Point RightTop { get; set; }

        /// <summary>
        /// Gets or Sets Dpi
        /// </summary>
        [DataMember(Name="Dpi", EmitDefaultValue=true)]
        public int Dpi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentPosition {\n");
            sb.Append("  DocFormat: ").Append(DocFormat).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Center: ").Append(Center).Append("\n");
            sb.Append("  LeftBottom: ").Append(LeftBottom).Append("\n");
            sb.Append("  LeftTop: ").Append(LeftTop).Append("\n");
            sb.Append("  RightBottom: ").Append(RightBottom).Append("\n");
            sb.Append("  RightTop: ").Append(RightTop).Append("\n");
            sb.Append("  Dpi: ").Append(Dpi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentPosition);
        }

        /// <summary>
        /// Returns true if DocumentPosition instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentPosition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentPosition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocFormat == input.DocFormat ||
                    (this.DocFormat != null &&
                    this.DocFormat.Equals(input.DocFormat))
                ) && 
                (
                    this.Angle == input.Angle ||
                    (this.Angle != null &&
                    this.Angle.Equals(input.Angle))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Center == input.Center ||
                    (this.Center != null &&
                    this.Center.Equals(input.Center))
                ) && 
                (
                    this.LeftBottom == input.LeftBottom ||
                    (this.LeftBottom != null &&
                    this.LeftBottom.Equals(input.LeftBottom))
                ) && 
                (
                    this.LeftTop == input.LeftTop ||
                    (this.LeftTop != null &&
                    this.LeftTop.Equals(input.LeftTop))
                ) && 
                (
                    this.RightBottom == input.RightBottom ||
                    (this.RightBottom != null &&
                    this.RightBottom.Equals(input.RightBottom))
                ) && 
                (
                    this.RightTop == input.RightTop ||
                    (this.RightTop != null &&
                    this.RightTop.Equals(input.RightTop))
                ) && 
                (
                    this.Dpi == input.Dpi ||
                    (this.Dpi != null &&
                    this.Dpi.Equals(input.Dpi))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocFormat != null)
                    hashCode = hashCode * 59 + this.DocFormat.GetHashCode();
                if (this.Angle != null)
                    hashCode = hashCode * 59 + this.Angle.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Center != null)
                    hashCode = hashCode * 59 + this.Center.GetHashCode();
                if (this.LeftBottom != null)
                    hashCode = hashCode * 59 + this.LeftBottom.GetHashCode();
                if (this.LeftTop != null)
                    hashCode = hashCode * 59 + this.LeftTop.GetHashCode();
                if (this.RightBottom != null)
                    hashCode = hashCode * 59 + this.RightBottom.GetHashCode();
                if (this.RightTop != null)
                    hashCode = hashCode * 59 + this.RightTop.GetHashCode();
                if (this.Dpi != null)
                    hashCode = hashCode * 59 + this.Dpi.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
