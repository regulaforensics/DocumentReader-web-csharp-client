// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// RFIDDocVisualExtendedFieldItem
    /// </summary>
    public partial class RFIDDocVisualExtendedFieldItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RFIDDocVisualExtendedFieldItem" /> class.
        /// </summary>
        /// <param name="originDG">originDG</param>
        /// <param name="originTagEntry">Record index of the text field source in the data group</param>
        /// <param name="originDGTag">originDGTag</param>
        /// <param name="originEntryView">originEntryView</param>
        [JsonConstructor]
        public RFIDDocVisualExtendedFieldItem(int originDG, decimal originTagEntry, Option<int?> originDGTag = default, Option<int?> originEntryView = default)
        {
            OriginDG = originDG;
            OriginTagEntry = originTagEntry;
            OriginDGTagOption = originDGTag;
            OriginEntryViewOption = originEntryView;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets OriginDG
        /// </summary>
        [JsonPropertyName("OriginDG")]
        public int OriginDG { get; set; }

        /// <summary>
        /// Record index of the text field source in the data group
        /// </summary>
        /// <value>Record index of the text field source in the data group</value>
        [JsonPropertyName("OriginTagEntry")]
        public decimal OriginTagEntry { get; set; }

        /// <summary>
        /// Used to track the state of OriginDGTag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OriginDGTagOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginDGTag
        /// </summary>
        [JsonPropertyName("OriginDGTag")]
        public int? OriginDGTag { get { return this.OriginDGTagOption; } set { this.OriginDGTagOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of OriginEntryView
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OriginEntryViewOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginEntryView
        /// </summary>
        [JsonPropertyName("OriginEntryView")]
        public int? OriginEntryView { get { return this.OriginEntryViewOption; } set { this.OriginEntryViewOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RFIDDocVisualExtendedFieldItem {\n");
            sb.Append("  OriginDG: ").Append(OriginDG).Append("\n");
            sb.Append("  OriginTagEntry: ").Append(OriginTagEntry).Append("\n");
            sb.Append("  OriginDGTag: ").Append(OriginDGTag).Append("\n");
            sb.Append("  OriginEntryView: ").Append(OriginEntryView).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RFIDDocVisualExtendedFieldItem" />
    /// </summary>
    public class RFIDDocVisualExtendedFieldItemJsonConverter : JsonConverter<RFIDDocVisualExtendedFieldItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="RFIDDocVisualExtendedFieldItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RFIDDocVisualExtendedFieldItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> originDG = default;
            Option<decimal?> originTagEntry = default;
            Option<int?> originDGTag = default;
            Option<int?> originEntryView = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "OriginDG":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originDG = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "OriginTagEntry":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originTagEntry = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "OriginDGTag":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originDGTag = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "OriginEntryView":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originEntryView = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!originDG.IsSet)
                throw new ArgumentException("Property is required for class RFIDDocVisualExtendedFieldItem.", nameof(originDG));

            if (!originTagEntry.IsSet)
                throw new ArgumentException("Property is required for class RFIDDocVisualExtendedFieldItem.", nameof(originTagEntry));

            if (originDG.IsSet && originDG.Value == null)
                throw new ArgumentNullException(nameof(originDG), "Property is not nullable for class RFIDDocVisualExtendedFieldItem.");

            if (originTagEntry.IsSet && originTagEntry.Value == null)
                throw new ArgumentNullException(nameof(originTagEntry), "Property is not nullable for class RFIDDocVisualExtendedFieldItem.");

            if (originDGTag.IsSet && originDGTag.Value == null)
                throw new ArgumentNullException(nameof(originDGTag), "Property is not nullable for class RFIDDocVisualExtendedFieldItem.");

            if (originEntryView.IsSet && originEntryView.Value == null)
                throw new ArgumentNullException(nameof(originEntryView), "Property is not nullable for class RFIDDocVisualExtendedFieldItem.");

            return new RFIDDocVisualExtendedFieldItem(originDG.Value!.Value!, originTagEntry.Value!.Value!, originDGTag, originEntryView);
        }

        /// <summary>
        /// Serializes a <see cref="RFIDDocVisualExtendedFieldItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rFIDDocVisualExtendedFieldItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RFIDDocVisualExtendedFieldItem rFIDDocVisualExtendedFieldItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rFIDDocVisualExtendedFieldItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RFIDDocVisualExtendedFieldItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rFIDDocVisualExtendedFieldItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RFIDDocVisualExtendedFieldItem rFIDDocVisualExtendedFieldItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("OriginDG", rFIDDocVisualExtendedFieldItem.OriginDG);

            writer.WriteNumber("OriginTagEntry", rFIDDocVisualExtendedFieldItem.OriginTagEntry);

            if (rFIDDocVisualExtendedFieldItem.OriginDGTagOption.IsSet)
                writer.WriteNumber("OriginDGTag", rFIDDocVisualExtendedFieldItem.OriginDGTagOption.Value!.Value);

            if (rFIDDocVisualExtendedFieldItem.OriginEntryViewOption.IsSet)
                writer.WriteNumber("OriginEntryView", rFIDDocVisualExtendedFieldItem.OriginEntryViewOption.Value!.Value);
        }
    }
}
