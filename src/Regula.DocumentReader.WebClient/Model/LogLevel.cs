// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Defines LogLevel
    /// </summary>
    public enum LogLevel
    {
        /// <summary>
        /// Enum FATAL_ERROR for value: FatalError
        /// </summary>
        FATAL_ERROR = 1,

        /// <summary>
        /// Enum ERROR for value: Error
        /// </summary>
        ERROR = 2,

        /// <summary>
        /// Enum WARNING for value: Warning
        /// </summary>
        WARNING = 3,

        /// <summary>
        /// Enum INFO for value: Info
        /// </summary>
        INFO = 4,

        /// <summary>
        /// Enum DEBUG for value: Debug
        /// </summary>
        DEBUG = 5
    }

    /// <summary>
    /// Converts <see cref="LogLevel"/> to and from the JSON value
    /// </summary>
    public static class LogLevelValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="LogLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LogLevel FromString(string value)
        {
            if (value.Equals("FatalError"))
                return LogLevel.FATAL_ERROR;

            if (value.Equals("Error"))
                return LogLevel.ERROR;

            if (value.Equals("Warning"))
                return LogLevel.WARNING;

            if (value.Equals("Info"))
                return LogLevel.INFO;

            if (value.Equals("Debug"))
                return LogLevel.DEBUG;

            throw new NotImplementedException($"Could not convert value to type LogLevel: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="LogLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LogLevel? FromStringOrDefault(string value)
        {
            if (value.Equals("FatalError"))
                return LogLevel.FATAL_ERROR;

            if (value.Equals("Error"))
                return LogLevel.ERROR;

            if (value.Equals("Warning"))
                return LogLevel.WARNING;

            if (value.Equals("Info"))
                return LogLevel.INFO;

            if (value.Equals("Debug"))
                return LogLevel.DEBUG;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LogLevel"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(LogLevel value)
        {
            if (value == LogLevel.FATAL_ERROR)
                return "FatalError";

            if (value == LogLevel.ERROR)
                return "Error";

            if (value == LogLevel.WARNING)
                return "Warning";

            if (value == LogLevel.INFO)
                return "Info";

            if (value == LogLevel.DEBUG)
                return "Debug";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LogLevel"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class LogLevelJsonConverter : JsonConverter<LogLevel>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LogLevel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            LogLevel? result = rawValue == null
                ? null
                : LogLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the LogLevel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="logLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LogLevel logLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(logLevel.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LogLevel"/>
    /// </summary>
    public class LogLevelNullableJsonConverter : JsonConverter<LogLevel?>
    {
        /// <summary>
        /// Returns a LogLevel from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LogLevel? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            LogLevel? result = rawValue == null
                ? null
                : LogLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="logLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LogLevel? logLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(logLevel?.ToString() ?? "null");
        }
    }
}
