// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// AuthenticityResult
    /// </summary>
    public partial class AuthenticityResult : ResultItem, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityResult" /> class.
        /// </summary>
        /// <param name="authenticityCheckList">authenticityCheckList</param>
        /// <param name="bufLength">bufLength</param>
        /// <param name="light">light</param>
        /// <param name="listIdx">listIdx</param>
        /// <param name="pageIdx">pageIdx</param>
        [JsonConstructor]
        public AuthenticityResult(AuthenticityCheckList authenticityCheckList, Option<int?> bufLength = default, Option<int?> light = default, Option<int?> listIdx = default, Option<int?> pageIdx = default) : base(bufLength, light, listIdx, pageIdx)
        {
            AuthenticityCheckList = authenticityCheckList;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AuthenticityCheckList
        /// </summary>
        [JsonPropertyName("AuthenticityCheckList")]
        public AuthenticityCheckList AuthenticityCheckList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticityResult {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AuthenticityCheckList: ").Append(AuthenticityCheckList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthenticityResult" />
    /// </summary>
    public class AuthenticityResultJsonConverter : JsonConverter<AuthenticityResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthenticityResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthenticityResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AuthenticityCheckList?> authenticityCheckList = default;
            Option<int?> bufLength = default;
            Option<int?> light = default;
            Option<int?> listIdx = default;
            Option<int?> pageIdx = default;
            Option<int?> resultType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AuthenticityCheckList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                authenticityCheckList = new Option<AuthenticityCheckList?>(JsonSerializer.Deserialize<AuthenticityCheckList>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "buf_length":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bufLength = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "light":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                light = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "list_idx":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                listIdx = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "page_idx":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pageIdx = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "result_type":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resultType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!authenticityCheckList.IsSet)
                throw new ArgumentException("Property is required for class AuthenticityResult.", nameof(authenticityCheckList));

            if (!resultType.IsSet)
                throw new ArgumentException("Property is required for class AuthenticityResult.", nameof(resultType));

            if (authenticityCheckList.IsSet && authenticityCheckList.Value == null)
                throw new ArgumentNullException(nameof(authenticityCheckList), "Property is not nullable for class AuthenticityResult.");

            if (bufLength.IsSet && bufLength.Value == null)
                throw new ArgumentNullException(nameof(bufLength), "Property is not nullable for class AuthenticityResult.");

            if (light.IsSet && light.Value == null)
                throw new ArgumentNullException(nameof(light), "Property is not nullable for class AuthenticityResult.");

            if (listIdx.IsSet && listIdx.Value == null)
                throw new ArgumentNullException(nameof(listIdx), "Property is not nullable for class AuthenticityResult.");

            if (pageIdx.IsSet && pageIdx.Value == null)
                throw new ArgumentNullException(nameof(pageIdx), "Property is not nullable for class AuthenticityResult.");

            if (resultType.IsSet && resultType.Value == null)
                throw new ArgumentNullException(nameof(resultType), "Property is not nullable for class AuthenticityResult.");

            return new AuthenticityResult(authenticityCheckList.Value!, bufLength, light, listIdx, pageIdx);
        }

        /// <summary>
        /// Serializes a <see cref="AuthenticityResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authenticityResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthenticityResult authenticityResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, authenticityResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthenticityResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authenticityResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthenticityResult authenticityResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authenticityResult.AuthenticityCheckList == null)
                throw new ArgumentNullException(nameof(authenticityResult.AuthenticityCheckList), "Property is required for class AuthenticityResult.");

            writer.WritePropertyName("AuthenticityCheckList");
            JsonSerializer.Serialize(writer, authenticityResult.AuthenticityCheckList, jsonSerializerOptions);
            if (authenticityResult.BufLengthOption.IsSet)
                writer.WriteNumber("buf_length", authenticityResult.BufLengthOption.Value!.Value);

            if (authenticityResult.LightOption.IsSet)
                writer.WriteNumber("light", authenticityResult.LightOption.Value!.Value);

            if (authenticityResult.ListIdxOption.IsSet)
                writer.WriteNumber("list_idx", authenticityResult.ListIdxOption.Value!.Value);

            if (authenticityResult.PageIdxOption.IsSet)
                writer.WriteNumber("page_idx", authenticityResult.PageIdxOption.Value!.Value);

            writer.WriteNumber("result_type", authenticityResult.ResultType);
        }
    }
}
