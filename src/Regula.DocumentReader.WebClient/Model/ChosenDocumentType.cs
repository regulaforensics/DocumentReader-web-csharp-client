/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Contains information about one document type candidate
    /// </summary>
    [DataContract]
    public partial class ChosenDocumentType :  IEquatable<ChosenDocumentType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChosenDocumentType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChosenDocumentType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChosenDocumentType" /> class.
        /// </summary>
        /// <param name="documentName">Document name (required).</param>
        /// <param name="iD">Unique document type template identifier (Regula&#39;s internal numeric code) (required).</param>
        /// <param name="p">A measure of the likelihood of correct recognition in the analysis of this type of document (required).</param>
        /// <param name="rotated180">true if the document of the given type is rotated by 180 degrees (required).</param>
        /// <param name="rFIDPresence">rFIDPresence (required).</param>
        /// <param name="fDSIDList">fDSIDList (required).</param>
        /// <param name="necessaryLights">Combination of lighting scheme identifiers (Light enum) required to conduct OCR for this type of document (required).</param>
        /// <param name="checkAuthenticity">Set of authentication options provided for this type of document (combination of Authenticity enum) (required).</param>
        /// <param name="uVExp">The required exposure value of the camera when receiving images of a document of this type for a UV lighting scheme (required).</param>
        /// <param name="authenticityNecessaryLights">Combination of lighting scheme identifiers (combination of Light enum) needed to perform all authenticity checks specified in CheckAuthenticity (required).</param>
        /// <param name="oVIExp">Camera exposure value necessary when obtaining document images of the given type for AXIAL lighting scheme (required).</param>
        public ChosenDocumentType(string documentName = default(string), int iD = default(int), decimal p = default(decimal), bool rotated180 = default(bool), int rFIDPresence = default(int), FDSIDList fDSIDList = default(FDSIDList), int necessaryLights = default(int), int checkAuthenticity = default(int), int uVExp = default(int), int authenticityNecessaryLights = default(int), decimal oVIExp = default(decimal))
        {
            // to ensure "documentName" is required (not null)
            if (documentName == null)
            {
                throw new InvalidDataException("documentName is a required property for ChosenDocumentType and cannot be null");
            }
            else
            {
                this.DocumentName = documentName;
            }
            
            // to ensure "iD" is required (not null)
            if (iD == null)
            {
                throw new InvalidDataException("iD is a required property for ChosenDocumentType and cannot be null");
            }
            else
            {
                this.ID = iD;
            }
            
            // to ensure "p" is required (not null)
            if (p == null)
            {
                throw new InvalidDataException("p is a required property for ChosenDocumentType and cannot be null");
            }
            else
            {
                this.P = p;
            }
            
            // to ensure "rotated180" is required (not null)
            if (rotated180 == null)
            {
                throw new InvalidDataException("rotated180 is a required property for ChosenDocumentType and cannot be null");
            }
            else
            {
                this.Rotated180 = rotated180;
            }
            
            // to ensure "rFIDPresence" is required (not null)
            if (rFIDPresence == null)
            {
                throw new InvalidDataException("rFIDPresence is a required property for ChosenDocumentType and cannot be null");
            }
            else
            {
                this.RFIDPresence = rFIDPresence;
            }
            
            // to ensure "fDSIDList" is required (not null)
            if (fDSIDList == null)
            {
                throw new InvalidDataException("fDSIDList is a required property for ChosenDocumentType and cannot be null");
            }
            else
            {
                this.FDSIDList = fDSIDList;
            }
            
            // to ensure "necessaryLights" is required (not null)
            if (necessaryLights == null)
            {
                throw new InvalidDataException("necessaryLights is a required property for ChosenDocumentType and cannot be null");
            }
            else
            {
                this.NecessaryLights = necessaryLights;
            }
            
            // to ensure "checkAuthenticity" is required (not null)
            if (checkAuthenticity == null)
            {
                throw new InvalidDataException("checkAuthenticity is a required property for ChosenDocumentType and cannot be null");
            }
            else
            {
                this.CheckAuthenticity = checkAuthenticity;
            }
            
            // to ensure "uVExp" is required (not null)
            if (uVExp == null)
            {
                throw new InvalidDataException("uVExp is a required property for ChosenDocumentType and cannot be null");
            }
            else
            {
                this.UVExp = uVExp;
            }
            
            // to ensure "authenticityNecessaryLights" is required (not null)
            if (authenticityNecessaryLights == null)
            {
                throw new InvalidDataException("authenticityNecessaryLights is a required property for ChosenDocumentType and cannot be null");
            }
            else
            {
                this.AuthenticityNecessaryLights = authenticityNecessaryLights;
            }
            
            // to ensure "oVIExp" is required (not null)
            if (oVIExp == null)
            {
                throw new InvalidDataException("oVIExp is a required property for ChosenDocumentType and cannot be null");
            }
            else
            {
                this.OVIExp = oVIExp;
            }
            
        }
        
        /// <summary>
        /// Document name
        /// </summary>
        /// <value>Document name</value>
        [DataMember(Name="DocumentName", EmitDefaultValue=true)]
        public string DocumentName { get; set; }

        /// <summary>
        /// Unique document type template identifier (Regula&#39;s internal numeric code)
        /// </summary>
        /// <value>Unique document type template identifier (Regula&#39;s internal numeric code)</value>
        [DataMember(Name="ID", EmitDefaultValue=true)]
        public int ID { get; set; }

        /// <summary>
        /// A measure of the likelihood of correct recognition in the analysis of this type of document
        /// </summary>
        /// <value>A measure of the likelihood of correct recognition in the analysis of this type of document</value>
        [DataMember(Name="P", EmitDefaultValue=true)]
        public decimal P { get; set; }

        /// <summary>
        /// true if the document of the given type is rotated by 180 degrees
        /// </summary>
        /// <value>true if the document of the given type is rotated by 180 degrees</value>
        [DataMember(Name="Rotated180", EmitDefaultValue=true)]
        public bool Rotated180 { get; set; }

        /// <summary>
        /// Gets or Sets RFIDPresence
        /// </summary>
        [DataMember(Name="RFID_Presence", EmitDefaultValue=true)]
        public int RFIDPresence { get; set; }

        /// <summary>
        /// Gets or Sets FDSIDList
        /// </summary>
        [DataMember(Name="FDSIDList", EmitDefaultValue=true)]
        public FDSIDList FDSIDList { get; set; }

        /// <summary>
        /// Combination of lighting scheme identifiers (Light enum) required to conduct OCR for this type of document
        /// </summary>
        /// <value>Combination of lighting scheme identifiers (Light enum) required to conduct OCR for this type of document</value>
        [DataMember(Name="NecessaryLights", EmitDefaultValue=true)]
        public int NecessaryLights { get; set; }

        /// <summary>
        /// Set of authentication options provided for this type of document (combination of Authenticity enum)
        /// </summary>
        /// <value>Set of authentication options provided for this type of document (combination of Authenticity enum)</value>
        [DataMember(Name="CheckAuthenticity", EmitDefaultValue=true)]
        public int CheckAuthenticity { get; set; }

        /// <summary>
        /// The required exposure value of the camera when receiving images of a document of this type for a UV lighting scheme
        /// </summary>
        /// <value>The required exposure value of the camera when receiving images of a document of this type for a UV lighting scheme</value>
        [DataMember(Name="UVExp", EmitDefaultValue=true)]
        public int UVExp { get; set; }

        /// <summary>
        /// Combination of lighting scheme identifiers (combination of Light enum) needed to perform all authenticity checks specified in CheckAuthenticity
        /// </summary>
        /// <value>Combination of lighting scheme identifiers (combination of Light enum) needed to perform all authenticity checks specified in CheckAuthenticity</value>
        [DataMember(Name="AuthenticityNecessaryLights", EmitDefaultValue=true)]
        public int AuthenticityNecessaryLights { get; set; }

        /// <summary>
        /// Camera exposure value necessary when obtaining document images of the given type for AXIAL lighting scheme
        /// </summary>
        /// <value>Camera exposure value necessary when obtaining document images of the given type for AXIAL lighting scheme</value>
        [DataMember(Name="OVIExp", EmitDefaultValue=true)]
        public decimal OVIExp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChosenDocumentType {\n");
            sb.Append("  DocumentName: ").Append(DocumentName).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  P: ").Append(P).Append("\n");
            sb.Append("  Rotated180: ").Append(Rotated180).Append("\n");
            sb.Append("  RFIDPresence: ").Append(RFIDPresence).Append("\n");
            sb.Append("  FDSIDList: ").Append(FDSIDList).Append("\n");
            sb.Append("  NecessaryLights: ").Append(NecessaryLights).Append("\n");
            sb.Append("  CheckAuthenticity: ").Append(CheckAuthenticity).Append("\n");
            sb.Append("  UVExp: ").Append(UVExp).Append("\n");
            sb.Append("  AuthenticityNecessaryLights: ").Append(AuthenticityNecessaryLights).Append("\n");
            sb.Append("  OVIExp: ").Append(OVIExp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChosenDocumentType);
        }

        /// <summary>
        /// Returns true if ChosenDocumentType instances are equal
        /// </summary>
        /// <param name="input">Instance of ChosenDocumentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChosenDocumentType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentName == input.DocumentName ||
                    (this.DocumentName != null &&
                    this.DocumentName.Equals(input.DocumentName))
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.P == input.P ||
                    (this.P != null &&
                    this.P.Equals(input.P))
                ) && 
                (
                    this.Rotated180 == input.Rotated180 ||
                    (this.Rotated180 != null &&
                    this.Rotated180.Equals(input.Rotated180))
                ) && 
                (
                    this.RFIDPresence == input.RFIDPresence ||
                    (this.RFIDPresence != null &&
                    this.RFIDPresence.Equals(input.RFIDPresence))
                ) && 
                (
                    this.FDSIDList == input.FDSIDList ||
                    (this.FDSIDList != null &&
                    this.FDSIDList.Equals(input.FDSIDList))
                ) && 
                (
                    this.NecessaryLights == input.NecessaryLights ||
                    (this.NecessaryLights != null &&
                    this.NecessaryLights.Equals(input.NecessaryLights))
                ) && 
                (
                    this.CheckAuthenticity == input.CheckAuthenticity ||
                    (this.CheckAuthenticity != null &&
                    this.CheckAuthenticity.Equals(input.CheckAuthenticity))
                ) && 
                (
                    this.UVExp == input.UVExp ||
                    (this.UVExp != null &&
                    this.UVExp.Equals(input.UVExp))
                ) && 
                (
                    this.AuthenticityNecessaryLights == input.AuthenticityNecessaryLights ||
                    (this.AuthenticityNecessaryLights != null &&
                    this.AuthenticityNecessaryLights.Equals(input.AuthenticityNecessaryLights))
                ) && 
                (
                    this.OVIExp == input.OVIExp ||
                    (this.OVIExp != null &&
                    this.OVIExp.Equals(input.OVIExp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentName != null)
                    hashCode = hashCode * 59 + this.DocumentName.GetHashCode();
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.P != null)
                    hashCode = hashCode * 59 + this.P.GetHashCode();
                if (this.Rotated180 != null)
                    hashCode = hashCode * 59 + this.Rotated180.GetHashCode();
                if (this.RFIDPresence != null)
                    hashCode = hashCode * 59 + this.RFIDPresence.GetHashCode();
                if (this.FDSIDList != null)
                    hashCode = hashCode * 59 + this.FDSIDList.GetHashCode();
                if (this.NecessaryLights != null)
                    hashCode = hashCode * 59 + this.NecessaryLights.GetHashCode();
                if (this.CheckAuthenticity != null)
                    hashCode = hashCode * 59 + this.CheckAuthenticity.GetHashCode();
                if (this.UVExp != null)
                    hashCode = hashCode * 59 + this.UVExp.GetHashCode();
                if (this.AuthenticityNecessaryLights != null)
                    hashCode = hashCode * 59 + this.AuthenticityNecessaryLights.GetHashCode();
                if (this.OVIExp != null)
                    hashCode = hashCode * 59 + this.OVIExp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // P (decimal) maximum
            if(this.P > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for P, must be a value less than or equal to 1.", new [] { "P" });
            }

            // P (decimal) minimum
            if(this.P < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for P, must be a value greater than or equal to 0.", new [] { "P" });
            }

            yield break;
        }
    }

}
