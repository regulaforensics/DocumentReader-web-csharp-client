// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// OriginalSymbol
    /// </summary>
    public partial class OriginalSymbol : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OriginalSymbol" /> class.
        /// </summary>
        /// <param name="code">Unicode symbol code</param>
        /// <param name="probability">Probability of correctness reading of a single character</param>
        /// <param name="rect">rect</param>
        [JsonConstructor]
        public OriginalSymbol(long code, int probability, Option<RectangleCoordinates?> rect = default)
        {
            Code = code;
            Probability = probability;
            RectOption = rect;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Unicode symbol code
        /// </summary>
        /// <value>Unicode symbol code</value>
        [JsonPropertyName("code")]
        public long Code { get; set; }

        /// <summary>
        /// Probability of correctness reading of a single character
        /// </summary>
        /// <value>Probability of correctness reading of a single character</value>
        [JsonPropertyName("probability")]
        public int Probability { get; set; }

        /// <summary>
        /// Used to track the state of Rect
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RectangleCoordinates?> RectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rect
        /// </summary>
        [JsonPropertyName("rect")]
        public RectangleCoordinates? Rect { get { return this.RectOption; } set { this.RectOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OriginalSymbol {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  Rect: ").Append(Rect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Probability (int) maximum
            if (this.Probability > (int)100)
            {
                yield return new ValidationResult("Invalid value for Probability, must be a value less than or equal to 100.", new [] { "Probability" });
            }

            // Probability (int) minimum
            if (this.Probability < (int)0)
            {
                yield return new ValidationResult("Invalid value for Probability, must be a value greater than or equal to 0.", new [] { "Probability" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OriginalSymbol" />
    /// </summary>
    public class OriginalSymbolJsonConverter : JsonConverter<OriginalSymbol>
    {
        /// <summary>
        /// Deserializes json to <see cref="OriginalSymbol" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OriginalSymbol Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> code = default;
            Option<int?> probability = default;
            Option<RectangleCoordinates?> rect = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                code = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "probability":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                probability = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "rect":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rect = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!code.IsSet)
                throw new ArgumentException("Property is required for class OriginalSymbol.", nameof(code));

            if (!probability.IsSet)
                throw new ArgumentException("Property is required for class OriginalSymbol.", nameof(probability));

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class OriginalSymbol.");

            if (probability.IsSet && probability.Value == null)
                throw new ArgumentNullException(nameof(probability), "Property is not nullable for class OriginalSymbol.");

            if (rect.IsSet && rect.Value == null)
                throw new ArgumentNullException(nameof(rect), "Property is not nullable for class OriginalSymbol.");

            return new OriginalSymbol(code.Value!.Value!, probability.Value!.Value!, rect);
        }

        /// <summary>
        /// Serializes a <see cref="OriginalSymbol" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="originalSymbol"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OriginalSymbol originalSymbol, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, originalSymbol, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OriginalSymbol" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="originalSymbol"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OriginalSymbol originalSymbol, JsonSerializerOptions jsonSerializerOptions)
        {
            if (originalSymbol.RectOption.IsSet && originalSymbol.Rect == null)
                throw new ArgumentNullException(nameof(originalSymbol.Rect), "Property is required for class OriginalSymbol.");

            writer.WriteNumber("code", originalSymbol.Code);

            writer.WriteNumber("probability", originalSymbol.Probability);

            if (originalSymbol.RectOption.IsSet)
            {
                writer.WritePropertyName("rect");
                JsonSerializer.Serialize(writer, originalSymbol.Rect, jsonSerializerOptions);
            }
        }
    }
}
