/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// OriginalSymbol
    /// </summary>
    [DataContract(Name = "OriginalSymbol")]
    public partial class OriginalSymbol : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OriginalSymbol" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OriginalSymbol() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OriginalSymbol" /> class.
        /// </summary>
        /// <param name="code">Unicode symbol code (required).</param>
        /// <param name="probability">Probability of correctness reading of a single character (required).</param>
        /// <param name="rect">rect.</param>
        public OriginalSymbol(long code = default(long), int probability = default(int), RectangleCoordinates rect = default(RectangleCoordinates))
        {
            this.Code = code;
            this.Probability = probability;
            this.Rect = rect;
        }

        /// <summary>
        /// Unicode symbol code
        /// </summary>
        /// <value>Unicode symbol code</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public long Code { get; set; }

        /// <summary>
        /// Probability of correctness reading of a single character
        /// </summary>
        /// <value>Probability of correctness reading of a single character</value>
        [DataMember(Name = "probability", IsRequired = true, EmitDefaultValue = true)]
        public int Probability { get; set; }

        /// <summary>
        /// Gets or Sets Rect
        /// </summary>
        [DataMember(Name = "rect", EmitDefaultValue = false)]
        public RectangleCoordinates? Rect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OriginalSymbol {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  Rect: ").Append(Rect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Probability (int) maximum
            if (this.Probability > (int)100)
            {
                yield return new ValidationResult("Invalid value for Probability, must be a value less than or equal to 100.", new [] { "Probability" });
            }

            // Probability (int) minimum
            if (this.Probability < (int)0)
            {
                yield return new ValidationResult("Invalid value for Probability, must be a value greater than or equal to 0.", new [] { "Probability" });
            }

            yield break;
        }
    }

}
