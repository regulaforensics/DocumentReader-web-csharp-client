/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// AuthenticityCheckResult
    /// </summary>
    [DataContract(Name = "AuthenticityCheckResult")]
    public partial class AuthenticityCheckResult : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", IsRequired = true, EmitDefaultValue = true)]
        public AuthenticityResultType Type { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "Result", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult Result { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthenticityCheckResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResult" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="result">result (required).</param>
        /// <param name="count">Count of items in List.</param>
        /// <param name="list">list (required).</param>
        public AuthenticityCheckResult(AuthenticityResultType type = default(AuthenticityResultType), CheckResult result = default(CheckResult), int count = default(int), List<AuthenticityCheckResultItem> list = default(List<AuthenticityCheckResultItem>))
        {
            this.Type = type;
            this.Result = result;
            // to ensure "list" is required (not null)
            if (list == null)
            {
                throw new ArgumentNullException("list is a required property for AuthenticityCheckResult and cannot be null");
            }
            this.List = list;
            this.Count = count;
        }

        /// <summary>
        /// Count of items in List
        /// </summary>
        /// <value>Count of items in List</value>
        [DataMember(Name = "Count", EmitDefaultValue = false)]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or Sets List
        /// </summary>
        [DataMember(Name = "List", IsRequired = true, EmitDefaultValue = true)]
        public List<AuthenticityCheckResultItem> List { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticityCheckResult {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
