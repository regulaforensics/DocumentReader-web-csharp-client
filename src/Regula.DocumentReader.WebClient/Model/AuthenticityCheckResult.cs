// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// AuthenticityCheckResult
    /// </summary>
    public partial class AuthenticityCheckResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticityCheckResult" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="result">result</param>
        /// <param name="list">list</param>
        /// <param name="count">Count of items in List</param>
        [JsonConstructor]
        public AuthenticityCheckResult(AuthenticityResultType type, CheckResult result, List<AuthenticityCheckResultItem> list, Option<int?> count = default)
        {
            Type = type;
            Result = result;
            List = list;
            CountOption = count;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("Type")]
        public AuthenticityResultType Type { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [JsonPropertyName("Result")]
        public CheckResult Result { get; set; }

        /// <summary>
        /// Gets or Sets List
        /// </summary>
        [JsonPropertyName("List")]
        public List<AuthenticityCheckResultItem> List { get; set; }

        /// <summary>
        /// Used to track the state of Count
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CountOption { get; private set; }

        /// <summary>
        /// Count of items in List
        /// </summary>
        /// <value>Count of items in List</value>
        [JsonPropertyName("Count")]
        public int? Count { get { return this.CountOption; } set { this.CountOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticityCheckResult {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthenticityCheckResult" />
    /// </summary>
    public class AuthenticityCheckResultJsonConverter : JsonConverter<AuthenticityCheckResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthenticityCheckResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthenticityCheckResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AuthenticityResultType?> type = default;
            Option<CheckResult?> result = default;
            Option<List<AuthenticityCheckResultItem>?> list = default;
            Option<int?> count = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<AuthenticityResultType?>(AuthenticityResultTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "Result":
                            string? resultRawValue = utf8JsonReader.GetString();
                            if (resultRawValue != null)
                                result = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(resultRawValue));
                            break;
                        case "List":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                list = new Option<List<AuthenticityCheckResultItem>?>(JsonSerializer.Deserialize<List<AuthenticityCheckResultItem>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                count = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class AuthenticityCheckResult.", nameof(type));

            if (!result.IsSet)
                throw new ArgumentException("Property is required for class AuthenticityCheckResult.", nameof(result));

            if (!list.IsSet)
                throw new ArgumentException("Property is required for class AuthenticityCheckResult.", nameof(list));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class AuthenticityCheckResult.");

            if (result.IsSet && result.Value == null)
                throw new ArgumentNullException(nameof(result), "Property is not nullable for class AuthenticityCheckResult.");

            if (list.IsSet && list.Value == null)
                throw new ArgumentNullException(nameof(list), "Property is not nullable for class AuthenticityCheckResult.");

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class AuthenticityCheckResult.");

            return new AuthenticityCheckResult(type.Value!.Value!, result.Value!.Value!, list.Value!, count);
        }

        /// <summary>
        /// Serializes a <see cref="AuthenticityCheckResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authenticityCheckResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthenticityCheckResult authenticityCheckResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, authenticityCheckResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthenticityCheckResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authenticityCheckResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthenticityCheckResult authenticityCheckResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authenticityCheckResult.List == null)
                throw new ArgumentNullException(nameof(authenticityCheckResult.List), "Property is required for class AuthenticityCheckResult.");

            var typeRawValue = AuthenticityResultTypeValueConverter.ToJsonValue(authenticityCheckResult.Type);
            writer.WriteNumber("Type", typeRawValue);

            var resultRawValue = CheckResultValueConverter.ToJsonValue(authenticityCheckResult.Result);
            writer.WriteNumber("Result", resultRawValue);

            writer.WritePropertyName("List");
            JsonSerializer.Serialize(writer, authenticityCheckResult.List, jsonSerializerOptions);
            if (authenticityCheckResult.CountOption.IsSet)
                writer.WriteNumber("Count", authenticityCheckResult.CountOption.Value!.Value);
        }
    }
}
