// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// StringItem
    /// </summary>
    public partial class StringItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StringItem" /> class.
        /// </summary>
        /// <param name="aLIGNMENTSYMBOLSINSTRING">aLIGNMENTSYMBOLSINSTRING</param>
        /// <param name="cHECKSUMS">cHECKSUMS</param>
        /// <param name="errorPOSITION">errorPOSITION</param>
        /// <param name="fieldCount">fieldCount</param>
        /// <param name="fields">fields</param>
        /// <param name="sTRINGSDISTANCE">sTRINGSDISTANCE</param>
        /// <param name="sTRINGSINTERVAL">sTRINGSINTERVAL</param>
        /// <param name="sTRINGFILLING">sTRINGFILLING</param>
        /// <param name="sTRINGPOSITION">sTRINGPOSITION</param>
        /// <param name="sYMBOLSPARAM">sYMBOLSPARAM</param>
        /// <param name="sizeErrorALIGNMENT">sizeErrorALIGNMENT</param>
        /// <param name="sizeErrorDISTANCE">sizeErrorDISTANCE</param>
        /// <param name="sizeErrorINTERVAL">sizeErrorINTERVAL</param>
        /// <param name="stringAngle">stringAngle</param>
        /// <param name="stringBorders">stringBorders</param>
        /// <param name="symbolsCount">symbolsCount</param>
        /// <param name="symbolsEstimations">symbolsEstimations</param>
        [JsonConstructor]
        public StringItem(int aLIGNMENTSYMBOLSINSTRING, int cHECKSUMS, ErrorCoordinates errorPOSITION, int fieldCount, List<FieldItem> fields, int sTRINGSDISTANCE, int sTRINGSINTERVAL, int sTRINGFILLING, int sTRINGPOSITION, int sYMBOLSPARAM, decimal sizeErrorALIGNMENT, decimal sizeErrorDISTANCE, decimal sizeErrorINTERVAL, decimal stringAngle, RectangleCoordinates stringBorders, int symbolsCount, List<SymbolEstimationItem> symbolsEstimations)
        {
            ALIGNMENT_SYMBOLS_IN_STRING = aLIGNMENTSYMBOLSINSTRING;
            CHECK_SUMS = cHECKSUMS;
            ErrorPOSITION = errorPOSITION;
            FieldCount = fieldCount;
            Fields = fields;
            STRINGS_DISTANCE = sTRINGSDISTANCE;
            STRINGS_INTERVAL = sTRINGSINTERVAL;
            STRING_FILLING = sTRINGFILLING;
            STRING_POSITION = sTRINGPOSITION;
            SYMBOLS_PARAM = sYMBOLSPARAM;
            SizeErrorALIGNMENT = sizeErrorALIGNMENT;
            SizeErrorDISTANCE = sizeErrorDISTANCE;
            SizeErrorINTERVAL = sizeErrorINTERVAL;
            StringAngle = stringAngle;
            StringBorders = stringBorders;
            SymbolsCount = symbolsCount;
            SymbolsEstimations = symbolsEstimations;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ALIGNMENT_SYMBOLS_IN_STRING
        /// </summary>
        [JsonPropertyName("ALIGNMENT_SYMBOLS_IN_STRING")]
        public int ALIGNMENT_SYMBOLS_IN_STRING { get; set; }

        /// <summary>
        /// Gets or Sets CHECK_SUMS
        /// </summary>
        [JsonPropertyName("CHECK_SUMS")]
        public int CHECK_SUMS { get; set; }

        /// <summary>
        /// Gets or Sets ErrorPOSITION
        /// </summary>
        [JsonPropertyName("ErrorPOSITION")]
        public ErrorCoordinates ErrorPOSITION { get; set; }

        /// <summary>
        /// Gets or Sets FieldCount
        /// </summary>
        [JsonPropertyName("FieldCount")]
        public int FieldCount { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [JsonPropertyName("Fields")]
        public List<FieldItem> Fields { get; set; }

        /// <summary>
        /// Gets or Sets STRINGS_DISTANCE
        /// </summary>
        [JsonPropertyName("STRINGS_DISTANCE")]
        public int STRINGS_DISTANCE { get; set; }

        /// <summary>
        /// Gets or Sets STRINGS_INTERVAL
        /// </summary>
        [JsonPropertyName("STRINGS_INTERVAL")]
        public int STRINGS_INTERVAL { get; set; }

        /// <summary>
        /// Gets or Sets STRING_FILLING
        /// </summary>
        [JsonPropertyName("STRING_FILLING")]
        public int STRING_FILLING { get; set; }

        /// <summary>
        /// Gets or Sets STRING_POSITION
        /// </summary>
        [JsonPropertyName("STRING_POSITION")]
        public int STRING_POSITION { get; set; }

        /// <summary>
        /// Gets or Sets SYMBOLS_PARAM
        /// </summary>
        [JsonPropertyName("SYMBOLS_PARAM")]
        public int SYMBOLS_PARAM { get; set; }

        /// <summary>
        /// Gets or Sets SizeErrorALIGNMENT
        /// </summary>
        [JsonPropertyName("SizeError_ALIGNMENT")]
        public decimal SizeErrorALIGNMENT { get; set; }

        /// <summary>
        /// Gets or Sets SizeErrorDISTANCE
        /// </summary>
        [JsonPropertyName("SizeError_DISTANCE")]
        public decimal SizeErrorDISTANCE { get; set; }

        /// <summary>
        /// Gets or Sets SizeErrorINTERVAL
        /// </summary>
        [JsonPropertyName("SizeError_INTERVAL")]
        public decimal SizeErrorINTERVAL { get; set; }

        /// <summary>
        /// Gets or Sets StringAngle
        /// </summary>
        [JsonPropertyName("StringAngle")]
        public decimal StringAngle { get; set; }

        /// <summary>
        /// Gets or Sets StringBorders
        /// </summary>
        [JsonPropertyName("StringBorders")]
        public RectangleCoordinates StringBorders { get; set; }

        /// <summary>
        /// Gets or Sets SymbolsCount
        /// </summary>
        [JsonPropertyName("SymbolsCount")]
        public int SymbolsCount { get; set; }

        /// <summary>
        /// Gets or Sets SymbolsEstimations
        /// </summary>
        [JsonPropertyName("SymbolsEstimations")]
        public List<SymbolEstimationItem> SymbolsEstimations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StringItem {\n");
            sb.Append("  ALIGNMENT_SYMBOLS_IN_STRING: ").Append(ALIGNMENT_SYMBOLS_IN_STRING).Append("\n");
            sb.Append("  CHECK_SUMS: ").Append(CHECK_SUMS).Append("\n");
            sb.Append("  ErrorPOSITION: ").Append(ErrorPOSITION).Append("\n");
            sb.Append("  FieldCount: ").Append(FieldCount).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  STRINGS_DISTANCE: ").Append(STRINGS_DISTANCE).Append("\n");
            sb.Append("  STRINGS_INTERVAL: ").Append(STRINGS_INTERVAL).Append("\n");
            sb.Append("  STRING_FILLING: ").Append(STRING_FILLING).Append("\n");
            sb.Append("  STRING_POSITION: ").Append(STRING_POSITION).Append("\n");
            sb.Append("  SYMBOLS_PARAM: ").Append(SYMBOLS_PARAM).Append("\n");
            sb.Append("  SizeErrorALIGNMENT: ").Append(SizeErrorALIGNMENT).Append("\n");
            sb.Append("  SizeErrorDISTANCE: ").Append(SizeErrorDISTANCE).Append("\n");
            sb.Append("  SizeErrorINTERVAL: ").Append(SizeErrorINTERVAL).Append("\n");
            sb.Append("  StringAngle: ").Append(StringAngle).Append("\n");
            sb.Append("  StringBorders: ").Append(StringBorders).Append("\n");
            sb.Append("  SymbolsCount: ").Append(SymbolsCount).Append("\n");
            sb.Append("  SymbolsEstimations: ").Append(SymbolsEstimations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StringItem" />
    /// </summary>
    public class StringItemJsonConverter : JsonConverter<StringItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="StringItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override StringItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> aLIGNMENTSYMBOLSINSTRING = default;
            Option<int?> cHECKSUMS = default;
            Option<ErrorCoordinates?> errorPOSITION = default;
            Option<int?> fieldCount = default;
            Option<List<FieldItem>?> fields = default;
            Option<int?> sTRINGSDISTANCE = default;
            Option<int?> sTRINGSINTERVAL = default;
            Option<int?> sTRINGFILLING = default;
            Option<int?> sTRINGPOSITION = default;
            Option<int?> sYMBOLSPARAM = default;
            Option<decimal?> sizeErrorALIGNMENT = default;
            Option<decimal?> sizeErrorDISTANCE = default;
            Option<decimal?> sizeErrorINTERVAL = default;
            Option<decimal?> stringAngle = default;
            Option<RectangleCoordinates?> stringBorders = default;
            Option<int?> symbolsCount = default;
            Option<List<SymbolEstimationItem>?> symbolsEstimations = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ALIGNMENT_SYMBOLS_IN_STRING":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                aLIGNMENTSYMBOLSINSTRING = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "CHECK_SUMS":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cHECKSUMS = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ErrorPOSITION":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                errorPOSITION = new Option<ErrorCoordinates?>(JsonSerializer.Deserialize<ErrorCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "FieldCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Fields":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fields = new Option<List<FieldItem>?>(JsonSerializer.Deserialize<List<FieldItem>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "STRINGS_DISTANCE":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sTRINGSDISTANCE = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "STRINGS_INTERVAL":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sTRINGSINTERVAL = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "STRING_FILLING":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sTRINGFILLING = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "STRING_POSITION":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sTRINGPOSITION = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "SYMBOLS_PARAM":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sYMBOLSPARAM = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "SizeError_ALIGNMENT":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sizeErrorALIGNMENT = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "SizeError_DISTANCE":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sizeErrorDISTANCE = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "SizeError_INTERVAL":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sizeErrorINTERVAL = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "StringAngle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stringAngle = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "StringBorders":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stringBorders = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "SymbolsCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                symbolsCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "SymbolsEstimations":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                symbolsEstimations = new Option<List<SymbolEstimationItem>?>(JsonSerializer.Deserialize<List<SymbolEstimationItem>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!aLIGNMENTSYMBOLSINSTRING.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(aLIGNMENTSYMBOLSINSTRING));

            if (!cHECKSUMS.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(cHECKSUMS));

            if (!errorPOSITION.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(errorPOSITION));

            if (!fieldCount.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(fieldCount));

            if (!fields.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(fields));

            if (!sTRINGSDISTANCE.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(sTRINGSDISTANCE));

            if (!sTRINGSINTERVAL.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(sTRINGSINTERVAL));

            if (!sTRINGFILLING.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(sTRINGFILLING));

            if (!sTRINGPOSITION.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(sTRINGPOSITION));

            if (!sYMBOLSPARAM.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(sYMBOLSPARAM));

            if (!sizeErrorALIGNMENT.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(sizeErrorALIGNMENT));

            if (!sizeErrorDISTANCE.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(sizeErrorDISTANCE));

            if (!sizeErrorINTERVAL.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(sizeErrorINTERVAL));

            if (!stringAngle.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(stringAngle));

            if (!stringBorders.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(stringBorders));

            if (!symbolsCount.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(symbolsCount));

            if (!symbolsEstimations.IsSet)
                throw new ArgumentException("Property is required for class StringItem.", nameof(symbolsEstimations));

            if (aLIGNMENTSYMBOLSINSTRING.IsSet && aLIGNMENTSYMBOLSINSTRING.Value == null)
                throw new ArgumentNullException(nameof(aLIGNMENTSYMBOLSINSTRING), "Property is not nullable for class StringItem.");

            if (cHECKSUMS.IsSet && cHECKSUMS.Value == null)
                throw new ArgumentNullException(nameof(cHECKSUMS), "Property is not nullable for class StringItem.");

            if (errorPOSITION.IsSet && errorPOSITION.Value == null)
                throw new ArgumentNullException(nameof(errorPOSITION), "Property is not nullable for class StringItem.");

            if (fieldCount.IsSet && fieldCount.Value == null)
                throw new ArgumentNullException(nameof(fieldCount), "Property is not nullable for class StringItem.");

            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields), "Property is not nullable for class StringItem.");

            if (sTRINGSDISTANCE.IsSet && sTRINGSDISTANCE.Value == null)
                throw new ArgumentNullException(nameof(sTRINGSDISTANCE), "Property is not nullable for class StringItem.");

            if (sTRINGSINTERVAL.IsSet && sTRINGSINTERVAL.Value == null)
                throw new ArgumentNullException(nameof(sTRINGSINTERVAL), "Property is not nullable for class StringItem.");

            if (sTRINGFILLING.IsSet && sTRINGFILLING.Value == null)
                throw new ArgumentNullException(nameof(sTRINGFILLING), "Property is not nullable for class StringItem.");

            if (sTRINGPOSITION.IsSet && sTRINGPOSITION.Value == null)
                throw new ArgumentNullException(nameof(sTRINGPOSITION), "Property is not nullable for class StringItem.");

            if (sYMBOLSPARAM.IsSet && sYMBOLSPARAM.Value == null)
                throw new ArgumentNullException(nameof(sYMBOLSPARAM), "Property is not nullable for class StringItem.");

            if (sizeErrorALIGNMENT.IsSet && sizeErrorALIGNMENT.Value == null)
                throw new ArgumentNullException(nameof(sizeErrorALIGNMENT), "Property is not nullable for class StringItem.");

            if (sizeErrorDISTANCE.IsSet && sizeErrorDISTANCE.Value == null)
                throw new ArgumentNullException(nameof(sizeErrorDISTANCE), "Property is not nullable for class StringItem.");

            if (sizeErrorINTERVAL.IsSet && sizeErrorINTERVAL.Value == null)
                throw new ArgumentNullException(nameof(sizeErrorINTERVAL), "Property is not nullable for class StringItem.");

            if (stringAngle.IsSet && stringAngle.Value == null)
                throw new ArgumentNullException(nameof(stringAngle), "Property is not nullable for class StringItem.");

            if (stringBorders.IsSet && stringBorders.Value == null)
                throw new ArgumentNullException(nameof(stringBorders), "Property is not nullable for class StringItem.");

            if (symbolsCount.IsSet && symbolsCount.Value == null)
                throw new ArgumentNullException(nameof(symbolsCount), "Property is not nullable for class StringItem.");

            if (symbolsEstimations.IsSet && symbolsEstimations.Value == null)
                throw new ArgumentNullException(nameof(symbolsEstimations), "Property is not nullable for class StringItem.");

            return new StringItem(aLIGNMENTSYMBOLSINSTRING.Value!.Value!, cHECKSUMS.Value!.Value!, errorPOSITION.Value!, fieldCount.Value!.Value!, fields.Value!, sTRINGSDISTANCE.Value!.Value!, sTRINGSINTERVAL.Value!.Value!, sTRINGFILLING.Value!.Value!, sTRINGPOSITION.Value!.Value!, sYMBOLSPARAM.Value!.Value!, sizeErrorALIGNMENT.Value!.Value!, sizeErrorDISTANCE.Value!.Value!, sizeErrorINTERVAL.Value!.Value!, stringAngle.Value!.Value!, stringBorders.Value!, symbolsCount.Value!.Value!, symbolsEstimations.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="StringItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="stringItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, StringItem stringItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, stringItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="StringItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="stringItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, StringItem stringItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (stringItem.ErrorPOSITION == null)
                throw new ArgumentNullException(nameof(stringItem.ErrorPOSITION), "Property is required for class StringItem.");

            if (stringItem.Fields == null)
                throw new ArgumentNullException(nameof(stringItem.Fields), "Property is required for class StringItem.");

            if (stringItem.StringBorders == null)
                throw new ArgumentNullException(nameof(stringItem.StringBorders), "Property is required for class StringItem.");

            if (stringItem.SymbolsEstimations == null)
                throw new ArgumentNullException(nameof(stringItem.SymbolsEstimations), "Property is required for class StringItem.");

            writer.WriteNumber("ALIGNMENT_SYMBOLS_IN_STRING", stringItem.ALIGNMENT_SYMBOLS_IN_STRING);

            writer.WriteNumber("CHECK_SUMS", stringItem.CHECK_SUMS);

            writer.WritePropertyName("ErrorPOSITION");
            JsonSerializer.Serialize(writer, stringItem.ErrorPOSITION, jsonSerializerOptions);
            writer.WriteNumber("FieldCount", stringItem.FieldCount);

            writer.WritePropertyName("Fields");
            JsonSerializer.Serialize(writer, stringItem.Fields, jsonSerializerOptions);
            writer.WriteNumber("STRINGS_DISTANCE", stringItem.STRINGS_DISTANCE);

            writer.WriteNumber("STRINGS_INTERVAL", stringItem.STRINGS_INTERVAL);

            writer.WriteNumber("STRING_FILLING", stringItem.STRING_FILLING);

            writer.WriteNumber("STRING_POSITION", stringItem.STRING_POSITION);

            writer.WriteNumber("SYMBOLS_PARAM", stringItem.SYMBOLS_PARAM);

            writer.WriteNumber("SizeError_ALIGNMENT", stringItem.SizeErrorALIGNMENT);

            writer.WriteNumber("SizeError_DISTANCE", stringItem.SizeErrorDISTANCE);

            writer.WriteNumber("SizeError_INTERVAL", stringItem.SizeErrorINTERVAL);

            writer.WriteNumber("StringAngle", stringItem.StringAngle);

            writer.WritePropertyName("StringBorders");
            JsonSerializer.Serialize(writer, stringItem.StringBorders, jsonSerializerOptions);
            writer.WriteNumber("SymbolsCount", stringItem.SymbolsCount);

            writer.WritePropertyName("SymbolsEstimations");
            JsonSerializer.Serialize(writer, stringItem.SymbolsEstimations, jsonSerializerOptions);
        }
    }
}
