/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// StringItem
    /// </summary>
    [DataContract(Name = "StringItem")]
    public partial class StringItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StringItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StringItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StringItem" /> class.
        /// </summary>
        /// <param name="aLIGNMENTSYMBOLSINSTRING">aLIGNMENTSYMBOLSINSTRING (required).</param>
        /// <param name="cHECKSUMS">cHECKSUMS (required).</param>
        /// <param name="errorPOSITION">errorPOSITION (required).</param>
        /// <param name="fieldCount">fieldCount (required).</param>
        /// <param name="fields">fields (required).</param>
        /// <param name="sTRINGSDISTANCE">sTRINGSDISTANCE (required).</param>
        /// <param name="sTRINGSINTERVAL">sTRINGSINTERVAL (required).</param>
        /// <param name="sTRINGFILLING">sTRINGFILLING (required).</param>
        /// <param name="sTRINGPOSITION">sTRINGPOSITION (required).</param>
        /// <param name="sYMBOLSPARAM">sYMBOLSPARAM (required).</param>
        /// <param name="sizeErrorALIGNMENT">sizeErrorALIGNMENT (required).</param>
        /// <param name="sizeErrorDISTANCE">sizeErrorDISTANCE (required).</param>
        /// <param name="sizeErrorINTERVAL">sizeErrorINTERVAL (required).</param>
        /// <param name="stringAngle">stringAngle (required).</param>
        /// <param name="stringBorders">stringBorders (required).</param>
        /// <param name="symbolsCount">symbolsCount (required).</param>
        /// <param name="symbolsEstimations">symbolsEstimations (required).</param>
        public StringItem(int aLIGNMENTSYMBOLSINSTRING = default(int), int cHECKSUMS = default(int), ErrorCoordinates errorPOSITION = default(ErrorCoordinates), int fieldCount = default(int), List<FieldItem> fields = default(List<FieldItem>), int sTRINGSDISTANCE = default(int), int sTRINGSINTERVAL = default(int), int sTRINGFILLING = default(int), int sTRINGPOSITION = default(int), int sYMBOLSPARAM = default(int), decimal sizeErrorALIGNMENT = default(decimal), decimal sizeErrorDISTANCE = default(decimal), decimal sizeErrorINTERVAL = default(decimal), decimal stringAngle = default(decimal), RectangleCoordinates stringBorders = default(RectangleCoordinates), int symbolsCount = default(int), List<SymbolEstimationItem> symbolsEstimations = default(List<SymbolEstimationItem>))
        {
            this.ALIGNMENT_SYMBOLS_IN_STRING = aLIGNMENTSYMBOLSINSTRING;
            this.CHECK_SUMS = cHECKSUMS;
            // to ensure "errorPOSITION" is required (not null)
            if (errorPOSITION == null)
            {
                throw new ArgumentNullException("errorPOSITION is a required property for StringItem and cannot be null");
            }
            this.ErrorPOSITION = errorPOSITION;
            this.FieldCount = fieldCount;
            // to ensure "fields" is required (not null)
            if (fields == null)
            {
                throw new ArgumentNullException("fields is a required property for StringItem and cannot be null");
            }
            this.Fields = fields;
            this.STRINGS_DISTANCE = sTRINGSDISTANCE;
            this.STRINGS_INTERVAL = sTRINGSINTERVAL;
            this.STRING_FILLING = sTRINGFILLING;
            this.STRING_POSITION = sTRINGPOSITION;
            this.SYMBOLS_PARAM = sYMBOLSPARAM;
            this.SizeErrorALIGNMENT = sizeErrorALIGNMENT;
            this.SizeErrorDISTANCE = sizeErrorDISTANCE;
            this.SizeErrorINTERVAL = sizeErrorINTERVAL;
            this.StringAngle = stringAngle;
            // to ensure "stringBorders" is required (not null)
            if (stringBorders == null)
            {
                throw new ArgumentNullException("stringBorders is a required property for StringItem and cannot be null");
            }
            this.StringBorders = stringBorders;
            this.SymbolsCount = symbolsCount;
            // to ensure "symbolsEstimations" is required (not null)
            if (symbolsEstimations == null)
            {
                throw new ArgumentNullException("symbolsEstimations is a required property for StringItem and cannot be null");
            }
            this.SymbolsEstimations = symbolsEstimations;
        }

        /// <summary>
        /// Gets or Sets ALIGNMENT_SYMBOLS_IN_STRING
        /// </summary>
        [DataMember(Name = "ALIGNMENT_SYMBOLS_IN_STRING", IsRequired = true, EmitDefaultValue = true)]
        public int ALIGNMENT_SYMBOLS_IN_STRING { get; set; }

        /// <summary>
        /// Gets or Sets CHECK_SUMS
        /// </summary>
        [DataMember(Name = "CHECK_SUMS", IsRequired = true, EmitDefaultValue = true)]
        public int CHECK_SUMS { get; set; }

        /// <summary>
        /// Gets or Sets ErrorPOSITION
        /// </summary>
        [DataMember(Name = "ErrorPOSITION", IsRequired = true, EmitDefaultValue = true)]
        public ErrorCoordinates ErrorPOSITION { get; set; }

        /// <summary>
        /// Gets or Sets FieldCount
        /// </summary>
        [DataMember(Name = "FieldCount", IsRequired = true, EmitDefaultValue = true)]
        public int FieldCount { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "Fields", IsRequired = true, EmitDefaultValue = true)]
        public List<FieldItem> Fields { get; set; }

        /// <summary>
        /// Gets or Sets STRINGS_DISTANCE
        /// </summary>
        [DataMember(Name = "STRINGS_DISTANCE", IsRequired = true, EmitDefaultValue = true)]
        public int STRINGS_DISTANCE { get; set; }

        /// <summary>
        /// Gets or Sets STRINGS_INTERVAL
        /// </summary>
        [DataMember(Name = "STRINGS_INTERVAL", IsRequired = true, EmitDefaultValue = true)]
        public int STRINGS_INTERVAL { get; set; }

        /// <summary>
        /// Gets or Sets STRING_FILLING
        /// </summary>
        [DataMember(Name = "STRING_FILLING", IsRequired = true, EmitDefaultValue = true)]
        public int STRING_FILLING { get; set; }

        /// <summary>
        /// Gets or Sets STRING_POSITION
        /// </summary>
        [DataMember(Name = "STRING_POSITION", IsRequired = true, EmitDefaultValue = true)]
        public int STRING_POSITION { get; set; }

        /// <summary>
        /// Gets or Sets SYMBOLS_PARAM
        /// </summary>
        [DataMember(Name = "SYMBOLS_PARAM", IsRequired = true, EmitDefaultValue = true)]
        public int SYMBOLS_PARAM { get; set; }

        /// <summary>
        /// Gets or Sets SizeErrorALIGNMENT
        /// </summary>
        [DataMember(Name = "SizeError_ALIGNMENT", IsRequired = true, EmitDefaultValue = true)]
        public decimal SizeErrorALIGNMENT { get; set; }

        /// <summary>
        /// Gets or Sets SizeErrorDISTANCE
        /// </summary>
        [DataMember(Name = "SizeError_DISTANCE", IsRequired = true, EmitDefaultValue = true)]
        public decimal SizeErrorDISTANCE { get; set; }

        /// <summary>
        /// Gets or Sets SizeErrorINTERVAL
        /// </summary>
        [DataMember(Name = "SizeError_INTERVAL", IsRequired = true, EmitDefaultValue = true)]
        public decimal SizeErrorINTERVAL { get; set; }

        /// <summary>
        /// Gets or Sets StringAngle
        /// </summary>
        [DataMember(Name = "StringAngle", IsRequired = true, EmitDefaultValue = true)]
        public decimal StringAngle { get; set; }

        /// <summary>
        /// Gets or Sets StringBorders
        /// </summary>
        [DataMember(Name = "StringBorders", IsRequired = true, EmitDefaultValue = true)]
        public RectangleCoordinates StringBorders { get; set; }

        /// <summary>
        /// Gets or Sets SymbolsCount
        /// </summary>
        [DataMember(Name = "SymbolsCount", IsRequired = true, EmitDefaultValue = true)]
        public int SymbolsCount { get; set; }

        /// <summary>
        /// Gets or Sets SymbolsEstimations
        /// </summary>
        [DataMember(Name = "SymbolsEstimations", IsRequired = true, EmitDefaultValue = true)]
        public List<SymbolEstimationItem> SymbolsEstimations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StringItem {\n");
            sb.Append("  ALIGNMENT_SYMBOLS_IN_STRING: ").Append(ALIGNMENT_SYMBOLS_IN_STRING).Append("\n");
            sb.Append("  CHECK_SUMS: ").Append(CHECK_SUMS).Append("\n");
            sb.Append("  ErrorPOSITION: ").Append(ErrorPOSITION).Append("\n");
            sb.Append("  FieldCount: ").Append(FieldCount).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  STRINGS_DISTANCE: ").Append(STRINGS_DISTANCE).Append("\n");
            sb.Append("  STRINGS_INTERVAL: ").Append(STRINGS_INTERVAL).Append("\n");
            sb.Append("  STRING_FILLING: ").Append(STRING_FILLING).Append("\n");
            sb.Append("  STRING_POSITION: ").Append(STRING_POSITION).Append("\n");
            sb.Append("  SYMBOLS_PARAM: ").Append(SYMBOLS_PARAM).Append("\n");
            sb.Append("  SizeErrorALIGNMENT: ").Append(SizeErrorALIGNMENT).Append("\n");
            sb.Append("  SizeErrorDISTANCE: ").Append(SizeErrorDISTANCE).Append("\n");
            sb.Append("  SizeErrorINTERVAL: ").Append(SizeErrorINTERVAL).Append("\n");
            sb.Append("  StringAngle: ").Append(StringAngle).Append("\n");
            sb.Append("  StringBorders: ").Append(StringBorders).Append("\n");
            sb.Append("  SymbolsCount: ").Append(SymbolsCount).Append("\n");
            sb.Append("  SymbolsEstimations: ").Append(SymbolsEstimations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
