// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// BcROIDETECT
    /// </summary>
    public partial class BcROIDETECT : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BcROIDETECT" /> class.
        /// </summary>
        /// <param name="bottom">bottom</param>
        /// <param name="left">left</param>
        /// <param name="right">right</param>
        /// <param name="top">top</param>
        [JsonConstructor]
        public BcROIDETECT(int bottom, int left, int right, int top)
        {
            Bottom = bottom;
            Left = left;
            Right = right;
            Top = top;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Bottom
        /// </summary>
        [JsonPropertyName("bottom")]
        public int Bottom { get; set; }

        /// <summary>
        /// Gets or Sets Left
        /// </summary>
        [JsonPropertyName("left")]
        public int Left { get; set; }

        /// <summary>
        /// Gets or Sets Right
        /// </summary>
        [JsonPropertyName("right")]
        public int Right { get; set; }

        /// <summary>
        /// Gets or Sets Top
        /// </summary>
        [JsonPropertyName("top")]
        public int Top { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BcROIDETECT {\n");
            sb.Append("  Bottom: ").Append(Bottom).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BcROIDETECT" />
    /// </summary>
    public class BcROIDETECTJsonConverter : JsonConverter<BcROIDETECT>
    {
        /// <summary>
        /// Deserializes json to <see cref="BcROIDETECT" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BcROIDETECT Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> bottom = default;
            Option<int?> left = default;
            Option<int?> right = default;
            Option<int?> top = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bottom":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bottom = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "left":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                left = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "right":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                right = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "top":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                top = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!bottom.IsSet)
                throw new ArgumentException("Property is required for class BcROIDETECT.", nameof(bottom));

            if (!left.IsSet)
                throw new ArgumentException("Property is required for class BcROIDETECT.", nameof(left));

            if (!right.IsSet)
                throw new ArgumentException("Property is required for class BcROIDETECT.", nameof(right));

            if (!top.IsSet)
                throw new ArgumentException("Property is required for class BcROIDETECT.", nameof(top));

            if (bottom.IsSet && bottom.Value == null)
                throw new ArgumentNullException(nameof(bottom), "Property is not nullable for class BcROIDETECT.");

            if (left.IsSet && left.Value == null)
                throw new ArgumentNullException(nameof(left), "Property is not nullable for class BcROIDETECT.");

            if (right.IsSet && right.Value == null)
                throw new ArgumentNullException(nameof(right), "Property is not nullable for class BcROIDETECT.");

            if (top.IsSet && top.Value == null)
                throw new ArgumentNullException(nameof(top), "Property is not nullable for class BcROIDETECT.");

            return new BcROIDETECT(bottom.Value!.Value!, left.Value!.Value!, right.Value!.Value!, top.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="BcROIDETECT" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bcROIDETECT"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BcROIDETECT bcROIDETECT, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bcROIDETECT, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BcROIDETECT" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bcROIDETECT"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BcROIDETECT bcROIDETECT, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("bottom", bcROIDETECT.Bottom);

            writer.WriteNumber("left", bcROIDETECT.Left);

            writer.WriteNumber("right", bcROIDETECT.Right);

            writer.WriteNumber("top", bcROIDETECT.Top);
        }
    }
}
