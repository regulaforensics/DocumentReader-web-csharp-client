/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// BcROIDETECT
    /// </summary>
    [DataContract]
    public partial class BcROIDETECT :  IEquatable<BcROIDETECT>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BcROIDETECT" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BcROIDETECT() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BcROIDETECT" /> class.
        /// </summary>
        /// <param name="bottom">bottom (required).</param>
        /// <param name="left">left (required).</param>
        /// <param name="right">right (required).</param>
        /// <param name="top">top (required).</param>
        public BcROIDETECT(int bottom = default(int), int left = default(int), int right = default(int), int top = default(int))
        {
            // to ensure "bottom" is required (not null)
            if (bottom == null)
            {
                throw new InvalidDataException("bottom is a required property for BcROIDETECT and cannot be null");
            }
            else
            {
                this.Bottom = bottom;
            }
            
            // to ensure "left" is required (not null)
            if (left == null)
            {
                throw new InvalidDataException("left is a required property for BcROIDETECT and cannot be null");
            }
            else
            {
                this.Left = left;
            }
            
            // to ensure "right" is required (not null)
            if (right == null)
            {
                throw new InvalidDataException("right is a required property for BcROIDETECT and cannot be null");
            }
            else
            {
                this.Right = right;
            }
            
            // to ensure "top" is required (not null)
            if (top == null)
            {
                throw new InvalidDataException("top is a required property for BcROIDETECT and cannot be null");
            }
            else
            {
                this.Top = top;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Bottom
        /// </summary>
        [DataMember(Name="bottom", EmitDefaultValue=true)]
        public int Bottom { get; set; }

        /// <summary>
        /// Gets or Sets Left
        /// </summary>
        [DataMember(Name="left", EmitDefaultValue=true)]
        public int Left { get; set; }

        /// <summary>
        /// Gets or Sets Right
        /// </summary>
        [DataMember(Name="right", EmitDefaultValue=true)]
        public int Right { get; set; }

        /// <summary>
        /// Gets or Sets Top
        /// </summary>
        [DataMember(Name="top", EmitDefaultValue=true)]
        public int Top { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BcROIDETECT {\n");
            sb.Append("  Bottom: ").Append(Bottom).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BcROIDETECT);
        }

        /// <summary>
        /// Returns true if BcROIDETECT instances are equal
        /// </summary>
        /// <param name="input">Instance of BcROIDETECT to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BcROIDETECT input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bottom == input.Bottom ||
                    (this.Bottom != null &&
                    this.Bottom.Equals(input.Bottom))
                ) && 
                (
                    this.Left == input.Left ||
                    (this.Left != null &&
                    this.Left.Equals(input.Left))
                ) && 
                (
                    this.Right == input.Right ||
                    (this.Right != null &&
                    this.Right.Equals(input.Right))
                ) && 
                (
                    this.Top == input.Top ||
                    (this.Top != null &&
                    this.Top.Equals(input.Top))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bottom != null)
                    hashCode = hashCode * 59 + this.Bottom.GetHashCode();
                if (this.Left != null)
                    hashCode = hashCode * 59 + this.Left.GetHashCode();
                if (this.Right != null)
                    hashCode = hashCode * 59 + this.Right.GetHashCode();
                if (this.Top != null)
                    hashCode = hashCode * 59 + this.Top.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
