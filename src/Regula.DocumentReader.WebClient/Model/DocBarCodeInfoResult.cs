/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Raw data from BarCodes
    /// </summary>
    [DataContract]
    public partial class DocBarCodeInfoResult : ResultItem,  IEquatable<DocBarCodeInfoResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocBarCodeInfoResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocBarCodeInfoResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocBarCodeInfoResult" /> class.
        /// </summary>
        /// <param name="docBarCodeInfo">docBarCodeInfo (required).</param>
        public DocBarCodeInfoResult(DocBarCodeInfoFieldsList docBarCodeInfo = default(DocBarCodeInfoFieldsList), int bufLength = default(int), int light = default(int), int listIdx = default(int), int pageIdx = default(int), int resultType = 0) : base(bufLength, light, listIdx, pageIdx, resultType)
        {
            // to ensure "docBarCodeInfo" is required (not null)
            if (docBarCodeInfo == null)
            {
                throw new InvalidDataException("docBarCodeInfo is a required property for DocBarCodeInfoResult and cannot be null");
            }
            else
            {
                this.DocBarCodeInfo = docBarCodeInfo;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets DocBarCodeInfo
        /// </summary>
        [DataMember(Name="DocBarCodeInfo", EmitDefaultValue=true)]
        public DocBarCodeInfoFieldsList DocBarCodeInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocBarCodeInfoResult {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DocBarCodeInfo: ").Append(DocBarCodeInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocBarCodeInfoResult);
        }

        /// <summary>
        /// Returns true if DocBarCodeInfoResult instances are equal
        /// </summary>
        /// <param name="input">Instance of DocBarCodeInfoResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocBarCodeInfoResult input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.DocBarCodeInfo == input.DocBarCodeInfo ||
                    (this.DocBarCodeInfo != null &&
                    this.DocBarCodeInfo.Equals(input.DocBarCodeInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DocBarCodeInfo != null)
                    hashCode = hashCode * 59 + this.DocBarCodeInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
