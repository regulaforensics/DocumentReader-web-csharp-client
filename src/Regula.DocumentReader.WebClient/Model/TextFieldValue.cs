/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TextFieldValue
    /// </summary>
    [DataContract(Name = "TextFieldValue")]
    public partial class TextFieldValue : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public Source Source { get; set; }

        /// <summary>
        /// Gets or Sets OriginalValidity
        /// </summary>
        [DataMember(Name = "originalValidity", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult OriginalValidity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextFieldValue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextFieldValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextFieldValue" /> class.
        /// </summary>
        /// <param name="source">source (required).</param>
        /// <param name="value">Parsed/processed value. Date format converted for output, delimiters removed (required).</param>
        /// <param name="originalValue">Original value as seen in the document.</param>
        /// <param name="originalValidity">originalValidity (required).</param>
        /// <param name="originalSymbols">originalSymbols.</param>
        /// <param name="pageIndex">Page index of the image from input list (required).</param>
        /// <param name="probability">Min recognition probability. Combined minimum probability from single characters probabilities (required).</param>
        /// <param name="fieldRect">fieldRect.</param>
        /// <param name="rfidOrigin">rfidOrigin.</param>
        /// <param name="containerType">Same as Result type, but used for safe parsing of not-described values. See Result type. (default to 0).</param>
        public TextFieldValue(Source source = default(Source), string value = default(string), string originalValue = default(string), CheckResult originalValidity = default(CheckResult), List<OriginalSymbol> originalSymbols = default(List<OriginalSymbol>), int pageIndex = default(int), int probability = default(int), RectangleCoordinates fieldRect = default(RectangleCoordinates), RfidOrigin rfidOrigin = default(RfidOrigin), int containerType = 0)
        {
            this.Source = source;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for TextFieldValue and cannot be null");
            }
            this.Value = value;
            this.OriginalValidity = originalValidity;
            this.PageIndex = pageIndex;
            this.Probability = probability;
            this.OriginalValue = originalValue;
            this.OriginalSymbols = originalSymbols;
            this.FieldRect = fieldRect;
            this.RfidOrigin = rfidOrigin;
            this.ContainerType = containerType;
        }

        /// <summary>
        /// Parsed/processed value. Date format converted for output, delimiters removed
        /// </summary>
        /// <value>Parsed/processed value. Date format converted for output, delimiters removed</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Original value as seen in the document
        /// </summary>
        /// <value>Original value as seen in the document</value>
        [DataMember(Name = "originalValue", EmitDefaultValue = false)]
        public string OriginalValue { get; set; }

        /// <summary>
        /// Gets or Sets OriginalSymbols
        /// </summary>
        [DataMember(Name = "originalSymbols", EmitDefaultValue = false)]
        public List<OriginalSymbol> OriginalSymbols { get; set; }

        /// <summary>
        /// Page index of the image from input list
        /// </summary>
        /// <value>Page index of the image from input list</value>
        [DataMember(Name = "pageIndex", IsRequired = true, EmitDefaultValue = true)]
        public int PageIndex { get; set; }

        /// <summary>
        /// Min recognition probability. Combined minimum probability from single characters probabilities
        /// </summary>
        /// <value>Min recognition probability. Combined minimum probability from single characters probabilities</value>
        [DataMember(Name = "probability", IsRequired = true, EmitDefaultValue = true)]
        public int Probability { get; set; }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [DataMember(Name = "fieldRect", EmitDefaultValue = false)]
        public RectangleCoordinates FieldRect { get; set; }

        /// <summary>
        /// Gets or Sets RfidOrigin
        /// </summary>
        [DataMember(Name = "rfidOrigin", EmitDefaultValue = false)]
        public RfidOrigin RfidOrigin { get; set; }

        /// <summary>
        /// Same as Result type, but used for safe parsing of not-described values. See Result type.
        /// </summary>
        /// <value>Same as Result type, but used for safe parsing of not-described values. See Result type.</value>
        [DataMember(Name = "containerType", EmitDefaultValue = false)]
        public int ContainerType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextFieldValue {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  OriginalValidity: ").Append(OriginalValidity).Append("\n");
            sb.Append("  OriginalSymbols: ").Append(OriginalSymbols).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  RfidOrigin: ").Append(RfidOrigin).Append("\n");
            sb.Append("  ContainerType: ").Append(ContainerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Probability (int) maximum
            if (this.Probability > (int)100)
            {
                yield return new ValidationResult("Invalid value for Probability, must be a value less than or equal to 100.", new [] { "Probability" });
            }

            // Probability (int) minimum
            if (this.Probability < (int)0)
            {
                yield return new ValidationResult("Invalid value for Probability, must be a value greater than or equal to 0.", new [] { "Probability" });
            }

            yield break;
        }
    }

}
