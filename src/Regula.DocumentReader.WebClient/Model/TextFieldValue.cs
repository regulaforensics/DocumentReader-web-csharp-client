/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.9.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TextFieldValue
    /// </summary>
    [DataContract]
    public partial class TextFieldValue :  IEquatable<TextFieldValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextFieldValue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextFieldValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextFieldValue" /> class.
        /// </summary>
        /// <param name="source">source (required).</param>
        /// <param name="value">Parsed/processed value. Date format converted for output, delimiters removed (required).</param>
        /// <param name="originalValue">Original value as seen in the document.</param>
        /// <param name="originalSymbols">originalSymbols.</param>
        /// <param name="pageIndex">Page index of the image from input list (required).</param>
        /// <param name="probability">Min recognition probability. Combined minimum probability from single characters probabilities.</param>
        /// <param name="fieldRect">fieldRect.</param>
        /// <param name="rfidOrigin">rfidOrigin.</param>
        public TextFieldValue(string source = default(string), string value = default(string), string originalValue = default(string), List<OriginalSymbol> originalSymbols = default(List<OriginalSymbol>), int pageIndex = default(int), int probability = default(int), RectangleCoordinates fieldRect = default(RectangleCoordinates), RfidOrigin rfidOrigin = default(RfidOrigin))
        {
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new InvalidDataException("source is a required property for TextFieldValue and cannot be null");
            }
            else
            {
                this.Source = source;
            }
            
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for TextFieldValue and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            
            // to ensure "pageIndex" is required (not null)
            if (pageIndex == null)
            {
                throw new InvalidDataException("pageIndex is a required property for TextFieldValue and cannot be null");
            }
            else
            {
                this.PageIndex = pageIndex;
            }
            
            this.OriginalValue = originalValue;
            this.OriginalSymbols = originalSymbols;
            this.Probability = probability;
            this.FieldRect = fieldRect;
            this.RfidOrigin = rfidOrigin;
        }
        
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=true)]
        public string Source { get; set; }

        /// <summary>
        /// Parsed/processed value. Date format converted for output, delimiters removed
        /// </summary>
        /// <value>Parsed/processed value. Date format converted for output, delimiters removed</value>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public string Value { get; set; }

        /// <summary>
        /// Original value as seen in the document
        /// </summary>
        /// <value>Original value as seen in the document</value>
        [DataMember(Name="originalValue", EmitDefaultValue=false)]
        public string OriginalValue { get; set; }

        /// <summary>
        /// Gets or Sets OriginalSymbols
        /// </summary>
        [DataMember(Name="originalSymbols", EmitDefaultValue=false)]
        public List<OriginalSymbol> OriginalSymbols { get; set; }

        /// <summary>
        /// Page index of the image from input list
        /// </summary>
        /// <value>Page index of the image from input list</value>
        [DataMember(Name="pageIndex", EmitDefaultValue=true)]
        public int PageIndex { get; set; }

        /// <summary>
        /// Min recognition probability. Combined minimum probability from single characters probabilities
        /// </summary>
        /// <value>Min recognition probability. Combined minimum probability from single characters probabilities</value>
        [DataMember(Name="probability", EmitDefaultValue=false)]
        public int Probability { get; set; }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [DataMember(Name="fieldRect", EmitDefaultValue=false)]
        public RectangleCoordinates FieldRect { get; set; }

        /// <summary>
        /// Gets or Sets RfidOrigin
        /// </summary>
        [DataMember(Name="rfidOrigin", EmitDefaultValue=false)]
        public RfidOrigin RfidOrigin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextFieldValue {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  OriginalSymbols: ").Append(OriginalSymbols).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  RfidOrigin: ").Append(RfidOrigin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextFieldValue);
        }

        /// <summary>
        /// Returns true if TextFieldValue instances are equal
        /// </summary>
        /// <param name="input">Instance of TextFieldValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextFieldValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.OriginalValue == input.OriginalValue ||
                    (this.OriginalValue != null &&
                    this.OriginalValue.Equals(input.OriginalValue))
                ) && 
                (
                    this.OriginalSymbols == input.OriginalSymbols ||
                    this.OriginalSymbols != null &&
                    input.OriginalSymbols != null &&
                    this.OriginalSymbols.SequenceEqual(input.OriginalSymbols)
                ) && 
                (
                    this.PageIndex == input.PageIndex ||
                    (this.PageIndex != null &&
                    this.PageIndex.Equals(input.PageIndex))
                ) && 
                (
                    this.Probability == input.Probability ||
                    (this.Probability != null &&
                    this.Probability.Equals(input.Probability))
                ) && 
                (
                    this.FieldRect == input.FieldRect ||
                    (this.FieldRect != null &&
                    this.FieldRect.Equals(input.FieldRect))
                ) && 
                (
                    this.RfidOrigin == input.RfidOrigin ||
                    (this.RfidOrigin != null &&
                    this.RfidOrigin.Equals(input.RfidOrigin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.OriginalValue != null)
                    hashCode = hashCode * 59 + this.OriginalValue.GetHashCode();
                if (this.OriginalSymbols != null)
                    hashCode = hashCode * 59 + this.OriginalSymbols.GetHashCode();
                if (this.PageIndex != null)
                    hashCode = hashCode * 59 + this.PageIndex.GetHashCode();
                if (this.Probability != null)
                    hashCode = hashCode * 59 + this.Probability.GetHashCode();
                if (this.FieldRect != null)
                    hashCode = hashCode * 59 + this.FieldRect.GetHashCode();
                if (this.RfidOrigin != null)
                    hashCode = hashCode * 59 + this.RfidOrigin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // Probability (int) maximum
            if(this.Probability > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Probability, must be a value less than or equal to 100.", new [] { "Probability" });
            }

            // Probability (int) minimum
            if(this.Probability < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Probability, must be a value greater than or equal to 0.", new [] { "Probability" });
            }

            yield break;
        }
    }

}
