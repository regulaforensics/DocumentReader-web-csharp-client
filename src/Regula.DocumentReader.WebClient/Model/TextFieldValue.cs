// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// TextFieldValue
    /// </summary>
    public partial class TextFieldValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextFieldValue" /> class.
        /// </summary>
        /// <param name="source">source</param>
        /// <param name="value">Parsed/processed value. Date format converted for output, delimiters removed</param>
        /// <param name="originalValidity">originalValidity</param>
        /// <param name="pageIndex">Page index of the image from input list</param>
        /// <param name="probability">Min recognition probability. Combined minimum probability from single characters probabilities</param>
        /// <param name="originalValue">Original value as seen in the document</param>
        /// <param name="originalSymbols">originalSymbols</param>
        /// <param name="fieldRect">fieldRect</param>
        /// <param name="rfidOrigin">rfidOrigin</param>
        /// <param name="containerType">Same as Result type, but used for safe parsing of not-described values. See Result type. (default to 0)</param>
        [JsonConstructor]
        public TextFieldValue(Source source, string value, CheckResult originalValidity, int pageIndex, int probability, Option<string?> originalValue = default, Option<List<OriginalSymbol>?> originalSymbols = default, Option<RectangleCoordinates?> fieldRect = default, Option<RfidOrigin?> rfidOrigin = default, Option<int?> containerType = default)
        {
            Source = source;
            Value = value;
            OriginalValidity = originalValidity;
            PageIndex = pageIndex;
            Probability = probability;
            OriginalValueOption = originalValue;
            OriginalSymbolsOption = originalSymbols;
            FieldRectOption = fieldRect;
            RfidOriginOption = rfidOrigin;
            ContainerTypeOption = containerType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [JsonPropertyName("source")]
        public Source Source { get; set; }

        /// <summary>
        /// Gets or Sets OriginalValidity
        /// </summary>
        [JsonPropertyName("originalValidity")]
        public CheckResult OriginalValidity { get; set; }

        /// <summary>
        /// Parsed/processed value. Date format converted for output, delimiters removed
        /// </summary>
        /// <value>Parsed/processed value. Date format converted for output, delimiters removed</value>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Page index of the image from input list
        /// </summary>
        /// <value>Page index of the image from input list</value>
        [JsonPropertyName("pageIndex")]
        public int PageIndex { get; set; }

        /// <summary>
        /// Min recognition probability. Combined minimum probability from single characters probabilities
        /// </summary>
        /// <value>Min recognition probability. Combined minimum probability from single characters probabilities</value>
        [JsonPropertyName("probability")]
        public int Probability { get; set; }

        /// <summary>
        /// Used to track the state of OriginalValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OriginalValueOption { get; private set; }

        /// <summary>
        /// Original value as seen in the document
        /// </summary>
        /// <value>Original value as seen in the document</value>
        [JsonPropertyName("originalValue")]
        public string? OriginalValue { get { return this.OriginalValueOption; } set { this.OriginalValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of OriginalSymbols
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<OriginalSymbol>?> OriginalSymbolsOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginalSymbols
        /// </summary>
        [JsonPropertyName("originalSymbols")]
        public List<OriginalSymbol>? OriginalSymbols { get { return this.OriginalSymbolsOption; } set { this.OriginalSymbolsOption = new(value); } }

        /// <summary>
        /// Used to track the state of FieldRect
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RectangleCoordinates?> FieldRectOption { get; private set; }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [JsonPropertyName("fieldRect")]
        public RectangleCoordinates? FieldRect { get { return this.FieldRectOption; } set { this.FieldRectOption = new(value); } }

        /// <summary>
        /// Used to track the state of RfidOrigin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RfidOrigin?> RfidOriginOption { get; private set; }

        /// <summary>
        /// Gets or Sets RfidOrigin
        /// </summary>
        [JsonPropertyName("rfidOrigin")]
        public RfidOrigin? RfidOrigin { get { return this.RfidOriginOption; } set { this.RfidOriginOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContainerType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ContainerTypeOption { get; private set; }

        /// <summary>
        /// Same as Result type, but used for safe parsing of not-described values. See Result type.
        /// </summary>
        /// <value>Same as Result type, but used for safe parsing of not-described values. See Result type.</value>
        [JsonPropertyName("containerType")]
        public int? ContainerType { get { return this.ContainerTypeOption; } set { this.ContainerTypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextFieldValue {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  OriginalValidity: ").Append(OriginalValidity).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  OriginalSymbols: ").Append(OriginalSymbols).Append("\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  RfidOrigin: ").Append(RfidOrigin).Append("\n");
            sb.Append("  ContainerType: ").Append(ContainerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Probability (int) maximum
            if (this.Probability > (int)100)
            {
                yield return new ValidationResult("Invalid value for Probability, must be a value less than or equal to 100.", new [] { "Probability" });
            }

            // Probability (int) minimum
            if (this.Probability < (int)0)
            {
                yield return new ValidationResult("Invalid value for Probability, must be a value greater than or equal to 0.", new [] { "Probability" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TextFieldValue" />
    /// </summary>
    public class TextFieldValueJsonConverter : JsonConverter<TextFieldValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="TextFieldValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TextFieldValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Source?> source = default;
            Option<string?> value = default;
            Option<CheckResult?> originalValidity = default;
            Option<int?> pageIndex = default;
            Option<int?> probability = default;
            Option<string?> originalValue = default;
            Option<List<OriginalSymbol>?> originalSymbols = default;
            Option<RectangleCoordinates?> fieldRect = default;
            Option<RfidOrigin?> rfidOrigin = default;
            Option<int?> containerType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "source":
                            string? sourceRawValue = utf8JsonReader.GetString();
                            if (sourceRawValue != null)
                                source = new Option<Source?>(SourceValueConverter.FromStringOrDefault(sourceRawValue));
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "originalValidity":
                            string? originalValidityRawValue = utf8JsonReader.GetString();
                            if (originalValidityRawValue != null)
                                originalValidity = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(originalValidityRawValue));
                            break;
                        case "pageIndex":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pageIndex = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "probability":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                probability = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "originalValue":
                            originalValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "originalSymbols":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originalSymbols = new Option<List<OriginalSymbol>?>(JsonSerializer.Deserialize<List<OriginalSymbol>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "fieldRect":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldRect = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "rfidOrigin":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rfidOrigin = new Option<RfidOrigin?>(JsonSerializer.Deserialize<RfidOrigin>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "containerType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                containerType = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!source.IsSet)
                throw new ArgumentException("Property is required for class TextFieldValue.", nameof(source));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class TextFieldValue.", nameof(value));

            if (!originalValidity.IsSet)
                throw new ArgumentException("Property is required for class TextFieldValue.", nameof(originalValidity));

            if (!pageIndex.IsSet)
                throw new ArgumentException("Property is required for class TextFieldValue.", nameof(pageIndex));

            if (!probability.IsSet)
                throw new ArgumentException("Property is required for class TextFieldValue.", nameof(probability));

            if (source.IsSet && source.Value == null)
                throw new ArgumentNullException(nameof(source), "Property is not nullable for class TextFieldValue.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class TextFieldValue.");

            if (originalValidity.IsSet && originalValidity.Value == null)
                throw new ArgumentNullException(nameof(originalValidity), "Property is not nullable for class TextFieldValue.");

            if (pageIndex.IsSet && pageIndex.Value == null)
                throw new ArgumentNullException(nameof(pageIndex), "Property is not nullable for class TextFieldValue.");

            if (probability.IsSet && probability.Value == null)
                throw new ArgumentNullException(nameof(probability), "Property is not nullable for class TextFieldValue.");

            if (originalValue.IsSet && originalValue.Value == null)
                throw new ArgumentNullException(nameof(originalValue), "Property is not nullable for class TextFieldValue.");

            if (originalSymbols.IsSet && originalSymbols.Value == null)
                throw new ArgumentNullException(nameof(originalSymbols), "Property is not nullable for class TextFieldValue.");

            if (fieldRect.IsSet && fieldRect.Value == null)
                throw new ArgumentNullException(nameof(fieldRect), "Property is not nullable for class TextFieldValue.");

            if (rfidOrigin.IsSet && rfidOrigin.Value == null)
                throw new ArgumentNullException(nameof(rfidOrigin), "Property is not nullable for class TextFieldValue.");

            if (containerType.IsSet && containerType.Value == null)
                throw new ArgumentNullException(nameof(containerType), "Property is not nullable for class TextFieldValue.");

            return new TextFieldValue(source.Value!.Value!, value.Value!, originalValidity.Value!.Value!, pageIndex.Value!.Value!, probability.Value!.Value!, originalValue, originalSymbols, fieldRect, rfidOrigin, containerType);
        }

        /// <summary>
        /// Serializes a <see cref="TextFieldValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="textFieldValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TextFieldValue textFieldValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, textFieldValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TextFieldValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="textFieldValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TextFieldValue textFieldValue, JsonSerializerOptions jsonSerializerOptions)
        {
            if (textFieldValue.Value == null)
                throw new ArgumentNullException(nameof(textFieldValue.Value), "Property is required for class TextFieldValue.");

            if (textFieldValue.OriginalValueOption.IsSet && textFieldValue.OriginalValue == null)
                throw new ArgumentNullException(nameof(textFieldValue.OriginalValue), "Property is required for class TextFieldValue.");

            if (textFieldValue.OriginalSymbolsOption.IsSet && textFieldValue.OriginalSymbols == null)
                throw new ArgumentNullException(nameof(textFieldValue.OriginalSymbols), "Property is required for class TextFieldValue.");

            if (textFieldValue.FieldRectOption.IsSet && textFieldValue.FieldRect == null)
                throw new ArgumentNullException(nameof(textFieldValue.FieldRect), "Property is required for class TextFieldValue.");

            if (textFieldValue.RfidOriginOption.IsSet && textFieldValue.RfidOrigin == null)
                throw new ArgumentNullException(nameof(textFieldValue.RfidOrigin), "Property is required for class TextFieldValue.");

            var sourceRawValue = SourceValueConverter.ToJsonValue(textFieldValue.Source);
            writer.WriteString("source", sourceRawValue);

            writer.WriteString("value", textFieldValue.Value);

            var originalValidityRawValue = CheckResultValueConverter.ToJsonValue(textFieldValue.OriginalValidity);
            writer.WriteNumber("originalValidity", originalValidityRawValue);

            writer.WriteNumber("pageIndex", textFieldValue.PageIndex);

            writer.WriteNumber("probability", textFieldValue.Probability);

            if (textFieldValue.OriginalValueOption.IsSet)
                writer.WriteString("originalValue", textFieldValue.OriginalValue);

            if (textFieldValue.OriginalSymbolsOption.IsSet)
            {
                writer.WritePropertyName("originalSymbols");
                JsonSerializer.Serialize(writer, textFieldValue.OriginalSymbols, jsonSerializerOptions);
            }
            if (textFieldValue.FieldRectOption.IsSet)
            {
                writer.WritePropertyName("fieldRect");
                JsonSerializer.Serialize(writer, textFieldValue.FieldRect, jsonSerializerOptions);
            }
            if (textFieldValue.RfidOriginOption.IsSet)
            {
                writer.WritePropertyName("rfidOrigin");
                JsonSerializer.Serialize(writer, textFieldValue.RfidOrigin, jsonSerializerOptions);
            }
            if (textFieldValue.ContainerTypeOption.IsSet)
                writer.WriteNumber("containerType", textFieldValue.ContainerTypeOption.Value!.Value);
        }
    }
}
