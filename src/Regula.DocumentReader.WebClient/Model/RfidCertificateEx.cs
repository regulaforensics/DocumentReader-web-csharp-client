// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the certificate contents used for the digital signature verification of the document security object within the context of the communication session with electronic document.
    /// </summary>
    public partial class RfidCertificateEx : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidCertificateEx" /> class.
        /// </summary>
        /// <param name="varVersion">Version of Certificate ASN.1 structure</param>
        /// <param name="serialNumber">Certificate serial number. Base64 encoded.</param>
        /// <param name="signatureAlgorithm">Certificate digital signature algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).</param>
        /// <param name="issuer">issuer</param>
        /// <param name="validity">validity</param>
        /// <param name="subject">subject</param>
        /// <param name="subjectPKAlgorithm">Certificate public key algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).</param>
        /// <param name="extensions">List of the certificate extensions</param>
        /// <param name="notifications">List of remarks arisen during the analysis of the certificate data structure and its validity verification.</param>
        /// <param name="origin">origin</param>
        /// <param name="type">type</param>
        /// <param name="fileName">fileName</param>
        /// <param name="pAStatus">pAStatus</param>
        [JsonConstructor]
        public RfidCertificateEx(decimal varVersion, string serialNumber, string signatureAlgorithm, RfidDistinguishedName issuer, RfidValidity validity, RfidDistinguishedName subject, string subjectPKAlgorithm, List<RfidPkiExtension> extensions, List<ParsingNotificationCodes> notifications, RfidCertificateOrigin origin, RfidCertificateType type, TrfFtString fileName, RFIDErrorCodes pAStatus)
        {
            VarVersion = varVersion;
            SerialNumber = serialNumber;
            SignatureAlgorithm = signatureAlgorithm;
            Issuer = issuer;
            Validity = validity;
            Subject = subject;
            SubjectPKAlgorithm = subjectPKAlgorithm;
            Extensions = extensions;
            Notifications = notifications;
            Origin = origin;
            Type = type;
            FileName = fileName;
            PAStatus = pAStatus;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [JsonPropertyName("Origin")]
        public RfidCertificateOrigin Origin { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("Type")]
        public RfidCertificateType Type { get; set; }

        /// <summary>
        /// Gets or Sets PAStatus
        /// </summary>
        [JsonPropertyName("PA_Status")]
        public RFIDErrorCodes PAStatus { get; set; }

        /// <summary>
        /// Version of Certificate ASN.1 structure
        /// </summary>
        /// <value>Version of Certificate ASN.1 structure</value>
        [JsonPropertyName("Version")]
        public decimal VarVersion { get; set; }

        /// <summary>
        /// Certificate serial number. Base64 encoded.
        /// </summary>
        /// <value>Certificate serial number. Base64 encoded.</value>
        [JsonPropertyName("SerialNumber")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Certificate digital signature algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).
        /// </summary>
        /// <value>Certificate digital signature algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).</value>
        [JsonPropertyName("SignatureAlgorithm")]
        public string SignatureAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [JsonPropertyName("Issuer")]
        public RfidDistinguishedName Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Validity
        /// </summary>
        [JsonPropertyName("Validity")]
        public RfidValidity Validity { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("Subject")]
        public RfidDistinguishedName Subject { get; set; }

        /// <summary>
        /// Certificate public key algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).
        /// </summary>
        /// <value>Certificate public key algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).</value>
        [JsonPropertyName("SubjectPKAlgorithm")]
        public string SubjectPKAlgorithm { get; set; }

        /// <summary>
        /// List of the certificate extensions
        /// </summary>
        /// <value>List of the certificate extensions</value>
        [JsonPropertyName("Extensions")]
        public List<RfidPkiExtension> Extensions { get; set; }

        /// <summary>
        /// List of remarks arisen during the analysis of the certificate data structure and its validity verification.
        /// </summary>
        /// <value>List of remarks arisen during the analysis of the certificate data structure and its validity verification.</value>
        [JsonPropertyName("Notifications")]
        public List<ParsingNotificationCodes> Notifications { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [JsonPropertyName("FileName")]
        public TrfFtString FileName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidCertificateEx {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  SignatureAlgorithm: ").Append(SignatureAlgorithm).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  SubjectPKAlgorithm: ").Append(SubjectPKAlgorithm).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  PAStatus: ").Append(PAStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidCertificateEx" />
    /// </summary>
    public class RfidCertificateExJsonConverter : JsonConverter<RfidCertificateEx>
    {
        /// <summary>
        /// Deserializes json to <see cref="RfidCertificateEx" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RfidCertificateEx Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> varVersion = default;
            Option<string?> serialNumber = default;
            Option<string?> signatureAlgorithm = default;
            Option<RfidDistinguishedName?> issuer = default;
            Option<RfidValidity?> validity = default;
            Option<RfidDistinguishedName?> subject = default;
            Option<string?> subjectPKAlgorithm = default;
            Option<List<RfidPkiExtension>?> extensions = default;
            Option<List<ParsingNotificationCodes>?> notifications = default;
            Option<RfidCertificateOrigin?> origin = default;
            Option<RfidCertificateType?> type = default;
            Option<TrfFtString?> fileName = default;
            Option<RFIDErrorCodes?> pAStatus = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Version":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varVersion = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "SerialNumber":
                            serialNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "SignatureAlgorithm":
                            signatureAlgorithm = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Issuer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                issuer = new Option<RfidDistinguishedName?>(JsonSerializer.Deserialize<RfidDistinguishedName>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Validity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validity = new Option<RfidValidity?>(JsonSerializer.Deserialize<RfidValidity>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Subject":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subject = new Option<RfidDistinguishedName?>(JsonSerializer.Deserialize<RfidDistinguishedName>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "SubjectPKAlgorithm":
                            subjectPKAlgorithm = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Extensions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                extensions = new Option<List<RfidPkiExtension>?>(JsonSerializer.Deserialize<List<RfidPkiExtension>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Notifications":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                notifications = new Option<List<ParsingNotificationCodes>?>(JsonSerializer.Deserialize<List<ParsingNotificationCodes>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Origin":
                            string? originRawValue = utf8JsonReader.GetString();
                            if (originRawValue != null)
                                origin = new Option<RfidCertificateOrigin?>(RfidCertificateOriginValueConverter.FromStringOrDefault(originRawValue));
                            break;
                        case "Type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<RfidCertificateType?>(RfidCertificateTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "FileName":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fileName = new Option<TrfFtString?>(JsonSerializer.Deserialize<TrfFtString>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "PA_Status":
                            string? pAStatusRawValue = utf8JsonReader.GetString();
                            if (pAStatusRawValue != null)
                                pAStatus = new Option<RFIDErrorCodes?>(RFIDErrorCodesValueConverter.FromStringOrDefault(pAStatusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(varVersion));

            if (!serialNumber.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(serialNumber));

            if (!signatureAlgorithm.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(signatureAlgorithm));

            if (!issuer.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(issuer));

            if (!validity.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(validity));

            if (!subject.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(subject));

            if (!subjectPKAlgorithm.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(subjectPKAlgorithm));

            if (!extensions.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(extensions));

            if (!notifications.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(notifications));

            if (!origin.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(origin));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(type));

            if (!fileName.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(fileName));

            if (!pAStatus.IsSet)
                throw new ArgumentException("Property is required for class RfidCertificateEx.", nameof(pAStatus));

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class RfidCertificateEx.");

            if (serialNumber.IsSet && serialNumber.Value == null)
                throw new ArgumentNullException(nameof(serialNumber), "Property is not nullable for class RfidCertificateEx.");

            if (signatureAlgorithm.IsSet && signatureAlgorithm.Value == null)
                throw new ArgumentNullException(nameof(signatureAlgorithm), "Property is not nullable for class RfidCertificateEx.");

            if (issuer.IsSet && issuer.Value == null)
                throw new ArgumentNullException(nameof(issuer), "Property is not nullable for class RfidCertificateEx.");

            if (validity.IsSet && validity.Value == null)
                throw new ArgumentNullException(nameof(validity), "Property is not nullable for class RfidCertificateEx.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class RfidCertificateEx.");

            if (subjectPKAlgorithm.IsSet && subjectPKAlgorithm.Value == null)
                throw new ArgumentNullException(nameof(subjectPKAlgorithm), "Property is not nullable for class RfidCertificateEx.");

            if (extensions.IsSet && extensions.Value == null)
                throw new ArgumentNullException(nameof(extensions), "Property is not nullable for class RfidCertificateEx.");

            if (notifications.IsSet && notifications.Value == null)
                throw new ArgumentNullException(nameof(notifications), "Property is not nullable for class RfidCertificateEx.");

            if (origin.IsSet && origin.Value == null)
                throw new ArgumentNullException(nameof(origin), "Property is not nullable for class RfidCertificateEx.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class RfidCertificateEx.");

            if (fileName.IsSet && fileName.Value == null)
                throw new ArgumentNullException(nameof(fileName), "Property is not nullable for class RfidCertificateEx.");

            if (pAStatus.IsSet && pAStatus.Value == null)
                throw new ArgumentNullException(nameof(pAStatus), "Property is not nullable for class RfidCertificateEx.");

            return new RfidCertificateEx(varVersion.Value!.Value!, serialNumber.Value!, signatureAlgorithm.Value!, issuer.Value!, validity.Value!, subject.Value!, subjectPKAlgorithm.Value!, extensions.Value!, notifications.Value!, origin.Value!.Value!, type.Value!.Value!, fileName.Value!, pAStatus.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RfidCertificateEx" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidCertificateEx"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RfidCertificateEx rfidCertificateEx, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rfidCertificateEx, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RfidCertificateEx" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidCertificateEx"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RfidCertificateEx rfidCertificateEx, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rfidCertificateEx.SerialNumber == null)
                throw new ArgumentNullException(nameof(rfidCertificateEx.SerialNumber), "Property is required for class RfidCertificateEx.");

            if (rfidCertificateEx.SignatureAlgorithm == null)
                throw new ArgumentNullException(nameof(rfidCertificateEx.SignatureAlgorithm), "Property is required for class RfidCertificateEx.");

            if (rfidCertificateEx.Issuer == null)
                throw new ArgumentNullException(nameof(rfidCertificateEx.Issuer), "Property is required for class RfidCertificateEx.");

            if (rfidCertificateEx.Validity == null)
                throw new ArgumentNullException(nameof(rfidCertificateEx.Validity), "Property is required for class RfidCertificateEx.");

            if (rfidCertificateEx.Subject == null)
                throw new ArgumentNullException(nameof(rfidCertificateEx.Subject), "Property is required for class RfidCertificateEx.");

            if (rfidCertificateEx.SubjectPKAlgorithm == null)
                throw new ArgumentNullException(nameof(rfidCertificateEx.SubjectPKAlgorithm), "Property is required for class RfidCertificateEx.");

            if (rfidCertificateEx.Extensions == null)
                throw new ArgumentNullException(nameof(rfidCertificateEx.Extensions), "Property is required for class RfidCertificateEx.");

            if (rfidCertificateEx.Notifications == null)
                throw new ArgumentNullException(nameof(rfidCertificateEx.Notifications), "Property is required for class RfidCertificateEx.");

            if (rfidCertificateEx.FileName == null)
                throw new ArgumentNullException(nameof(rfidCertificateEx.FileName), "Property is required for class RfidCertificateEx.");

            writer.WriteNumber("Version", rfidCertificateEx.VarVersion);

            writer.WriteString("SerialNumber", rfidCertificateEx.SerialNumber);

            writer.WriteString("SignatureAlgorithm", rfidCertificateEx.SignatureAlgorithm);

            writer.WritePropertyName("Issuer");
            JsonSerializer.Serialize(writer, rfidCertificateEx.Issuer, jsonSerializerOptions);
            writer.WritePropertyName("Validity");
            JsonSerializer.Serialize(writer, rfidCertificateEx.Validity, jsonSerializerOptions);
            writer.WritePropertyName("Subject");
            JsonSerializer.Serialize(writer, rfidCertificateEx.Subject, jsonSerializerOptions);
            writer.WriteString("SubjectPKAlgorithm", rfidCertificateEx.SubjectPKAlgorithm);

            writer.WritePropertyName("Extensions");
            JsonSerializer.Serialize(writer, rfidCertificateEx.Extensions, jsonSerializerOptions);
            writer.WritePropertyName("Notifications");
            JsonSerializer.Serialize(writer, rfidCertificateEx.Notifications, jsonSerializerOptions);
            var originRawValue = RfidCertificateOriginValueConverter.ToJsonValue(rfidCertificateEx.Origin);
            writer.WriteNumber("Origin", originRawValue);

            var typeRawValue = RfidCertificateTypeValueConverter.ToJsonValue(rfidCertificateEx.Type);
            writer.WriteNumber("Type", typeRawValue);

            writer.WritePropertyName("FileName");
            JsonSerializer.Serialize(writer, rfidCertificateEx.FileName, jsonSerializerOptions);
            var pAStatusRawValue = RFIDErrorCodesValueConverter.ToJsonValue(rfidCertificateEx.PAStatus);
            writer.WriteNumber("PA_Status", pAStatusRawValue);
        }
    }
}
