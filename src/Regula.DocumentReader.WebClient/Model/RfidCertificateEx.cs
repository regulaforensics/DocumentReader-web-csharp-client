/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the certificate contents used for the digital signature verification of the document security object within the context of the communication session with electronic document.
    /// </summary>
    [DataContract]
    public partial class RfidCertificateEx :  IEquatable<RfidCertificateEx>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="Origin", EmitDefaultValue=true)]
        public RfidCertificateOrigin Origin { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public RfidCertificateType Type { get; set; }
        /// <summary>
        /// Gets or Sets PAStatus
        /// </summary>
        [DataMember(Name="PA_Status", EmitDefaultValue=true)]
        public RFIDErrorCodes PAStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidCertificateEx" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidCertificateEx() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidCertificateEx" /> class.
        /// </summary>
        /// <param name="version">Version of Certificate ASN.1 structure (required).</param>
        /// <param name="serialNumber">Certificate serial number. Base64 encoded. (required).</param>
        /// <param name="signatureAlgorithm">Certificate digital signature algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string). (required).</param>
        /// <param name="issuer">issuer (required).</param>
        /// <param name="validity">validity (required).</param>
        /// <param name="subject">subject (required).</param>
        /// <param name="subjectPKAlgorithm">Certificate public key algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string). (required).</param>
        /// <param name="extensions">List of the certificate extensions (required).</param>
        /// <param name="notifications">List of remarks arisen during the analysis of the certificate data structure and its validity verification. (required).</param>
        /// <param name="origin">origin (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="fileName">fileName (required).</param>
        /// <param name="pAStatus">pAStatus (required).</param>
        public RfidCertificateEx(decimal version = default(decimal), string serialNumber = default(string), string signatureAlgorithm = default(string), RfidDistinguishedName issuer = default(RfidDistinguishedName), RfidValidity validity = default(RfidValidity), RfidDistinguishedName subject = default(RfidDistinguishedName), string subjectPKAlgorithm = default(string), List<RfidPkiExtension> extensions = default(List<RfidPkiExtension>), List<ParsingErrorCodes> notifications = default(List<ParsingErrorCodes>), RfidCertificateOrigin origin = default(RfidCertificateOrigin), RfidCertificateType type = default(RfidCertificateType), TrfFtString fileName = default(TrfFtString), RFIDErrorCodes pAStatus = default(RFIDErrorCodes))
        {
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            
            // to ensure "serialNumber" is required (not null)
            if (serialNumber == null)
            {
                throw new InvalidDataException("serialNumber is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.SerialNumber = serialNumber;
            }
            
            // to ensure "signatureAlgorithm" is required (not null)
            if (signatureAlgorithm == null)
            {
                throw new InvalidDataException("signatureAlgorithm is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.SignatureAlgorithm = signatureAlgorithm;
            }
            
            // to ensure "issuer" is required (not null)
            if (issuer == null)
            {
                throw new InvalidDataException("issuer is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.Issuer = issuer;
            }
            
            // to ensure "validity" is required (not null)
            if (validity == null)
            {
                throw new InvalidDataException("validity is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.Validity = validity;
            }
            
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new InvalidDataException("subject is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.Subject = subject;
            }
            
            // to ensure "subjectPKAlgorithm" is required (not null)
            if (subjectPKAlgorithm == null)
            {
                throw new InvalidDataException("subjectPKAlgorithm is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.SubjectPKAlgorithm = subjectPKAlgorithm;
            }
            
            // to ensure "extensions" is required (not null)
            if (extensions == null)
            {
                throw new InvalidDataException("extensions is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.Extensions = extensions;
            }
            
            // to ensure "notifications" is required (not null)
            if (notifications == null)
            {
                throw new InvalidDataException("notifications is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.Notifications = notifications;
            }
            
            // to ensure "origin" is required (not null)
            if (origin == null)
            {
                throw new InvalidDataException("origin is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.Origin = origin;
            }
            
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            // to ensure "fileName" is required (not null)
            if (fileName == null)
            {
                throw new InvalidDataException("fileName is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.FileName = fileName;
            }
            
            // to ensure "pAStatus" is required (not null)
            if (pAStatus == null)
            {
                throw new InvalidDataException("pAStatus is a required property for RfidCertificateEx and cannot be null");
            }
            else
            {
                this.PAStatus = pAStatus;
            }
            
        }
        
        /// <summary>
        /// Version of Certificate ASN.1 structure
        /// </summary>
        /// <value>Version of Certificate ASN.1 structure</value>
        [DataMember(Name="Version", EmitDefaultValue=true)]
        public decimal Version { get; set; }

        /// <summary>
        /// Certificate serial number. Base64 encoded.
        /// </summary>
        /// <value>Certificate serial number. Base64 encoded.</value>
        [DataMember(Name="SerialNumber", EmitDefaultValue=true)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Certificate digital signature algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).
        /// </summary>
        /// <value>Certificate digital signature algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).</value>
        [DataMember(Name="SignatureAlgorithm", EmitDefaultValue=true)]
        public string SignatureAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name="Issuer", EmitDefaultValue=true)]
        public RfidDistinguishedName Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Validity
        /// </summary>
        [DataMember(Name="Validity", EmitDefaultValue=true)]
        public RfidValidity Validity { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="Subject", EmitDefaultValue=true)]
        public RfidDistinguishedName Subject { get; set; }

        /// <summary>
        /// Certificate public key algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).
        /// </summary>
        /// <value>Certificate public key algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).</value>
        [DataMember(Name="SubjectPKAlgorithm", EmitDefaultValue=true)]
        public string SubjectPKAlgorithm { get; set; }

        /// <summary>
        /// List of the certificate extensions
        /// </summary>
        /// <value>List of the certificate extensions</value>
        [DataMember(Name="Extensions", EmitDefaultValue=true)]
        public List<RfidPkiExtension> Extensions { get; set; }

        /// <summary>
        /// List of remarks arisen during the analysis of the certificate data structure and its validity verification.
        /// </summary>
        /// <value>List of remarks arisen during the analysis of the certificate data structure and its validity verification.</value>
        [DataMember(Name="Notifications", EmitDefaultValue=true)]
        public List<ParsingErrorCodes> Notifications { get; set; }



        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="FileName", EmitDefaultValue=true)]
        public TrfFtString FileName { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RfidCertificateEx {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  SignatureAlgorithm: ").Append(SignatureAlgorithm).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  SubjectPKAlgorithm: ").Append(SubjectPKAlgorithm).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  PAStatus: ").Append(PAStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RfidCertificateEx);
        }

        /// <summary>
        /// Returns true if RfidCertificateEx instances are equal
        /// </summary>
        /// <param name="input">Instance of RfidCertificateEx to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RfidCertificateEx input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.SignatureAlgorithm == input.SignatureAlgorithm ||
                    (this.SignatureAlgorithm != null &&
                    this.SignatureAlgorithm.Equals(input.SignatureAlgorithm))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Validity == input.Validity ||
                    (this.Validity != null &&
                    this.Validity.Equals(input.Validity))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.SubjectPKAlgorithm == input.SubjectPKAlgorithm ||
                    (this.SubjectPKAlgorithm != null &&
                    this.SubjectPKAlgorithm.Equals(input.SubjectPKAlgorithm))
                ) && 
                (
                    this.Extensions == input.Extensions ||
                    this.Extensions != null &&
                    input.Extensions != null &&
                    this.Extensions.SequenceEqual(input.Extensions)
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    input.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.PAStatus == input.PAStatus ||
                    (this.PAStatus != null &&
                    this.PAStatus.Equals(input.PAStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.SignatureAlgorithm != null)
                    hashCode = hashCode * 59 + this.SignatureAlgorithm.GetHashCode();
                if (this.Issuer != null)
                    hashCode = hashCode * 59 + this.Issuer.GetHashCode();
                if (this.Validity != null)
                    hashCode = hashCode * 59 + this.Validity.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.SubjectPKAlgorithm != null)
                    hashCode = hashCode * 59 + this.SubjectPKAlgorithm.GetHashCode();
                if (this.Extensions != null)
                    hashCode = hashCode * 59 + this.Extensions.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.PAStatus != null)
                    hashCode = hashCode * 59 + this.PAStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
