// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the results of a single authentication procedure or a procedure of secure data access within the context of the communication session with electronic document
    /// </summary>
    public partial class RfidAccessControlInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidAccessControlInfo" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="status">status</param>
        /// <param name="notifications">List of remarks arisen during the procedure.</param>
        /// <param name="activeOptionIdx">Index of the active variant of the procedure</param>
        /// <param name="accessControlOptions">List of structures with are used to describe the variants of the authentication or secure data access procedure performance within the context of the communication session with electronic document</param>
        [JsonConstructor]
        public RfidAccessControlInfo(RfidAccessControlProcedureType type, RFIDErrorCodes status, List<ParsingNotificationCodes> notifications, Option<decimal?> activeOptionIdx = default, Option<List<Object>?> accessControlOptions = default)
        {
            Type = type;
            Status = status;
            Notifications = notifications;
            ActiveOptionIdxOption = activeOptionIdx;
            AccessControlOptionsOption = accessControlOptions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("Type")]
        public RfidAccessControlProcedureType Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("Status")]
        public RFIDErrorCodes Status { get; set; }

        /// <summary>
        /// List of remarks arisen during the procedure.
        /// </summary>
        /// <value>List of remarks arisen during the procedure.</value>
        [JsonPropertyName("Notifications")]
        public List<ParsingNotificationCodes> Notifications { get; set; }

        /// <summary>
        /// Used to track the state of ActiveOptionIdx
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ActiveOptionIdxOption { get; private set; }

        /// <summary>
        /// Index of the active variant of the procedure
        /// </summary>
        /// <value>Index of the active variant of the procedure</value>
        [JsonPropertyName("ActiveOptionIdx")]
        public decimal? ActiveOptionIdx { get { return this.ActiveOptionIdxOption; } set { this.ActiveOptionIdxOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccessControlOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Object>?> AccessControlOptionsOption { get; private set; }

        /// <summary>
        /// List of structures with are used to describe the variants of the authentication or secure data access procedure performance within the context of the communication session with electronic document
        /// </summary>
        /// <value>List of structures with are used to describe the variants of the authentication or secure data access procedure performance within the context of the communication session with electronic document</value>
        [JsonPropertyName("AccessControlOptions")]
        public List<Object>? AccessControlOptions { get { return this.AccessControlOptionsOption; } set { this.AccessControlOptionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidAccessControlInfo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  ActiveOptionIdx: ").Append(ActiveOptionIdx).Append("\n");
            sb.Append("  AccessControlOptions: ").Append(AccessControlOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidAccessControlInfo" />
    /// </summary>
    public class RfidAccessControlInfoJsonConverter : JsonConverter<RfidAccessControlInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="RfidAccessControlInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RfidAccessControlInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RfidAccessControlProcedureType?> type = default;
            Option<RFIDErrorCodes?> status = default;
            Option<List<ParsingNotificationCodes>?> notifications = default;
            Option<decimal?> activeOptionIdx = default;
            Option<List<Object>?> accessControlOptions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<RfidAccessControlProcedureType?>(RfidAccessControlProcedureTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "Status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<RFIDErrorCodes?>(RFIDErrorCodesValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "Notifications":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                notifications = new Option<List<ParsingNotificationCodes>?>(JsonSerializer.Deserialize<List<ParsingNotificationCodes>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ActiveOptionIdx":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                activeOptionIdx = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "AccessControlOptions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accessControlOptions = new Option<List<Object>?>(JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class RfidAccessControlInfo.", nameof(type));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class RfidAccessControlInfo.", nameof(status));

            if (!notifications.IsSet)
                throw new ArgumentException("Property is required for class RfidAccessControlInfo.", nameof(notifications));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class RfidAccessControlInfo.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class RfidAccessControlInfo.");

            if (notifications.IsSet && notifications.Value == null)
                throw new ArgumentNullException(nameof(notifications), "Property is not nullable for class RfidAccessControlInfo.");

            if (activeOptionIdx.IsSet && activeOptionIdx.Value == null)
                throw new ArgumentNullException(nameof(activeOptionIdx), "Property is not nullable for class RfidAccessControlInfo.");

            if (accessControlOptions.IsSet && accessControlOptions.Value == null)
                throw new ArgumentNullException(nameof(accessControlOptions), "Property is not nullable for class RfidAccessControlInfo.");

            return new RfidAccessControlInfo(type.Value!.Value!, status.Value!.Value!, notifications.Value!, activeOptionIdx, accessControlOptions);
        }

        /// <summary>
        /// Serializes a <see cref="RfidAccessControlInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidAccessControlInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RfidAccessControlInfo rfidAccessControlInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rfidAccessControlInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RfidAccessControlInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidAccessControlInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RfidAccessControlInfo rfidAccessControlInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rfidAccessControlInfo.Notifications == null)
                throw new ArgumentNullException(nameof(rfidAccessControlInfo.Notifications), "Property is required for class RfidAccessControlInfo.");

            if (rfidAccessControlInfo.AccessControlOptionsOption.IsSet && rfidAccessControlInfo.AccessControlOptions == null)
                throw new ArgumentNullException(nameof(rfidAccessControlInfo.AccessControlOptions), "Property is required for class RfidAccessControlInfo.");

            var typeRawValue = RfidAccessControlProcedureTypeValueConverter.ToJsonValue(rfidAccessControlInfo.Type);
            writer.WriteNumber("Type", typeRawValue);

            var statusRawValue = RFIDErrorCodesValueConverter.ToJsonValue(rfidAccessControlInfo.Status);
            writer.WriteNumber("Status", statusRawValue);

            writer.WritePropertyName("Notifications");
            JsonSerializer.Serialize(writer, rfidAccessControlInfo.Notifications, jsonSerializerOptions);
            if (rfidAccessControlInfo.ActiveOptionIdxOption.IsSet)
                writer.WriteNumber("ActiveOptionIdx", rfidAccessControlInfo.ActiveOptionIdxOption.Value!.Value);

            if (rfidAccessControlInfo.AccessControlOptionsOption.IsSet)
            {
                writer.WritePropertyName("AccessControlOptions");
                JsonSerializer.Serialize(writer, rfidAccessControlInfo.AccessControlOptions, jsonSerializerOptions);
            }
        }
    }
}
