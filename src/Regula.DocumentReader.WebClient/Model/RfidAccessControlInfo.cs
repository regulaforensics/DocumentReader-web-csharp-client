/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the results of a single authentication procedure or a procedure of secure data access within the context of the communication session with electronic document
    /// </summary>
    [DataContract(Name = "RfidAccessControlInfo")]
    public partial class RfidAccessControlInfo : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", IsRequired = true, EmitDefaultValue = true)]
        public RfidAccessControlProcedureType Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", IsRequired = true, EmitDefaultValue = true)]
        public RFIDErrorCodes Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidAccessControlInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidAccessControlInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidAccessControlInfo" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="activeOptionIdx">Index of the active variant of the procedure.</param>
        /// <param name="notifications">List of remarks arisen during the procedure. (required).</param>
        /// <param name="accessControlOptions">List of structures with are used to describe the variants of the authentication or secure data access procedure performance within the context of the communication session with electronic document.</param>
        public RfidAccessControlInfo(RfidAccessControlProcedureType type = default(RfidAccessControlProcedureType), RFIDErrorCodes status = default(RFIDErrorCodes), decimal activeOptionIdx = default(decimal), List<ParsingNotificationCodes> notifications = default(List<ParsingNotificationCodes>), List<Object> accessControlOptions = default(List<Object>))
        {
            this.Type = type;
            this.Status = status;
            // to ensure "notifications" is required (not null)
            if (notifications == null)
            {
                throw new ArgumentNullException("notifications is a required property for RfidAccessControlInfo and cannot be null");
            }
            this.Notifications = notifications;
            this.ActiveOptionIdx = activeOptionIdx;
            this.AccessControlOptions = accessControlOptions;
        }

        /// <summary>
        /// Index of the active variant of the procedure
        /// </summary>
        /// <value>Index of the active variant of the procedure</value>
        [DataMember(Name = "ActiveOptionIdx", EmitDefaultValue = false)]
        public decimal ActiveOptionIdx { get; set; }

        /// <summary>
        /// List of remarks arisen during the procedure.
        /// </summary>
        /// <value>List of remarks arisen during the procedure.</value>
        [DataMember(Name = "Notifications", IsRequired = true, EmitDefaultValue = true)]
        public List<ParsingNotificationCodes> Notifications { get; set; }

        /// <summary>
        /// List of structures with are used to describe the variants of the authentication or secure data access procedure performance within the context of the communication session with electronic document
        /// </summary>
        /// <value>List of structures with are used to describe the variants of the authentication or secure data access procedure performance within the context of the communication session with electronic document</value>
        [DataMember(Name = "AccessControlOptions", EmitDefaultValue = false)]
        public List<Object> AccessControlOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidAccessControlInfo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ActiveOptionIdx: ").Append(ActiveOptionIdx).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  AccessControlOptions: ").Append(AccessControlOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
