/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the results of a single authentication procedure or a procedure of secure data access within the context of the communication session with electronic document
    /// </summary>
    [DataContract]
    public partial class RfidAccessControlInfo :  IEquatable<RfidAccessControlInfo>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public RfidAccessControlProcedureType Type { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=true)]
        public RFIDErrorCodes Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidAccessControlInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidAccessControlInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidAccessControlInfo" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="activeOptionIdx">Index of the active variant of the procedure.</param>
        /// <param name="notifications">List of remarks arisen during the procedure. (required).</param>
        /// <param name="accessControlOptions">List of structures with are used to describe the variants of the authentication or secure data access procedure performance within the context of the communication session with electronic document.</param>
        public RfidAccessControlInfo(RfidAccessControlProcedureType type = default(RfidAccessControlProcedureType), RFIDErrorCodes status = default(RFIDErrorCodes), decimal activeOptionIdx = default(decimal), List<ParsingErrorCodes> notifications = default(List<ParsingErrorCodes>), List<Object> accessControlOptions = default(List<Object>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for RfidAccessControlInfo and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for RfidAccessControlInfo and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            
            // to ensure "notifications" is required (not null)
            if (notifications == null)
            {
                throw new InvalidDataException("notifications is a required property for RfidAccessControlInfo and cannot be null");
            }
            else
            {
                this.Notifications = notifications;
            }
            
            this.ActiveOptionIdx = activeOptionIdx;
            this.AccessControlOptions = accessControlOptions;
        }
        


        /// <summary>
        /// Index of the active variant of the procedure
        /// </summary>
        /// <value>Index of the active variant of the procedure</value>
        [DataMember(Name="ActiveOptionIdx", EmitDefaultValue=false)]
        public decimal ActiveOptionIdx { get; set; }

        /// <summary>
        /// List of remarks arisen during the procedure.
        /// </summary>
        /// <value>List of remarks arisen during the procedure.</value>
        [DataMember(Name="Notifications", EmitDefaultValue=true)]
        public List<ParsingErrorCodes> Notifications { get; set; }

        /// <summary>
        /// List of structures with are used to describe the variants of the authentication or secure data access procedure performance within the context of the communication session with electronic document
        /// </summary>
        /// <value>List of structures with are used to describe the variants of the authentication or secure data access procedure performance within the context of the communication session with electronic document</value>
        [DataMember(Name="AccessControlOptions", EmitDefaultValue=false)]
        public List<Object> AccessControlOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RfidAccessControlInfo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ActiveOptionIdx: ").Append(ActiveOptionIdx).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  AccessControlOptions: ").Append(AccessControlOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RfidAccessControlInfo);
        }

        /// <summary>
        /// Returns true if RfidAccessControlInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of RfidAccessControlInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RfidAccessControlInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ActiveOptionIdx == input.ActiveOptionIdx ||
                    (this.ActiveOptionIdx != null &&
                    this.ActiveOptionIdx.Equals(input.ActiveOptionIdx))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    input.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                ) && 
                (
                    this.AccessControlOptions == input.AccessControlOptions ||
                    this.AccessControlOptions != null &&
                    input.AccessControlOptions != null &&
                    this.AccessControlOptions.SequenceEqual(input.AccessControlOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ActiveOptionIdx != null)
                    hashCode = hashCode * 59 + this.ActiveOptionIdx.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.AccessControlOptions != null)
                    hashCode = hashCode * 59 + this.AccessControlOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
