/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// DetailsOptical
    /// </summary>
    [DataContract]
    public partial class DetailsOptical :  IEquatable<DetailsOptical>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsOptical" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DetailsOptical() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsOptical" /> class.
        /// </summary>
        /// <param name="overallStatus">overallStatus (required).</param>
        /// <param name="docType">docType (required).</param>
        /// <param name="expiry">expiry (required).</param>
        /// <param name="imageQA">imageQA (required).</param>
        /// <param name="mrz">mrz (required).</param>
        /// <param name="pagesCount">Number of processed pages in the document (required).</param>
        /// <param name="security">security (required).</param>
        /// <param name="text">text (required).</param>
        public DetailsOptical(int overallStatus = default(int), int docType = default(int), int expiry = default(int), int imageQA = default(int), int mrz = default(int), int pagesCount = default(int), int security = default(int), int text = default(int))
        {
            // to ensure "overallStatus" is required (not null)
            if (overallStatus == null)
            {
                throw new InvalidDataException("overallStatus is a required property for DetailsOptical and cannot be null");
            }
            else
            {
                this.OverallStatus = overallStatus;
            }
            
            // to ensure "docType" is required (not null)
            if (docType == null)
            {
                throw new InvalidDataException("docType is a required property for DetailsOptical and cannot be null");
            }
            else
            {
                this.DocType = docType;
            }
            
            // to ensure "expiry" is required (not null)
            if (expiry == null)
            {
                throw new InvalidDataException("expiry is a required property for DetailsOptical and cannot be null");
            }
            else
            {
                this.Expiry = expiry;
            }
            
            // to ensure "imageQA" is required (not null)
            if (imageQA == null)
            {
                throw new InvalidDataException("imageQA is a required property for DetailsOptical and cannot be null");
            }
            else
            {
                this.ImageQA = imageQA;
            }
            
            // to ensure "mrz" is required (not null)
            if (mrz == null)
            {
                throw new InvalidDataException("mrz is a required property for DetailsOptical and cannot be null");
            }
            else
            {
                this.Mrz = mrz;
            }
            
            // to ensure "pagesCount" is required (not null)
            if (pagesCount == null)
            {
                throw new InvalidDataException("pagesCount is a required property for DetailsOptical and cannot be null");
            }
            else
            {
                this.PagesCount = pagesCount;
            }
            
            // to ensure "security" is required (not null)
            if (security == null)
            {
                throw new InvalidDataException("security is a required property for DetailsOptical and cannot be null");
            }
            else
            {
                this.Security = security;
            }
            
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new InvalidDataException("text is a required property for DetailsOptical and cannot be null");
            }
            else
            {
                this.Text = text;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets OverallStatus
        /// </summary>
        [DataMember(Name="overallStatus", EmitDefaultValue=true)]
        public int OverallStatus { get; set; }

        /// <summary>
        /// Gets or Sets DocType
        /// </summary>
        [DataMember(Name="docType", EmitDefaultValue=true)]
        public int DocType { get; set; }

        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name="expiry", EmitDefaultValue=true)]
        public int Expiry { get; set; }

        /// <summary>
        /// Gets or Sets ImageQA
        /// </summary>
        [DataMember(Name="imageQA", EmitDefaultValue=true)]
        public int ImageQA { get; set; }

        /// <summary>
        /// Gets or Sets Mrz
        /// </summary>
        [DataMember(Name="mrz", EmitDefaultValue=true)]
        public int Mrz { get; set; }

        /// <summary>
        /// Number of processed pages in the document
        /// </summary>
        /// <value>Number of processed pages in the document</value>
        [DataMember(Name="pagesCount", EmitDefaultValue=true)]
        public int PagesCount { get; set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>
        [DataMember(Name="security", EmitDefaultValue=true)]
        public int Security { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=true)]
        public int Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailsOptical {\n");
            sb.Append("  OverallStatus: ").Append(OverallStatus).Append("\n");
            sb.Append("  DocType: ").Append(DocType).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  ImageQA: ").Append(ImageQA).Append("\n");
            sb.Append("  Mrz: ").Append(Mrz).Append("\n");
            sb.Append("  PagesCount: ").Append(PagesCount).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailsOptical);
        }

        /// <summary>
        /// Returns true if DetailsOptical instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailsOptical to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailsOptical input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OverallStatus == input.OverallStatus ||
                    (this.OverallStatus != null &&
                    this.OverallStatus.Equals(input.OverallStatus))
                ) && 
                (
                    this.DocType == input.DocType ||
                    (this.DocType != null &&
                    this.DocType.Equals(input.DocType))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                ) && 
                (
                    this.ImageQA == input.ImageQA ||
                    (this.ImageQA != null &&
                    this.ImageQA.Equals(input.ImageQA))
                ) && 
                (
                    this.Mrz == input.Mrz ||
                    (this.Mrz != null &&
                    this.Mrz.Equals(input.Mrz))
                ) && 
                (
                    this.PagesCount == input.PagesCount ||
                    (this.PagesCount != null &&
                    this.PagesCount.Equals(input.PagesCount))
                ) && 
                (
                    this.Security == input.Security ||
                    (this.Security != null &&
                    this.Security.Equals(input.Security))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OverallStatus != null)
                    hashCode = hashCode * 59 + this.OverallStatus.GetHashCode();
                if (this.DocType != null)
                    hashCode = hashCode * 59 + this.DocType.GetHashCode();
                if (this.Expiry != null)
                    hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                if (this.ImageQA != null)
                    hashCode = hashCode * 59 + this.ImageQA.GetHashCode();
                if (this.Mrz != null)
                    hashCode = hashCode * 59 + this.Mrz.GetHashCode();
                if (this.PagesCount != null)
                    hashCode = hashCode * 59 + this.PagesCount.GetHashCode();
                if (this.Security != null)
                    hashCode = hashCode * 59 + this.Security.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
