/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Details on performed optical checks
    /// </summary>
    [DataContract(Name = "detailsOptical")]
    public partial class DetailsOptical : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OverallStatus
        /// </summary>
        [DataMember(Name = "overallStatus", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult OverallStatus { get; set; }

        /// <summary>
        /// Gets or Sets DocType
        /// </summary>
        [DataMember(Name = "docType", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult DocType { get; set; }

        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name = "expiry", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult Expiry { get; set; }

        /// <summary>
        /// Gets or Sets ImageQA
        /// </summary>
        [DataMember(Name = "imageQA", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult ImageQA { get; set; }

        /// <summary>
        /// Gets or Sets Mrz
        /// </summary>
        [DataMember(Name = "mrz", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult Mrz { get; set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>
        [DataMember(Name = "security", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult Security { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult Text { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsOptical" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DetailsOptical() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsOptical" /> class.
        /// </summary>
        /// <param name="overallStatus">overallStatus (required).</param>
        /// <param name="docType">docType (required).</param>
        /// <param name="expiry">expiry (required).</param>
        /// <param name="imageQA">imageQA (required).</param>
        /// <param name="mrz">mrz (required).</param>
        /// <param name="pagesCount">Number of processed pages in the document (required).</param>
        /// <param name="security">security (required).</param>
        /// <param name="text">text (required).</param>
        /// <param name="vds">vds.</param>
        public DetailsOptical(CheckResult overallStatus = default(CheckResult), CheckResult docType = default(CheckResult), CheckResult expiry = default(CheckResult), CheckResult imageQA = default(CheckResult), CheckResult mrz = default(CheckResult), int pagesCount = default(int), CheckResult security = default(CheckResult), CheckResult text = default(CheckResult), int vds = default(int))
        {
            this.OverallStatus = overallStatus;
            this.DocType = docType;
            this.Expiry = expiry;
            this.ImageQA = imageQA;
            this.Mrz = mrz;
            this.PagesCount = pagesCount;
            this.Security = security;
            this.Text = text;
            this.Vds = vds;
        }

        /// <summary>
        /// Number of processed pages in the document
        /// </summary>
        /// <value>Number of processed pages in the document</value>
        [DataMember(Name = "pagesCount", IsRequired = true, EmitDefaultValue = true)]
        public int PagesCount { get; set; }

        /// <summary>
        /// Gets or Sets Vds
        /// </summary>
        [DataMember(Name = "vds", EmitDefaultValue = false)]
        public int? Vds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailsOptical {\n");
            sb.Append("  OverallStatus: ").Append(OverallStatus).Append("\n");
            sb.Append("  DocType: ").Append(DocType).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  ImageQA: ").Append(ImageQA).Append("\n");
            sb.Append("  Mrz: ").Append(Mrz).Append("\n");
            sb.Append("  PagesCount: ").Append(PagesCount).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Vds: ").Append(Vds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
