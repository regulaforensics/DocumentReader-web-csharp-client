// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Details on performed optical checks
    /// </summary>
    public partial class DetailsOptical : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsOptical" /> class.
        /// </summary>
        /// <param name="overallStatus">overallStatus</param>
        /// <param name="docType">docType</param>
        /// <param name="expiry">expiry</param>
        /// <param name="imageQA">imageQA</param>
        /// <param name="mrz">mrz</param>
        /// <param name="pagesCount">Number of processed pages in the document</param>
        /// <param name="security">security</param>
        /// <param name="text">text</param>
        /// <param name="vds">vds</param>
        [JsonConstructor]
        public DetailsOptical(CheckResult overallStatus, CheckResult docType, CheckResult expiry, CheckResult imageQA, CheckResult mrz, int pagesCount, CheckResult security, CheckResult text, Option<int?> vds = default)
        {
            OverallStatus = overallStatus;
            DocType = docType;
            Expiry = expiry;
            ImageQA = imageQA;
            Mrz = mrz;
            PagesCount = pagesCount;
            Security = security;
            Text = text;
            VdsOption = vds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets OverallStatus
        /// </summary>
        [JsonPropertyName("overallStatus")]
        public CheckResult OverallStatus { get; set; }

        /// <summary>
        /// Gets or Sets DocType
        /// </summary>
        [JsonPropertyName("docType")]
        public CheckResult DocType { get; set; }

        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [JsonPropertyName("expiry")]
        public CheckResult Expiry { get; set; }

        /// <summary>
        /// Gets or Sets ImageQA
        /// </summary>
        [JsonPropertyName("imageQA")]
        public CheckResult ImageQA { get; set; }

        /// <summary>
        /// Gets or Sets Mrz
        /// </summary>
        [JsonPropertyName("mrz")]
        public CheckResult Mrz { get; set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>
        [JsonPropertyName("security")]
        public CheckResult Security { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [JsonPropertyName("text")]
        public CheckResult Text { get; set; }

        /// <summary>
        /// Number of processed pages in the document
        /// </summary>
        /// <value>Number of processed pages in the document</value>
        [JsonPropertyName("pagesCount")]
        public int PagesCount { get; set; }

        /// <summary>
        /// Used to track the state of Vds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Vds
        /// </summary>
        [JsonPropertyName("vds")]
        public int? Vds { get { return this.VdsOption; } set { this.VdsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailsOptical {\n");
            sb.Append("  OverallStatus: ").Append(OverallStatus).Append("\n");
            sb.Append("  DocType: ").Append(DocType).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  ImageQA: ").Append(ImageQA).Append("\n");
            sb.Append("  Mrz: ").Append(Mrz).Append("\n");
            sb.Append("  PagesCount: ").Append(PagesCount).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Vds: ").Append(Vds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DetailsOptical" />
    /// </summary>
    public class DetailsOpticalJsonConverter : JsonConverter<DetailsOptical>
    {
        /// <summary>
        /// Deserializes json to <see cref="DetailsOptical" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DetailsOptical Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CheckResult?> overallStatus = default;
            Option<CheckResult?> docType = default;
            Option<CheckResult?> expiry = default;
            Option<CheckResult?> imageQA = default;
            Option<CheckResult?> mrz = default;
            Option<int?> pagesCount = default;
            Option<CheckResult?> security = default;
            Option<CheckResult?> text = default;
            Option<int?> vds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "overallStatus":
                            string? overallStatusRawValue = utf8JsonReader.GetString();
                            if (overallStatusRawValue != null)
                                overallStatus = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(overallStatusRawValue));
                            break;
                        case "docType":
                            string? docTypeRawValue = utf8JsonReader.GetString();
                            if (docTypeRawValue != null)
                                docType = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(docTypeRawValue));
                            break;
                        case "expiry":
                            string? expiryRawValue = utf8JsonReader.GetString();
                            if (expiryRawValue != null)
                                expiry = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(expiryRawValue));
                            break;
                        case "imageQA":
                            string? imageQARawValue = utf8JsonReader.GetString();
                            if (imageQARawValue != null)
                                imageQA = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(imageQARawValue));
                            break;
                        case "mrz":
                            string? mrzRawValue = utf8JsonReader.GetString();
                            if (mrzRawValue != null)
                                mrz = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(mrzRawValue));
                            break;
                        case "pagesCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pagesCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "security":
                            string? securityRawValue = utf8JsonReader.GetString();
                            if (securityRawValue != null)
                                security = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(securityRawValue));
                            break;
                        case "text":
                            string? textRawValue = utf8JsonReader.GetString();
                            if (textRawValue != null)
                                text = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(textRawValue));
                            break;
                        case "vds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vds = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!overallStatus.IsSet)
                throw new ArgumentException("Property is required for class DetailsOptical.", nameof(overallStatus));

            if (!docType.IsSet)
                throw new ArgumentException("Property is required for class DetailsOptical.", nameof(docType));

            if (!expiry.IsSet)
                throw new ArgumentException("Property is required for class DetailsOptical.", nameof(expiry));

            if (!imageQA.IsSet)
                throw new ArgumentException("Property is required for class DetailsOptical.", nameof(imageQA));

            if (!mrz.IsSet)
                throw new ArgumentException("Property is required for class DetailsOptical.", nameof(mrz));

            if (!pagesCount.IsSet)
                throw new ArgumentException("Property is required for class DetailsOptical.", nameof(pagesCount));

            if (!security.IsSet)
                throw new ArgumentException("Property is required for class DetailsOptical.", nameof(security));

            if (!text.IsSet)
                throw new ArgumentException("Property is required for class DetailsOptical.", nameof(text));

            if (overallStatus.IsSet && overallStatus.Value == null)
                throw new ArgumentNullException(nameof(overallStatus), "Property is not nullable for class DetailsOptical.");

            if (docType.IsSet && docType.Value == null)
                throw new ArgumentNullException(nameof(docType), "Property is not nullable for class DetailsOptical.");

            if (expiry.IsSet && expiry.Value == null)
                throw new ArgumentNullException(nameof(expiry), "Property is not nullable for class DetailsOptical.");

            if (imageQA.IsSet && imageQA.Value == null)
                throw new ArgumentNullException(nameof(imageQA), "Property is not nullable for class DetailsOptical.");

            if (mrz.IsSet && mrz.Value == null)
                throw new ArgumentNullException(nameof(mrz), "Property is not nullable for class DetailsOptical.");

            if (pagesCount.IsSet && pagesCount.Value == null)
                throw new ArgumentNullException(nameof(pagesCount), "Property is not nullable for class DetailsOptical.");

            if (security.IsSet && security.Value == null)
                throw new ArgumentNullException(nameof(security), "Property is not nullable for class DetailsOptical.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class DetailsOptical.");

            if (vds.IsSet && vds.Value == null)
                throw new ArgumentNullException(nameof(vds), "Property is not nullable for class DetailsOptical.");

            return new DetailsOptical(overallStatus.Value!.Value!, docType.Value!.Value!, expiry.Value!.Value!, imageQA.Value!.Value!, mrz.Value!.Value!, pagesCount.Value!.Value!, security.Value!.Value!, text.Value!.Value!, vds);
        }

        /// <summary>
        /// Serializes a <see cref="DetailsOptical" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="detailsOptical"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DetailsOptical detailsOptical, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, detailsOptical, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DetailsOptical" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="detailsOptical"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DetailsOptical detailsOptical, JsonSerializerOptions jsonSerializerOptions)
        {
            var overallStatusRawValue = CheckResultValueConverter.ToJsonValue(detailsOptical.OverallStatus);
            writer.WriteNumber("overallStatus", overallStatusRawValue);

            var docTypeRawValue = CheckResultValueConverter.ToJsonValue(detailsOptical.DocType);
            writer.WriteNumber("docType", docTypeRawValue);

            var expiryRawValue = CheckResultValueConverter.ToJsonValue(detailsOptical.Expiry);
            writer.WriteNumber("expiry", expiryRawValue);

            var imageQARawValue = CheckResultValueConverter.ToJsonValue(detailsOptical.ImageQA);
            writer.WriteNumber("imageQA", imageQARawValue);

            var mrzRawValue = CheckResultValueConverter.ToJsonValue(detailsOptical.Mrz);
            writer.WriteNumber("mrz", mrzRawValue);

            writer.WriteNumber("pagesCount", detailsOptical.PagesCount);

            var securityRawValue = CheckResultValueConverter.ToJsonValue(detailsOptical.Security);
            writer.WriteNumber("security", securityRawValue);

            var textRawValue = CheckResultValueConverter.ToJsonValue(detailsOptical.Text);
            writer.WriteNumber("text", textRawValue);

            if (detailsOptical.VdsOption.IsSet)
                writer.WriteNumber("vds", detailsOptical.VdsOption.Value!.Value);
        }
    }
}
