// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Information about one graphic field - abstract class
    /// </summary>
    public partial class GraphicField : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphicField" /> class.
        /// </summary>
        /// <param name="fieldRect">fieldRect</param>
        /// <param name="fieldType">fieldType</param>
        /// <param name="fieldName">Graphic field symbolic name</param>
        /// <param name="image">image</param>
        [JsonConstructor]
        public GraphicField(RectangleCoordinates fieldRect, GraphicFieldType fieldType, string fieldName, ImageData image)
        {
            FieldRect = fieldRect;
            FieldType = fieldType;
            FieldName = fieldName;
            Image = image;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [JsonPropertyName("FieldType")]
        public GraphicFieldType FieldType { get; set; }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [JsonPropertyName("FieldRect")]
        public RectangleCoordinates FieldRect { get; set; }

        /// <summary>
        /// Graphic field symbolic name
        /// </summary>
        /// <value>Graphic field symbolic name</value>
        [JsonPropertyName("FieldName")]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [JsonPropertyName("image")]
        public ImageData Image { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GraphicField {\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GraphicField" />
    /// </summary>
    public class GraphicFieldJsonConverter : JsonConverter<GraphicField>
    {
        /// <summary>
        /// Deserializes json to <see cref="GraphicField" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GraphicField Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RectangleCoordinates?> fieldRect = default;
            Option<GraphicFieldType?> fieldType = default;
            Option<string?> fieldName = default;
            Option<ImageData?> image = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "FieldRect":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fieldRect = new Option<RectangleCoordinates?>(JsonSerializer.Deserialize<RectangleCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "FieldType":
                            string? fieldTypeRawValue = utf8JsonReader.GetString();
                            if (fieldTypeRawValue != null)
                                fieldType = new Option<GraphicFieldType?>(GraphicFieldTypeValueConverter.FromStringOrDefault(fieldTypeRawValue));
                            break;
                        case "FieldName":
                            fieldName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "image":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                image = new Option<ImageData?>(JsonSerializer.Deserialize<ImageData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fieldRect.IsSet)
                throw new ArgumentException("Property is required for class GraphicField.", nameof(fieldRect));

            if (!fieldType.IsSet)
                throw new ArgumentException("Property is required for class GraphicField.", nameof(fieldType));

            if (!fieldName.IsSet)
                throw new ArgumentException("Property is required for class GraphicField.", nameof(fieldName));

            if (!image.IsSet)
                throw new ArgumentException("Property is required for class GraphicField.", nameof(image));

            if (fieldRect.IsSet && fieldRect.Value == null)
                throw new ArgumentNullException(nameof(fieldRect), "Property is not nullable for class GraphicField.");

            if (fieldType.IsSet && fieldType.Value == null)
                throw new ArgumentNullException(nameof(fieldType), "Property is not nullable for class GraphicField.");

            if (fieldName.IsSet && fieldName.Value == null)
                throw new ArgumentNullException(nameof(fieldName), "Property is not nullable for class GraphicField.");

            if (image.IsSet && image.Value == null)
                throw new ArgumentNullException(nameof(image), "Property is not nullable for class GraphicField.");

            return new GraphicField(fieldRect.Value!, fieldType.Value!.Value!, fieldName.Value!, image.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GraphicField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="graphicField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GraphicField graphicField, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, graphicField, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GraphicField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="graphicField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GraphicField graphicField, JsonSerializerOptions jsonSerializerOptions)
        {
            if (graphicField.FieldRect == null)
                throw new ArgumentNullException(nameof(graphicField.FieldRect), "Property is required for class GraphicField.");

            if (graphicField.FieldName == null)
                throw new ArgumentNullException(nameof(graphicField.FieldName), "Property is required for class GraphicField.");

            if (graphicField.Image == null)
                throw new ArgumentNullException(nameof(graphicField.Image), "Property is required for class GraphicField.");

            writer.WritePropertyName("FieldRect");
            JsonSerializer.Serialize(writer, graphicField.FieldRect, jsonSerializerOptions);
            var fieldTypeRawValue = GraphicFieldTypeValueConverter.ToJsonValue(graphicField.FieldType);
            writer.WriteNumber("FieldType", fieldTypeRawValue);

            writer.WriteString("FieldName", graphicField.FieldName);

            writer.WritePropertyName("image");
            JsonSerializer.Serialize(writer, graphicField.Image, jsonSerializerOptions);
        }
    }
}
