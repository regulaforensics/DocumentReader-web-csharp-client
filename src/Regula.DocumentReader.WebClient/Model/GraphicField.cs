/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.6.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// GraphicField
    /// </summary>
    [DataContract]
    public partial class GraphicField :  IEquatable<GraphicField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphicField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GraphicField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphicField" /> class.
        /// </summary>
        /// <param name="fieldType">fieldType (required).</param>
        /// <param name="image">image (required).</param>
        /// <param name="fieldRect">fieldRect.</param>
        /// <param name="rFIDOriginDG">Source data group file. Only for Result.RFID_GRAPHICS result..</param>
        /// <param name="rFIDOriginDGTag">Index of the source record of the image with biometric information in the information data group. Only for Result.RFID_GRAPHICS result..</param>
        /// <param name="rFIDOriginTagEntry">Index of the template in the record with biometric data. Only for Result.RFID_GRAPHICS result..</param>
        /// <param name="rFIDOriginEntryView">Index of the variant of the biometric data template. Only for Result.RFID_GRAPHICS result..</param>
        public GraphicField(int fieldType = default(int), ImageData image = default(ImageData), RectangleCoordinates fieldRect = default(RectangleCoordinates), int rFIDOriginDG = default(int), int rFIDOriginDGTag = default(int), int rFIDOriginTagEntry = default(int), int rFIDOriginEntryView = default(int))
        {
            // to ensure "fieldType" is required (not null)
            if (fieldType == null)
            {
                throw new InvalidDataException("fieldType is a required property for GraphicField and cannot be null");
            }
            else
            {
                this.FieldType = fieldType;
            }
            
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new InvalidDataException("image is a required property for GraphicField and cannot be null");
            }
            else
            {
                this.Image = image;
            }
            
            this.FieldRect = fieldRect;
            this.RFIDOriginDG = rFIDOriginDG;
            this.RFIDOriginDGTag = rFIDOriginDGTag;
            this.RFIDOriginTagEntry = rFIDOriginTagEntry;
            this.RFIDOriginEntryView = rFIDOriginEntryView;
        }
        
        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name="FieldType", EmitDefaultValue=true)]
        public int FieldType { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=true)]
        public ImageData Image { get; set; }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [DataMember(Name="FieldRect", EmitDefaultValue=false)]
        public RectangleCoordinates FieldRect { get; set; }

        /// <summary>
        /// Source data group file. Only for Result.RFID_GRAPHICS result.
        /// </summary>
        /// <value>Source data group file. Only for Result.RFID_GRAPHICS result.</value>
        [DataMember(Name="RFID_OriginDG", EmitDefaultValue=false)]
        public int RFIDOriginDG { get; set; }

        /// <summary>
        /// Index of the source record of the image with biometric information in the information data group. Only for Result.RFID_GRAPHICS result.
        /// </summary>
        /// <value>Index of the source record of the image with biometric information in the information data group. Only for Result.RFID_GRAPHICS result.</value>
        [DataMember(Name="RFID_OriginDGTag", EmitDefaultValue=false)]
        public int RFIDOriginDGTag { get; set; }

        /// <summary>
        /// Index of the template in the record with biometric data. Only for Result.RFID_GRAPHICS result.
        /// </summary>
        /// <value>Index of the template in the record with biometric data. Only for Result.RFID_GRAPHICS result.</value>
        [DataMember(Name="RFID_OriginTagEntry", EmitDefaultValue=false)]
        public int RFIDOriginTagEntry { get; set; }

        /// <summary>
        /// Index of the variant of the biometric data template. Only for Result.RFID_GRAPHICS result.
        /// </summary>
        /// <value>Index of the variant of the biometric data template. Only for Result.RFID_GRAPHICS result.</value>
        [DataMember(Name="RFID_OriginEntryView", EmitDefaultValue=false)]
        public int RFIDOriginEntryView { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GraphicField {\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  RFIDOriginDG: ").Append(RFIDOriginDG).Append("\n");
            sb.Append("  RFIDOriginDGTag: ").Append(RFIDOriginDGTag).Append("\n");
            sb.Append("  RFIDOriginTagEntry: ").Append(RFIDOriginTagEntry).Append("\n");
            sb.Append("  RFIDOriginEntryView: ").Append(RFIDOriginEntryView).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GraphicField);
        }

        /// <summary>
        /// Returns true if GraphicField instances are equal
        /// </summary>
        /// <param name="input">Instance of GraphicField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GraphicField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.FieldRect == input.FieldRect ||
                    (this.FieldRect != null &&
                    this.FieldRect.Equals(input.FieldRect))
                ) && 
                (
                    this.RFIDOriginDG == input.RFIDOriginDG ||
                    (this.RFIDOriginDG != null &&
                    this.RFIDOriginDG.Equals(input.RFIDOriginDG))
                ) && 
                (
                    this.RFIDOriginDGTag == input.RFIDOriginDGTag ||
                    (this.RFIDOriginDGTag != null &&
                    this.RFIDOriginDGTag.Equals(input.RFIDOriginDGTag))
                ) && 
                (
                    this.RFIDOriginTagEntry == input.RFIDOriginTagEntry ||
                    (this.RFIDOriginTagEntry != null &&
                    this.RFIDOriginTagEntry.Equals(input.RFIDOriginTagEntry))
                ) && 
                (
                    this.RFIDOriginEntryView == input.RFIDOriginEntryView ||
                    (this.RFIDOriginEntryView != null &&
                    this.RFIDOriginEntryView.Equals(input.RFIDOriginEntryView))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldType != null)
                    hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.FieldRect != null)
                    hashCode = hashCode * 59 + this.FieldRect.GetHashCode();
                if (this.RFIDOriginDG != null)
                    hashCode = hashCode * 59 + this.RFIDOriginDG.GetHashCode();
                if (this.RFIDOriginDGTag != null)
                    hashCode = hashCode * 59 + this.RFIDOriginDGTag.GetHashCode();
                if (this.RFIDOriginTagEntry != null)
                    hashCode = hashCode * 59 + this.RFIDOriginTagEntry.GetHashCode();
                if (this.RFIDOriginEntryView != null)
                    hashCode = hashCode * 59 + this.RFIDOriginEntryView.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
