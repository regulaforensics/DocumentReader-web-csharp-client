/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Container for extracted text fields. Fields are identified by type and language
    /// </summary>
    [DataContract]
    public partial class TBinaryData :  IEquatable<TBinaryData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TBinaryData" /> class.
        /// </summary>
        /// <param name="fieldType">fieldType.</param>
        /// <param name="fieldName">fieldName.</param>
        /// <param name="bufLength">bufLength.</param>
        /// <param name="buffer">buffer.</param>
        public TBinaryData(int fieldType = default(int), string fieldName = default(string), int bufLength = default(int), byte[] buffer = default(byte[]))
        {
            this.FieldType = fieldType;
            this.FieldName = fieldName;
            this.BufLength = bufLength;
            this.Buffer = buffer;
        }
        
        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name="FieldType", EmitDefaultValue=false)]
        public int FieldType { get; set; }

        /// <summary>
        /// Gets or Sets FieldName
        /// </summary>
        [DataMember(Name="FieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or Sets BufLength
        /// </summary>
        [DataMember(Name="Buf_Length", EmitDefaultValue=false)]
        public int BufLength { get; set; }

        /// <summary>
        /// Gets or Sets Buffer
        /// </summary>
        [DataMember(Name="Buffer", EmitDefaultValue=false)]
        public byte[] Buffer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TBinaryData {\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  BufLength: ").Append(BufLength).Append("\n");
            sb.Append("  Buffer: ").Append(Buffer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TBinaryData);
        }

        /// <summary>
        /// Returns true if TBinaryData instances are equal
        /// </summary>
        /// <param name="input">Instance of TBinaryData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TBinaryData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.BufLength == input.BufLength ||
                    (this.BufLength != null &&
                    this.BufLength.Equals(input.BufLength))
                ) && 
                (
                    this.Buffer == input.Buffer ||
                    (this.Buffer != null &&
                    this.Buffer.Equals(input.Buffer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldType != null)
                    hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.BufLength != null)
                    hashCode = hashCode * 59 + this.BufLength.GetHashCode();
                if (this.Buffer != null)
                    hashCode = hashCode * 59 + this.Buffer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
