// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the results of work with the SDK within the context of the current communication session with electronic document
    /// </summary>
    public partial class RfidSessionData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidSessionData" /> class.
        /// </summary>
        /// <param name="applications">List of containers to store information about the involved applications of electronic document</param>
        /// <param name="accessControls">List of containers to store information about the supported procedures of authentication and secure data access within the context of the session</param>
        /// <param name="cardProperties">cardProperties</param>
        /// <param name="extLeSupport">extLeSupport</param>
        /// <param name="processTime">Time of processing, milliseconds</param>
        /// <param name="rootFiles">List of containers to store information about the read files of the root Master File</param>
        /// <param name="totalBytesSent">Total number of bytes transmitted to the RFID-chip during the whole session</param>
        /// <param name="totalBytesReceived">Total number of bytes received from the RFID-chip during the whole session</param>
        /// <param name="sessionKey">sessionKey</param>
        /// <param name="sessionTerminal">sessionTerminal</param>
        /// <param name="sessionProcedure">sessionProcedure</param>
        /// <param name="securityObjects">List of containers to store information about the detected document security objects</param>
        /// <param name="virtualMode">Sign of virtual session when working with loaded data from a previous communication session with the electronic document</param>
        /// <param name="sDKVersion">Text SDKVersion value in format A.B (e.g. 3.1)</param>
        /// <param name="driverVersion">Text DriverVersion value in format A.B.C.D (e.g. 6.2.5.4)</param>
        /// <param name="firmwareVersion">Text FirmwareVersion value in format A.B (e.g. 5.19)</param>
        /// <param name="status">status</param>
        [JsonConstructor]
        public RfidSessionData(List<RfidApplication> applications, List<RfidAccessControlInfo> accessControls, RfidCardPropertiesExt cardProperties, RFIDErrorCodes extLeSupport, decimal processTime, List<Object> rootFiles, decimal totalBytesSent, decimal totalBytesReceived, RfidAccessKey sessionKey, RfidTerminal sessionTerminal, RfidAuthenticationProcedureType sessionProcedure, List<RfidSecurityObject> securityObjects, Option<string?> virtualMode = default, Option<string?> sDKVersion = default, Option<string?> driverVersion = default, Option<string?> firmwareVersion = default, Option<CheckResult?> status = default)
        {
            Applications = applications;
            AccessControls = accessControls;
            CardProperties = cardProperties;
            ExtLeSupport = extLeSupport;
            ProcessTime = processTime;
            RootFiles = rootFiles;
            TotalBytesSent = totalBytesSent;
            TotalBytesReceived = totalBytesReceived;
            SessionKey = sessionKey;
            SessionTerminal = sessionTerminal;
            SessionProcedure = sessionProcedure;
            SecurityObjects = securityObjects;
            VirtualModeOption = virtualMode;
            SDKVersionOption = sDKVersion;
            DriverVersionOption = driverVersion;
            FirmwareVersionOption = firmwareVersion;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ExtLeSupport
        /// </summary>
        [JsonPropertyName("ExtLeSupport")]
        public RFIDErrorCodes ExtLeSupport { get; set; }

        /// <summary>
        /// Gets or Sets SessionProcedure
        /// </summary>
        [JsonPropertyName("Session_procedure")]
        public RfidAuthenticationProcedureType SessionProcedure { get; set; }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CheckResult?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("Status")]
        public CheckResult? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// List of containers to store information about the involved applications of electronic document
        /// </summary>
        /// <value>List of containers to store information about the involved applications of electronic document</value>
        [JsonPropertyName("Applications")]
        public List<RfidApplication> Applications { get; set; }

        /// <summary>
        /// List of containers to store information about the supported procedures of authentication and secure data access within the context of the session
        /// </summary>
        /// <value>List of containers to store information about the supported procedures of authentication and secure data access within the context of the session</value>
        [JsonPropertyName("AccessControls")]
        public List<RfidAccessControlInfo> AccessControls { get; set; }

        /// <summary>
        /// Gets or Sets CardProperties
        /// </summary>
        [JsonPropertyName("CardProperties")]
        public RfidCardPropertiesExt CardProperties { get; set; }

        /// <summary>
        /// Time of processing, milliseconds
        /// </summary>
        /// <value>Time of processing, milliseconds</value>
        [JsonPropertyName("ProcessTime")]
        public decimal ProcessTime { get; set; }

        /// <summary>
        /// List of containers to store information about the read files of the root Master File
        /// </summary>
        /// <value>List of containers to store information about the read files of the root Master File</value>
        [JsonPropertyName("RootFiles")]
        public List<Object> RootFiles { get; set; }

        /// <summary>
        /// Total number of bytes transmitted to the RFID-chip during the whole session
        /// </summary>
        /// <value>Total number of bytes transmitted to the RFID-chip during the whole session</value>
        [JsonPropertyName("TotalBytesSent")]
        public decimal TotalBytesSent { get; set; }

        /// <summary>
        /// Total number of bytes received from the RFID-chip during the whole session
        /// </summary>
        /// <value>Total number of bytes received from the RFID-chip during the whole session</value>
        [JsonPropertyName("TotalBytesReceived")]
        public decimal TotalBytesReceived { get; set; }

        /// <summary>
        /// Gets or Sets SessionKey
        /// </summary>
        [JsonPropertyName("Session_key")]
        public RfidAccessKey SessionKey { get; set; }

        /// <summary>
        /// Gets or Sets SessionTerminal
        /// </summary>
        [JsonPropertyName("Session_terminal")]
        public RfidTerminal SessionTerminal { get; set; }

        /// <summary>
        /// List of containers to store information about the detected document security objects
        /// </summary>
        /// <value>List of containers to store information about the detected document security objects</value>
        [JsonPropertyName("SecurityObjects")]
        public List<RfidSecurityObject> SecurityObjects { get; set; }

        /// <summary>
        /// Used to track the state of VirtualMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VirtualModeOption { get; private set; }

        /// <summary>
        /// Sign of virtual session when working with loaded data from a previous communication session with the electronic document
        /// </summary>
        /// <value>Sign of virtual session when working with loaded data from a previous communication session with the electronic document</value>
        [JsonPropertyName("VirtualMode")]
        public string? VirtualMode { get { return this.VirtualModeOption; } set { this.VirtualModeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SDKVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SDKVersionOption { get; private set; }

        /// <summary>
        /// Text SDKVersion value in format A.B (e.g. 3.1)
        /// </summary>
        /// <value>Text SDKVersion value in format A.B (e.g. 3.1)</value>
        [JsonPropertyName("SDKVersion")]
        public string? SDKVersion { get { return this.SDKVersionOption; } set { this.SDKVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of DriverVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DriverVersionOption { get; private set; }

        /// <summary>
        /// Text DriverVersion value in format A.B.C.D (e.g. 6.2.5.4)
        /// </summary>
        /// <value>Text DriverVersion value in format A.B.C.D (e.g. 6.2.5.4)</value>
        [JsonPropertyName("DriverVersion")]
        public string? DriverVersion { get { return this.DriverVersionOption; } set { this.DriverVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirmwareVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirmwareVersionOption { get; private set; }

        /// <summary>
        /// Text FirmwareVersion value in format A.B (e.g. 5.19)
        /// </summary>
        /// <value>Text FirmwareVersion value in format A.B (e.g. 5.19)</value>
        [JsonPropertyName("FirmwareVersion")]
        public string? FirmwareVersion { get { return this.FirmwareVersionOption; } set { this.FirmwareVersionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidSessionData {\n");
            sb.Append("  Applications: ").Append(Applications).Append("\n");
            sb.Append("  AccessControls: ").Append(AccessControls).Append("\n");
            sb.Append("  CardProperties: ").Append(CardProperties).Append("\n");
            sb.Append("  ExtLeSupport: ").Append(ExtLeSupport).Append("\n");
            sb.Append("  ProcessTime: ").Append(ProcessTime).Append("\n");
            sb.Append("  RootFiles: ").Append(RootFiles).Append("\n");
            sb.Append("  TotalBytesSent: ").Append(TotalBytesSent).Append("\n");
            sb.Append("  TotalBytesReceived: ").Append(TotalBytesReceived).Append("\n");
            sb.Append("  SessionKey: ").Append(SessionKey).Append("\n");
            sb.Append("  SessionTerminal: ").Append(SessionTerminal).Append("\n");
            sb.Append("  SessionProcedure: ").Append(SessionProcedure).Append("\n");
            sb.Append("  SecurityObjects: ").Append(SecurityObjects).Append("\n");
            sb.Append("  VirtualMode: ").Append(VirtualMode).Append("\n");
            sb.Append("  SDKVersion: ").Append(SDKVersion).Append("\n");
            sb.Append("  DriverVersion: ").Append(DriverVersion).Append("\n");
            sb.Append("  FirmwareVersion: ").Append(FirmwareVersion).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidSessionData" />
    /// </summary>
    public class RfidSessionDataJsonConverter : JsonConverter<RfidSessionData>
    {
        /// <summary>
        /// Deserializes json to <see cref="RfidSessionData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RfidSessionData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<RfidApplication>?> applications = default;
            Option<List<RfidAccessControlInfo>?> accessControls = default;
            Option<RfidCardPropertiesExt?> cardProperties = default;
            Option<RFIDErrorCodes?> extLeSupport = default;
            Option<decimal?> processTime = default;
            Option<List<Object>?> rootFiles = default;
            Option<decimal?> totalBytesSent = default;
            Option<decimal?> totalBytesReceived = default;
            Option<RfidAccessKey?> sessionKey = default;
            Option<RfidTerminal?> sessionTerminal = default;
            Option<RfidAuthenticationProcedureType?> sessionProcedure = default;
            Option<List<RfidSecurityObject>?> securityObjects = default;
            Option<string?> virtualMode = default;
            Option<string?> sDKVersion = default;
            Option<string?> driverVersion = default;
            Option<string?> firmwareVersion = default;
            Option<CheckResult?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Applications":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                applications = new Option<List<RfidApplication>?>(JsonSerializer.Deserialize<List<RfidApplication>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "AccessControls":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accessControls = new Option<List<RfidAccessControlInfo>?>(JsonSerializer.Deserialize<List<RfidAccessControlInfo>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "CardProperties":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cardProperties = new Option<RfidCardPropertiesExt?>(JsonSerializer.Deserialize<RfidCardPropertiesExt>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ExtLeSupport":
                            string? extLeSupportRawValue = utf8JsonReader.GetString();
                            if (extLeSupportRawValue != null)
                                extLeSupport = new Option<RFIDErrorCodes?>(RFIDErrorCodesValueConverter.FromStringOrDefault(extLeSupportRawValue));
                            break;
                        case "ProcessTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                processTime = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "RootFiles":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rootFiles = new Option<List<Object>?>(JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "TotalBytesSent":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalBytesSent = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "TotalBytesReceived":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalBytesReceived = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "Session_key":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sessionKey = new Option<RfidAccessKey?>(JsonSerializer.Deserialize<RfidAccessKey>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Session_terminal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sessionTerminal = new Option<RfidTerminal?>(JsonSerializer.Deserialize<RfidTerminal>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Session_procedure":
                            string? sessionProcedureRawValue = utf8JsonReader.GetString();
                            if (sessionProcedureRawValue != null)
                                sessionProcedure = new Option<RfidAuthenticationProcedureType?>(RfidAuthenticationProcedureTypeValueConverter.FromStringOrDefault(sessionProcedureRawValue));
                            break;
                        case "SecurityObjects":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                securityObjects = new Option<List<RfidSecurityObject>?>(JsonSerializer.Deserialize<List<RfidSecurityObject>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "VirtualMode":
                            virtualMode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "SDKVersion":
                            sDKVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "DriverVersion":
                            driverVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "FirmwareVersion":
                            firmwareVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!applications.IsSet)
                throw new ArgumentException("Property is required for class RfidSessionData.", nameof(applications));

            if (!accessControls.IsSet)
                throw new ArgumentException("Property is required for class RfidSessionData.", nameof(accessControls));

            if (!cardProperties.IsSet)
                throw new ArgumentException("Property is required for class RfidSessionData.", nameof(cardProperties));

            if (!extLeSupport.IsSet)
                throw new ArgumentException("Property is required for class RfidSessionData.", nameof(extLeSupport));

            if (!processTime.IsSet)
                throw new ArgumentException("Property is required for class RfidSessionData.", nameof(processTime));

            if (!rootFiles.IsSet)
                throw new ArgumentException("Property is required for class RfidSessionData.", nameof(rootFiles));

            if (!totalBytesSent.IsSet)
                throw new ArgumentException("Property is required for class RfidSessionData.", nameof(totalBytesSent));

            if (!totalBytesReceived.IsSet)
                throw new ArgumentException("Property is required for class RfidSessionData.", nameof(totalBytesReceived));

            if (!sessionKey.IsSet)
                throw new ArgumentException("Property is required for class RfidSessionData.", nameof(sessionKey));

            if (!sessionTerminal.IsSet)
                throw new ArgumentException("Property is required for class RfidSessionData.", nameof(sessionTerminal));

            if (!sessionProcedure.IsSet)
                throw new ArgumentException("Property is required for class RfidSessionData.", nameof(sessionProcedure));

            if (!securityObjects.IsSet)
                throw new ArgumentException("Property is required for class RfidSessionData.", nameof(securityObjects));

            if (applications.IsSet && applications.Value == null)
                throw new ArgumentNullException(nameof(applications), "Property is not nullable for class RfidSessionData.");

            if (accessControls.IsSet && accessControls.Value == null)
                throw new ArgumentNullException(nameof(accessControls), "Property is not nullable for class RfidSessionData.");

            if (cardProperties.IsSet && cardProperties.Value == null)
                throw new ArgumentNullException(nameof(cardProperties), "Property is not nullable for class RfidSessionData.");

            if (extLeSupport.IsSet && extLeSupport.Value == null)
                throw new ArgumentNullException(nameof(extLeSupport), "Property is not nullable for class RfidSessionData.");

            if (processTime.IsSet && processTime.Value == null)
                throw new ArgumentNullException(nameof(processTime), "Property is not nullable for class RfidSessionData.");

            if (rootFiles.IsSet && rootFiles.Value == null)
                throw new ArgumentNullException(nameof(rootFiles), "Property is not nullable for class RfidSessionData.");

            if (totalBytesSent.IsSet && totalBytesSent.Value == null)
                throw new ArgumentNullException(nameof(totalBytesSent), "Property is not nullable for class RfidSessionData.");

            if (totalBytesReceived.IsSet && totalBytesReceived.Value == null)
                throw new ArgumentNullException(nameof(totalBytesReceived), "Property is not nullable for class RfidSessionData.");

            if (sessionKey.IsSet && sessionKey.Value == null)
                throw new ArgumentNullException(nameof(sessionKey), "Property is not nullable for class RfidSessionData.");

            if (sessionTerminal.IsSet && sessionTerminal.Value == null)
                throw new ArgumentNullException(nameof(sessionTerminal), "Property is not nullable for class RfidSessionData.");

            if (sessionProcedure.IsSet && sessionProcedure.Value == null)
                throw new ArgumentNullException(nameof(sessionProcedure), "Property is not nullable for class RfidSessionData.");

            if (securityObjects.IsSet && securityObjects.Value == null)
                throw new ArgumentNullException(nameof(securityObjects), "Property is not nullable for class RfidSessionData.");

            if (virtualMode.IsSet && virtualMode.Value == null)
                throw new ArgumentNullException(nameof(virtualMode), "Property is not nullable for class RfidSessionData.");

            if (sDKVersion.IsSet && sDKVersion.Value == null)
                throw new ArgumentNullException(nameof(sDKVersion), "Property is not nullable for class RfidSessionData.");

            if (driverVersion.IsSet && driverVersion.Value == null)
                throw new ArgumentNullException(nameof(driverVersion), "Property is not nullable for class RfidSessionData.");

            if (firmwareVersion.IsSet && firmwareVersion.Value == null)
                throw new ArgumentNullException(nameof(firmwareVersion), "Property is not nullable for class RfidSessionData.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class RfidSessionData.");

            return new RfidSessionData(applications.Value!, accessControls.Value!, cardProperties.Value!, extLeSupport.Value!.Value!, processTime.Value!.Value!, rootFiles.Value!, totalBytesSent.Value!.Value!, totalBytesReceived.Value!.Value!, sessionKey.Value!, sessionTerminal.Value!, sessionProcedure.Value!.Value!, securityObjects.Value!, virtualMode, sDKVersion, driverVersion, firmwareVersion, status);
        }

        /// <summary>
        /// Serializes a <see cref="RfidSessionData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidSessionData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RfidSessionData rfidSessionData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rfidSessionData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RfidSessionData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidSessionData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RfidSessionData rfidSessionData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rfidSessionData.Applications == null)
                throw new ArgumentNullException(nameof(rfidSessionData.Applications), "Property is required for class RfidSessionData.");

            if (rfidSessionData.AccessControls == null)
                throw new ArgumentNullException(nameof(rfidSessionData.AccessControls), "Property is required for class RfidSessionData.");

            if (rfidSessionData.CardProperties == null)
                throw new ArgumentNullException(nameof(rfidSessionData.CardProperties), "Property is required for class RfidSessionData.");

            if (rfidSessionData.RootFiles == null)
                throw new ArgumentNullException(nameof(rfidSessionData.RootFiles), "Property is required for class RfidSessionData.");

            if (rfidSessionData.SessionKey == null)
                throw new ArgumentNullException(nameof(rfidSessionData.SessionKey), "Property is required for class RfidSessionData.");

            if (rfidSessionData.SessionTerminal == null)
                throw new ArgumentNullException(nameof(rfidSessionData.SessionTerminal), "Property is required for class RfidSessionData.");

            if (rfidSessionData.SecurityObjects == null)
                throw new ArgumentNullException(nameof(rfidSessionData.SecurityObjects), "Property is required for class RfidSessionData.");

            if (rfidSessionData.VirtualModeOption.IsSet && rfidSessionData.VirtualMode == null)
                throw new ArgumentNullException(nameof(rfidSessionData.VirtualMode), "Property is required for class RfidSessionData.");

            if (rfidSessionData.SDKVersionOption.IsSet && rfidSessionData.SDKVersion == null)
                throw new ArgumentNullException(nameof(rfidSessionData.SDKVersion), "Property is required for class RfidSessionData.");

            if (rfidSessionData.DriverVersionOption.IsSet && rfidSessionData.DriverVersion == null)
                throw new ArgumentNullException(nameof(rfidSessionData.DriverVersion), "Property is required for class RfidSessionData.");

            if (rfidSessionData.FirmwareVersionOption.IsSet && rfidSessionData.FirmwareVersion == null)
                throw new ArgumentNullException(nameof(rfidSessionData.FirmwareVersion), "Property is required for class RfidSessionData.");

            writer.WritePropertyName("Applications");
            JsonSerializer.Serialize(writer, rfidSessionData.Applications, jsonSerializerOptions);
            writer.WritePropertyName("AccessControls");
            JsonSerializer.Serialize(writer, rfidSessionData.AccessControls, jsonSerializerOptions);
            writer.WritePropertyName("CardProperties");
            JsonSerializer.Serialize(writer, rfidSessionData.CardProperties, jsonSerializerOptions);
            var extLeSupportRawValue = RFIDErrorCodesValueConverter.ToJsonValue(rfidSessionData.ExtLeSupport);
            writer.WriteNumber("ExtLeSupport", extLeSupportRawValue);

            writer.WriteNumber("ProcessTime", rfidSessionData.ProcessTime);

            writer.WritePropertyName("RootFiles");
            JsonSerializer.Serialize(writer, rfidSessionData.RootFiles, jsonSerializerOptions);
            writer.WriteNumber("TotalBytesSent", rfidSessionData.TotalBytesSent);

            writer.WriteNumber("TotalBytesReceived", rfidSessionData.TotalBytesReceived);

            writer.WritePropertyName("Session_key");
            JsonSerializer.Serialize(writer, rfidSessionData.SessionKey, jsonSerializerOptions);
            writer.WritePropertyName("Session_terminal");
            JsonSerializer.Serialize(writer, rfidSessionData.SessionTerminal, jsonSerializerOptions);
            var sessionProcedureRawValue = RfidAuthenticationProcedureTypeValueConverter.ToJsonValue(rfidSessionData.SessionProcedure);
            writer.WriteNumber("Session_procedure", sessionProcedureRawValue);

            writer.WritePropertyName("SecurityObjects");
            JsonSerializer.Serialize(writer, rfidSessionData.SecurityObjects, jsonSerializerOptions);
            if (rfidSessionData.VirtualModeOption.IsSet)
                writer.WriteString("VirtualMode", rfidSessionData.VirtualMode);

            if (rfidSessionData.SDKVersionOption.IsSet)
                writer.WriteString("SDKVersion", rfidSessionData.SDKVersion);

            if (rfidSessionData.DriverVersionOption.IsSet)
                writer.WriteString("DriverVersion", rfidSessionData.DriverVersion);

            if (rfidSessionData.FirmwareVersionOption.IsSet)
                writer.WriteString("FirmwareVersion", rfidSessionData.FirmwareVersion);

            if (rfidSessionData.StatusOption.IsSet)
            {
                var statusRawValue = CheckResultValueConverter.ToJsonValue(rfidSessionData.Status!.Value);
                writer.WriteNumber("Status", statusRawValue);
            }
        }
    }
}
