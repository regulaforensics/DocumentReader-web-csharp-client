/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the results of work with the SDK within the context of the current communication session with electronic document
    /// </summary>
    [DataContract(Name = "RfidSessionData")]
    public partial class RfidSessionData : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ExtLeSupport
        /// </summary>
        [DataMember(Name = "ExtLeSupport", IsRequired = true, EmitDefaultValue = true)]
        public RFIDErrorCodes ExtLeSupport { get; set; }

        /// <summary>
        /// Gets or Sets SessionProcedure
        /// </summary>
        [DataMember(Name = "Session_procedure", IsRequired = true, EmitDefaultValue = true)]
        public RfidAuthenticationProcedureType SessionProcedure { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public CheckResult? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidSessionData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidSessionData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidSessionData" /> class.
        /// </summary>
        /// <param name="virtualMode">Sign of virtual session when working with loaded data from a previous communication session with the electronic document.</param>
        /// <param name="sDKVersion">Text SDKVersion value in format A.B (e.g. 3.1).</param>
        /// <param name="driverVersion">Text DriverVersion value in format A.B.C.D (e.g. 6.2.5.4).</param>
        /// <param name="firmwareVersion">Text FirmwareVersion value in format A.B (e.g. 5.19).</param>
        /// <param name="applications">List of containers to store information about the involved applications of electronic document (required).</param>
        /// <param name="accessControls">List of containers to store information about the supported procedures of authentication and secure data access within the context of the session (required).</param>
        /// <param name="cardProperties">cardProperties (required).</param>
        /// <param name="extLeSupport">extLeSupport (required).</param>
        /// <param name="processTime">Time of processing, milliseconds (required).</param>
        /// <param name="rootFiles">List of containers to store information about the read files of the root Master File (required).</param>
        /// <param name="totalBytesSent">Total number of bytes transmitted to the RFID-chip during the whole session (required).</param>
        /// <param name="totalBytesReceived">Total number of bytes received from the RFID-chip during the whole session (required).</param>
        /// <param name="sessionKey">sessionKey (required).</param>
        /// <param name="sessionTerminal">sessionTerminal (required).</param>
        /// <param name="sessionProcedure">sessionProcedure (required).</param>
        /// <param name="securityObjects">List of containers to store information about the detected document security objects (required).</param>
        /// <param name="status">status.</param>
        public RfidSessionData(string virtualMode = default(string), string sDKVersion = default(string), string driverVersion = default(string), string firmwareVersion = default(string), List<RfidApplication> applications = default(List<RfidApplication>), List<RfidAccessControlInfo> accessControls = default(List<RfidAccessControlInfo>), RfidCardPropertiesExt cardProperties = default(RfidCardPropertiesExt), RFIDErrorCodes extLeSupport = default(RFIDErrorCodes), decimal processTime = default(decimal), List<Object> rootFiles = default(List<Object>), decimal totalBytesSent = default(decimal), decimal totalBytesReceived = default(decimal), RfidAccessKey sessionKey = default(RfidAccessKey), RfidTerminal sessionTerminal = default(RfidTerminal), RfidAuthenticationProcedureType sessionProcedure = default(RfidAuthenticationProcedureType), List<RfidSecurityObject> securityObjects = default(List<RfidSecurityObject>), CheckResult? status = default(CheckResult?))
        {
            // to ensure "applications" is required (not null)
            if (applications == null)
            {
                throw new ArgumentNullException("applications is a required property for RfidSessionData and cannot be null");
            }
            this.Applications = applications;
            // to ensure "accessControls" is required (not null)
            if (accessControls == null)
            {
                throw new ArgumentNullException("accessControls is a required property for RfidSessionData and cannot be null");
            }
            this.AccessControls = accessControls;
            // to ensure "cardProperties" is required (not null)
            if (cardProperties == null)
            {
                throw new ArgumentNullException("cardProperties is a required property for RfidSessionData and cannot be null");
            }
            this.CardProperties = cardProperties;
            this.ExtLeSupport = extLeSupport;
            this.ProcessTime = processTime;
            // to ensure "rootFiles" is required (not null)
            if (rootFiles == null)
            {
                throw new ArgumentNullException("rootFiles is a required property for RfidSessionData and cannot be null");
            }
            this.RootFiles = rootFiles;
            this.TotalBytesSent = totalBytesSent;
            this.TotalBytesReceived = totalBytesReceived;
            // to ensure "sessionKey" is required (not null)
            if (sessionKey == null)
            {
                throw new ArgumentNullException("sessionKey is a required property for RfidSessionData and cannot be null");
            }
            this.SessionKey = sessionKey;
            // to ensure "sessionTerminal" is required (not null)
            if (sessionTerminal == null)
            {
                throw new ArgumentNullException("sessionTerminal is a required property for RfidSessionData and cannot be null");
            }
            this.SessionTerminal = sessionTerminal;
            this.SessionProcedure = sessionProcedure;
            // to ensure "securityObjects" is required (not null)
            if (securityObjects == null)
            {
                throw new ArgumentNullException("securityObjects is a required property for RfidSessionData and cannot be null");
            }
            this.SecurityObjects = securityObjects;
            this.VirtualMode = virtualMode;
            this.SDKVersion = sDKVersion;
            this.DriverVersion = driverVersion;
            this.FirmwareVersion = firmwareVersion;
            this.Status = status;
        }

        /// <summary>
        /// Sign of virtual session when working with loaded data from a previous communication session with the electronic document
        /// </summary>
        /// <value>Sign of virtual session when working with loaded data from a previous communication session with the electronic document</value>
        [DataMember(Name = "VirtualMode", EmitDefaultValue = false)]
        public string VirtualMode { get; set; }

        /// <summary>
        /// Text SDKVersion value in format A.B (e.g. 3.1)
        /// </summary>
        /// <value>Text SDKVersion value in format A.B (e.g. 3.1)</value>
        [DataMember(Name = "SDKVersion", EmitDefaultValue = false)]
        public string SDKVersion { get; set; }

        /// <summary>
        /// Text DriverVersion value in format A.B.C.D (e.g. 6.2.5.4)
        /// </summary>
        /// <value>Text DriverVersion value in format A.B.C.D (e.g. 6.2.5.4)</value>
        [DataMember(Name = "DriverVersion", EmitDefaultValue = false)]
        public string DriverVersion { get; set; }

        /// <summary>
        /// Text FirmwareVersion value in format A.B (e.g. 5.19)
        /// </summary>
        /// <value>Text FirmwareVersion value in format A.B (e.g. 5.19)</value>
        [DataMember(Name = "FirmwareVersion", EmitDefaultValue = false)]
        public string FirmwareVersion { get; set; }

        /// <summary>
        /// List of containers to store information about the involved applications of electronic document
        /// </summary>
        /// <value>List of containers to store information about the involved applications of electronic document</value>
        [DataMember(Name = "Applications", IsRequired = true, EmitDefaultValue = true)]
        public List<RfidApplication> Applications { get; set; }

        /// <summary>
        /// List of containers to store information about the supported procedures of authentication and secure data access within the context of the session
        /// </summary>
        /// <value>List of containers to store information about the supported procedures of authentication and secure data access within the context of the session</value>
        [DataMember(Name = "AccessControls", IsRequired = true, EmitDefaultValue = true)]
        public List<RfidAccessControlInfo> AccessControls { get; set; }

        /// <summary>
        /// Gets or Sets CardProperties
        /// </summary>
        [DataMember(Name = "CardProperties", IsRequired = true, EmitDefaultValue = true)]
        public RfidCardPropertiesExt CardProperties { get; set; }

        /// <summary>
        /// Time of processing, milliseconds
        /// </summary>
        /// <value>Time of processing, milliseconds</value>
        [DataMember(Name = "ProcessTime", IsRequired = true, EmitDefaultValue = true)]
        public decimal ProcessTime { get; set; }

        /// <summary>
        /// List of containers to store information about the read files of the root Master File
        /// </summary>
        /// <value>List of containers to store information about the read files of the root Master File</value>
        [DataMember(Name = "RootFiles", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> RootFiles { get; set; }

        /// <summary>
        /// Total number of bytes transmitted to the RFID-chip during the whole session
        /// </summary>
        /// <value>Total number of bytes transmitted to the RFID-chip during the whole session</value>
        [DataMember(Name = "TotalBytesSent", IsRequired = true, EmitDefaultValue = true)]
        public decimal TotalBytesSent { get; set; }

        /// <summary>
        /// Total number of bytes received from the RFID-chip during the whole session
        /// </summary>
        /// <value>Total number of bytes received from the RFID-chip during the whole session</value>
        [DataMember(Name = "TotalBytesReceived", IsRequired = true, EmitDefaultValue = true)]
        public decimal TotalBytesReceived { get; set; }

        /// <summary>
        /// Gets or Sets SessionKey
        /// </summary>
        [DataMember(Name = "Session_key", IsRequired = true, EmitDefaultValue = true)]
        public RfidAccessKey SessionKey { get; set; }

        /// <summary>
        /// Gets or Sets SessionTerminal
        /// </summary>
        [DataMember(Name = "Session_terminal", IsRequired = true, EmitDefaultValue = true)]
        public RfidTerminal SessionTerminal { get; set; }

        /// <summary>
        /// List of containers to store information about the detected document security objects
        /// </summary>
        /// <value>List of containers to store information about the detected document security objects</value>
        [DataMember(Name = "SecurityObjects", IsRequired = true, EmitDefaultValue = true)]
        public List<RfidSecurityObject> SecurityObjects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RfidSessionData {\n");
            sb.Append("  VirtualMode: ").Append(VirtualMode).Append("\n");
            sb.Append("  SDKVersion: ").Append(SDKVersion).Append("\n");
            sb.Append("  DriverVersion: ").Append(DriverVersion).Append("\n");
            sb.Append("  FirmwareVersion: ").Append(FirmwareVersion).Append("\n");
            sb.Append("  Applications: ").Append(Applications).Append("\n");
            sb.Append("  AccessControls: ").Append(AccessControls).Append("\n");
            sb.Append("  CardProperties: ").Append(CardProperties).Append("\n");
            sb.Append("  ExtLeSupport: ").Append(ExtLeSupport).Append("\n");
            sb.Append("  ProcessTime: ").Append(ProcessTime).Append("\n");
            sb.Append("  RootFiles: ").Append(RootFiles).Append("\n");
            sb.Append("  TotalBytesSent: ").Append(TotalBytesSent).Append("\n");
            sb.Append("  TotalBytesReceived: ").Append(TotalBytesReceived).Append("\n");
            sb.Append("  SessionKey: ").Append(SessionKey).Append("\n");
            sb.Append("  SessionTerminal: ").Append(SessionTerminal).Append("\n");
            sb.Append("  SessionProcedure: ").Append(SessionProcedure).Append("\n");
            sb.Append("  SecurityObjects: ").Append(SecurityObjects).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
