/* 
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Structure is used to describe the results of work with the SDK within the context of the current communication session with electronic document
    /// </summary>
    [DataContract]
    public partial class RfidSessionData :  IEquatable<RfidSessionData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidSessionData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RfidSessionData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RfidSessionData" /> class.
        /// </summary>
        /// <param name="virtualMode">Sign of virtual session when working with loaded data from a previous communication session with the electronic document (required).</param>
        /// <param name="sDKVersion">Text SDKVersion value in format A.B (e.g. 3.1) (required).</param>
        /// <param name="driverVersion">Text DriverVersion value in format A.B.C.D (e.g. 6.2.5.4) (required).</param>
        /// <param name="firmwareVersion">Text FirmwareVersion value in format A.B (e.g. 5.19) (required).</param>
        /// <param name="applications">List of containers to store information about the involved applications of electronic document (required).</param>
        /// <param name="accessControls">List of containers to store information about the supported procedures of authentication and secure data access within the context of the session (required).</param>
        /// <param name="cardProperties">cardProperties (required).</param>
        /// <param name="extLeSupport">extLeSupport (required).</param>
        /// <param name="processTime">Time of processing, milliseconds (required).</param>
        /// <param name="rootFiles">List of containers to store information about the read files of the root Master File (required).</param>
        /// <param name="totalBytesSent">Total number of bytes transmitted to the RFID-chip during the whole session (required).</param>
        /// <param name="totalBytesReceived">Total number of bytes received from the RFID-chip during the whole session (required).</param>
        /// <param name="sessionKey">sessionKey (required).</param>
        /// <param name="sessionTerminal">sessionTerminal (required).</param>
        /// <param name="sessionProcedure">sessionProcedure (required).</param>
        /// <param name="securityObjects">List of containers to store information about the detected document security objects (required).</param>
        public RfidSessionData(Object virtualMode = default(Object), Object sDKVersion = default(Object), Object driverVersion = default(Object), Object firmwareVersion = default(Object), List<RfidApplication> applications = default(List<RfidApplication>), List<RfidAccessControlInfo> accessControls = default(List<RfidAccessControlInfo>), RfidCardPropertiesExt cardProperties = default(RfidCardPropertiesExt), Integer extLeSupport = default(Integer), decimal processTime = default(decimal), List<Object> rootFiles = default(List<Object>), decimal totalBytesSent = default(decimal), decimal totalBytesReceived = default(decimal), RfidAccessKey sessionKey = default(RfidAccessKey), RfidTerminal sessionTerminal = default(RfidTerminal), Integer sessionProcedure = default(Integer), List<RfidSecurityObject> securityObjects = default(List<RfidSecurityObject>))
        {
            // to ensure "virtualMode" is required (not null)
            if (virtualMode == null)
            {
                throw new InvalidDataException("virtualMode is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.VirtualMode = virtualMode;
            }
            
            this.VirtualMode = virtualMode;
            // to ensure "sDKVersion" is required (not null)
            if (sDKVersion == null)
            {
                throw new InvalidDataException("sDKVersion is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.SDKVersion = sDKVersion;
            }
            
            this.SDKVersion = sDKVersion;
            // to ensure "driverVersion" is required (not null)
            if (driverVersion == null)
            {
                throw new InvalidDataException("driverVersion is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.DriverVersion = driverVersion;
            }
            
            this.DriverVersion = driverVersion;
            // to ensure "firmwareVersion" is required (not null)
            if (firmwareVersion == null)
            {
                throw new InvalidDataException("firmwareVersion is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.FirmwareVersion = firmwareVersion;
            }
            
            this.FirmwareVersion = firmwareVersion;
            // to ensure "applications" is required (not null)
            if (applications == null)
            {
                throw new InvalidDataException("applications is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.Applications = applications;
            }
            
            // to ensure "accessControls" is required (not null)
            if (accessControls == null)
            {
                throw new InvalidDataException("accessControls is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.AccessControls = accessControls;
            }
            
            // to ensure "cardProperties" is required (not null)
            if (cardProperties == null)
            {
                throw new InvalidDataException("cardProperties is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.CardProperties = cardProperties;
            }
            
            // to ensure "extLeSupport" is required (not null)
            if (extLeSupport == null)
            {
                throw new InvalidDataException("extLeSupport is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.ExtLeSupport = extLeSupport;
            }
            
            // to ensure "processTime" is required (not null)
            if (processTime == null)
            {
                throw new InvalidDataException("processTime is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.ProcessTime = processTime;
            }
            
            // to ensure "rootFiles" is required (not null)
            if (rootFiles == null)
            {
                throw new InvalidDataException("rootFiles is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.RootFiles = rootFiles;
            }
            
            // to ensure "totalBytesSent" is required (not null)
            if (totalBytesSent == null)
            {
                throw new InvalidDataException("totalBytesSent is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.TotalBytesSent = totalBytesSent;
            }
            
            // to ensure "totalBytesReceived" is required (not null)
            if (totalBytesReceived == null)
            {
                throw new InvalidDataException("totalBytesReceived is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.TotalBytesReceived = totalBytesReceived;
            }
            
            // to ensure "sessionKey" is required (not null)
            if (sessionKey == null)
            {
                throw new InvalidDataException("sessionKey is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.SessionKey = sessionKey;
            }
            
            // to ensure "sessionTerminal" is required (not null)
            if (sessionTerminal == null)
            {
                throw new InvalidDataException("sessionTerminal is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.SessionTerminal = sessionTerminal;
            }
            
            // to ensure "sessionProcedure" is required (not null)
            if (sessionProcedure == null)
            {
                throw new InvalidDataException("sessionProcedure is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.SessionProcedure = sessionProcedure;
            }
            
            // to ensure "securityObjects" is required (not null)
            if (securityObjects == null)
            {
                throw new InvalidDataException("securityObjects is a required property for RfidSessionData and cannot be null");
            }
            else
            {
                this.SecurityObjects = securityObjects;
            }
            
        }
        
        /// <summary>
        /// Sign of virtual session when working with loaded data from a previous communication session with the electronic document
        /// </summary>
        /// <value>Sign of virtual session when working with loaded data from a previous communication session with the electronic document</value>
        [DataMember(Name="VirtualMode", EmitDefaultValue=true)]
        public Object VirtualMode { get; set; }

        /// <summary>
        /// Text SDKVersion value in format A.B (e.g. 3.1)
        /// </summary>
        /// <value>Text SDKVersion value in format A.B (e.g. 3.1)</value>
        [DataMember(Name="SDKVersion", EmitDefaultValue=true)]
        public Object SDKVersion { get; set; }

        /// <summary>
        /// Text DriverVersion value in format A.B.C.D (e.g. 6.2.5.4)
        /// </summary>
        /// <value>Text DriverVersion value in format A.B.C.D (e.g. 6.2.5.4)</value>
        [DataMember(Name="DriverVersion", EmitDefaultValue=true)]
        public Object DriverVersion { get; set; }

        /// <summary>
        /// Text FirmwareVersion value in format A.B (e.g. 5.19)
        /// </summary>
        /// <value>Text FirmwareVersion value in format A.B (e.g. 5.19)</value>
        [DataMember(Name="FirmwareVersion", EmitDefaultValue=true)]
        public Object FirmwareVersion { get; set; }

        /// <summary>
        /// List of containers to store information about the involved applications of electronic document
        /// </summary>
        /// <value>List of containers to store information about the involved applications of electronic document</value>
        [DataMember(Name="Applications", EmitDefaultValue=true)]
        public List<RfidApplication> Applications { get; set; }

        /// <summary>
        /// List of containers to store information about the supported procedures of authentication and secure data access within the context of the session
        /// </summary>
        /// <value>List of containers to store information about the supported procedures of authentication and secure data access within the context of the session</value>
        [DataMember(Name="AccessControls", EmitDefaultValue=true)]
        public List<RfidAccessControlInfo> AccessControls { get; set; }

        /// <summary>
        /// Gets or Sets CardProperties
        /// </summary>
        [DataMember(Name="CardProperties", EmitDefaultValue=true)]
        public RfidCardPropertiesExt CardProperties { get; set; }

        /// <summary>
        /// Gets or Sets ExtLeSupport
        /// </summary>
        [DataMember(Name="ExtLeSupport", EmitDefaultValue=true)]
        public Integer ExtLeSupport { get; set; }

        /// <summary>
        /// Time of processing, milliseconds
        /// </summary>
        /// <value>Time of processing, milliseconds</value>
        [DataMember(Name="ProcessTime", EmitDefaultValue=true)]
        public decimal ProcessTime { get; set; }

        /// <summary>
        /// List of containers to store information about the read files of the root Master File
        /// </summary>
        /// <value>List of containers to store information about the read files of the root Master File</value>
        [DataMember(Name="RootFiles", EmitDefaultValue=true)]
        public List<Object> RootFiles { get; set; }

        /// <summary>
        /// Total number of bytes transmitted to the RFID-chip during the whole session
        /// </summary>
        /// <value>Total number of bytes transmitted to the RFID-chip during the whole session</value>
        [DataMember(Name="TotalBytesSent", EmitDefaultValue=true)]
        public decimal TotalBytesSent { get; set; }

        /// <summary>
        /// Total number of bytes received from the RFID-chip during the whole session
        /// </summary>
        /// <value>Total number of bytes received from the RFID-chip during the whole session</value>
        [DataMember(Name="TotalBytesReceived", EmitDefaultValue=true)]
        public decimal TotalBytesReceived { get; set; }

        /// <summary>
        /// Gets or Sets SessionKey
        /// </summary>
        [DataMember(Name="Session_key", EmitDefaultValue=true)]
        public RfidAccessKey SessionKey { get; set; }

        /// <summary>
        /// Gets or Sets SessionTerminal
        /// </summary>
        [DataMember(Name="Session_terminal", EmitDefaultValue=true)]
        public RfidTerminal SessionTerminal { get; set; }

        /// <summary>
        /// Gets or Sets SessionProcedure
        /// </summary>
        [DataMember(Name="Session_procedure", EmitDefaultValue=true)]
        public Integer SessionProcedure { get; set; }

        /// <summary>
        /// List of containers to store information about the detected document security objects
        /// </summary>
        /// <value>List of containers to store information about the detected document security objects</value>
        [DataMember(Name="SecurityObjects", EmitDefaultValue=true)]
        public List<RfidSecurityObject> SecurityObjects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RfidSessionData {\n");
            sb.Append("  VirtualMode: ").Append(VirtualMode).Append("\n");
            sb.Append("  SDKVersion: ").Append(SDKVersion).Append("\n");
            sb.Append("  DriverVersion: ").Append(DriverVersion).Append("\n");
            sb.Append("  FirmwareVersion: ").Append(FirmwareVersion).Append("\n");
            sb.Append("  Applications: ").Append(Applications).Append("\n");
            sb.Append("  AccessControls: ").Append(AccessControls).Append("\n");
            sb.Append("  CardProperties: ").Append(CardProperties).Append("\n");
            sb.Append("  ExtLeSupport: ").Append(ExtLeSupport).Append("\n");
            sb.Append("  ProcessTime: ").Append(ProcessTime).Append("\n");
            sb.Append("  RootFiles: ").Append(RootFiles).Append("\n");
            sb.Append("  TotalBytesSent: ").Append(TotalBytesSent).Append("\n");
            sb.Append("  TotalBytesReceived: ").Append(TotalBytesReceived).Append("\n");
            sb.Append("  SessionKey: ").Append(SessionKey).Append("\n");
            sb.Append("  SessionTerminal: ").Append(SessionTerminal).Append("\n");
            sb.Append("  SessionProcedure: ").Append(SessionProcedure).Append("\n");
            sb.Append("  SecurityObjects: ").Append(SecurityObjects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RfidSessionData);
        }

        /// <summary>
        /// Returns true if RfidSessionData instances are equal
        /// </summary>
        /// <param name="input">Instance of RfidSessionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RfidSessionData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VirtualMode == input.VirtualMode ||
                    (this.VirtualMode != null &&
                    this.VirtualMode.Equals(input.VirtualMode))
                ) && 
                (
                    this.SDKVersion == input.SDKVersion ||
                    (this.SDKVersion != null &&
                    this.SDKVersion.Equals(input.SDKVersion))
                ) && 
                (
                    this.DriverVersion == input.DriverVersion ||
                    (this.DriverVersion != null &&
                    this.DriverVersion.Equals(input.DriverVersion))
                ) && 
                (
                    this.FirmwareVersion == input.FirmwareVersion ||
                    (this.FirmwareVersion != null &&
                    this.FirmwareVersion.Equals(input.FirmwareVersion))
                ) && 
                (
                    this.Applications == input.Applications ||
                    this.Applications != null &&
                    input.Applications != null &&
                    this.Applications.SequenceEqual(input.Applications)
                ) && 
                (
                    this.AccessControls == input.AccessControls ||
                    this.AccessControls != null &&
                    input.AccessControls != null &&
                    this.AccessControls.SequenceEqual(input.AccessControls)
                ) && 
                (
                    this.CardProperties == input.CardProperties ||
                    (this.CardProperties != null &&
                    this.CardProperties.Equals(input.CardProperties))
                ) && 
                (
                    this.ExtLeSupport == input.ExtLeSupport ||
                    (this.ExtLeSupport != null &&
                    this.ExtLeSupport.Equals(input.ExtLeSupport))
                ) && 
                (
                    this.ProcessTime == input.ProcessTime ||
                    (this.ProcessTime != null &&
                    this.ProcessTime.Equals(input.ProcessTime))
                ) && 
                (
                    this.RootFiles == input.RootFiles ||
                    this.RootFiles != null &&
                    input.RootFiles != null &&
                    this.RootFiles.SequenceEqual(input.RootFiles)
                ) && 
                (
                    this.TotalBytesSent == input.TotalBytesSent ||
                    (this.TotalBytesSent != null &&
                    this.TotalBytesSent.Equals(input.TotalBytesSent))
                ) && 
                (
                    this.TotalBytesReceived == input.TotalBytesReceived ||
                    (this.TotalBytesReceived != null &&
                    this.TotalBytesReceived.Equals(input.TotalBytesReceived))
                ) && 
                (
                    this.SessionKey == input.SessionKey ||
                    (this.SessionKey != null &&
                    this.SessionKey.Equals(input.SessionKey))
                ) && 
                (
                    this.SessionTerminal == input.SessionTerminal ||
                    (this.SessionTerminal != null &&
                    this.SessionTerminal.Equals(input.SessionTerminal))
                ) && 
                (
                    this.SessionProcedure == input.SessionProcedure ||
                    (this.SessionProcedure != null &&
                    this.SessionProcedure.Equals(input.SessionProcedure))
                ) && 
                (
                    this.SecurityObjects == input.SecurityObjects ||
                    this.SecurityObjects != null &&
                    input.SecurityObjects != null &&
                    this.SecurityObjects.SequenceEqual(input.SecurityObjects)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VirtualMode != null)
                    hashCode = hashCode * 59 + this.VirtualMode.GetHashCode();
                if (this.SDKVersion != null)
                    hashCode = hashCode * 59 + this.SDKVersion.GetHashCode();
                if (this.DriverVersion != null)
                    hashCode = hashCode * 59 + this.DriverVersion.GetHashCode();
                if (this.FirmwareVersion != null)
                    hashCode = hashCode * 59 + this.FirmwareVersion.GetHashCode();
                if (this.Applications != null)
                    hashCode = hashCode * 59 + this.Applications.GetHashCode();
                if (this.AccessControls != null)
                    hashCode = hashCode * 59 + this.AccessControls.GetHashCode();
                if (this.CardProperties != null)
                    hashCode = hashCode * 59 + this.CardProperties.GetHashCode();
                if (this.ExtLeSupport != null)
                    hashCode = hashCode * 59 + this.ExtLeSupport.GetHashCode();
                if (this.ProcessTime != null)
                    hashCode = hashCode * 59 + this.ProcessTime.GetHashCode();
                if (this.RootFiles != null)
                    hashCode = hashCode * 59 + this.RootFiles.GetHashCode();
                if (this.TotalBytesSent != null)
                    hashCode = hashCode * 59 + this.TotalBytesSent.GetHashCode();
                if (this.TotalBytesReceived != null)
                    hashCode = hashCode * 59 + this.TotalBytesReceived.GetHashCode();
                if (this.SessionKey != null)
                    hashCode = hashCode * 59 + this.SessionKey.GetHashCode();
                if (this.SessionTerminal != null)
                    hashCode = hashCode * 59 + this.SessionTerminal.GetHashCode();
                if (this.SessionProcedure != null)
                    hashCode = hashCode * 59 + this.SessionProcedure.GetHashCode();
                if (this.SecurityObjects != null)
                    hashCode = hashCode * 59 + this.SecurityObjects.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
