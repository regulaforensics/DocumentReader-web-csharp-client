/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// list with result objects
    /// </summary>
    [DataContract]
    public partial class ContainerList :  IEquatable<ContainerList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerList" /> class.
        /// </summary>
        [JsonConstructor]
        protected ContainerList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContainerList" /> class.
        /// </summary>
        /// <param name="list">list (required).</param>
        public ContainerList(List<ResultItem> list = default(List<ResultItem>))
        {
            // to ensure "list" is required (not null)
            if (list == null)
            {
                throw new InvalidDataException("list is a required property for ContainerList and cannot be null");
            }
            else
            {
                this.List = list;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets List
        /// </summary>
        [DataMember(Name="List", EmitDefaultValue=true)]
        public List<ResultItem> List { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerList {\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContainerList);
        }

        /// <summary>
        /// Returns true if ContainerList instances are equal
        /// </summary>
        /// <param name="input">Instance of ContainerList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.List == input.List ||
                    this.List != null &&
                    input.List != null &&
                    this.List.SequenceEqual(input.List)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.List != null)
                    hashCode = hashCode * 59 + this.List.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
