// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Enumeration contains the types of barcodes that can be processed
    /// </summary>
    /// <value>Enumeration contains the types of barcodes that can be processed</value>
    public enum InputBarcodeType
    {
        /// <summary>
        /// Enum UNKNOWN for value: bct_unknown
        /// </summary>
        UNKNOWN = 1,

        /// <summary>
        /// Enum CODE128 for value: bct_Code128
        /// </summary>
        CODE128 = 2,

        /// <summary>
        /// Enum CODE39 for value: bct_Code39
        /// </summary>
        CODE39 = 3,

        /// <summary>
        /// Enum EAN8 for value: bct_EAN8
        /// </summary>
        EAN8 = 4,

        /// <summary>
        /// Enum ITF for value: bct_ITF
        /// </summary>
        ITF = 5,

        /// <summary>
        /// Enum PDF417 for value: bct_PDF417
        /// </summary>
        PDF417 = 6,

        /// <summary>
        /// Enum STF for value: bct_STF
        /// </summary>
        STF = 7,

        /// <summary>
        /// Enum MTF for value: bct_MTF
        /// </summary>
        MTF = 8,

        /// <summary>
        /// Enum IATA for value: bct_IATA
        /// </summary>
        IATA = 9,

        /// <summary>
        /// Enum CODABAR for value: bct_CODABAR
        /// </summary>
        CODABAR = 10,

        /// <summary>
        /// Enum UPCA for value: bct_UPCA
        /// </summary>
        UPCA = 11,

        /// <summary>
        /// Enum CODE93 for value: bct_CODE93
        /// </summary>
        CODE93 = 12,

        /// <summary>
        /// Enum UPCE for value: bct_UPCE
        /// </summary>
        UPCE = 13,

        /// <summary>
        /// Enum EAN13 for value: bct_EAN13
        /// </summary>
        EAN13 = 14,

        /// <summary>
        /// Enum QRCODE for value: bct_QRCODE
        /// </summary>
        QRCODE = 15,

        /// <summary>
        /// Enum AZTEC for value: bct_AZTEC
        /// </summary>
        AZTEC = 16,

        /// <summary>
        /// Enum DATAMATRIX for value: bct_DATAMATRIX
        /// </summary>
        DATAMATRIX = 17,

        /// <summary>
        /// Enum ALL_1D for value: bct_ALL_1D
        /// </summary>
        ALL_1D = 18,

        /// <summary>
        /// Enum CODE11 for value: bct_Code11
        /// </summary>
        CODE11 = 19,

        /// <summary>
        /// Enum JABCODE for value: bct_JABCODE
        /// </summary>
        JABCODE = 20
    }

    /// <summary>
    /// Converts <see cref="InputBarcodeType"/> to and from the JSON value
    /// </summary>
    public static class InputBarcodeTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="InputBarcodeType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static InputBarcodeType FromString(string value)
        {
            if (value.Equals("bct_unknown"))
                return InputBarcodeType.UNKNOWN;

            if (value.Equals("bct_Code128"))
                return InputBarcodeType.CODE128;

            if (value.Equals("bct_Code39"))
                return InputBarcodeType.CODE39;

            if (value.Equals("bct_EAN8"))
                return InputBarcodeType.EAN8;

            if (value.Equals("bct_ITF"))
                return InputBarcodeType.ITF;

            if (value.Equals("bct_PDF417"))
                return InputBarcodeType.PDF417;

            if (value.Equals("bct_STF"))
                return InputBarcodeType.STF;

            if (value.Equals("bct_MTF"))
                return InputBarcodeType.MTF;

            if (value.Equals("bct_IATA"))
                return InputBarcodeType.IATA;

            if (value.Equals("bct_CODABAR"))
                return InputBarcodeType.CODABAR;

            if (value.Equals("bct_UPCA"))
                return InputBarcodeType.UPCA;

            if (value.Equals("bct_CODE93"))
                return InputBarcodeType.CODE93;

            if (value.Equals("bct_UPCE"))
                return InputBarcodeType.UPCE;

            if (value.Equals("bct_EAN13"))
                return InputBarcodeType.EAN13;

            if (value.Equals("bct_QRCODE"))
                return InputBarcodeType.QRCODE;

            if (value.Equals("bct_AZTEC"))
                return InputBarcodeType.AZTEC;

            if (value.Equals("bct_DATAMATRIX"))
                return InputBarcodeType.DATAMATRIX;

            if (value.Equals("bct_ALL_1D"))
                return InputBarcodeType.ALL_1D;

            if (value.Equals("bct_Code11"))
                return InputBarcodeType.CODE11;

            if (value.Equals("bct_JABCODE"))
                return InputBarcodeType.JABCODE;

            throw new NotImplementedException($"Could not convert value to type InputBarcodeType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="InputBarcodeType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static InputBarcodeType? FromStringOrDefault(string value)
        {
            if (value.Equals("bct_unknown"))
                return InputBarcodeType.UNKNOWN;

            if (value.Equals("bct_Code128"))
                return InputBarcodeType.CODE128;

            if (value.Equals("bct_Code39"))
                return InputBarcodeType.CODE39;

            if (value.Equals("bct_EAN8"))
                return InputBarcodeType.EAN8;

            if (value.Equals("bct_ITF"))
                return InputBarcodeType.ITF;

            if (value.Equals("bct_PDF417"))
                return InputBarcodeType.PDF417;

            if (value.Equals("bct_STF"))
                return InputBarcodeType.STF;

            if (value.Equals("bct_MTF"))
                return InputBarcodeType.MTF;

            if (value.Equals("bct_IATA"))
                return InputBarcodeType.IATA;

            if (value.Equals("bct_CODABAR"))
                return InputBarcodeType.CODABAR;

            if (value.Equals("bct_UPCA"))
                return InputBarcodeType.UPCA;

            if (value.Equals("bct_CODE93"))
                return InputBarcodeType.CODE93;

            if (value.Equals("bct_UPCE"))
                return InputBarcodeType.UPCE;

            if (value.Equals("bct_EAN13"))
                return InputBarcodeType.EAN13;

            if (value.Equals("bct_QRCODE"))
                return InputBarcodeType.QRCODE;

            if (value.Equals("bct_AZTEC"))
                return InputBarcodeType.AZTEC;

            if (value.Equals("bct_DATAMATRIX"))
                return InputBarcodeType.DATAMATRIX;

            if (value.Equals("bct_ALL_1D"))
                return InputBarcodeType.ALL_1D;

            if (value.Equals("bct_Code11"))
                return InputBarcodeType.CODE11;

            if (value.Equals("bct_JABCODE"))
                return InputBarcodeType.JABCODE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="InputBarcodeType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(InputBarcodeType value)
        {
            if (value == InputBarcodeType.UNKNOWN)
                return "bct_unknown";

            if (value == InputBarcodeType.CODE128)
                return "bct_Code128";

            if (value == InputBarcodeType.CODE39)
                return "bct_Code39";

            if (value == InputBarcodeType.EAN8)
                return "bct_EAN8";

            if (value == InputBarcodeType.ITF)
                return "bct_ITF";

            if (value == InputBarcodeType.PDF417)
                return "bct_PDF417";

            if (value == InputBarcodeType.STF)
                return "bct_STF";

            if (value == InputBarcodeType.MTF)
                return "bct_MTF";

            if (value == InputBarcodeType.IATA)
                return "bct_IATA";

            if (value == InputBarcodeType.CODABAR)
                return "bct_CODABAR";

            if (value == InputBarcodeType.UPCA)
                return "bct_UPCA";

            if (value == InputBarcodeType.CODE93)
                return "bct_CODE93";

            if (value == InputBarcodeType.UPCE)
                return "bct_UPCE";

            if (value == InputBarcodeType.EAN13)
                return "bct_EAN13";

            if (value == InputBarcodeType.QRCODE)
                return "bct_QRCODE";

            if (value == InputBarcodeType.AZTEC)
                return "bct_AZTEC";

            if (value == InputBarcodeType.DATAMATRIX)
                return "bct_DATAMATRIX";

            if (value == InputBarcodeType.ALL_1D)
                return "bct_ALL_1D";

            if (value == InputBarcodeType.CODE11)
                return "bct_Code11";

            if (value == InputBarcodeType.JABCODE)
                return "bct_JABCODE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InputBarcodeType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class InputBarcodeTypeJsonConverter : JsonConverter<InputBarcodeType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override InputBarcodeType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            InputBarcodeType? result = rawValue == null
                ? null
                : InputBarcodeTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the InputBarcodeType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inputBarcodeType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, InputBarcodeType inputBarcodeType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(inputBarcodeType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InputBarcodeType"/>
    /// </summary>
    public class InputBarcodeTypeNullableJsonConverter : JsonConverter<InputBarcodeType?>
    {
        /// <summary>
        /// Returns a InputBarcodeType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override InputBarcodeType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            InputBarcodeType? result = rawValue == null
                ? null
                : InputBarcodeTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inputBarcodeType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, InputBarcodeType? inputBarcodeType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(inputBarcodeType?.ToString() ?? "null");
        }
    }
}
