// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Status
    /// </summary>
    public partial class Status : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Status" /> class.
        /// </summary>
        /// <param name="overallStatus">overallStatus</param>
        /// <param name="optical">optical</param>
        /// <param name="portrait">portrait</param>
        /// <param name="rfid">rfid</param>
        /// <param name="stopList">stopList</param>
        /// <param name="detailsOptical">detailsOptical</param>
        /// <param name="detailsRFID">detailsRFID</param>
        [JsonConstructor]
        public Status(CheckResult overallStatus, CheckResult optical, CheckResult portrait, CheckResult rfid, CheckResult stopList, DetailsOptical detailsOptical, Option<DetailsRFID?> detailsRFID = default)
        {
            OverallStatus = overallStatus;
            Optical = optical;
            Portrait = portrait;
            Rfid = rfid;
            StopList = stopList;
            DetailsOptical = detailsOptical;
            DetailsRFIDOption = detailsRFID;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets OverallStatus
        /// </summary>
        [JsonPropertyName("overallStatus")]
        public CheckResult OverallStatus { get; set; }

        /// <summary>
        /// Gets or Sets Optical
        /// </summary>
        [JsonPropertyName("optical")]
        public CheckResult Optical { get; set; }

        /// <summary>
        /// Gets or Sets Portrait
        /// </summary>
        [JsonPropertyName("portrait")]
        public CheckResult Portrait { get; set; }

        /// <summary>
        /// Gets or Sets Rfid
        /// </summary>
        [JsonPropertyName("rfid")]
        public CheckResult Rfid { get; set; }

        /// <summary>
        /// Gets or Sets StopList
        /// </summary>
        [JsonPropertyName("stopList")]
        public CheckResult StopList { get; set; }

        /// <summary>
        /// Gets or Sets DetailsOptical
        /// </summary>
        [JsonPropertyName("detailsOptical")]
        public DetailsOptical DetailsOptical { get; set; }

        /// <summary>
        /// Used to track the state of DetailsRFID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DetailsRFID?> DetailsRFIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets DetailsRFID
        /// </summary>
        [JsonPropertyName("detailsRFID")]
        public DetailsRFID? DetailsRFID { get { return this.DetailsRFIDOption; } set { this.DetailsRFIDOption = new Option<DetailsRFID?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Status {\n");
            sb.Append("  OverallStatus: ").Append(OverallStatus).Append("\n");
            sb.Append("  Optical: ").Append(Optical).Append("\n");
            sb.Append("  Portrait: ").Append(Portrait).Append("\n");
            sb.Append("  Rfid: ").Append(Rfid).Append("\n");
            sb.Append("  StopList: ").Append(StopList).Append("\n");
            sb.Append("  DetailsOptical: ").Append(DetailsOptical).Append("\n");
            sb.Append("  DetailsRFID: ").Append(DetailsRFID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Status" />
    /// </summary>
    public class StatusJsonConverter : JsonConverter<Status>
    {
        /// <summary>
        /// Deserializes json to <see cref="Status" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Status Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CheckResult?> overallStatus = default;
            Option<CheckResult?> optical = default;
            Option<CheckResult?> portrait = default;
            Option<CheckResult?> rfid = default;
            Option<CheckResult?> stopList = default;
            Option<DetailsOptical?> detailsOptical = default;
            Option<DetailsRFID?> detailsRFID = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "overallStatus":
                            string? overallStatusRawValue = utf8JsonReader.GetString();
                            if (overallStatusRawValue != null)
                                overallStatus = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(overallStatusRawValue));
                            break;
                        case "optical":
                            string? opticalRawValue = utf8JsonReader.GetString();
                            if (opticalRawValue != null)
                                optical = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(opticalRawValue));
                            break;
                        case "portrait":
                            string? portraitRawValue = utf8JsonReader.GetString();
                            if (portraitRawValue != null)
                                portrait = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(portraitRawValue));
                            break;
                        case "rfid":
                            string? rfidRawValue = utf8JsonReader.GetString();
                            if (rfidRawValue != null)
                                rfid = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(rfidRawValue));
                            break;
                        case "stopList":
                            string? stopListRawValue = utf8JsonReader.GetString();
                            if (stopListRawValue != null)
                                stopList = new Option<CheckResult?>(CheckResultValueConverter.FromStringOrDefault(stopListRawValue));
                            break;
                        case "detailsOptical":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                detailsOptical = new Option<DetailsOptical?>(JsonSerializer.Deserialize<DetailsOptical>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "detailsRFID":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                detailsRFID = new Option<DetailsRFID?>(JsonSerializer.Deserialize<DetailsRFID>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!overallStatus.IsSet)
                throw new ArgumentException("Property is required for class Status.", nameof(overallStatus));

            if (!optical.IsSet)
                throw new ArgumentException("Property is required for class Status.", nameof(optical));

            if (!portrait.IsSet)
                throw new ArgumentException("Property is required for class Status.", nameof(portrait));

            if (!rfid.IsSet)
                throw new ArgumentException("Property is required for class Status.", nameof(rfid));

            if (!stopList.IsSet)
                throw new ArgumentException("Property is required for class Status.", nameof(stopList));

            if (!detailsOptical.IsSet)
                throw new ArgumentException("Property is required for class Status.", nameof(detailsOptical));

            if (overallStatus.IsSet && overallStatus.Value == null)
                throw new ArgumentNullException(nameof(overallStatus), "Property is not nullable for class Status.");

            if (optical.IsSet && optical.Value == null)
                throw new ArgumentNullException(nameof(optical), "Property is not nullable for class Status.");

            if (portrait.IsSet && portrait.Value == null)
                throw new ArgumentNullException(nameof(portrait), "Property is not nullable for class Status.");

            if (rfid.IsSet && rfid.Value == null)
                throw new ArgumentNullException(nameof(rfid), "Property is not nullable for class Status.");

            if (stopList.IsSet && stopList.Value == null)
                throw new ArgumentNullException(nameof(stopList), "Property is not nullable for class Status.");

            if (detailsOptical.IsSet && detailsOptical.Value == null)
                throw new ArgumentNullException(nameof(detailsOptical), "Property is not nullable for class Status.");

            if (detailsRFID.IsSet && detailsRFID.Value == null)
                throw new ArgumentNullException(nameof(detailsRFID), "Property is not nullable for class Status.");

            return new Status(overallStatus.Value!.Value!, optical.Value!.Value!, portrait.Value!.Value!, rfid.Value!.Value!, stopList.Value!.Value!, detailsOptical.Value!, detailsRFID);
        }

        /// <summary>
        /// Serializes a <see cref="Status" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="status"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Status status, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, status, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Status" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="status"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Status status, JsonSerializerOptions jsonSerializerOptions)
        {
            if (status.DetailsOptical == null)
                throw new ArgumentNullException(nameof(status.DetailsOptical), "Property is required for class Status.");

            if (status.DetailsRFIDOption.IsSet && status.DetailsRFID == null)
                throw new ArgumentNullException(nameof(status.DetailsRFID), "Property is required for class Status.");

            var overallStatusRawValue = CheckResultValueConverter.ToJsonValue(status.OverallStatus);
            writer.WriteNumber("overallStatus", overallStatusRawValue);

            var opticalRawValue = CheckResultValueConverter.ToJsonValue(status.Optical);
            writer.WriteNumber("optical", opticalRawValue);

            var portraitRawValue = CheckResultValueConverter.ToJsonValue(status.Portrait);
            writer.WriteNumber("portrait", portraitRawValue);

            var rfidRawValue = CheckResultValueConverter.ToJsonValue(status.Rfid);
            writer.WriteNumber("rfid", rfidRawValue);

            var stopListRawValue = CheckResultValueConverter.ToJsonValue(status.StopList);
            writer.WriteNumber("stopList", stopListRawValue);

            writer.WritePropertyName("detailsOptical");
            JsonSerializer.Serialize(writer, status.DetailsOptical, jsonSerializerOptions);
            if (status.DetailsRFIDOption.IsSet)
            {
                writer.WritePropertyName("detailsRFID");
                JsonSerializer.Serialize(writer, status.DetailsRFID, jsonSerializerOptions);
            }
        }
    }
}
