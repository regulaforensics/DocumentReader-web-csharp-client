/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 8.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Regula.DocumentReader.WebClient.Client.FileParameter;
using OpenAPIDateConverter = Regula.DocumentReader.WebClient.Client.OpenAPIDateConverter;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Status
    /// </summary>
    [DataContract(Name = "Status")]
    public partial class Status : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OverallStatus
        /// </summary>
        [DataMember(Name = "overallStatus", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult OverallStatus { get; set; }

        /// <summary>
        /// Gets or Sets Optical
        /// </summary>
        [DataMember(Name = "optical", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult Optical { get; set; }

        /// <summary>
        /// Gets or Sets Portrait
        /// </summary>
        [DataMember(Name = "portrait", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult Portrait { get; set; }

        /// <summary>
        /// Gets or Sets Rfid
        /// </summary>
        [DataMember(Name = "rfid", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult Rfid { get; set; }

        /// <summary>
        /// Gets or Sets StopList
        /// </summary>
        [DataMember(Name = "stopList", IsRequired = true, EmitDefaultValue = true)]
        public CheckResult StopList { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Status" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Status() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Status" /> class.
        /// </summary>
        /// <param name="overallStatus">overallStatus (required).</param>
        /// <param name="optical">optical (required).</param>
        /// <param name="portrait">portrait (required).</param>
        /// <param name="rfid">rfid (required).</param>
        /// <param name="stopList">stopList (required).</param>
        /// <param name="detailsRFID">detailsRFID.</param>
        /// <param name="detailsOptical">detailsOptical (required).</param>
        public Status(CheckResult overallStatus = default(CheckResult), CheckResult optical = default(CheckResult), CheckResult portrait = default(CheckResult), CheckResult rfid = default(CheckResult), CheckResult stopList = default(CheckResult), DetailsRFID detailsRFID = default(DetailsRFID), DetailsOptical detailsOptical = default(DetailsOptical))
        {
            this.OverallStatus = overallStatus;
            this.Optical = optical;
            this.Portrait = portrait;
            this.Rfid = rfid;
            this.StopList = stopList;
            // to ensure "detailsOptical" is required (not null)
            if (detailsOptical == null)
            {
                throw new ArgumentNullException("detailsOptical is a required property for Status and cannot be null");
            }
            this.DetailsOptical = detailsOptical;
            this.DetailsRFID = detailsRFID;
        }

        /// <summary>
        /// Gets or Sets DetailsRFID
        /// </summary>
        [DataMember(Name = "detailsRFID", EmitDefaultValue = false)]
        public DetailsRFID? DetailsRFID { get; set; }

        /// <summary>
        /// Gets or Sets DetailsOptical
        /// </summary>
        [DataMember(Name = "detailsOptical", IsRequired = true, EmitDefaultValue = true)]
        public DetailsOptical DetailsOptical { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Status {\n");
            sb.Append("  OverallStatus: ").Append(OverallStatus).Append("\n");
            sb.Append("  Optical: ").Append(Optical).Append("\n");
            sb.Append("  Portrait: ").Append(Portrait).Append("\n");
            sb.Append("  Rfid: ").Append(Rfid).Append("\n");
            sb.Append("  StopList: ").Append(StopList).Append("\n");
            sb.Append("  DetailsRFID: ").Append(DetailsRFID).Append("\n");
            sb.Append("  DetailsOptical: ").Append(DetailsOptical).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
