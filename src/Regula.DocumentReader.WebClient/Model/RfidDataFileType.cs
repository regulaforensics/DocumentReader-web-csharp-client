// <auto-generated>
/*
 * Regula Document Reader Web API
 *
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Regula.DocumentReader.WebClient.Client;

namespace Regula.DocumentReader.WebClient.Model
{
    /// <summary>
    /// Enumeration contains a set of constants that define the file type (or logical belonging of the data object) within the context of the communication session with electronic document
    /// </summary>
    /// <value>Enumeration contains a set of constants that define the file type (or logical belonging of the data object) within the context of the communication session with electronic document</value>
    public enum RfidDataFileType
    {
        /// <summary>
        /// Enum UNSPECIFIED for value: 0
        /// </summary>
        UNSPECIFIED = 0,

        /// <summary>
        /// Enum PASSPORT_DG1 for value: 1
        /// </summary>
        PASSPORT_DG1 = 1,

        /// <summary>
        /// Enum PASSPORT_DG2 for value: 2
        /// </summary>
        PASSPORT_DG2 = 2,

        /// <summary>
        /// Enum PASSPORT_DG3 for value: 3
        /// </summary>
        PASSPORT_DG3 = 3,

        /// <summary>
        /// Enum PASSPORT_DG4 for value: 4
        /// </summary>
        PASSPORT_DG4 = 4,

        /// <summary>
        /// Enum PASSPORT_DG5 for value: 5
        /// </summary>
        PASSPORT_DG5 = 5,

        /// <summary>
        /// Enum PASSPORT_DG6 for value: 6
        /// </summary>
        PASSPORT_DG6 = 6,

        /// <summary>
        /// Enum PASSPORT_DG7 for value: 7
        /// </summary>
        PASSPORT_DG7 = 7,

        /// <summary>
        /// Enum PASSPORT_DG8 for value: 8
        /// </summary>
        PASSPORT_DG8 = 8,

        /// <summary>
        /// Enum PASSPORT_DG9 for value: 9
        /// </summary>
        PASSPORT_DG9 = 9,

        /// <summary>
        /// Enum PASSPORT_DG10 for value: 10
        /// </summary>
        PASSPORT_DG10 = 10,

        /// <summary>
        /// Enum PASSPORT_DG11 for value: 11
        /// </summary>
        PASSPORT_DG11 = 11,

        /// <summary>
        /// Enum PASSPORT_DG12 for value: 12
        /// </summary>
        PASSPORT_DG12 = 12,

        /// <summary>
        /// Enum PASSPORT_DG13 for value: 13
        /// </summary>
        PASSPORT_DG13 = 13,

        /// <summary>
        /// Enum PASSPORT_DG14 for value: 14
        /// </summary>
        PASSPORT_DG14 = 14,

        /// <summary>
        /// Enum PASSPORT_DG15 for value: 15
        /// </summary>
        PASSPORT_DG15 = 15,

        /// <summary>
        /// Enum PASSPORT_DG16 for value: 16
        /// </summary>
        PASSPORT_DG16 = 16,

        /// <summary>
        /// Enum PASSPORT_DG17 for value: 17
        /// </summary>
        PASSPORT_DG17 = 17,

        /// <summary>
        /// Enum PASSPORT_DG18 for value: 18
        /// </summary>
        PASSPORT_DG18 = 18,

        /// <summary>
        /// Enum PASSPORT_DG19 for value: 19
        /// </summary>
        PASSPORT_DG19 = 19,

        /// <summary>
        /// Enum PASSPORT_DG20 for value: 20
        /// </summary>
        PASSPORT_DG20 = 20,

        /// <summary>
        /// Enum PASSPORT_SOD for value: 21
        /// </summary>
        PASSPORT_SOD = 21,

        /// <summary>
        /// Enum PASSPORT_CVCA for value: 22
        /// </summary>
        PASSPORT_CVCA = 22,

        /// <summary>
        /// Enum PASSPORT_COM for value: 23
        /// </summary>
        PASSPORT_COM = 23,

        /// <summary>
        /// Enum DTC_DG17 for value: 57
        /// </summary>
        DTC_DG17 = 57,

        /// <summary>
        /// Enum DTC_DG18 for value: 58
        /// </summary>
        DTC_DG18 = 58,

        /// <summary>
        /// Enum DTC_DG22 for value: 62
        /// </summary>
        DTC_DG22 = 62,

        /// <summary>
        /// Enum DTC_DG23 for value: 63
        /// </summary>
        DTC_DG23 = 63,

        /// <summary>
        /// Enum DTC_DG24 for value: 64
        /// </summary>
        DTC_DG24 = 64,

        /// <summary>
        /// Enum ID_DG1 for value: 101
        /// </summary>
        ID_DG1 = 101,

        /// <summary>
        /// Enum ID_DG2 for value: 102
        /// </summary>
        ID_DG2 = 102,

        /// <summary>
        /// Enum ID_DG3 for value: 103
        /// </summary>
        ID_DG3 = 103,

        /// <summary>
        /// Enum ID_DG4 for value: 104
        /// </summary>
        ID_DG4 = 104,

        /// <summary>
        /// Enum ID_DG5 for value: 105
        /// </summary>
        ID_DG5 = 105,

        /// <summary>
        /// Enum ID_DG6 for value: 106
        /// </summary>
        ID_DG6 = 106,

        /// <summary>
        /// Enum ID_DG7 for value: 107
        /// </summary>
        ID_DG7 = 107,

        /// <summary>
        /// Enum ID_DG8 for value: 108
        /// </summary>
        ID_DG8 = 108,

        /// <summary>
        /// Enum ID_DG9 for value: 109
        /// </summary>
        ID_DG9 = 109,

        /// <summary>
        /// Enum ID_DG10 for value: 110
        /// </summary>
        ID_DG10 = 110,

        /// <summary>
        /// Enum ID_DG11 for value: 111
        /// </summary>
        ID_DG11 = 111,

        /// <summary>
        /// Enum ID_DG12 for value: 112
        /// </summary>
        ID_DG12 = 112,

        /// <summary>
        /// Enum ID_DG13 for value: 113
        /// </summary>
        ID_DG13 = 113,

        /// <summary>
        /// Enum ID_DG14 for value: 114
        /// </summary>
        ID_DG14 = 114,

        /// <summary>
        /// Enum ID_DG15 for value: 115
        /// </summary>
        ID_DG15 = 115,

        /// <summary>
        /// Enum ID_DG16 for value: 116
        /// </summary>
        ID_DG16 = 116,

        /// <summary>
        /// Enum ID_DG17 for value: 117
        /// </summary>
        ID_DG17 = 117,

        /// <summary>
        /// Enum ID_DG18 for value: 118
        /// </summary>
        ID_DG18 = 118,

        /// <summary>
        /// Enum ID_DG19 for value: 119
        /// </summary>
        ID_DG19 = 119,

        /// <summary>
        /// Enum ID_DG20 for value: 120
        /// </summary>
        ID_DG20 = 120,

        /// <summary>
        /// Enum ID_DG21 for value: 121
        /// </summary>
        ID_DG21 = 121,

        /// <summary>
        /// Enum DL_COM for value: 150
        /// </summary>
        DL_COM = 150,

        /// <summary>
        /// Enum DL_DG1 for value: 151
        /// </summary>
        DL_DG1 = 151,

        /// <summary>
        /// Enum DL_DG2 for value: 152
        /// </summary>
        DL_DG2 = 152,

        /// <summary>
        /// Enum DL_DG3 for value: 153
        /// </summary>
        DL_DG3 = 153,

        /// <summary>
        /// Enum DL_DG4 for value: 154
        /// </summary>
        DL_DG4 = 154,

        /// <summary>
        /// Enum DL_DG5 for value: 155
        /// </summary>
        DL_DG5 = 155,

        /// <summary>
        /// Enum DL_DG6 for value: 156
        /// </summary>
        DL_DG6 = 156,

        /// <summary>
        /// Enum DL_DG7 for value: 157
        /// </summary>
        DL_DG7 = 157,

        /// <summary>
        /// Enum DL_DG8 for value: 158
        /// </summary>
        DL_DG8 = 158,

        /// <summary>
        /// Enum DL_DG9 for value: 159
        /// </summary>
        DL_DG9 = 159,

        /// <summary>
        /// Enum DL_DG10 for value: 160
        /// </summary>
        DL_DG10 = 160,

        /// <summary>
        /// Enum DL_DG11 for value: 161
        /// </summary>
        DL_DG11 = 161,

        /// <summary>
        /// Enum DL_DG12 for value: 162
        /// </summary>
        DL_DG12 = 162,

        /// <summary>
        /// Enum DL_DG13 for value: 163
        /// </summary>
        DL_DG13 = 163,

        /// <summary>
        /// Enum DL_DG14 for value: 164
        /// </summary>
        DL_DG14 = 164,

        /// <summary>
        /// Enum DL_SOD for value: 165
        /// </summary>
        DL_SOD = 165,

        /// <summary>
        /// Enum DL_CE for value: 166
        /// </summary>
        DL_CE = 166,

        /// <summary>
        /// Enum DL_CVCA for value: 167
        /// </summary>
        DL_CVCA = 167,

        /// <summary>
        /// Enum PACE_CARD_ACCESS for value: 200
        /// </summary>
        PACE_CARD_ACCESS = 200,

        /// <summary>
        /// Enum PACE_CARD_SECURITY for value: 201
        /// </summary>
        PACE_CARD_SECURITY = 201,

        /// <summary>
        /// Enum PACE_CHIP_SECURITY for value: 202
        /// </summary>
        PACE_CHIP_SECURITY = 202,

        /// <summary>
        /// Enum MIFARE_DATA for value: 300
        /// </summary>
        MIFARE_DATA = 300,

        /// <summary>
        /// Enum MIFARE_VALIDITY for value: 301
        /// </summary>
        MIFARE_VALIDITY = 301,

        /// <summary>
        /// Enum AUTHENTICITY_V2 for value: 302
        /// </summary>
        AUTHENTICITY_V2 = 302,

        /// <summary>
        /// Enum ATR for value: 400
        /// </summary>
        ATR = 400,

        /// <summary>
        /// Enum _E_SIGN_PK for value: 500
        /// </summary>
        _E_SIGN_PK = 500,

        /// <summary>
        /// Enum _E_SIGN_SIGNED_DATA for value: 501
        /// </summary>
        _E_SIGN_SIGNED_DATA = 501,

        /// <summary>
        /// Enum CERTIFICATE for value: 600
        /// </summary>
        CERTIFICATE = 600,

        /// <summary>
        /// Enum MASTER_LIST for value: 601
        /// </summary>
        MASTER_LIST = 601,

        /// <summary>
        /// Enum DEFECT_LIST for value: 602
        /// </summary>
        DEFECT_LIST = 602,

        /// <summary>
        /// Enum BLACK_LIST for value: 603
        /// </summary>
        BLACK_LIST = 603,

        /// <summary>
        /// Enum APP_DIRECTORY for value: 700
        /// </summary>
        APP_DIRECTORY = 700,

        /// <summary>
        /// Enum SESSION for value: 701
        /// </summary>
        SESSION = 701,

        /// <summary>
        /// Enum LOG_DATA for value: 702
        /// </summary>
        LOG_DATA = 702,

        /// <summary>
        /// Enum CHIP_PROPERTIES for value: 703
        /// </summary>
        CHIP_PROPERTIES = 703,

        /// <summary>
        /// Enum POST_CA_RESPONSE for value: 710
        /// </summary>
        POST_CA_RESPONSE = 710,

        /// <summary>
        /// Enum POST_CA_PUBLIC_KEY for value: 711
        /// </summary>
        POST_CA_PUBLIC_KEY = 711,

        /// <summary>
        /// Enum POST_CA_INFO for value: 712
        /// </summary>
        POST_CA_INFO = 712,

        /// <summary>
        /// Enum POST_CA_D_PARAMS for value: 713
        /// </summary>
        POST_CA_D_PARAMS = 713,

        /// <summary>
        /// Enum POST_CA_CHECK_PK for value: 714
        /// </summary>
        POST_CA_CHECK_PK = 714,

        /// <summary>
        /// Enum POST_CA_CHECK_SK for value: 715
        /// </summary>
        POST_CA_CHECK_SK = 715,

        /// <summary>
        /// Enum USER_DEFINED for value: 1000
        /// </summary>
        USER_DEFINED = 1000
    }

    /// <summary>
    /// Converts <see cref="RfidDataFileType"/> to and from the JSON value
    /// </summary>
    public static class RfidDataFileTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RfidDataFileType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RfidDataFileType FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return RfidDataFileType.UNSPECIFIED;

            if (value.Equals((1).ToString()))
                return RfidDataFileType.PASSPORT_DG1;

            if (value.Equals((2).ToString()))
                return RfidDataFileType.PASSPORT_DG2;

            if (value.Equals((3).ToString()))
                return RfidDataFileType.PASSPORT_DG3;

            if (value.Equals((4).ToString()))
                return RfidDataFileType.PASSPORT_DG4;

            if (value.Equals((5).ToString()))
                return RfidDataFileType.PASSPORT_DG5;

            if (value.Equals((6).ToString()))
                return RfidDataFileType.PASSPORT_DG6;

            if (value.Equals((7).ToString()))
                return RfidDataFileType.PASSPORT_DG7;

            if (value.Equals((8).ToString()))
                return RfidDataFileType.PASSPORT_DG8;

            if (value.Equals((9).ToString()))
                return RfidDataFileType.PASSPORT_DG9;

            if (value.Equals((10).ToString()))
                return RfidDataFileType.PASSPORT_DG10;

            if (value.Equals((11).ToString()))
                return RfidDataFileType.PASSPORT_DG11;

            if (value.Equals((12).ToString()))
                return RfidDataFileType.PASSPORT_DG12;

            if (value.Equals((13).ToString()))
                return RfidDataFileType.PASSPORT_DG13;

            if (value.Equals((14).ToString()))
                return RfidDataFileType.PASSPORT_DG14;

            if (value.Equals((15).ToString()))
                return RfidDataFileType.PASSPORT_DG15;

            if (value.Equals((16).ToString()))
                return RfidDataFileType.PASSPORT_DG16;

            if (value.Equals((17).ToString()))
                return RfidDataFileType.PASSPORT_DG17;

            if (value.Equals((18).ToString()))
                return RfidDataFileType.PASSPORT_DG18;

            if (value.Equals((19).ToString()))
                return RfidDataFileType.PASSPORT_DG19;

            if (value.Equals((20).ToString()))
                return RfidDataFileType.PASSPORT_DG20;

            if (value.Equals((21).ToString()))
                return RfidDataFileType.PASSPORT_SOD;

            if (value.Equals((22).ToString()))
                return RfidDataFileType.PASSPORT_CVCA;

            if (value.Equals((23).ToString()))
                return RfidDataFileType.PASSPORT_COM;

            if (value.Equals((57).ToString()))
                return RfidDataFileType.DTC_DG17;

            if (value.Equals((58).ToString()))
                return RfidDataFileType.DTC_DG18;

            if (value.Equals((62).ToString()))
                return RfidDataFileType.DTC_DG22;

            if (value.Equals((63).ToString()))
                return RfidDataFileType.DTC_DG23;

            if (value.Equals((64).ToString()))
                return RfidDataFileType.DTC_DG24;

            if (value.Equals((101).ToString()))
                return RfidDataFileType.ID_DG1;

            if (value.Equals((102).ToString()))
                return RfidDataFileType.ID_DG2;

            if (value.Equals((103).ToString()))
                return RfidDataFileType.ID_DG3;

            if (value.Equals((104).ToString()))
                return RfidDataFileType.ID_DG4;

            if (value.Equals((105).ToString()))
                return RfidDataFileType.ID_DG5;

            if (value.Equals((106).ToString()))
                return RfidDataFileType.ID_DG6;

            if (value.Equals((107).ToString()))
                return RfidDataFileType.ID_DG7;

            if (value.Equals((108).ToString()))
                return RfidDataFileType.ID_DG8;

            if (value.Equals((109).ToString()))
                return RfidDataFileType.ID_DG9;

            if (value.Equals((110).ToString()))
                return RfidDataFileType.ID_DG10;

            if (value.Equals((111).ToString()))
                return RfidDataFileType.ID_DG11;

            if (value.Equals((112).ToString()))
                return RfidDataFileType.ID_DG12;

            if (value.Equals((113).ToString()))
                return RfidDataFileType.ID_DG13;

            if (value.Equals((114).ToString()))
                return RfidDataFileType.ID_DG14;

            if (value.Equals((115).ToString()))
                return RfidDataFileType.ID_DG15;

            if (value.Equals((116).ToString()))
                return RfidDataFileType.ID_DG16;

            if (value.Equals((117).ToString()))
                return RfidDataFileType.ID_DG17;

            if (value.Equals((118).ToString()))
                return RfidDataFileType.ID_DG18;

            if (value.Equals((119).ToString()))
                return RfidDataFileType.ID_DG19;

            if (value.Equals((120).ToString()))
                return RfidDataFileType.ID_DG20;

            if (value.Equals((121).ToString()))
                return RfidDataFileType.ID_DG21;

            if (value.Equals((150).ToString()))
                return RfidDataFileType.DL_COM;

            if (value.Equals((151).ToString()))
                return RfidDataFileType.DL_DG1;

            if (value.Equals((152).ToString()))
                return RfidDataFileType.DL_DG2;

            if (value.Equals((153).ToString()))
                return RfidDataFileType.DL_DG3;

            if (value.Equals((154).ToString()))
                return RfidDataFileType.DL_DG4;

            if (value.Equals((155).ToString()))
                return RfidDataFileType.DL_DG5;

            if (value.Equals((156).ToString()))
                return RfidDataFileType.DL_DG6;

            if (value.Equals((157).ToString()))
                return RfidDataFileType.DL_DG7;

            if (value.Equals((158).ToString()))
                return RfidDataFileType.DL_DG8;

            if (value.Equals((159).ToString()))
                return RfidDataFileType.DL_DG9;

            if (value.Equals((160).ToString()))
                return RfidDataFileType.DL_DG10;

            if (value.Equals((161).ToString()))
                return RfidDataFileType.DL_DG11;

            if (value.Equals((162).ToString()))
                return RfidDataFileType.DL_DG12;

            if (value.Equals((163).ToString()))
                return RfidDataFileType.DL_DG13;

            if (value.Equals((164).ToString()))
                return RfidDataFileType.DL_DG14;

            if (value.Equals((165).ToString()))
                return RfidDataFileType.DL_SOD;

            if (value.Equals((166).ToString()))
                return RfidDataFileType.DL_CE;

            if (value.Equals((167).ToString()))
                return RfidDataFileType.DL_CVCA;

            if (value.Equals((200).ToString()))
                return RfidDataFileType.PACE_CARD_ACCESS;

            if (value.Equals((201).ToString()))
                return RfidDataFileType.PACE_CARD_SECURITY;

            if (value.Equals((202).ToString()))
                return RfidDataFileType.PACE_CHIP_SECURITY;

            if (value.Equals((300).ToString()))
                return RfidDataFileType.MIFARE_DATA;

            if (value.Equals((301).ToString()))
                return RfidDataFileType.MIFARE_VALIDITY;

            if (value.Equals((302).ToString()))
                return RfidDataFileType.AUTHENTICITY_V2;

            if (value.Equals((400).ToString()))
                return RfidDataFileType.ATR;

            if (value.Equals((500).ToString()))
                return RfidDataFileType._E_SIGN_PK;

            if (value.Equals((501).ToString()))
                return RfidDataFileType._E_SIGN_SIGNED_DATA;

            if (value.Equals((600).ToString()))
                return RfidDataFileType.CERTIFICATE;

            if (value.Equals((601).ToString()))
                return RfidDataFileType.MASTER_LIST;

            if (value.Equals((602).ToString()))
                return RfidDataFileType.DEFECT_LIST;

            if (value.Equals((603).ToString()))
                return RfidDataFileType.BLACK_LIST;

            if (value.Equals((700).ToString()))
                return RfidDataFileType.APP_DIRECTORY;

            if (value.Equals((701).ToString()))
                return RfidDataFileType.SESSION;

            if (value.Equals((702).ToString()))
                return RfidDataFileType.LOG_DATA;

            if (value.Equals((703).ToString()))
                return RfidDataFileType.CHIP_PROPERTIES;

            if (value.Equals((710).ToString()))
                return RfidDataFileType.POST_CA_RESPONSE;

            if (value.Equals((711).ToString()))
                return RfidDataFileType.POST_CA_PUBLIC_KEY;

            if (value.Equals((712).ToString()))
                return RfidDataFileType.POST_CA_INFO;

            if (value.Equals((713).ToString()))
                return RfidDataFileType.POST_CA_D_PARAMS;

            if (value.Equals((714).ToString()))
                return RfidDataFileType.POST_CA_CHECK_PK;

            if (value.Equals((715).ToString()))
                return RfidDataFileType.POST_CA_CHECK_SK;

            if (value.Equals((1000).ToString()))
                return RfidDataFileType.USER_DEFINED;

            throw new NotImplementedException($"Could not convert value to type RfidDataFileType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RfidDataFileType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RfidDataFileType? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return RfidDataFileType.UNSPECIFIED;

            if (value.Equals((1).ToString()))
                return RfidDataFileType.PASSPORT_DG1;

            if (value.Equals((2).ToString()))
                return RfidDataFileType.PASSPORT_DG2;

            if (value.Equals((3).ToString()))
                return RfidDataFileType.PASSPORT_DG3;

            if (value.Equals((4).ToString()))
                return RfidDataFileType.PASSPORT_DG4;

            if (value.Equals((5).ToString()))
                return RfidDataFileType.PASSPORT_DG5;

            if (value.Equals((6).ToString()))
                return RfidDataFileType.PASSPORT_DG6;

            if (value.Equals((7).ToString()))
                return RfidDataFileType.PASSPORT_DG7;

            if (value.Equals((8).ToString()))
                return RfidDataFileType.PASSPORT_DG8;

            if (value.Equals((9).ToString()))
                return RfidDataFileType.PASSPORT_DG9;

            if (value.Equals((10).ToString()))
                return RfidDataFileType.PASSPORT_DG10;

            if (value.Equals((11).ToString()))
                return RfidDataFileType.PASSPORT_DG11;

            if (value.Equals((12).ToString()))
                return RfidDataFileType.PASSPORT_DG12;

            if (value.Equals((13).ToString()))
                return RfidDataFileType.PASSPORT_DG13;

            if (value.Equals((14).ToString()))
                return RfidDataFileType.PASSPORT_DG14;

            if (value.Equals((15).ToString()))
                return RfidDataFileType.PASSPORT_DG15;

            if (value.Equals((16).ToString()))
                return RfidDataFileType.PASSPORT_DG16;

            if (value.Equals((17).ToString()))
                return RfidDataFileType.PASSPORT_DG17;

            if (value.Equals((18).ToString()))
                return RfidDataFileType.PASSPORT_DG18;

            if (value.Equals((19).ToString()))
                return RfidDataFileType.PASSPORT_DG19;

            if (value.Equals((20).ToString()))
                return RfidDataFileType.PASSPORT_DG20;

            if (value.Equals((21).ToString()))
                return RfidDataFileType.PASSPORT_SOD;

            if (value.Equals((22).ToString()))
                return RfidDataFileType.PASSPORT_CVCA;

            if (value.Equals((23).ToString()))
                return RfidDataFileType.PASSPORT_COM;

            if (value.Equals((57).ToString()))
                return RfidDataFileType.DTC_DG17;

            if (value.Equals((58).ToString()))
                return RfidDataFileType.DTC_DG18;

            if (value.Equals((62).ToString()))
                return RfidDataFileType.DTC_DG22;

            if (value.Equals((63).ToString()))
                return RfidDataFileType.DTC_DG23;

            if (value.Equals((64).ToString()))
                return RfidDataFileType.DTC_DG24;

            if (value.Equals((101).ToString()))
                return RfidDataFileType.ID_DG1;

            if (value.Equals((102).ToString()))
                return RfidDataFileType.ID_DG2;

            if (value.Equals((103).ToString()))
                return RfidDataFileType.ID_DG3;

            if (value.Equals((104).ToString()))
                return RfidDataFileType.ID_DG4;

            if (value.Equals((105).ToString()))
                return RfidDataFileType.ID_DG5;

            if (value.Equals((106).ToString()))
                return RfidDataFileType.ID_DG6;

            if (value.Equals((107).ToString()))
                return RfidDataFileType.ID_DG7;

            if (value.Equals((108).ToString()))
                return RfidDataFileType.ID_DG8;

            if (value.Equals((109).ToString()))
                return RfidDataFileType.ID_DG9;

            if (value.Equals((110).ToString()))
                return RfidDataFileType.ID_DG10;

            if (value.Equals((111).ToString()))
                return RfidDataFileType.ID_DG11;

            if (value.Equals((112).ToString()))
                return RfidDataFileType.ID_DG12;

            if (value.Equals((113).ToString()))
                return RfidDataFileType.ID_DG13;

            if (value.Equals((114).ToString()))
                return RfidDataFileType.ID_DG14;

            if (value.Equals((115).ToString()))
                return RfidDataFileType.ID_DG15;

            if (value.Equals((116).ToString()))
                return RfidDataFileType.ID_DG16;

            if (value.Equals((117).ToString()))
                return RfidDataFileType.ID_DG17;

            if (value.Equals((118).ToString()))
                return RfidDataFileType.ID_DG18;

            if (value.Equals((119).ToString()))
                return RfidDataFileType.ID_DG19;

            if (value.Equals((120).ToString()))
                return RfidDataFileType.ID_DG20;

            if (value.Equals((121).ToString()))
                return RfidDataFileType.ID_DG21;

            if (value.Equals((150).ToString()))
                return RfidDataFileType.DL_COM;

            if (value.Equals((151).ToString()))
                return RfidDataFileType.DL_DG1;

            if (value.Equals((152).ToString()))
                return RfidDataFileType.DL_DG2;

            if (value.Equals((153).ToString()))
                return RfidDataFileType.DL_DG3;

            if (value.Equals((154).ToString()))
                return RfidDataFileType.DL_DG4;

            if (value.Equals((155).ToString()))
                return RfidDataFileType.DL_DG5;

            if (value.Equals((156).ToString()))
                return RfidDataFileType.DL_DG6;

            if (value.Equals((157).ToString()))
                return RfidDataFileType.DL_DG7;

            if (value.Equals((158).ToString()))
                return RfidDataFileType.DL_DG8;

            if (value.Equals((159).ToString()))
                return RfidDataFileType.DL_DG9;

            if (value.Equals((160).ToString()))
                return RfidDataFileType.DL_DG10;

            if (value.Equals((161).ToString()))
                return RfidDataFileType.DL_DG11;

            if (value.Equals((162).ToString()))
                return RfidDataFileType.DL_DG12;

            if (value.Equals((163).ToString()))
                return RfidDataFileType.DL_DG13;

            if (value.Equals((164).ToString()))
                return RfidDataFileType.DL_DG14;

            if (value.Equals((165).ToString()))
                return RfidDataFileType.DL_SOD;

            if (value.Equals((166).ToString()))
                return RfidDataFileType.DL_CE;

            if (value.Equals((167).ToString()))
                return RfidDataFileType.DL_CVCA;

            if (value.Equals((200).ToString()))
                return RfidDataFileType.PACE_CARD_ACCESS;

            if (value.Equals((201).ToString()))
                return RfidDataFileType.PACE_CARD_SECURITY;

            if (value.Equals((202).ToString()))
                return RfidDataFileType.PACE_CHIP_SECURITY;

            if (value.Equals((300).ToString()))
                return RfidDataFileType.MIFARE_DATA;

            if (value.Equals((301).ToString()))
                return RfidDataFileType.MIFARE_VALIDITY;

            if (value.Equals((302).ToString()))
                return RfidDataFileType.AUTHENTICITY_V2;

            if (value.Equals((400).ToString()))
                return RfidDataFileType.ATR;

            if (value.Equals((500).ToString()))
                return RfidDataFileType._E_SIGN_PK;

            if (value.Equals((501).ToString()))
                return RfidDataFileType._E_SIGN_SIGNED_DATA;

            if (value.Equals((600).ToString()))
                return RfidDataFileType.CERTIFICATE;

            if (value.Equals((601).ToString()))
                return RfidDataFileType.MASTER_LIST;

            if (value.Equals((602).ToString()))
                return RfidDataFileType.DEFECT_LIST;

            if (value.Equals((603).ToString()))
                return RfidDataFileType.BLACK_LIST;

            if (value.Equals((700).ToString()))
                return RfidDataFileType.APP_DIRECTORY;

            if (value.Equals((701).ToString()))
                return RfidDataFileType.SESSION;

            if (value.Equals((702).ToString()))
                return RfidDataFileType.LOG_DATA;

            if (value.Equals((703).ToString()))
                return RfidDataFileType.CHIP_PROPERTIES;

            if (value.Equals((710).ToString()))
                return RfidDataFileType.POST_CA_RESPONSE;

            if (value.Equals((711).ToString()))
                return RfidDataFileType.POST_CA_PUBLIC_KEY;

            if (value.Equals((712).ToString()))
                return RfidDataFileType.POST_CA_INFO;

            if (value.Equals((713).ToString()))
                return RfidDataFileType.POST_CA_D_PARAMS;

            if (value.Equals((714).ToString()))
                return RfidDataFileType.POST_CA_CHECK_PK;

            if (value.Equals((715).ToString()))
                return RfidDataFileType.POST_CA_CHECK_SK;

            if (value.Equals((1000).ToString()))
                return RfidDataFileType.USER_DEFINED;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RfidDataFileType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(RfidDataFileType value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidDataFileType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RfidDataFileTypeJsonConverter : JsonConverter<RfidDataFileType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RfidDataFileType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RfidDataFileType? result = rawValue == null
                ? null
                : RfidDataFileTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RfidDataFileType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidDataFileType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RfidDataFileType rfidDataFileType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(rfidDataFileType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RfidDataFileType"/>
    /// </summary>
    public class RfidDataFileTypeNullableJsonConverter : JsonConverter<RfidDataFileType?>
    {
        /// <summary>
        /// Returns a RfidDataFileType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RfidDataFileType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RfidDataFileType? result = rawValue == null
                ? null
                : RfidDataFileTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rfidDataFileType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RfidDataFileType? rfidDataFileType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(rfidDataFileType?.ToString() ?? "null");
        }
    }
}
