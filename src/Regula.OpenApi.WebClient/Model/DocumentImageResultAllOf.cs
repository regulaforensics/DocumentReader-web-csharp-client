/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Regula.OpenApi.WebClient.Model
{
    /// <summary>
    /// Contains cropped and rotated with perspective compensation image of document. Single input image can contain multiple document side/pages, which will be returned as separated results. Most of coordinates in other types defined on that image
    /// </summary>
    [DataContract]
    public partial class DocumentImageResultAllOf :  IEquatable<DocumentImageResultAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentImageResultAllOf" /> class.
        /// </summary>
        [JsonConstructor]
        protected DocumentImageResultAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentImageResultAllOf" /> class.
        /// </summary>
        /// <param name="rawImageContainer">rawImageContainer (required).</param>
        public DocumentImageResultAllOf(ImageData rawImageContainer = default(ImageData))
        {
            // to ensure "rawImageContainer" is required (not null)
            if (rawImageContainer == null)
            {
                throw new InvalidDataException("rawImageContainer is a required property for DocumentImageResultAllOf and cannot be null");
            }
            else
            {
                this.RawImageContainer = rawImageContainer;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets RawImageContainer
        /// </summary>
        [DataMember(Name="RawImageContainer", EmitDefaultValue=true)]
        public ImageData RawImageContainer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentImageResultAllOf {\n");
            sb.Append("  RawImageContainer: ").Append(RawImageContainer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentImageResultAllOf);
        }

        /// <summary>
        /// Returns true if DocumentImageResultAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentImageResultAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentImageResultAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RawImageContainer == input.RawImageContainer ||
                    (this.RawImageContainer != null &&
                    this.RawImageContainer.Equals(input.RawImageContainer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RawImageContainer != null)
                    hashCode = hashCode * 59 + this.RawImageContainer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
