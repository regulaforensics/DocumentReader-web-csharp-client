/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Regula.OpenApi.WebClient.Model
{
    /// <summary>
    /// ImagesAvailableSource
    /// </summary>
    [DataContract]
    public partial class ImagesAvailableSource :  IEquatable<ImagesAvailableSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesAvailableSource" /> class.
        /// </summary>
        [JsonConstructor]
        protected ImagesAvailableSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesAvailableSource" /> class.
        /// </summary>
        /// <param name="containerType">Same as Result type, but used for safe parsing of not-described values. See Result type..</param>
        /// <param name="source">source (required).</param>
        public ImagesAvailableSource(int containerType = default(int), string source = default(string))
        {
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new InvalidDataException("source is a required property for ImagesAvailableSource and cannot be null");
            }
            else
            {
                this.Source = source;
            }
            
            this.ContainerType = containerType;
        }
        
        /// <summary>
        /// Same as Result type, but used for safe parsing of not-described values. See Result type.
        /// </summary>
        /// <value>Same as Result type, but used for safe parsing of not-described values. See Result type.</value>
        [DataMember(Name="containerType", EmitDefaultValue=false)]
        public int ContainerType { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=true)]
        public string Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImagesAvailableSource {\n");
            sb.Append("  ContainerType: ").Append(ContainerType).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImagesAvailableSource);
        }

        /// <summary>
        /// Returns true if ImagesAvailableSource instances are equal
        /// </summary>
        /// <param name="input">Instance of ImagesAvailableSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImagesAvailableSource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContainerType == input.ContainerType ||
                    (this.ContainerType.Equals(input.ContainerType))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ContainerType.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
