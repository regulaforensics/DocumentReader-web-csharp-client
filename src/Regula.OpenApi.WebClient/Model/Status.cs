/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Regula.OpenApi.WebClient.Model
{
    /// <summary>
    /// Status
    /// </summary>
    [DataContract]
    public class Status :  IEquatable<Status>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Status" /> class.
        /// </summary>
        [JsonConstructor]
        protected Status() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Status" /> class.
        /// </summary>
        /// <param name="overallStatus">overallStatus (required).</param>
        /// <param name="optical">optical (required).</param>
        /// <param name="portrait">portrait.</param>
        /// <param name="rfid">rfid.</param>
        /// <param name="stopList">stopList.</param>
        /// <param name="detailsRfid">detailsRFID.</param>
        /// <param name="detailsOptical">detailsOptical (required).</param>
        public Status(int overallStatus = default, int optical = default, int portrait = default, int rfid = default, int stopList = default, DetailsRFID detailsRfid = default, DetailsOptical detailsOptical = default)
        {
            // to ensure "overallStatus" is required (not null)
            this.OverallStatus = overallStatus;

            // to ensure "optical" is required (not null)
            this.Optical = optical;

            // to ensure "detailsOptical" is required (not null)
            if (detailsOptical == null)
            {
                throw new InvalidDataException("detailsOptical is a required property for Status and cannot be null");
            }
            else
            {
                this.DetailsOptical = detailsOptical;
            }
            
            this.Portrait = portrait;
            this.Rfid = rfid;
            this.StopList = stopList;
            this.DetailsRfid = detailsRfid;
        }
        
        /// <summary>
        /// Gets or Sets OverallStatus
        /// </summary>
        [DataMember(Name="overallStatus", EmitDefaultValue=true)]
        public int OverallStatus { get; set; }

        /// <summary>
        /// Gets or Sets Optical
        /// </summary>
        [DataMember(Name="optical", EmitDefaultValue=true)]
        public int Optical { get; set; }

        /// <summary>
        /// Gets or Sets Portrait
        /// </summary>
        [DataMember(Name="portrait", EmitDefaultValue=false)]
        public int Portrait { get; set; }

        /// <summary>
        /// Gets or Sets Rfid
        /// </summary>
        [DataMember(Name="rfid", EmitDefaultValue=false)]
        public int Rfid { get; set; }

        /// <summary>
        /// Gets or Sets StopList
        /// </summary>
        [DataMember(Name="stopList", EmitDefaultValue=false)]
        public int StopList { get; set; }

        /// <summary>
        /// Gets or Sets DetailsRFID
        /// </summary>
        [DataMember(Name="detailsRFID", EmitDefaultValue=false)]
        public DetailsRFID DetailsRfid { get; set; }

        /// <summary>
        /// Gets or Sets DetailsOptical
        /// </summary>
        [DataMember(Name="detailsOptical", EmitDefaultValue=true)]
        public DetailsOptical DetailsOptical { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Status {\n");
            sb.Append("  OverallStatus: ").Append(OverallStatus).Append("\n");
            sb.Append("  Optical: ").Append(Optical).Append("\n");
            sb.Append("  Portrait: ").Append(Portrait).Append("\n");
            sb.Append("  Rfid: ").Append(Rfid).Append("\n");
            sb.Append("  StopList: ").Append(StopList).Append("\n");
            sb.Append("  DetailsRFID: ").Append(DetailsRfid).Append("\n");
            sb.Append("  DetailsOptical: ").Append(DetailsOptical).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Status);
        }

        /// <summary>
        /// Returns true if Status instances are equal
        /// </summary>
        /// <param name="input">Instance of Status to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Status input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OverallStatus == input.OverallStatus ||
                    (this.OverallStatus.Equals(input.OverallStatus))
                ) && 
                (
                    this.Optical == input.Optical ||
                    (this.Optical.Equals(input.Optical))
                ) && 
                (
                    this.Portrait == input.Portrait ||
                    (this.Portrait.Equals(input.Portrait))
                ) && 
                (
                    this.Rfid == input.Rfid ||
                    (this.Rfid.Equals(input.Rfid))
                ) && 
                (
                    this.StopList == input.StopList ||
                    (this.StopList.Equals(input.StopList))
                ) && 
                (
                    this.DetailsRfid == input.DetailsRfid ||
                    (this.DetailsRfid != null &&
                    this.DetailsRfid.Equals(input.DetailsRfid))
                ) && 
                (
                    this.DetailsOptical == input.DetailsOptical ||
                    (this.DetailsOptical != null &&
                    this.DetailsOptical.Equals(input.DetailsOptical))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OverallStatus.GetHashCode();
                hashCode = hashCode * 59 + this.Optical.GetHashCode();
                hashCode = hashCode * 59 + this.Portrait.GetHashCode();
                hashCode = hashCode * 59 + this.Rfid.GetHashCode();
                hashCode = hashCode * 59 + this.StopList.GetHashCode();
                if (this.DetailsRfid != null)
                    hashCode = hashCode * 59 + this.DetailsRfid.GetHashCode();
                if (this.DetailsOptical != null)
                    hashCode = hashCode * 59 + this.DetailsOptical.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
