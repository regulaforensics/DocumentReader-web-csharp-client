/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Regula.OpenApi.WebClient.Model
{
    /// <summary>
    /// DetailsRFID
    /// </summary>
    [DataContract]
    public class DetailsRFID :  IEquatable<DetailsRFID>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsRFID" /> class.
        /// </summary>
        [JsonConstructor]
        protected DetailsRFID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsRFID" /> class.
        /// </summary>
        /// <param name="overallStatus">overallStatus (required).</param>
        /// <param name="aA">aA (required).</param>
        /// <param name="bAC">bAC (required).</param>
        /// <param name="cA">cA (required).</param>
        /// <param name="pA">pA (required).</param>
        /// <param name="pACE">pACE (required).</param>
        /// <param name="tA">tA (required).</param>
        public DetailsRFID(int overallStatus = default(int), int aA = default(int), int bAC = default(int), int cA = default(int), int pA = default(int), int pACE = default(int), int tA = default(int))
        {
            // to ensure "overallStatus" is required (not null)
            this.OverallStatus = overallStatus;

            // to ensure "aA" is required (not null)
            this.AA = aA;

            // to ensure "bAC" is required (not null)
            this.BAC = bAC;

            // to ensure "cA" is required (not null)
            this.CA = cA;

            // to ensure "pA" is required (not null)
            this.PA = pA;

            // to ensure "pACE" is required (not null)
            this.PACE = pACE;

            // to ensure "tA" is required (not null)
            this.TA = tA;

        }
        
        /// <summary>
        /// Gets or Sets OverallStatus
        /// </summary>
        [DataMember(Name="overallStatus", EmitDefaultValue=true)]
        public int OverallStatus { get; set; }

        /// <summary>
        /// Gets or Sets AA
        /// </summary>
        [DataMember(Name="AA", EmitDefaultValue=true)]
        public int AA { get; set; }

        /// <summary>
        /// Gets or Sets BAC
        /// </summary>
        [DataMember(Name="BAC", EmitDefaultValue=true)]
        public int BAC { get; set; }

        /// <summary>
        /// Gets or Sets CA
        /// </summary>
        [DataMember(Name="CA", EmitDefaultValue=true)]
        public int CA { get; set; }

        /// <summary>
        /// Gets or Sets PA
        /// </summary>
        [DataMember(Name="PA", EmitDefaultValue=true)]
        public int PA { get; set; }

        /// <summary>
        /// Gets or Sets PACE
        /// </summary>
        [DataMember(Name="PACE", EmitDefaultValue=true)]
        public int PACE { get; set; }

        /// <summary>
        /// Gets or Sets TA
        /// </summary>
        [DataMember(Name="TA", EmitDefaultValue=true)]
        public int TA { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailsRFID {\n");
            sb.Append("  OverallStatus: ").Append(OverallStatus).Append("\n");
            sb.Append("  AA: ").Append(AA).Append("\n");
            sb.Append("  BAC: ").Append(BAC).Append("\n");
            sb.Append("  CA: ").Append(CA).Append("\n");
            sb.Append("  PA: ").Append(PA).Append("\n");
            sb.Append("  PACE: ").Append(PACE).Append("\n");
            sb.Append("  TA: ").Append(TA).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailsRFID);
        }

        /// <summary>
        /// Returns true if DetailsRFID instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailsRFID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailsRFID input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OverallStatus == input.OverallStatus ||
                    (this.OverallStatus.Equals(input.OverallStatus))
                ) && 
                (
                    this.AA == input.AA ||
                    (this.AA.Equals(input.AA))
                ) && 
                (
                    this.BAC == input.BAC ||
                    (this.BAC.Equals(input.BAC))
                ) && 
                (
                    this.CA == input.CA ||
                    (this.CA.Equals(input.CA))
                ) && 
                (
                    this.PA == input.PA ||
                    (this.PA.Equals(input.PA))
                ) && 
                (
                    this.PACE == input.PACE ||
                    (this.PACE.Equals(input.PACE))
                ) && 
                (
                    this.TA == input.TA ||
                    (this.TA.Equals(input.TA))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OverallStatus.GetHashCode();
                hashCode = hashCode * 59 + this.AA.GetHashCode();
                hashCode = hashCode * 59 + this.BAC.GetHashCode();
                hashCode = hashCode * 59 + this.CA.GetHashCode();
                hashCode = hashCode * 59 + this.PA.GetHashCode();
                hashCode = hashCode * 59 + this.PACE.GetHashCode();
                hashCode = hashCode * 59 + this.TA.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
