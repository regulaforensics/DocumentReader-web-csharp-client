/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Regula.OpenApi.WebClient.Model
{
    /// <summary>
    /// ImagesField
    /// </summary>
    [DataContract]
    public partial class ImagesField :  IEquatable<ImagesField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesField" /> class.
        /// </summary>
        [JsonConstructor]
        protected ImagesField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesField" /> class.
        /// </summary>
        /// <param name="fieldName">Human readable field name. Do not bind to this name - use GraphicFieldType instead. (required).</param>
        /// <param name="fieldType">fieldType (required).</param>
        /// <param name="valueList">valueList (required).</param>
        public ImagesField(string fieldName = default(string), int fieldType = default(int), List<ImagesFieldValue> valueList = default(List<ImagesFieldValue>))
        {
            // to ensure "fieldName" is required (not null)
            if (fieldName == null)
            {
                throw new InvalidDataException("fieldName is a required property for ImagesField and cannot be null");
            }
            else
            {
                this.FieldName = fieldName;
            }
            
            // to ensure "fieldType" is required (not null)
            this.FieldType = fieldType;

            // to ensure "valueList" is required (not null)
            if (valueList == null)
            {
                throw new InvalidDataException("valueList is a required property for ImagesField and cannot be null");
            }
            else
            {
                this.ValueList = valueList;
            }
            
        }
        
        /// <summary>
        /// Human readable field name. Do not bind to this name - use GraphicFieldType instead.
        /// </summary>
        /// <value>Human readable field name. Do not bind to this name - use GraphicFieldType instead.</value>
        [DataMember(Name="fieldName", EmitDefaultValue=true)]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name="fieldType", EmitDefaultValue=true)]
        public int FieldType { get; set; }

        /// <summary>
        /// Gets or Sets ValueList
        /// </summary>
        [DataMember(Name="valueList", EmitDefaultValue=true)]
        public List<ImagesFieldValue> ValueList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImagesField {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  ValueList: ").Append(ValueList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImagesField);
        }

        /// <summary>
        /// Returns true if ImagesField instances are equal
        /// </summary>
        /// <param name="input">Instance of ImagesField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImagesField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.ValueList == input.ValueList ||
                    this.ValueList != null &&
                    input.ValueList != null &&
                    this.ValueList.SequenceEqual(input.ValueList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                if (this.ValueList != null)
                    hashCode = hashCode * 59 + this.ValueList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
