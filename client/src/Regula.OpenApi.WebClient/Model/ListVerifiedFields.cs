/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Regula.OpenApi.WebClient.Model
{
    /// <summary>
    /// ListVerifiedFields
    /// </summary>
    [DataContract]
    public partial class ListVerifiedFields :  IEquatable<ListVerifiedFields>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListVerifiedFields" /> class.
        /// </summary>
        /// <param name="pFieldMaps">pFieldMaps.</param>
        public ListVerifiedFields(List<VerifiedFieldMap> pFieldMaps = default(List<VerifiedFieldMap>))
        {
            this.PFieldMaps = pFieldMaps;
        }
        
        /// <summary>
        /// Gets or Sets PFieldMaps
        /// </summary>
        [DataMember(Name="pFieldMaps", EmitDefaultValue=false)]
        public List<VerifiedFieldMap> PFieldMaps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListVerifiedFields {\n");
            sb.Append("  PFieldMaps: ").Append(PFieldMaps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListVerifiedFields);
        }

        /// <summary>
        /// Returns true if ListVerifiedFields instances are equal
        /// </summary>
        /// <param name="input">Instance of ListVerifiedFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListVerifiedFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PFieldMaps == input.PFieldMaps ||
                    this.PFieldMaps != null &&
                    input.PFieldMaps != null &&
                    this.PFieldMaps.SequenceEqual(input.PFieldMaps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PFieldMaps != null)
                    hashCode = hashCode * 59 + this.PFieldMaps.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
