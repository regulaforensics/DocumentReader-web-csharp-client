/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Regula.OpenApi.WebClient.Model
{
    /// <summary>
    /// Images
    /// </summary>
    [DataContract]
    public partial class Images :  IEquatable<Images>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Images" /> class.
        /// </summary>
        [JsonConstructor]
        protected Images() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Images" /> class.
        /// </summary>
        /// <param name="availableSourceList">availableSourceList (required).</param>
        /// <param name="fieldList">fieldList (required).</param>
        public Images(List<ImagesAvailableSource> availableSourceList = default(List<ImagesAvailableSource>), List<ImagesField> fieldList = default(List<ImagesField>))
        {
            // to ensure "availableSourceList" is required (not null)
            if (availableSourceList == null)
            {
                throw new InvalidDataException("availableSourceList is a required property for Images and cannot be null");
            }
            else
            {
                this.AvailableSourceList = availableSourceList;
            }
            
            // to ensure "fieldList" is required (not null)
            if (fieldList == null)
            {
                throw new InvalidDataException("fieldList is a required property for Images and cannot be null");
            }
            else
            {
                this.FieldList = fieldList;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets AvailableSourceList
        /// </summary>
        [DataMember(Name="availableSourceList", EmitDefaultValue=true)]
        public List<ImagesAvailableSource> AvailableSourceList { get; set; }

        /// <summary>
        /// Gets or Sets FieldList
        /// </summary>
        [DataMember(Name="fieldList", EmitDefaultValue=true)]
        public List<ImagesField> FieldList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Images {\n");
            sb.Append("  AvailableSourceList: ").Append(AvailableSourceList).Append("\n");
            sb.Append("  FieldList: ").Append(FieldList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Images);
        }

        /// <summary>
        /// Returns true if Images instances are equal
        /// </summary>
        /// <param name="input">Instance of Images to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Images input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AvailableSourceList == input.AvailableSourceList ||
                    this.AvailableSourceList != null &&
                    input.AvailableSourceList != null &&
                    this.AvailableSourceList.SequenceEqual(input.AvailableSourceList)
                ) && 
                (
                    this.FieldList == input.FieldList ||
                    this.FieldList != null &&
                    input.FieldList != null &&
                    this.FieldList.SequenceEqual(input.FieldList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AvailableSourceList != null)
                    hashCode = hashCode * 59 + this.AvailableSourceList.GetHashCode();
                if (this.FieldList != null)
                    hashCode = hashCode * 59 + this.FieldList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
