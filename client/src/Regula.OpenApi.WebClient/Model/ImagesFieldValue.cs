/* 
 * Regula Document Reader Web API
 *
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Regula.OpenApi.WebClient.Model
{
    /// <summary>
    /// ImagesFieldValue
    /// </summary>
    [DataContract]
    public partial class ImagesFieldValue :  IEquatable<ImagesFieldValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesFieldValue" /> class.
        /// </summary>
        [JsonConstructor]
        protected ImagesFieldValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesFieldValue" /> class.
        /// </summary>
        /// <param name="source">source (required).</param>
        /// <param name="value">Base64 encoded image (required).</param>
        /// <param name="originalValue">Base64 encoded image.</param>
        /// <param name="pageIndex">Page index of the image from input list (required).</param>
        /// <param name="lightIndex">lightIndex (required).</param>
        /// <param name="containerType">Same as Result type, but used for safe parsing of not-described values. See Result type. (required).</param>
        /// <param name="fieldRect">fieldRect.</param>
        /// <param name="rfidOrigin">rfidOrigin.</param>
        public ImagesFieldValue(string source = default(string), byte[] value = default(byte[]), byte[] originalValue = default(byte[]), int pageIndex = default(int), int lightIndex = default(int), int containerType = default(int), RectangleCoordinates fieldRect = default(RectangleCoordinates), RfidOrigin rfidOrigin = default(RfidOrigin))
        {
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new InvalidDataException("source is a required property for ImagesFieldValue and cannot be null");
            }
            else
            {
                this.Source = source;
            }
            
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for ImagesFieldValue and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            
            // to ensure "pageIndex" is required (not null)
            if (pageIndex == null)
            {
                throw new InvalidDataException("pageIndex is a required property for ImagesFieldValue and cannot be null");
            }
            else
            {
                this.PageIndex = pageIndex;
            }
            
            // to ensure "lightIndex" is required (not null)
            if (lightIndex == null)
            {
                throw new InvalidDataException("lightIndex is a required property for ImagesFieldValue and cannot be null");
            }
            else
            {
                this.LightIndex = lightIndex;
            }
            
            // to ensure "containerType" is required (not null)
            if (containerType == null)
            {
                throw new InvalidDataException("containerType is a required property for ImagesFieldValue and cannot be null");
            }
            else
            {
                this.ContainerType = containerType;
            }
            
            this.OriginalValue = originalValue;
            this.FieldRect = fieldRect;
            this.RfidOrigin = rfidOrigin;
        }
        
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=true)]
        public string Source { get; set; }

        /// <summary>
        /// Base64 encoded image
        /// </summary>
        /// <value>Base64 encoded image</value>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public byte[] Value { get; set; }

        /// <summary>
        /// Base64 encoded image
        /// </summary>
        /// <value>Base64 encoded image</value>
        [DataMember(Name="originalValue", EmitDefaultValue=false)]
        public byte[] OriginalValue { get; set; }

        /// <summary>
        /// Page index of the image from input list
        /// </summary>
        /// <value>Page index of the image from input list</value>
        [DataMember(Name="pageIndex", EmitDefaultValue=true)]
        public int PageIndex { get; set; }

        /// <summary>
        /// Gets or Sets LightIndex
        /// </summary>
        [DataMember(Name="lightIndex", EmitDefaultValue=true)]
        public int LightIndex { get; set; }

        /// <summary>
        /// Same as Result type, but used for safe parsing of not-described values. See Result type.
        /// </summary>
        /// <value>Same as Result type, but used for safe parsing of not-described values. See Result type.</value>
        [DataMember(Name="containerType", EmitDefaultValue=true)]
        public int ContainerType { get; set; }

        /// <summary>
        /// Gets or Sets FieldRect
        /// </summary>
        [DataMember(Name="fieldRect", EmitDefaultValue=false)]
        public RectangleCoordinates FieldRect { get; set; }

        /// <summary>
        /// Gets or Sets RfidOrigin
        /// </summary>
        [DataMember(Name="rfidOrigin", EmitDefaultValue=false)]
        public RfidOrigin RfidOrigin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImagesFieldValue {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  LightIndex: ").Append(LightIndex).Append("\n");
            sb.Append("  ContainerType: ").Append(ContainerType).Append("\n");
            sb.Append("  FieldRect: ").Append(FieldRect).Append("\n");
            sb.Append("  RfidOrigin: ").Append(RfidOrigin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImagesFieldValue);
        }

        /// <summary>
        /// Returns true if ImagesFieldValue instances are equal
        /// </summary>
        /// <param name="input">Instance of ImagesFieldValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImagesFieldValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.OriginalValue == input.OriginalValue ||
                    (this.OriginalValue != null &&
                    this.OriginalValue.Equals(input.OriginalValue))
                ) && 
                (
                    this.PageIndex == input.PageIndex ||
                    (this.PageIndex != null &&
                    this.PageIndex.Equals(input.PageIndex))
                ) && 
                (
                    this.LightIndex == input.LightIndex ||
                    (this.LightIndex != null &&
                    this.LightIndex.Equals(input.LightIndex))
                ) && 
                (
                    this.ContainerType == input.ContainerType ||
                    (this.ContainerType != null &&
                    this.ContainerType.Equals(input.ContainerType))
                ) && 
                (
                    this.FieldRect == input.FieldRect ||
                    (this.FieldRect != null &&
                    this.FieldRect.Equals(input.FieldRect))
                ) && 
                (
                    this.RfidOrigin == input.RfidOrigin ||
                    (this.RfidOrigin != null &&
                    this.RfidOrigin.Equals(input.RfidOrigin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.OriginalValue != null)
                    hashCode = hashCode * 59 + this.OriginalValue.GetHashCode();
                if (this.PageIndex != null)
                    hashCode = hashCode * 59 + this.PageIndex.GetHashCode();
                if (this.LightIndex != null)
                    hashCode = hashCode * 59 + this.LightIndex.GetHashCode();
                if (this.ContainerType != null)
                    hashCode = hashCode * 59 + this.ContainerType.GetHashCode();
                if (this.FieldRect != null)
                    hashCode = hashCode * 59 + this.FieldRect.GetHashCode();
                if (this.RfidOrigin != null)
                    hashCode = hashCode * 59 + this.RfidOrigin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
